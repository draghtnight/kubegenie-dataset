[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "alertmanager",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-alertmanager"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "kube-state-metrics",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-kube-state-metrics"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "node-exporter",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-node-exporter"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "server",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-server"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "server",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-server"
    },
    "data": {
      "alerts": "{}\n",
      "prometheus.yml": "rule_files:\n- /etc/config/rules\n- /etc/config/alerts\nscrape_configs:\n- job_name: prometheus\n  static_configs:\n  - targets:\n    - localhost:9090\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  job_name: kubernetes-apiservers\n  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - action: keep\n    regex: default;kubernetes;https\n    source_labels:\n    - __meta_kubernetes_namespace\n    - __meta_kubernetes_service_name\n    - __meta_kubernetes_endpoint_port_name\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  job_name: kubernetes-nodes\n  kubernetes_sd_configs:\n  - role: node\n  relabel_configs:\n  - action: keep\n    regex: core\n    source_labels:\n    - __meta_kubernetes_node_annotation_camptocamp_com_env\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n  - replacement: kubernetes.default.svc:443\n    target_label: __address__\n  - regex: (.+)\n    replacement: /api/v1/nodes/${1}/proxy/metrics\n    source_labels:\n    - __meta_kubernetes_node_name\n    target_label: __metrics_path__\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  job_name: kubernetes-nodes-cadvisor\n  kubernetes_sd_configs:\n  - role: node\n  relabel_configs:\n  - action: keep\n    regex: core\n    source_labels:\n    - __meta_kubernetes_node_annotation_camptocamp_com_env\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n  - replacement: kubernetes.default.svc:443\n    target_label: __address__\n  - regex: (.+)\n    replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor\n    source_labels:\n    - __meta_kubernetes_node_name\n    target_label: __metrics_path__\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n- job_name: kubernetes-service-endpoints\n  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - action: drop\n    regex: router\n    source_labels:\n    - __meta_kubernetes_endpoints_name\n  - action: drop\n    regex: false\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scrape\n  - action: keep\n    regex: core\n    source_labels:\n    - __meta_kubernetes_service_annotation_camptocamp_com_env\n  - action: replace\n    regex: (https?)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scheme\n    target_label: __scheme__\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: (.+)(?::\\d+);(\\d+)\n    replacement: $1:$2\n    source_labels:\n    - __address__\n    - __meta_kubernetes_service_annotation_prometheus_io_port\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: kubernetes_namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_service_name\n    target_label: kubernetes_name\n- honor_labels: true\n  job_name: prometheus-pushgateway\n  kubernetes_sd_configs:\n  - role: service\n  relabel_configs:\n  - action: keep\n    regex: core\n    source_labels:\n    - __meta_kubernetes_service_annotation_camptocamp_com_env\n  - action: keep\n    regex: pushgateway\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_probe\n- job_name: kubernetes-services\n  kubernetes_sd_configs:\n  - role: service\n  metrics_path: /probe\n  params:\n    module:\n    - http_2xx\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_probe\n  - source_labels:\n    - __address__\n    target_label: __param_target\n  - replacement: blackbox\n    target_label: __address__\n  - source_labels:\n    - __param_target\n    target_label: instance\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n  - source_labels:\n    - __meta_kubernetes_namespace\n    target_label: kubernetes_namespace\n  - source_labels:\n    - __meta_kubernetes_service_name\n    target_label: kubernetes_name\n- job_name: kubernetes-pods\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: keep\n    regex: core\n    source_labels:\n    - __meta_kubernetes_pod_annotation_camptocamp_com_env\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scrape\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: (.+):(?:\\d+);(\\d+)\n    replacement: ${1}:${2}\n    source_labels:\n    - __address__\n    - __meta_kubernetes_pod_annotation_prometheus_io_port\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: kubernetes_namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: kubernetes_pod_name\n- basic_auth:\n    password: null\n    username: admin\n  job_name: openshift-routers\n  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - action: keep\n    regex: core\n    source_labels:\n    - __meta_kubernetes_service_annotation_camptocamp_com_env\n  - action: keep\n    regex: router;true\n    source_labels:\n    - __meta_kubernetes_endpoints_name\n    - __meta_kubernetes_service_annotation_prometheus_io_scrape\n  - action: replace\n    regex: (.+):(?:\\d+);(\\d+)\n    replacement: $1:$2\n    source_labels:\n    - __address__\n    - __meta_kubernetes_service_annotation_prometheus_io_port\n    target_label: __address__\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: kubernetes_namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_service_name\n    target_label: kubernetes_name\n",
      "rules": "{}\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-metrics",
      "labels": {
        "app": "metrics",
        "chart": "metrics-0.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "haproxy.cfg": "global\n    daemon\n    maxconn 256\n\ndefaults\n    mode http\n    timeout connect 5000ms\n    timeout client 50000ms\n    timeout server 50000ms\n\nuserlist prometheus\n    group prometheus\n    user prometheus insecure-password n9ubfhQhyH groups prometheus\n\nfrontend 9090\n    bind *:9090\n    default_backend prometheus\n\nbackend prometheus\n    acl valid_user http_auth(prometheus)\n    http-request auth realm Prometheus if !valid_user\n    server prometheus release-name-prometheus-server:80"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "server",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-server"
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "storageClassName": "ssd",
      "resources": {
        "requests": {
          "storage": "8Gi"
        }
      }
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "kube-state-metrics",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-kube-state-metrics"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "namespaces",
          "nodes",
          "persistentvolumeclaims",
          "pods",
          "services",
          "resourcequotas",
          "replicationcontrollers",
          "limitranges",
          "persistentvolumeclaims",
          "persistentvolumes",
          "endpoints"
        ],
        "verbs": [
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "extensions"
        ],
        "resources": [
          "daemonsets",
          "deployments",
          "replicasets"
        ],
        "verbs": [
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "apps"
        ],
        "resources": [
          "statefulsets"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "batch"
        ],
        "resources": [
          "cronjobs",
          "jobs"
        ],
        "verbs": [
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "autoscaling"
        ],
        "resources": [
          "horizontalpodautoscalers"
        ],
        "verbs": [
          "list",
          "watch"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "server",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-server"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "nodes",
          "nodes/proxy",
          "services",
          "endpoints",
          "pods",
          "ingresses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          "extensions"
        ],
        "resources": [
          "ingresses/status",
          "ingresses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "nonResourceURLs": [
          "/metrics"
        ],
        "verbs": [
          "get"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "alertmanager",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-alertmanager"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-prometheus-alertmanager",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "cluster-admin"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "kube-state-metrics",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-kube-state-metrics"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-prometheus-kube-state-metrics",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-prometheus-kube-state-metrics"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "node-exporter",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-node-exporter"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-prometheus-node-exporter",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "cluster-admin"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "server",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-server"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-prometheus-server",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-prometheus-server"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "camptocamp.com/env": "core",
        "prometheus.io/scrape": "true"
      },
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "kube-state-metrics",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-kube-state-metrics"
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 80,
          "protocol": "TCP",
          "targetPort": 8080
        }
      ],
      "selector": {
        "app": "prometheus",
        "component": "kube-state-metrics",
        "release": "release-name"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "camptocamp.com/env": "core",
        "prometheus.io/scrape": "true"
      },
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "node-exporter",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-node-exporter"
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "metrics",
          "port": 9100,
          "protocol": "TCP",
          "targetPort": 9100
        }
      ],
      "selector": {
        "app": "prometheus",
        "component": "node-exporter",
        "release": "release-name"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "camptocamp.com/env": "core",
        "prometheus.io/probe": "pushgateway"
      },
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "pushgateway",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-pushgateway"
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 9091,
          "protocol": "TCP",
          "targetPort": 9091
        }
      ],
      "selector": {
        "app": "prometheus",
        "component": "pushgateway",
        "release": "release-name"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "server",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-server"
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80,
          "protocol": "TCP",
          "targetPort": 9090
        }
      ],
      "selector": {
        "app": "prometheus",
        "component": "server",
        "release": "release-name"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-metrics",
      "labels": {
        "app": "metrics",
        "chart": "metrics-0.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 9090,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app": "metrics",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "DaemonSet",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "node-exporter",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-node-exporter"
    },
    "spec": {
      "updateStrategy": {
        "type": "OnDelete"
      },
      "template": {
        "metadata": {
          "annotations": {
            "camptocamp.com/env": "core",
            "prometheus.io/port": "9100",
            "prometheus.io/scrape": "true"
          },
          "labels": {
            "app": "prometheus",
            "component": "node-exporter",
            "release": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-prometheus-node-exporter",
          "containers": [
            {
              "name": "prometheus-node-exporter",
              "image": "prom/node-exporter:v0.15.2",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "--path.procfs=/host/proc",
                "--path.sysfs=/host/sys"
              ],
              "ports": [
                {
                  "name": "metrics",
                  "containerPort": 9100,
                  "hostPort": 9100
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "proc",
                  "mountPath": "/host/proc",
                  "readOnly": true
                },
                {
                  "name": "sys",
                  "mountPath": "/host/sys",
                  "readOnly": true
                }
              ]
            }
          ],
          "hostNetwork": true,
          "hostPID": true,
          "nodeSelector": {
            "camptocamp.com/env": "core"
          },
          "volumes": [
            {
              "name": "proc",
              "hostPath": {
                "path": "/proc"
              }
            },
            {
              "name": "sys",
              "hostPath": {
                "path": "/sys"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "kube-state-metrics",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-kube-state-metrics"
    },
    "spec": {
      "replicas": 1,
      "template": {
        "metadata": {
          "annotations": {
            "camptocamp.com/env": "core"
          },
          "labels": {
            "app": "prometheus",
            "component": "kube-state-metrics",
            "release": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-prometheus-kube-state-metrics",
          "containers": [
            {
              "name": "prometheus-kube-state-metrics",
              "image": "k8s.gcr.io/kube-state-metrics:v1.2.0",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "metrics",
                  "containerPort": 8080
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "pushgateway",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-pushgateway"
    },
    "spec": {
      "replicas": 1,
      "template": {
        "metadata": {
          "annotations": {
            "camptocamp.com/env": "core"
          },
          "labels": {
            "app": "prometheus",
            "component": "pushgateway",
            "release": "release-name"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "prometheus-pushgateway",
              "image": "prom/pushgateway:v0.4.0",
              "imagePullPolicy": "IfNotPresent",
              "args": null,
              "ports": [
                {
                  "containerPort": 9091
                }
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/#/status",
                  "port": 9091
                },
                "initialDelaySeconds": 10,
                "timeoutSeconds": 10
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "prometheus",
        "chart": "prometheus-5.4.0",
        "component": "server",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-prometheus-server"
    },
    "spec": {
      "replicas": 1,
      "template": {
        "metadata": {
          "annotations": {
            "camptocamp.com/env": "core"
          },
          "labels": {
            "app": "prometheus",
            "component": "server",
            "release": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-prometheus-server",
          "containers": [
            {
              "name": "prometheus-server-configmap-reload",
              "image": "jimmidyson/configmap-reload:v0.1",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "--volume-dir=/etc/config",
                "--webhook-url=http://localhost:9090/-/reload"
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/etc/config",
                  "readOnly": true
                }
              ]
            },
            {
              "name": "prometheus-server",
              "image": "prom/prometheus:v2.1.0",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "--storage.tsdb.retention=15d",
                "--config.file=/etc/config/prometheus.yml",
                "--storage.tsdb.path=/data",
                "--web.console.libraries=/etc/prometheus/console_libraries",
                "--web.console.templates=/etc/prometheus/consoles",
                "--web.enable-lifecycle"
              ],
              "ports": [
                {
                  "containerPort": 9090
                }
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/-/ready",
                  "port": 9090
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/-/healthy",
                  "port": 9090
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30
              },
              "resources": {},
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/etc/config"
                },
                {
                  "name": "storage-volume",
                  "mountPath": "/data",
                  "subPath": ""
                }
              ]
            }
          ],
          "terminationGracePeriodSeconds": 300,
          "volumes": [
            {
              "name": "config-volume",
              "configMap": {
                "name": "release-name-prometheus-server"
              }
            },
            {
              "name": "storage-volume",
              "persistentVolumeClaim": {
                "claimName": "release-name-prometheus-server"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-metrics",
      "labels": {
        "app": "metrics",
        "chart": "metrics-0.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": null,
      "selector": {
        "matchLabels": {
          "app": "metrics",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "metrics",
            "release": "release-name"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "metrics",
              "image": "haproxy:1.7",
              "imagePullPolicy": "Always",
              "command": [
                "haproxy",
                "-f",
                "/usr/local/etc/haproxy/haproxy.cfg",
                "-Ds",
                "-p",
                "/tmp/haproxy.pid"
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9090,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/usr/local/etc/haproxy"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "config-volume",
              "configMap": {
                "name": "release-name-metrics"
              }
            }
          ]
        }
      }
    }
  }
]