apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: release-name-memcached
  namespace: default
  labels:
    app.kubernetes.io/name: memcached
    helm.sh/chart: memcached-5.15.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: memcached
      app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: release-name-memcached
  namespace: sEG7WfRAq1bgAz
  labels:
    app.kubernetes.io/name: memcached
    helm.sh/chart: memcached-5.15.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mcrouter
  labels:
    app: mcrouter
    chart: mcrouter-0.3.0
    release: release-name
    heritage: Helm
data:
  config.json: |-
    {
      "pools": {
        "A": {
          "servers": [
            // hosts of replicated pool, https://github.com/facebook/mcrouter/wiki/Replicated-pools-setup e.g.:
            "release-name-0.release-name.default.svc.cluster.local:11211",
            "release-name-1.release-name.default.svc.cluster.local:11211",
          ]
        }
      },
      "route": {
        "type": "OperationSelectorRoute",
        "default_policy": "PoolRoute|A",
        "operation_policies": {
          "add": "AllFastestRoute|Pool|A",
          "delete": "AllFastestRoute|Pool|A",
          "get": "LatestRoute|Pool|A",
          "set": "AllFastestRoute|Pool|A"
        }
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-memcached
  namespace: sEG7WfRAq1bgAz
  labels:
    app.kubernetes.io/name: memcached
    helm.sh/chart: memcached-5.15.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/name: memcached
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-mcrouter
  labels:
    app: release-name-mcrouter
    chart: mcrouter-0.3.0
    release: release-name
    heritage: Helm
  annotations: {}
spec:
  clusterIP: None
  ports:
    - name: mcrouter-port
      port: 5000
      targetPort: mcrouter-port
  selector:
    app: release-name-mcrouter
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: release-name-mcrouter
  labels:
    app: release-name-mcrouter
    chart: mcrouter-0.3.0
    release: release-name
  annotations:
    checksum/config: 92468f5a138929a652709060e604ea903d109f5bb12633d4d77bcfda53b0b2e0
spec:
  selector:
    matchLabels:
      app: release-name-mcrouter
      release: release-name
  template:
    metadata:
      labels:
        app: release-name-mcrouter
        release: release-name
    spec:
      nodeSelector: {}
      tolerations: []
      securityContext:
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      containers:
        - name: release-name-mcrouter
          image: quay.io/evryfs/docker-mcrouter:0.40.0-8
          imagePullPolicy: ""
          command:
            - mcrouter
          args:
            - -p 5000
            - --config-file=/etc/mcrouter/config.json
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: /etc/mcrouter
            - name: var-mcrouter
              mountPath: /var/mcrouter
            - name: var-spool-mcrouter
              mountPath: /var/spool/mcrouter
          ports:
            - name: mcrouter-port
              containerPort: 5000
              hostPort: 5000
          livenessProbe:
            tcpSocket:
              port: mcrouter-port
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            tcpSocket:
              port: mcrouter-port
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 256m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes:
        - name: config
          configMap:
            name: release-name-mcrouter
        - name: var-mcrouter
          emptyDir: {}
        - name: var-spool-mcrouter
          emptyDir: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-memcached
  namespace: sEG7WfRAq1bgAz
  labels:
    app.kubernetes.io/name: memcached
    helm.sh/chart: memcached-5.15.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: memcached
      app.kubernetes.io/instance: release-name
  replicas: 2
  serviceName: release-name-memcached
  template:
    metadata:
      labels:
        app.kubernetes.io/name: memcached
        helm.sh/chart: memcached-5.15.8
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: memcached
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      serviceAccountName: release-name-memcached
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.12-debian-10-r23
          imagePullPolicy: IfNotPresent
          args:
            - /run.sh
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            tcpSocket:
              port: memcache
            initialDelaySeconds: 30
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: memcache
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
