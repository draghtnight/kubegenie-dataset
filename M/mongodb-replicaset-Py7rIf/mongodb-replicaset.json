[
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "mongodb-replicaset",
        "chart": "mongodb-replicaset-3.9.4",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-mongodb-replicaset-init"
    },
    "data": {
      "on-start.sh": "#!/usr/bin/env bash\n\n# Copyright 2018 The Kubernetes Authors. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -e pipefail\n\nport=27017\nreplica_set=\"$REPLICA_SET\"\nscript_name=${0##*/}\nSECONDS=0\ntimeout=\"${TIMEOUT:-900}\"\n\nif [[ \"$AUTH\" == \"true\" ]]; then\n    admin_user=\"$ADMIN_USER\"\n    admin_password=\"$ADMIN_PASSWORD\"\n    admin_creds=(-u \"$admin_user\" -p \"$admin_password\")\n    if [[ \"$METRICS\" == \"true\" ]]; then\n        metrics_user=\"$METRICS_USER\"\n        metrics_password=\"$METRICS_PASSWORD\"\n    fi\n    auth_args=(\"--auth\" \"--keyFile=/data/configdb/key.txt\")\nfi\n\nlog() {\n    local msg=\"$1\"\n    local timestamp\n    timestamp=$(date --iso-8601=ns)\n    echo \"[$timestamp] [$script_name] $msg\" 2>&1 | tee -a /work-dir/log.txt 1>&2\n}\n\nretry_until() {\n    local host=\"${1}\"\n    local command=\"${2}\"\n    local expected=\"${3}\"\n    local creds=(\"${admin_creds[@]}\")\n\n    # Don't need credentials for admin user creation and pings that run on localhost\n    if [[ \"${host}\" =~ ^localhost ]]; then\n        creds=()\n    fi\n\n    until [[ $(mongo admin --host \"${host}\" \"${creds[@]}\" \"${ssl_args[@]}\" --quiet --eval \"${command}\") == \"${expected}\" ]]; do\n        sleep 1\n\n        if (! ps \"${pid}\" &>/dev/null); then\n            log \"mongod shutdown unexpectedly\"\n            exit 1\n        fi\n        if [[ \"${SECONDS}\" -ge \"${timeout}\" ]]; then\n            log \"Timed out after ${timeout}s attempting to bootstrap mongod\"\n            exit 1\n        fi\n\n        log \"Retrying ${command} on ${host}\"\n    done\n}\n\nshutdown_mongo() {\n    local host=\"${1:-localhost}\"\n    local args='force: true'\n    log \"Shutting down MongoDB ($args)...\"\n    if (! mongo admin --host \"${host}\" \"${admin_creds[@]}\" \"${ssl_args[@]}\" --eval \"db.shutdownServer({$args})\"); then\n      log \"db.shutdownServer() failed, sending the terminate signal\"\n      kill -TERM \"${pid}\"\n    fi\n}\n\ninit_mongod_standalone() {\n    if [[ ! -f /init/initMongodStandalone.js ]]; then\n        log \"Skipping init mongod standalone script\"\n        return 0\n    elif [[ -z \"$(ls -1A /data/db)\" ]]; then\n        log \"mongod standalone script currently not supported on initial install\"\n        return 0\n    fi\n\n    local port=\"27018\"\n    log \"Starting a MongoDB instance as standalone...\"\n    mongod --config /data/configdb/mongod.conf --dbpath=/data/db \"${auth_args[@]}\" --port \"${port}\" --bind_ip=0.0.0.0 2>&1 | tee -a /work-dir/log.txt 1>&2 &\n    export pid=$!\n    trap shutdown_mongo EXIT\n    log \"Waiting for MongoDB to be ready...\"\n    retry_until \"localhost:${port}\" \"db.adminCommand('ping').ok\" \"1\"\n    log \"Running init js script on standalone mongod\"\n    mongo admin --port \"${port}\" \"${admin_creds[@]}\" \"${ssl_args[@]}\" /init/initMongodStandalone.js\n    shutdown_mongo \"localhost:${port}\"\n}\n\nmy_hostname=$(hostname)\nlog \"Bootstrapping MongoDB replica set member: $my_hostname\"\n\nlog \"Reading standard input...\"\nwhile read -ra line; do\n    if [[ \"${line}\" == *\"${my_hostname}\"* ]]; then\n        service_name=\"$line\"\n    fi\n    peers=(\"${peers[@]}\" \"$line\")\ndone\n\n# Generate the ca cert\nca_crt=/data/configdb/tls.crt\nif [ -f \"$ca_crt\"  ]; then\n    log \"Generating certificate\"\n    ca_key=/data/configdb/tls.key\n    pem=/work-dir/mongo.pem\n    ssl_args=(--ssl --sslCAFile \"$ca_crt\" --sslPEMKeyFile \"$pem\")\n\n# Move into /work-dir\npushd /work-dir\n\ncat >openssl.cnf <<EOL\n[req]\nreq_extensions = v3_req\ndistinguished_name = req_distinguished_name\n[req_distinguished_name]\n[ v3_req ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = $(echo -n \"$my_hostname\" | sed s/-[0-9]*$//)\nDNS.2 = $my_hostname\nDNS.3 = $service_name\nDNS.4 = localhost\nDNS.5 = 127.0.0.1\nEOL\n\n    # Generate the certs\n    openssl genrsa -out mongo.key 2048\n    openssl req -new -key mongo.key -out mongo.csr -subj \"/OU=MongoDB/CN=$my_hostname\" -config openssl.cnf\n    openssl x509 -req -in mongo.csr \\\n        -CA \"$ca_crt\" -CAkey \"$ca_key\" -CAcreateserial \\\n        -out mongo.crt -days 3650 -extensions v3_req -extfile openssl.cnf\n\n    rm mongo.csr\n    cat mongo.crt mongo.key > $pem\n    rm mongo.key mongo.crt\nfi\n\ninit_mongod_standalone\n\nlog \"Peers: ${peers[*]}\"\nlog \"Starting a MongoDB replica\"\nmongod --config /data/configdb/mongod.conf --dbpath=/data/db --replSet=\"$replica_set\" --port=\"${port}\" \"${auth_args[@]}\" --bind_ip=0.0.0.0 2>&1 | tee -a /work-dir/log.txt 1>&2 &\npid=$!\ntrap shutdown_mongo EXIT\n\nlog \"Waiting for MongoDB to be ready...\"\nretry_until \"localhost\" \"db.adminCommand('ping').ok\" \"1\"\nlog \"Initialized.\"\n\n# try to find a master\nfor peer in \"${peers[@]}\"; do\n    log \"Checking if ${peer} is primary\"\n    # Check rs.status() first since it could be in primary catch up mode which db.isMaster() doesn't show\n    if [[ $(mongo admin --host \"${peer}\" \"${admin_creds[@]}\" \"${ssl_args[@]}\" --quiet --eval \"rs.status().myState\") == \"1\" ]]; then\n        retry_until \"${peer}\" \"db.isMaster().ismaster\" \"true\"\n        log \"Found primary: ${peer}\"\n        primary=\"${peer}\"\n        break\n    fi\ndone\n\nif [[ \"${primary}\" = \"${service_name}\" ]]; then\n    log \"This replica is already PRIMARY\"\nelif [[ -n \"${primary}\" ]]; then\n    if [[ $(mongo admin --host \"${primary}\" \"${admin_creds[@]}\" \"${ssl_args[@]}\" --quiet --eval \"rs.conf().members.findIndex(m => m.host == '${service_name}:${port}')\") == \"-1\" ]]; then\n      log \"Adding myself (${service_name}) to replica set...\"\n      if (mongo admin --host \"${primary}\" \"${admin_creds[@]}\" \"${ssl_args[@]}\" --eval \"rs.add('${service_name}')\" | grep 'Quorum check failed'); then\n          log 'Quorum check failed, unable to join replicaset. Exiting prematurely.'\n          exit 1\n      fi\n    fi\n\n    sleep 3\n    log 'Waiting for replica to reach SECONDARY state...'\n    retry_until \"${service_name}\" \"rs.status().myState\" \"2\"\n    log '✓ Replica reached SECONDARY state.'\n\nelif (mongo \"${ssl_args[@]}\" --eval \"rs.status()\" | grep \"no replset config has been received\"); then\n    log \"Initiating a new replica set with myself ($service_name)...\"\n    mongo \"${ssl_args[@]}\" --eval \"rs.initiate({'_id': '$replica_set', 'members': [{'_id': 0, 'host': '$service_name'}]})\"\n\n    sleep 3\n    log 'Waiting for replica to reach PRIMARY state...'\n    retry_until \"localhost\" \"db.isMaster().ismaster\" \"true\"\n    primary=\"${service_name}\"\n    log '✓ Replica reached PRIMARY state.'\n\n    if [[ \"${AUTH}\" == \"true\" ]]; then\n        log \"Creating admin user...\"\n        mongo admin \"${ssl_args[@]}\" --eval \"db.createUser({user: '${admin_user}', pwd: '${admin_password}', roles: [{role: 'root', db: 'admin'}]})\"\n    fi\nfi\n\n# User creation\nif [[ -n \"${primary}\" && \"$AUTH\" == \"true\" && \"$METRICS\" == \"true\" ]]; then\n    metric_user_count=$(mongo admin --host \"${primary}\" \"${admin_creds[@]}\" \"${ssl_args[@]}\" --eval \"db.system.users.find({user: '${metrics_user}'}).count()\" --quiet)\n    if [[ \"${metric_user_count}\" == \"0\" ]]; then\n        log \"Creating clusterMonitor user...\"\n        mongo admin --host \"${primary}\" \"${admin_creds[@]}\" \"${ssl_args[@]}\" --eval \"db.createUser({user: '${metrics_user}', pwd: '${metrics_password}', roles: [{role: 'clusterMonitor', db: 'admin'}, {role: 'read', db: 'local'}]})\"\n    fi\nfi\n\nlog \"MongoDB bootstrap complete\"\nexit 0\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "mongodb-replicaset",
        "chart": "mongodb-replicaset-3.9.4",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-mongodb-replicaset-mongodb"
    },
    "data": {
      "mongod.conf": "{}\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "mongodb-replicaset",
        "chart": "mongodb-replicaset-3.9.4",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-mongodb-replicaset-tests"
    },
    "data": {
      "mongodb-up-test.sh": "#!/usr/bin/env bash\n\nMONGOCACRT=/ca/tls.crt\nMONGOPEM=/work-dir/mongo.pem\n\nMONGOARGS=\"--quiet\"\n\nif [ -f \"$MONGOPEM\" ]; then\n    MONGOARGS=\"$MONGOARGS --ssl --sslCAFile $MONGOCACRT --sslPEMKeyFile $MONGOPEM\"\nfi\n\nif [[ \"${AUTH}\" == \"true\" ]]; then\n    MONGOARGS=\"$MONGOARGS --username $ADMIN_USER --password $ADMIN_PASSWORD --authenticationDatabase admin\"\nfi\n\npod_name() {\n    local full_name=\"${FULL_NAME?Environment variable FULL_NAME not set}\"\n    local index=\"$1\"\n    echo \"$full_name-$index.$full_name\"\n}\n\nreplicas() {\n    echo \"${REPLICAS?Environment variable REPLICAS not set}\"\n}\n\nmaster_pod() {\n    for ((i = 0; i < $(replicas); ++i)); do\n        response=$(mongo $MONGOARGS \"--host=$(pod_name \"$i\")\" \"--eval=rs.isMaster().ismaster\")\n        if [[ \"$response\" == \"true\" ]]; then\n            pod_name \"$i\"\n            break\n        fi\n    done\n}\n\nsetup() {\n    local ready=0\n    until [[ \"$ready\" -eq $(replicas) ]]; do\n        echo \"Waiting for application to become ready\" >&2\n        sleep 1\n\n        for ((i = 0; i < $(replicas); ++i)); do\n            response=$(mongo $MONGOARGS \"--host=$(pod_name \"$i\")\" \"--eval=rs.status().ok\" || true)\n            if [[ \"$response\" -eq 1 ]]; then\n                ready=$((ready + 1))\n            fi\n        done\n    done\n}\n\n@test \"Testing mongodb client is executable\" {\n    mongo -h\n    [ \"$?\" -eq 0 ]\n}\n\n@test \"Connect mongodb client to mongodb pods\" {\n    for ((i = 0; i < $(replicas); ++i)); do\n        response=$(mongo $MONGOARGS \"--host=$(pod_name \"$i\")\" \"--eval=rs.status().ok\")\n        if [[ ! \"$response\" -eq 1 ]]; then\n            exit 1\n        fi\n    done\n}\n\n@test \"Write key to primary\" {\n    response=$(mongo $MONGOARGS --host=$(master_pod) \"--eval=db.test.insert({\\\"abc\\\": \\\"def\\\"}).nInserted\")\n    if [[ ! \"$response\" -eq 1 ]]; then\n        exit 1\n    fi\n}\n\n@test \"Read key from slaves\" {\n    # wait for slaves to catch up\n    sleep 10\n\n    for ((i = 0; i < $(replicas); ++i)); do\n        response=$(mongo $MONGOARGS --host=$(pod_name \"$i\") \"--eval=rs.slaveOk(); db.test.find({\\\"abc\\\":\\\"def\\\"})\")\n        if [[ ! \"$response\" =~ .*def.* ]]; then\n            exit 1\n        fi\n    done\n\n    # Clean up a document after test\n    mongo $MONGOARGS --host=$(master_pod) \"--eval=db.test.deleteMany({\\\"abc\\\": \\\"def\\\"})\"\n}\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": null,
      "labels": {
        "app": "mongodb-replicaset",
        "chart": "mongodb-replicaset-3.9.4",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-mongodb-replicaset-client"
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "mongodb",
          "port": 27017
        }
      ],
      "selector": {
        "app": "mongodb-replicaset",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      },
      "labels": {
        "app": "mongodb-replicaset",
        "chart": "mongodb-replicaset-3.9.4",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-mongodb-replicaset"
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "mongodb",
          "port": 27017
        }
      ],
      "publishNotReadyAddresses": true,
      "selector": {
        "app": "mongodb-replicaset",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app": "mongodb-replicaset",
        "chart": "mongodb-replicaset-3.9.4",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-mongodb-replicaset"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "mongodb-replicaset",
          "release": "release-name"
        }
      },
      "serviceName": "release-name-mongodb-replicaset",
      "replicas": 3,
      "template": {
        "metadata": {
          "labels": {
            "app": "mongodb-replicaset",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "e696ad4d0050c0f42fc991c51003c20fde65663d800a5d7824eb1282e7bb4377"
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 999,
            "fsGroup": 999,
            "runAsNonRoot": true
          },
          "terminationGracePeriodSeconds": 30,
          "initContainers": [
            {
              "name": "copy-config",
              "image": "busybox:1.29.3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sh"
              ],
              "args": [
                "-c",
                "set -e\nset -x\n\ncp /configdb-readonly/mongod.conf /data/configdb/mongod.conf\n"
              ],
              "volumeMounts": [
                {
                  "name": "workdir",
                  "mountPath": "/work-dir"
                },
                {
                  "name": "config",
                  "mountPath": "/configdb-readonly"
                },
                {
                  "name": "configdir",
                  "mountPath": "/data/configdb"
                }
              ],
              "resources": {}
            },
            {
              "name": "install",
              "image": "unguiculus/mongodb-install:0.7",
              "args": [
                "--work-dir=/work-dir"
              ],
              "imagePullPolicy": "IfNotPresent",
              "volumeMounts": [
                {
                  "name": "workdir",
                  "mountPath": "/work-dir"
                }
              ],
              "resources": {}
            },
            {
              "name": "bootstrap",
              "image": "mongo:3.6",
              "command": [
                "/work-dir/peer-finder"
              ],
              "args": [
                "-on-start=/init/on-start.sh",
                "-service=release-name-mongodb-replicaset"
              ],
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "REPLICA_SET",
                  "value": "rs0"
                },
                {
                  "name": "TIMEOUT",
                  "value": "900"
                }
              ],
              "volumeMounts": [
                {
                  "name": "workdir",
                  "mountPath": "/work-dir"
                },
                {
                  "name": "init",
                  "mountPath": "/init"
                },
                {
                  "name": "configdir",
                  "mountPath": "/data/configdb"
                },
                {
                  "name": "datadir",
                  "mountPath": "/data/db"
                }
              ],
              "resources": {}
            }
          ],
          "containers": [
            {
              "name": "mongodb-replicaset",
              "image": "mongo:3.6",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "mongodb",
                  "containerPort": 27017
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                },
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "mongod"
              ],
              "args": [
                "--config=/data/configdb/mongod.conf",
                "--dbpath=/data/db",
                "--replSet=rs0",
                "--port=27017",
                "--bind_ip=0.0.0.0"
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "mongo",
                    "--eval",
                    "db.adminCommand('ping')"
                  ]
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 5,
                "failureThreshold": 3,
                "periodSeconds": 10,
                "successThreshold": 1
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "mongo",
                    "--eval",
                    "db.adminCommand('ping')"
                  ]
                },
                "initialDelaySeconds": 5,
                "timeoutSeconds": 1,
                "failureThreshold": 3,
                "periodSeconds": 10,
                "successThreshold": 1
              },
              "volumeMounts": [
                {
                  "name": "datadir",
                  "mountPath": "/data/db"
                },
                {
                  "name": "configdir",
                  "mountPath": "/data/configdb"
                },
                {
                  "name": "workdir",
                  "mountPath": "/work-dir"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-mongodb-replicaset-mongodb"
              }
            },
            {
              "name": "init",
              "configMap": {
                "defaultMode": 493,
                "name": "release-name-mongodb-replicaset-init"
              }
            },
            {
              "name": "workdir",
              "emptyDir": {}
            },
            {
              "name": "configdir",
              "emptyDir": {}
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "datadir",
            "annotations": null
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "10Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "labels": {
        "app": "mongodb-replicaset",
        "chart": "mongodb-replicaset-3.9.4",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-mongodb-replicaset-test",
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "initContainers": [
        {
          "name": "test-framework",
          "image": "dduportal/bats:0.4.0",
          "command": [
            "bash",
            "-c",
            "set -ex\n# copy bats to tools dir\ncp -R /usr/local/libexec/ /tools/bats/\n"
          ],
          "volumeMounts": [
            {
              "name": "tools",
              "mountPath": "/tools"
            }
          ]
        }
      ],
      "containers": [
        {
          "name": "mongo",
          "image": "mongo:3.6",
          "command": [
            "/tools/bats/bats",
            "-t",
            "/tests/mongodb-up-test.sh"
          ],
          "env": [
            {
              "name": "FULL_NAME",
              "value": "release-name-mongodb-replicaset"
            },
            {
              "name": "REPLICAS",
              "value": "3"
            }
          ],
          "volumeMounts": [
            {
              "name": "tools",
              "mountPath": "/tools"
            },
            {
              "name": "tests",
              "mountPath": "/tests"
            }
          ]
        }
      ],
      "volumes": [
        {
          "name": "tools",
          "emptyDir": {}
        },
        {
          "name": "tests",
          "configMap": {
            "name": "release-name-mongodb-replicaset-tests"
          }
        }
      ],
      "restartPolicy": "Never"
    }
  }
]