[
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-configmap"
    },
    "data": {
      "topo.py": "#!/usr/bin/python\n\n# Copyright 2017-present Open Networking Foundation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport re\nimport sys\nimport socket\n\nfrom mininet.cli import CLI\nfrom mininet.log import setLogLevel, info, error\nfrom mininet.net import Mininet\nfrom mininet.link import Intf\nfrom mininet.topo import Topo, SingleSwitchTopo\nfrom mininet.node import OVSSwitch, Controller, RemoteController\nfrom mininet.nodelib import LinuxBridge\nfrom functools import partial\nfrom mininet.util import quietRun\n\nif __name__ == '__main__':\n    setLogLevel( 'info' )\n\n    print quietRun( 'ovs-vsctl set Open_vSwitch . other_config:vlan-limit=2' )\n    OVSSwitch13 = partial( OVSSwitch, protocols='OpenFlow13' )\n    controllerIp = socket.gethostbyname( 'onos-openflow.default.svc.cluster.local' )\n\n    net = Mininet( topo=None )\n\n    info( '*** Adding controllers\\n' )\n    onos = net.addController( name='onos', controller=RemoteController, ip=controllerIp, port=6653 )\n\n    info( '*** Adding switches\\n' )\n    s1 = net.addSwitch( name='s1', cls=OVSSwitch13 )\n    s2 = net.addSwitch( 's2', cls=LinuxBridge )\n\n    info( '*** Creating hosts\\n' )\n    h1 = net.addHost( 'h1', ip='10.0.0.1/24')\n    h2 = net.addHost( 'h2', ip='10.1.0.2/24')\n\n    # Topology: pon1 - eth1 - s1 - h1 - s2 - h2\n    net.addLink( h1, s1 )\n    net.addLink( h1, s2 )\n    net.addLink( h2, s2 )\n\n    info( '*** Adding hardware interface eth1 to switch s1\\n')\n    _intf = Intf( 'eth1', node=s1 )\n\n    info( '*** Turning off checksum offloading for eth1\\n' )\n    print quietRun( 'ethtool -K eth1 tx off rx off' )\n\n    info( '*** Adding VLAN interface to host h1\\n')\n    h1.cmd( 'ifconfig h1-eth1 10.1.0.1/24 up')\n    h1.cmd( 'ip link add link h1-eth0 name h1-eth0.222 type vlan proto 802.1Q id 222' )\n    h1.cmd( 'ip link add link h1-eth0.222 name h1-eth0.222.111 type vlan proto 802.1Q id 111' )\n    h1.cmd( 'ifconfig h1-eth0.222 up' )\n    h1.cmd( 'ifconfig h1-eth0.222.111 up' )\n    h1.cmd( 'ifconfig h1-eth0.222.111 172.18.0.10/24' )\n    h1.cmd( 'dnsmasq  --dhcp-range=172.18.0.50,172.18.0.150,12h' )\n    info( '*** Start multicast routing on h1 and source on h2\\n')\n    h1.cmd( 'service pimd start' )\n    h2.cmd( 'mcjoin -s -i h2-eth0 -t 2 >& /tmp/mcjoin.log &')\n\n    onos.start()\n    s1.start( [onos] )\n\n    net.start()\n    CLI( net )\n    net.stop()\n",
      "topo_sdbng.py": "#!/usr/bin/python\n\n# Copyright 2019-present Open Networking Foundation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom mininet.cli import CLI\nfrom mininet.log import setLogLevel, info, error\nfrom mininet.net import Mininet\nfrom mininet.link import Intf\nfrom mininet.nodelib import LinuxBridge\nfrom stratum import StratumBmv2Switch\nfrom mininet.util import quietRun\n\nCPU_PORT = 255\n\nif __name__ == '__main__':\n    setLogLevel( 'info' )\n\n    net = Mininet( topo=None )\n\n    info( '*** Adding switches\\n' )\n    agg1 = net.addSwitch( name='agg1', cls=StratumBmv2Switch, cpuport=CPU_PORT)\n    # FIXME: enable multicast\n    # s2 = net.addSwitch( 's2', cls=LinuxBridge )\n\n    info( '*** Creating hosts\\n' )\n    h1 = net.addHost( 'h1' ) # PPPoE Server\n    h2 = net.addHost( 'h2', ip='10.10.10.1/24', mac=\"00:66:77:88:99:AA\") # Upstream\n    # FIXME: enable multicast\n    # h3 = net.addHost( 'h3')\n\n    # Topology: pon1 - eth1 - agg1 - h2 - s2 - h3\n    #                          |\n    #                          h1\n    net.addLink( h1, agg1 )\n    net.addLink( h2, agg1 )\n    # FIXME: enable multicast\n    # net.addLink( h2, s2 )\n    # net.addLink( h3, s2 )\n\n    info( '*** Adding hardware interface eth1 to switch agg1\\n')\n    _intf = Intf( 'eth1', node=agg1 )\n\n    info( '*** Turning off checksum offloading for eth1\\n' )\n    print quietRun( 'ethtool -K eth1 tx off rx off' )\n\n\n# FIXME: enable multicast\n#\n#     info( '*** Start multicast routing on h1 and source on h2\\n')\n#     h2.cmd( 'service pimd start' )\n#     h3.cmd( 'mcjoin -s -i h2-eth0 -t 2 >& /tmp/mcjoin.log &')\n#\n\n    net.start()\n    info( '*** Starting PPPoE Server')\n    h1.cmd( 'echo 10.255.255.100-250 > /iptoassign')\n    h1.cmd( 'pppoe-server -I h1-eth0 -L 10.255.255.1 -p /iptoassign -O /pppoe-options')\n    info( '*** Setting route back to access network')\n    h2.cmd( 'ip route add 10.255.255.0/24 via 10.10.10.254')\n    CLI( net )\n    net.stop()\n",
      "topo_stratum.py": "#!/usr/bin/python\n\n# Copyright 2019-present Open Networking Foundation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom mininet.cli import CLI\nfrom mininet.log import setLogLevel, info, error\nfrom mininet.net import Mininet\nfrom mininet.link import Intf\nfrom mininet.nodelib import LinuxBridge\nfrom stratum import StratumBmv2Switch\nfrom mininet.util import quietRun\n\nCPU_PORT = 255\n\nif __name__ == '__main__':\n    setLogLevel( 'info' )\n\n    net = Mininet( topo=None )\n\n    info( '*** Adding switches\\n' )\n    agg1 = net.addSwitch( name='agg1', cls=StratumBmv2Switch, cpuport=CPU_PORT)\n    s2 = net.addSwitch( 's2', cls=LinuxBridge )\n\n    info( '*** Creating hosts\\n' )\n    h1 = net.addHost( 'h1', ip='10.0.0.1/24')\n    h2 = net.addHost( 'h2', ip='10.1.0.2/24')\n\n    # Topology: pon1 - eth1 - agg1 - h1 - s2 - h2\n    net.addLink( h1, agg1 )\n    net.addLink( h1, s2 )\n    net.addLink( h2, s2 )\n\n    info( '*** Adding hardware interface eth1 to switch agg1\\n')\n    _intf = Intf( 'eth1', node=agg1 )\n\n    info( '*** Turning off checksum offloading for eth1\\n' )\n    print quietRun( 'ethtool -K eth1 tx off rx off' )\n\n    info( '*** Adding VLAN interface to host h1\\n')\n    h1.cmd( 'ifconfig h1-eth1 10.1.0.1/24 up')\n    h1.cmd( 'ip link add link h1-eth0 name h1-eth0.222 type vlan proto 802.1Q id 222' )\n    h1.cmd( 'ip link add link h1-eth0.222 name h1-eth0.222.111 type vlan proto 802.1Q id 111' )\n    h1.cmd( 'ifconfig h1-eth0.222 up' )\n    h1.cmd( 'ifconfig h1-eth0.222.111 up' )\n    h1.cmd( 'ifconfig h1-eth0.222.111 172.18.0.10/24' )\n    h1.cmd( 'dnsmasq  --dhcp-range=172.18.0.50,172.18.0.150,12h' )\n    info( '*** Start multicast routing on h1 and source on h2\\n')\n    h1.cmd( 'service pimd start' )\n    h2.cmd( 'mcjoin -s -i h2-eth0 -t 2 >& /tmp/mcjoin.log &')\n\n    net.start()\n    CLI( net )\n    net.stop()\n"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-mininet",
      "labels": {
        "app": "mininet",
        "chart": "mininet-1.1.4",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "mininet",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "mininet",
            "release": "release-name"
          },
          "annotations": {
            "cni": "calico,nni0"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "mininet",
              "image": "andybavier/mininet:1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "/toposcripts/topo.py"
              ],
              "stdin": true,
              "tty": true,
              "securityContext": {
                "privileged": true,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "volumeMounts": [
                {
                  "name": "topo-config",
                  "mountPath": "/toposcripts"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "topo-config",
              "configMap": {
                "name": "release-name-configmap",
                "defaultMode": 493
              }
            }
          ],
          "affinity": {
            "podAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": [
                            "olt"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 100
                }
              ]
            }
          }
        }
      }
    }
  },
  null
]