apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: singleuser
  labels:
    component: singleuser
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: singleuser-server
      app: mlhub
      release: release-name
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-singleuser: "true"
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: mlhub
              release: release-name
      ports:
        - protocol: TCP
          port: 8081
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              - 169.254.169.254/32
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: hub
  labels:
    component: hub
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
spec:
  minAvailable: 1
  selector:
    matchLabels:
      component: hub
      app: mlhub
      release: release-name
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: proxy
  labels:
    component: proxy
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
spec:
  minAvailable: 1
  selector:
    matchLabels:
      component: proxy
      app: mlhub
      release: release-name
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hub
  labels:
    component: hub
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
---
kind: Secret
apiVersion: v1
metadata:
  name: hub-secret
  labels:
    component: hub
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
type: Opaque
data:
  proxy.token: dGt3ZVRaVEVkRU81eHlMS29EZ2dxR1JZQ29LT21FS1U=
  values.yaml: aHViOiB7fQ==
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: hub-config
  labels:
    component: hub
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
data:
  values.yaml: |
    Chart:
      Name: mlhub
      Version: 2.0.0
    Release:
      Name: release-name
      Namespace: default
      Service: Helm
    custom: {}
    hub:
      annotations: {}
      db:
        pvc:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          selector: {}
          storage: 1Gi
          storageClassName: null
          subPath: null
        type: ""
        upgrade: null
      deploymentStrategy:
        rollingUpdate: null
        type: Recreate
      extraContainers: []
      extraVolumeMounts: []
      extraVolumes: []
      fsGid: 0
      image:
        name: mltooling/ml-hub
        tag: $VERSION
      imagePullSecret:
        email: null
        enabled: false
        password: null
        registry: null
        username: null
      initContainers: []
      labels: {}
      networkPolicy:
        egress:
        - to:
          - ipBlock:
              cidr: 0.0.0.0/0
        enabled: false
      nodeSelector: {}
      pdb:
        enabled: true
        minAvailable: 1
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
      service:
        annotations: {}
        loadBalancerIP: null
        ports:
          nodePort: null
        type: ClusterIP
      uid: 0
    mlhub:
      baseUrl: /
      debug: false
      secretToken: ""
    singleuser:
      cloudMetadata:
        enabled: false
        ip: 169.254.169.254
      networkPolicy:
        egress:
        - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except:
              - 169.254.169.254/32
        enabled: true
      networkTools:
        image:
          name: jupyterhub/k8s-network-tools
          tag: 0.8.2
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: hub-user-config
  labels:
    component: hub
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
data:
  jupyterhub_user_config.py: ""
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - persistentvolumeclaims
    verbs:
      - get
      - watch
      - list
      - create
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - list
      - create
      - delete
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: hub
    namespace: default
roleRef:
  kind: Role
  name: hub
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: hub
  labels:
    component: hub
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: //hub/metrics
spec:
  type: ClusterIP
  selector:
    component: hub
    app: mlhub
    release: release-name
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
      name: hub
    - protocol: TCP
      port: 22
      targetPort: 22
      name: ssh
---
apiVersion: v1
kind: Service
metadata:
  name: proxy-api
  labels:
    component: proxy-api
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
spec:
  selector:
    component: proxy
    app: mlhub
    release: release-name
  ports:
    - protocol: TCP
      port: 8001
      targetPort: 8001
---
apiVersion: v1
kind: Service
metadata:
  name: proxy-public
  labels:
    component: proxy-public
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
spec:
  selector:
    component: proxy
    release: release-name
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    component: hub
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hub
      app: mlhub
      release: release-name
  strategy:
    rollingUpdate: null
    type: Recreate
  template:
    metadata:
      labels:
        component: hub
        app: mlhub
        release: release-name
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        checksum/config-map: 179cee117002ba3bb8c4e101066ad41648704443c9e5bb4ae0f227c1d94ca1f1
        checksum/user-config-map: 680f795cdd2904c828971ccb9dbc8a6427af716f4f4130a92857eaf434cf41e7
        checksum/secret: 6e92d07e92c669198a669f4681af1f89cf7ef0e713ffcbe36d66d30fbb4b99bc
    spec:
      nodeSelector: {}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values:
                      - core
      volumes:
        - name: config
          configMap:
            name: hub-config
        - name: secret
          secret:
            secretName: hub-secret
        - name: user-config
          configMap:
            name: hub-user-config
      serviceAccountName: hub
      securityContext:
        fsGroup: 0
      containers:
        - name: hub
          image: mltooling/ml-hub:$VERSION
          volumeMounts:
            - mountPath: /etc/jupyterhub/config/
              name: config
            - mountPath: /etc/jupyterhub/secret/
              name: secret
            - mountPath: /resources/jupyterhub_user_config.py
              name: user-config
              subPath: jupyterhub_user_config.py
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            seccompProfile:
              type: RuntimeDefault
          securityContext:
            runAsUser: 10229
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: ADDITIONAL_ARGS
              value: --config /resources/jupyterhub_config.py
            - name: START_NGINX
              value: "false"
            - name: EXECUTION_MODE
              value: k8s
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: release-name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub-secret
                  key: proxy.token
          ports:
            - containerPort: 8081
              name: hub
            - containerPort: 22
              name: ssh
          readinessProbe:
            httpGet:
              path: //hub/health
              port: hub
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  labels:
    component: proxy
    app: mlhub
    release: release-name
    chart: mlhub-2.0.0
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: proxy
      app: mlhub
      release: release-name
  template:
    metadata:
      labels:
        component: proxy
        app: mlhub
        release: release-name
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        checksum/hub-secret: 7376fc689547df936ba37a1560daa4e6a42dfc575226708d4f2c04adc1603b73
        checksum/proxy-secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      terminationGracePeriodSeconds: 60
      nodeSelector: {}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values:
                      - core
      containers:
        - name: chp
          image: mltooling/ml-hub:$VERSION
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            seccompProfile:
              type: RuntimeDefault
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: ADDITIONAL_ARGS
              value: --ip=0.0.0.0 --api-ip=0.0.0.0 --api-port=8001 --port=8000 --default-target=http://$(HUB_SERVICE_HOST):$(HUB_SERVICE_PORT) --error-target=http://$(HUB_SERVICE_HOST):$(HUB_SERVICE_PORT)/hub/error
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub-secret
                  key: proxy.token
            - name: EXECUTION_MODE
              value: k8s
            - name: SSHD_TARGET
              value: hub:22
            - name: START_SSH
              value: "false"
            - name: START_JHUB
              value: "false"
            - name: START_CHP
              value: "true"
          ports:
            - containerPort: 8000
              name: proxy-public
            - containerPort: 8001
              name: api
          livenessProbe:
            httpGet:
              path: /_chp_healthz
              port: proxy-public
          readinessProbe:
            httpGet:
              path: /_chp_healthz
              port: proxy-public
