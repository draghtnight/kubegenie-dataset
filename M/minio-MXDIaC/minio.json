[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-minio",
      "namespace": "MXDIaC"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-5.0.5",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "accesskey": "QUtJQUlPU0ZPRE5ON0VYQU1QTEU=",
      "secretkey": "d0phbHJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUNZRVhBTVBMRUtFWQ=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-5.0.5",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "initialize": "#!/bin/sh\nset -e ; # Have script exit in the event of a failed command.\n\n# connectToMinio\n# Use a check-sleep-check loop to wait for Minio service to be available\nconnectToMinio() {\n  SCHEME=$1\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"mc config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n\n# checkBucketExists ($bucket)\n# Check if the bucket exists, by using the exit code of `mc ls`\ncheckBucketExists() {\n  BUCKET=$1\n  CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)\n  return $?\n}\n\n# createBucket ($bucket, $policy, $purge)\n# Ensure bucket exists, purging if asked to\ncreateBucket() {\n  BUCKET=$1\n  POLICY=$2\n  PURGE=$3\n\n  # Purge the bucket, if set & exists\n  # Since PURGE is user input, check explicitly for `true`\n  if [ $PURGE = true ]; then\n    if checkBucketExists $BUCKET ; then\n      echo \"Purging bucket '$BUCKET'.\"\n      set +e ; # don't exit if this fails\n      /usr/bin/mc rm -r --force myminio/$BUCKET\n      set -e ; # reset `e` as active\n    else\n      echo \"Bucket '$BUCKET' does not exist, skipping purge.\"\n    fi\n  fi\n\n  # Create the bucket if it does not exist\n  if ! checkBucketExists $BUCKET ; then\n    echo \"Creating bucket '$BUCKET'\"\n    /usr/bin/mc mb myminio/$BUCKET\n  else\n    echo \"Bucket '$BUCKET' already exists.\"\n  fi\n\n  # At this point, the bucket should exist, skip checking for existence\n  # Set policy on the bucket\n  echo \"Setting policy of bucket '$BUCKET' to '$POLICY'.\"\n  /usr/bin/mc policy set $POLICY myminio/$BUCKET\n}\n\n# Try connecting to Minio instance\nscheme=http\nconnectToMinio $scheme"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-5.0.5",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "10Gi"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-5.0.5",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "service",
          "port": 9000,
          "protocol": "TCP",
          "targetPort": 9000
        }
      ],
      "selector": {
        "app": "minio",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-5.0.5",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "strategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "maxSurge": "100%",
          "maxUnavailable": 0
        }
      },
      "selector": {
        "matchLabels": {
          "app": "minio",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-minio",
          "labels": {
            "app": "minio",
            "release": "release-name"
          },
          "annotations": {
            "checksum/secrets": "297df5113bf3ed81d0dfdf8fcfa28b5ca8f15c4414a928b56816125800fd44ab",
            "checksum/config": "a35489b53bb883397124d259d66b3dda6f7a93f59b5323220f82fc269bfec071"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-minio",
          "securityContext": {
            "runAsUser": 1000,
            "runAsGroup": 1000,
            "fsGroup": 1000
          },
          "containers": [
            {
              "name": "minio",
              "image": "minio/minio:RELEASE.2020-01-03T19-12-21Z",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-ce",
                "/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export"
              ],
              "volumeMounts": [
                {
                  "name": "export",
                  "mountPath": "/export"
                }
              ],
              "ports": [
                {
                  "name": "service",
                  "containerPort": 9000
                }
              ],
              "env": [
                {
                  "name": "MINIO_ACCESS_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-minio",
                      "key": "accesskey"
                    }
                  }
                },
                {
                  "name": "MINIO_SECRET_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-minio",
                      "key": "secretkey"
                    }
                  }
                },
                {
                  "name": "MINIO_BROWSER",
                  "value": "on"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/minio/health/live",
                  "port": "service",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 30,
                "timeoutSeconds": 1,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/minio/health/ready",
                  "port": "service"
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 15,
                "timeoutSeconds": 1,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "export",
              "persistentVolumeClaim": {
                "claimName": "release-name-minio"
              }
            },
            {
              "name": "minio-user",
              "secret": {
                "secretName": "release-name-minio"
              }
            }
          ]
        }
      }
    }
  }
]