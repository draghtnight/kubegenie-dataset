apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: release-name-grafana
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default,runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - configMap
    - emptyDir
    - projected
    - csi
    - secret
    - downwardAPI
    - persistentVolumeClaim
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
  rule: MustRunAsNonRoot
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: release-name-grafana-test
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
spec:
  allowPrivilegeEscalation: true
  privileged: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  fsGroup:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  volumes:
    - configMap
    - downwardAPI
    - emptyDir
    - projected
    - csi
    - secret
  rule: MustRunAsNonRoot
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: release-name-prometheus-blackbox-exporter-psp
  namespace: default
  labels:
    helm.sh/chart: prometheus-blackbox-exporter-5.6.0
    app.kubernetes.io/name: prometheus-blackbox-exporter
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.19.0
    app.kubernetes.io/managed-by: Helm
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes:
    - configMap
    - secret
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true
  rule: MustRunAsNonRoot
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
  name: release-name-grafana
  namespace: A1u9vA3I
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
  name: release-name-grafana-test
  namespace: A1u9vA3I
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-prometheus-blackbox-exporter
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: prometheus-blackbox-exporter-5.6.0
    app.kubernetes.io/name: prometheus-blackbox-exporter
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.19.0
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-3.5.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
  name: release-name-kube-state-metrics
  namespace: A1u9vA3I
imagePullSecrets: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: node-exporter
    app: prometheus
    release: release-name
    chart: prometheus-14.11.0
    heritage: Helm
  name: release-name-prometheus-node-exporter
  namespace: A1u9vA3I
  annotations: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: server
    app: prometheus
    release: release-name
    chart: prometheus-14.11.0
    heritage: Helm
  name: release-name-prometheus-server
  namespace: A1u9vA3I
  annotations: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-grafana
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  admin-user: YWRtaW4=
  admin-password: a1dPU2FndEhyQ0R2QTFQRnpBcEY4ekRiRzE5SEZoeDBsSFJMZDdIZg==
  ldap-toml: ""
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-prometheus-blackbox-exporter
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: prometheus-blackbox-exporter-5.6.0
    app.kubernetes.io/name: prometheus-blackbox-exporter
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.19.0
    app.kubernetes.io/managed-by: Helm
stringData:
  blackbox.yaml: |
    modules:
      buildParameters:
        http:
          body: '{"query":"query monitoringPing { mobileVersions { platform currentSupported
            minSupported } }","variables":{}}'
          headers:
            Content-Type: application/json
          method: POST
        prober: http
        timeout: 3s
      http_2xx:
        http:
          follow_redirects: true
          preferred_ip_protocol: ip4
          valid_http_versions:
          - HTTP/1.1
          - HTTP/2.0
        prober: http
        timeout: 5s
      walletAuth:
        http:
          body: '{"query":"query monitoringPingAuth { me { __typename id phone quizQuestions
            { __typename question{ id earnAmount } } defaultAccount { __typename id defaultWalletId
            wallets { __typename id balance walletCurrency transactions(first: 3) { pageInfo
            { hasNextPage } edges { cursor node { __typename id status direction memo
            createdAt settlementAmount settlementFee settlementPrice { base offset } initiationVia
            { __typename ... on InitiationViaIntraLedger { counterPartyWalletId counterPartyUsername
            } ... on InitiationViaLn { paymentHash } ... on InitiationViaOnChain { address
            } } settlementVia { __typename ... on SettlementViaIntraLedger { counterPartyWalletId
            counterPartyUsername } ... on SettlementViaLn { paymentSecret } ... on SettlementViaOnChain
            { transactionHash } } } } } } } } }","variables":{}}'
          fail_if_body_matches_regexp:
          - errors+
          headers:
            Content-Type: application/json
          method: POST
        prober: http
        timeout: 30s
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-grafana
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
data:
  plugins: https://github.com/doitintl/bigquery-grafana/archive/master.zip;doit-bigquery-datasource
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [plugins]
    allow_loading_unsigned_plugins = doitintl-bigquery-datasource
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - isDefault: true
      name: Prometheus
      type: prometheus
      url: http://monitoring-prometheus-server
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-grafana-test
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: |-
    @test "Test Health" {
      url="http://release-name-grafana/api/health"

      code=$(wget --server-response --spider --timeout 10 --tries 1 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: server
    app: prometheus
    release: release-name
    chart: prometheus-14.11.0
    heritage: Helm
  name: release-name-prometheus-server
  namespace: A1u9vA3I
data:
  alerting_rules.yml: |
    {}
  alerts: |
    {}
  prometheus.yml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 10s
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: lnd
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: .*lnd.*
        source_labels:
        - __meta_kubernetes_pod_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_label_app_kubernetes_io_instance
        target_label: pod
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      scrape_interval: 300s
      scrape_timeout: 60s
    - job_name: dealer
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: .*dealer.*
        source_labels:
        - __meta_kubernetes_pod_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_label_app_kubernetes_io_instance
        target_label: pod
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      scrape_interval: 1m
      scrape_timeout: 20s
    - job_name: kube-state-metrics
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: prometheus-kube-state-metrics-.*
        source_labels:
        - __meta_kubernetes_pod_name
      scrape_interval: 5s
      scrape_timeout: 4s
    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
      - action: drop
        regex: prometheus-kube-state-metrics-.*
        source_labels:
        - __meta_kubernetes_pod_name
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
      - action: drop
        regex: prometheus-kube-state-metrics-.*
        source_labels:
        - __meta_kubernetes_pod_name
      - action: drop
        regex: lnd.*
        source_labels:
        - __meta_kubernetes_pod_name
      - action: drop
        regex: dealer.*
        source_labels:
        - __meta_kubernetes_pod_name
      scrape_interval: 10m
      scrape_timeout: 120s
  recording_rules.yml: |
    {}
  rules: |
    {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-grafana
  namespace: default
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
  finalizers:
    - kubernetes.io/pvc-protection
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
  name: release-name-grafana-clusterrole
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-3.5.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
  name: release-name-kube-state-metrics
rules:
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
    verbs:
      - list
      - watch
  - apiGroups:
      - extensions
      - apps
    resources:
      - daemonsets
    verbs:
      - list
      - watch
  - apiGroups:
      - extensions
      - apps
    resources:
      - deployments
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - limitranges
    verbs:
      - list
      - watch
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - persistentvolumeclaims
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - persistentvolumes
    verbs:
      - list
      - watch
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list
      - watch
  - apiGroups:
      - extensions
      - apps
    resources:
      - replicasets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - replicationcontrollers
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - resourcequotas
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - list
      - watch
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
    verbs:
      - list
      - watch
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - list
      - watch
  - apiGroups:
      - storage.k8s.io
    resources:
      - volumeattachments
    verbs:
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    component: server
    app: prometheus
    release: release-name
    chart: prometheus-14.11.0
    heritage: Helm
  name: release-name-prometheus-server
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: release-name-grafana
    namespace: default
roleRef:
  kind: ClusterRole
  name: release-name-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-3.5.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
  name: release-name-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-kube-state-metrics
subjects:
  - kind: ServiceAccount
    name: release-name-kube-state-metrics
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    component: server
    app: prometheus
    release: release-name
    chart: prometheus-14.11.0
    heritage: Helm
  name: release-name-prometheus-server
subjects:
  - kind: ServiceAccount
    name: release-name-prometheus-server
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-prometheus-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-grafana
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - extensions
    resources:
      - podsecuritypolicies
    verbs:
      - use
    resourceNames:
      - release-name-grafana
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-grafana-test
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    verbs:
      - use
    resourceNames:
      - release-name-grafana-test
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: prometheus-blackbox-exporter-5.6.0
    app.kubernetes.io/name: prometheus-blackbox-exporter
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.19.0
    app.kubernetes.io/managed-by: Helm
  name: release-name-prometheus-blackbox-exporter
  namespace: A1u9vA3I
rules:
  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    resourceNames:
      - release-name-prometheus-blackbox-exporter-psp
    verbs:
      - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-grafana
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-grafana
subjects:
  - kind: ServiceAccount
    name: release-name-grafana
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-grafana-test
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-grafana-test
subjects:
  - kind: ServiceAccount
    name: release-name-grafana-test
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: prometheus-blackbox-exporter-5.6.0
    app.kubernetes.io/name: prometheus-blackbox-exporter
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.19.0
    app.kubernetes.io/managed-by: Helm
  name: release-name-prometheus-blackbox-exporter
  namespace: A1u9vA3I
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-prometheus-blackbox-exporter
subjects:
  - kind: ServiceAccount
    name: release-name-prometheus-blackbox-exporter
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-grafana
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-prometheus-blackbox-exporter
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: prometheus-blackbox-exporter-5.6.0
    app.kubernetes.io/name: prometheus-blackbox-exporter
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.19.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9115
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prometheus-blackbox-exporter
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-kube-state-metrics
  namespace: A1u9vA3I
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-3.5.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    component: node-exporter
    app: prometheus
    release: release-name
    chart: prometheus-14.11.0
    heritage: Helm
  name: release-name-prometheus-node-exporter
  namespace: A1u9vA3I
spec:
  clusterIP: None
  ports:
    - name: metrics
      port: 9100
      protocol: TCP
      targetPort: 9100
  selector:
    component: node-exporter
    app: prometheus
    release: release-name
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: server
    app: prometheus
    release: release-name
    chart: prometheus-14.11.0
    heritage: Helm
  name: release-name-prometheus-server-headless
  namespace: A1u9vA3I
spec:
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    component: server
    app: prometheus
    release: release-name
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: server
    app: prometheus
    release: release-name
    chart: prometheus-14.11.0
    heritage: Helm
  name: release-name-prometheus-server
  namespace: A1u9vA3I
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    component: server
    app: prometheus
    release: release-name
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    component: node-exporter
    app: prometheus
    release: release-name
    chart: prometheus-14.11.0
    heritage: Helm
  name: release-name-prometheus-node-exporter
  namespace: A1u9vA3I
spec:
  selector:
    matchLabels:
      component: node-exporter
      app: prometheus
      release: release-name
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: node-exporter
        app: prometheus
        release: release-name
        chart: prometheus-14.11.0
        heritage: Helm
    spec:
      serviceAccountName: release-name-prometheus-node-exporter
      containers:
        - name: prometheus-node-exporter
          image: quay.io/prometheus/node-exporter:v1.1.2
          imagePullPolicy: IfNotPresent
          args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
            - --path.rootfs=/host/root
            - --web.listen-address=:9100
          ports:
            - name: metrics
              containerPort: 9100
              hostPort: 9100
          resources:
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly: true
            - name: sys
              mountPath: /host/sys
              readOnly: true
            - name: root
              mountPath: /host/root
              mountPropagation: HostToContainer
              readOnly: true
      hostNetwork: true
      hostPID: true
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: root
          hostPath:
            path: /
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-grafana
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: release-name
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: release-name
      annotations:
        checksum/config: 33e1e7da386253c6cd96b974b0479581183cf0f8a6601e766cf94deeaaa6ff58
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 4b74372155f042d023cf936eb649b8a3d6d589aa0881d29efa42c1a105b0ac3f
    spec:
      serviceAccountName: release-name-grafana
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      initContainers:
        - name: init-chown-data
          image: busybox:1.31.1
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          command:
            - chown
            - -R
            - 472:472
            - /var/lib/grafana
          resources: {}
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
      enableServiceLinks: true
      containers:
        - name: grafana
          image: grafana/grafana:8.5.0
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: storage
              mountPath: /var/lib/grafana
            - name: config
              mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
              subPath: datasources.yaml
          ports:
            - name: service
              containerPort: 80
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: release-name-grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-grafana
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              valueFrom:
                configMapKeyRef:
                  name: release-name-grafana
                  key: plugins
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources:
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: config
          configMap:
            name: release-name-grafana
        - name: storage
          persistentVolumeClaim:
            claimName: release-name-grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-prometheus-blackbox-exporter
  namespace: A1u9vA3I
  labels:
    helm.sh/chart: prometheus-blackbox-exporter-5.6.0
    app.kubernetes.io/name: prometheus-blackbox-exporter
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.19.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-blackbox-exporter
      app.kubernetes.io/instance: release-name
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: prometheus-blackbox-exporter-5.6.0
        app.kubernetes.io/name: prometheus-blackbox-exporter
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: 0.19.0
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 3e55e248cdbfe06482962c7373e0d10f3dd1a5fdea365e731df416eb33b02e3a
    spec:
      automountServiceAccountToken: false
      serviceAccountName: release-name-prometheus-blackbox-exporter
      restartPolicy: Always
      containers:
        - name: blackbox-exporter
          image: prom/blackbox-exporter:v0.19.0
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 11604
            runAsGroup: 1000
            capabilities:
              drop:
                "": NET_RAW
          env: null
          args:
            - --config.file=/config/blackbox.yaml
          resources:
            seccompProfile:
              type: RuntimeDefault
          ports:
            - containerPort: 9115
              name: http
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          volumeMounts:
            - mountPath: /config
              name: config
      hostNetwork: false
      volumes:
        - name: config
          secret:
            secretName: release-name-prometheus-blackbox-exporter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-kube-state-metrics
  namespace: A1u9vA3I
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-3.5.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 2.2.0
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/instance: release-name
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      hostNetwork: false
      serviceAccountName: release-name-kube-state-metrics
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsUser: 65534
      containers:
        - name: kube-state-metrics
          args:
            - --port=8080
            - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
            - --telemetry-port=8081
          imagePullPolicy: IfNotPresent
          image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.2.0
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    component: server
    app: prometheus
    release: release-name
    chart: prometheus-14.11.0
    heritage: Helm
  name: release-name-prometheus-server
  namespace: A1u9vA3I
spec:
  serviceName: release-name-prometheus-server-headless
  selector:
    matchLabels:
      component: server
      app: prometheus
      release: release-name
  replicas: 1
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        component: server
        app: prometheus
        release: release-name
        chart: prometheus-14.11.0
        heritage: Helm
    spec:
      enableServiceLinks: true
      serviceAccountName: release-name-prometheus-server
      containers:
        - name: prometheus-server-configmap-reload
          image: jimmidyson/configmap-reload:v0.5.0
          imagePullPolicy: IfNotPresent
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
        - name: prometheus-server
          image: quay.io/prometheus/prometheus:v2.26.0
          imagePullPolicy: IfNotPresent
          args:
            - --storage.tsdb.retention.time=365d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          resources: {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      hostNetwork: false
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: release-name-prometheus-server
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-grafana-test
  labels:
    helm.sh/chart: grafana-6.29.2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 8.5.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  namespace: A1u9vA3I
spec:
  serviceAccountName: release-name-grafana-test
  containers:
    - name: release-name-test
      image: bats/bats:v1.4.1
      imagePullPolicy: IfNotPresent
      command:
        - /opt/bats/bin/bats
        - -t
        - /tests/run.sh
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
    - name: tests
      configMap:
        name: release-name-grafana-test
  restartPolicy: Never
