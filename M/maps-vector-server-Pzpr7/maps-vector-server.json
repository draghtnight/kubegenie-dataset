[
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": {
      "name": "maps-vector-server-release-name",
      "labels": {
        "app": "maps-vector-server",
        "chart": "maps-vector-server-0.0.1",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "podSelector": {
        "matchLabels": {
          "app": "maps-vector-server",
          "release": "release-name"
        }
      },
      "policyTypes": [
        "Ingress"
      ],
      "ingress": [
        {
          "ports": [
            {
              "port": 8080,
              "protocol": "TCP"
            }
          ]
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "maps-vector-server-release-name-secret-config",
      "labels": {
        "app": "maps-vector-server",
        "chart": "maps-vector-server-0.0.1",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "TEGOLA_POSTGRES_PASSWORD": "c2VjcmV0"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "config-release-name",
      "labels": {
        "app": "maps-vector-server",
        "chart": "maps-vector-server-0.0.1",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "config.toml": "\n[[providers]]\nname = \"osm\"\ntype = \"postgis\"\nhost = \"postgres-postgis\"\nmax_connections = 10\nport = \"5432\"\ndatabase = \"gis\"\nuser = \"default\"\npassword = \"${TEGOLA_POSTGRES_PASSWORD}\"\n\n  [[providers.layers]]\n  name = \"landuse\"\n  geometry_fieldname = \"way\"\n  geometry_type = \"Polygon\"\n  fields = [ \"class\", \"osm_id\", \"way_area\", \"z_order\" ]\n  sql = \"\"\"\n  SELECT\n    osm_id,\n    ST_AsBinary(way) AS way,\n    CASE\n      WHEN \\\"natural\\\" = 'wood' OR landuse IN ('wood', 'forest') THEN 'wood'\n      WHEN leisure IN ('national_reserve', 'nature_reserve', 'golf_course') OR boundary = 'national_park' THEN 'park'\n      WHEN landuse IN ('cemetery', 'industrial') THEN landuse\n      WHEN aeroway IS NOT NULL AND aeroway <> '' THEN 'industrial'\n      WHEN landuse = 'village_green' OR leisure IN ('park', 'playground') THEN 'park'\n      WHEN amenity IN ('school', 'university') THEN 'school'\n      WHEN amenity = 'hospital' THEN 'hospital'\n      ELSE bail_out('Unexpected landuse row with osm_id=%s', osm_id::TEXT)\n    END AS class,\n    z_order,\n    way_area\n  FROM planet_osm_polygon\n  WHERE\n    (\n        (\n            (\n              \\\"natural\\\" = 'wood' OR landuse IN ('wood', 'forest')\n              OR leisure IN ('national_reserve', 'nature_reserve', 'golf_course')\n              OR boundary = 'national_park'\n            )\n            AND z(!SCALE_DENOMINATOR!) >= 7\n        ) OR (\n            (\n              landuse IN ('cemetery', 'industrial', 'village_green')\n              OR (aeroway IS NOT NULL AND aeroway <> '')\n              OR leisure IN ('park', 'playground')\n              OR amenity IN ('school', 'university')\n            )\n            AND z(!SCALE_DENOMINATOR!) >= 10\n        ) OR (\n            amenity = 'hospital'\n            AND z(!SCALE_DENOMINATOR!) >= 12\n        )\n    )\n    AND way && !BBOX!\n    ORDER BY z_order, way_area DESC\n  \"\"\"\n\n  [[providers.layers]]\n  name = \"waterway\"\n  geometry_fieldname = \"way\"\n  geometry_type = \"LineString\"\n  fields = [ \"class\", \"osm_id\" ]\n  sql = \"\"\"\n  SELECT osm_id, ST_AsBinary(way) AS way, waterway AS class\n  FROM planet_osm_line\n  WHERE\n    (\n      (\n        waterway IN ('river', 'canal')\n        AND z(!SCALE_DENOMINATOR!) >= 8\n      )\n      OR\n      (\n        waterway IN ('stream', 'stream_intermittent')\n        AND z(!SCALE_DENOMINATOR!) >= 13\n      )\n    )\n    AND way && !BBOX!\n  \"\"\"\n\n  [[providers.layers]]\n  name = \"water\"\n  geometry_type = \"Polygon\"\n  geometry_fieldname = \"way\"\n  fields = [ \"osm_id\" ]\n  sql = \"\"\"\n  SELECT osm_id, ST_AsBinary(way) AS way\n  FROM planet_osm_polygon\n  WHERE\n    (\n      \\\"natural\\\" = 'water'\n      OR (waterway IS NOT NULL AND waterway <> '')\n      OR landuse = 'reservoir'\n      OR landuse = 'pond'\n    )\n    AND\n    (\n      z(!SCALE_DENOMINATOR!) >= 14\n      OR way_area >= 5000000000 / 2.3^z(!SCALE_DENOMINATOR!)\n    )\n    AND way && !BBOX!\n  UNION ALL\n  SELECT 0 AS osm_id, ST_AsBinary(way)\n    FROM water_polygons\n    WHERE\n      way && !BBOX!\n  \"\"\"\n\n  [[providers.layers]]\n  name = \"aeroway\"\n  geometry_type = \"GeometryCollection\"\n  geometry_fieldname = \"way\"\n  fields = [ \"osm_id\", \"type\" ]\n  sql = \"\"\"\n  SELECT osm_id, ST_AsBinary(way) AS way, aeroway AS type\n  FROM planet_osm_polygon\n  WHERE\n    (aeroway IS NOT NULL AND aeroway <> '')\n    AND aeroway IN ('apron', 'helipad', 'runway', 'taxiway')\n    AND z(!SCALE_DENOMINATOR!) >= 12\n    AND way && !BBOX!\n  UNION ALL\n  SELECT osm_id, ST_AsBinary(way), aeroway AS type\n    FROM planet_osm_line\n    WHERE\n      (aeroway IS NOT NULL AND aeroway <> '')\n      AND z(!SCALE_DENOMINATOR!) >= 12\n      AND way && !BBOX!\n  \"\"\"\n\n  [[providers.layers]]\n  name = \"road\"\n  geometry_type = \"LineString\"\n  geometry_fieldname = \"way\"\n  fields = [ \"class\", \"is\", \"osm_id\" ]\n  sql = \"\"\"\n  SELECT osm_id, ST_AsBinary(way) AS way, class, \\\"is\\\" FROM (\n  SELECT\n      osm_id,\n      way,\n      CASE\n        WHEN highway IN ('motorway', 'motorway_link', 'driveway') THEN highway\n        WHEN highway IN ('primary', 'primary_link', 'trunk', 'trunk_link', 'secondary', 'secondary_link', 'tertiary', 'tertiary_link') THEN 'main'\n        WHEN highway IN ('residential', 'unclassified', 'living_street') THEN 'street'\n        WHEN highway IN ('pedestrian', 'construction') OR access = 'private' THEN 'street_limited'\n        WHEN railway IN ('rail', 'monorail', 'narrow_gauge', 'subway', 'tram') THEN 'major_rail'\n        WHEN highway IN ('service', 'track') THEN 'service'\n        WHEN highway IN ('path', 'cycleway', 'ski', 'steps', 'bridleway', 'footway') THEN 'path'\n        WHEN railway IN ('funicular', 'light_rail', 'preserved') THEN 'minor_rail'\n        ELSE bail_out('Unexpected road row with osm_id=%s', osm_id::TEXT)\n      END AS class,\n      z_order,\n      CASE\n        WHEN bridge IS NOT NULL AND bridge <> '' AND bridge <> 'no' AND bridge <> '0' THEN 'bridge'\n        WHEN tunnel IS NOT NULL AND tunnel <> '' AND tunnel <> 'no' AND tunnel <> '0' THEN 'tunnel'\n        ELSE 'road'\n      END AS \\\"is\\\"\n    FROM planet_osm_line\n    WHERE\n      (\n          (\n            highway IN ('motorway', -- 'motorway'\n              'primary', 'primary_link', 'trunk', 'trunk_link' -- 'main'\n            )\n            AND z(!SCALE_DENOMINATOR!) >= 6\n          )\n          OR\n          ( -- 'main'\n            highway IN ('secondary', 'secondary_link')\n            AND z(!SCALE_DENOMINATOR!) >= 9\n          )\n          OR\n          ( -- 'main'\n            highway IN ('tertiary', 'tertiary_link')\n            AND z(!SCALE_DENOMINATOR!) >= 12\n          )\n          OR\n          ( -- 'street'\n            highway IN ('residential', 'unclassified', 'living_street')\n            AND z(!SCALE_DENOMINATOR!) >= 12\n          )\n          OR\n          ( -- 'street_limited'\n            (highway IN ('pedestrian', 'construction') OR access = 'private')\n            AND z(!SCALE_DENOMINATOR!) >= 12\n          )\n          OR\n          ( -- 'major_rail'\n            railway IN ('rail', 'monorail', 'narrow_gauge', 'subway', 'tram')\n            AND z(!SCALE_DENOMINATOR!) >= 12\n          )\n          OR\n          ( -- 'motorway_link'\n            highway IN ('motorway_link')\n            AND z(!SCALE_DENOMINATOR!) >= 13\n          )\n          OR\n          ( -- 'service'\n            highway IN ('service', 'track')\n            AND z(!SCALE_DENOMINATOR!) >= 14\n          )\n          OR\n          ( -- 'driveway'\n            highway IN ('driveway')\n            AND z(!SCALE_DENOMINATOR!) >= 14\n          )\n          OR\n          ( -- 'path'\n            highway IN ('path', 'cycleway', 'ski', 'steps', 'bridleway', 'footway')\n            AND z(!SCALE_DENOMINATOR!) >= 14\n          )\n          OR\n          ( -- 'minor_rail'\n            railway IN ('funicular', 'light_rail', 'preserved')\n            AND z(!SCALE_DENOMINATOR!) >= 14\n          )\n        )\n      AND way && !BBOX!\n  ) data JOIN (\n    VALUES\n      ('motorway', 1000),\n      ('main', 900),\n      ('street', 800),\n      ('motorway_link', 700),\n      ('street_limited', 600),\n      ('driveway', 500),\n      ('major_rail', 400),\n      ('service', 300),\n      ('minor_rail', 200),\n      ('path', 100)\n  ) AS ordertable(feature, prio) ON class=feature\n    ORDER BY z_order + prio +\n      CASE \\\"is\\\"\n        WHEN 'tunnel' THEN -100000\n        WHEN 'road' THEN 0\n        WHEN 'bridge' THEN 100000\n        ELSE bail_out('Unexpected row with is=%s, osm_id=%s', \\\"is\\\", osm_id::TEXT)::INT\n      END\n  \"\"\"\n\n  [[providers.layers]]\n  name = \"admin\"\n  geometry_type = \"GeometryCollection\"\n  geometry_fieldname = \"way\"\n  fields = [ \"admin_level\", \"disputed\", \"maritime\", \"osm_id\" ]\n  sql = \"\"\"\n  SELECT\n    osm_id, ST_AsBinary(way) AS way,\n    admin_level::SMALLINT,\n    maritime,\n    CASE\n      WHEN\n        tags->'disputed' = 'yes'\n        OR tags->'dispute' = 'yes'\n        OR (tags->'disputed_by') IS NOT NULL\n        OR tags->'status' = 'partially_recognized_state'\n      THEN 1\n      ELSE 0\n    END AS disputed\n  FROM admin\n  WHERE\n    maritime <> TRUE\n    AND (\n      ( admin_level = '2' AND z(!SCALE_DENOMINATOR!) >= 2 )\n      OR ( admin_level = '4' AND z(!SCALE_DENOMINATOR!) >= 3 )\n    )\n    AND COALESCE(tags->'left:country', '') <> 'Demarcation Zone'\n    AND COALESCE(tags->'right:country', '') <> 'Demarcation Zone'\n    AND way && !BBOX!\n  \"\"\"\n\n  [[providers.layers]]\n  name = \"country_label\"\n  geometry_type = \"Point\"\n  geometry_fieldname = \"way\"\n  fields = [ \"code\", \"name\", \"osm_id\", \"scalerank\" ]\n  sql = \"\"\"\n  SELECT osm_id, ST_AsBinary(way) AS way, name, (hstore_to_json(extract_names(tags)))::text name_, CASE\n      WHEN to_int(population) >= 250000000 THEN 1\n      WHEN to_int(population) BETWEEN 100000000 AND  250000000 THEN 2\n      WHEN to_int(population) BETWEEN 50000000 AND 100000000 THEN 3\n      WHEN to_int(population) BETWEEN 25000000 AND 50000000 THEN 4\n      WHEN to_int(population) BETWEEN 10000000 AND 25000000 THEN 5\n      WHEN to_int(population) < 10000000 THEN 6\n    END scalerank,\n    COALESCE(tags->'ISO3166-1', tags->'country_code_iso3166_1_alpha_2') code\n  FROM planet_osm_point\n  WHERE\n    place = 'country'\n    AND z(!SCALE_DENOMINATOR!) BETWEEN 3 AND 10\n    AND way && !BBOX!\n  ORDER BY to_int(population) DESC NULLS LAST\n  \"\"\"\n\n  [[providers.layers]]\n  name = \"poi_label\"\n  geometry_type = \"GeometryCollection\"\n  geometry_fieldname = \"way\"\n  fields = [ \"localrank\", \"maki\", \"name\", \"osm_id\", \"scalerank\" ]\n  sql = \"\"\"\n  SELECT osm_id, ST_AsBinary(way1) AS way, name, rank AS scalerank, localrank, maki FROM\n    (\n      SELECT\n        osm_id,\n        name,\n        (hstore_to_json(extract_names(tags)))::text name_,\n        CASE\n          WHEN railway='station' THEN 'rail'\n          WHEN (tags->'subway') IS NOT NULL THEN 'rail-metro'\n          WHEN highway='bus_stop' THEN 'bus'\n          WHEN railway='tram_stop' THEN 'rail-light'\n          WHEN amenity='ferry_terminal' THEN 'ferry'\n          ELSE bail_out('Cannot classify poi_label, osm_id=%s', osm_id::TEXT)\n        END AS maki,\n        1 AS localrank,\n        way AS way1\n      FROM planet_osm_point\n      WHERE\n        z(!SCALE_DENOMINATOR!) >= 14\n        AND\n          (\n            (public_transport='stop_position' AND (tags->'subway') IS NOT NULL)\n            OR railway IN ('station', 'tram_stop')\n            OR highway='bus_stop'\n            OR amenity='ferry_terminal'\n          )\n        AND way && !BBOX!\n    UNION ALL\n      SELECT\n        osm_id,\n        name,\n        (hstore_to_json(extract_names(tags)))::text name_,\n        CASE\n          WHEN railway='station' THEN 'rail'\n          WHEN (tags->'subway') IS NOT NULL THEN 'rail-metro'\n          WHEN highway='bus_stop' THEN 'bus'\n          WHEN railway='tram_stop' THEN 'rail-light'\n          WHEN amenity='ferry_terminal' THEN 'ferry'\n          ELSE bail_out('Cannot classify poi_label, osm_id=%s', osm_id::TEXT)\n        END AS maki,\n        1 AS localrank,\n        ST_Centroid(way) AS way1\n      FROM planet_osm_polygon\n      WHERE\n        z(!scale_denominator!) >= 14\n        AND\n          (\n            (public_transport='stop_position' AND (tags->'subway') IS NOT NULL)\n            OR railway IN ('station', 'tram_stop')\n            OR highway='bus_stop'\n            OR amenity='ferry_terminal'\n          )\n        AND way && !BBOX!\n    ) data JOIN (\n      VALUES\n        ('rail', 1),\n        ('rail-metro', 1),\n        ('rail-light', 1),\n        ('ferry', 1),\n        ('bus', 3)\n      ) AS ranks(class, rank) ON class=maki\n      ORDER BY scalerank, maki DESC, osm_id\n  \"\"\"\n\n  [[providers.layers]]\n  name = \"road_label\"\n  geometry_type = \"LineString\"\n  geometry_fieldname = \"way\"\n  fields = [ \"len\", \"name\", \"osm_id\", \"ref\", \"reflen\", \"shield\" ]\n  sql = \"\"\"\n  SELECT osm_id, 'default' AS shield, ST_AsBinary(way) AS way, name, name_, ref, reflen, len FROM (\n    SELECT\n        osm_id,\n        way,\n        name,\n        (hstore_to_json(extract_names(tags)))::text name_,\n        CASE\n          WHEN highway IN ('motorway', 'motorway_link', 'driveway') THEN highway\n          WHEN highway IN ('primary', 'primary_link', 'trunk', 'trunk_link', 'secondary', 'secondary_link', 'tertiary', 'tertiary_link') THEN 'main'\n          WHEN highway IN ('residential', 'unclassified', 'living_street') THEN 'street'\n          WHEN highway IN ('pedestrian', 'construction') OR access = 'private' THEN 'street_limited'\n          WHEN railway IN ('rail', 'monorail', 'narrow_gauge', 'subway', 'tram') THEN 'major_rail'\n          WHEN highway IN ('service', 'track') THEN 'service'\n          WHEN highway IN ('path', 'cycleway', 'ski', 'steps', 'bridleway', 'footway') THEN 'path'\n          WHEN railway IN ('funicular', 'light_rail', 'preserved') THEN 'minor_rail'\n          ELSE bail_out('Unexpected road row with osm_id=%s', osm_id::TEXT)\n        END AS class,\n        z_order,\n        CASE\n          WHEN bridge IS NOT NULL AND bridge <> '' AND bridge <> 'no' AND bridge <> '0' THEN 'bridge'\n          WHEN tunnel IS NOT NULL AND tunnel <> '' AND tunnel <> 'no' AND tunnel <> '0' THEN 'tunnel'\n          ELSE 'road'\n        END AS \\\"is\\\",\n        ref,\n        pg_catalog.char_length(ref) AS reflen,\n        ROUND(merc_length(way)) AS len\n      FROM planet_osm_line\n      WHERE\n        (\n            (\n              highway IN ('motorway', 'primary', 'primary_link', 'trunk',\n                  'trunk_link', 'secondary', 'secondary_link'\n                )\n              AND ( (name IS NOT NULL AND name <> '') OR (ref IS NOT NULL AND ref <> ''))\n              AND z(!SCALE_DENOMINATOR!) >= 11\n            )\n            OR\n            ( -- 'main'\n              highway IN ('tertiary', 'tertiary_link', 'residential', 'unclassified',\n                  'living_street', 'pedestrian', 'construction', 'rail', 'monorail',\n                  'narrow_gauge', 'subway', 'tram'\n                )\n              AND (name IS NOT NULL AND name <> '')\n              AND z(!SCALE_DENOMINATOR!) >= 12\n            )\n            OR\n            ( -- 'motorway_link'\n              highway IN ('motorway_link', 'service', 'track', 'driveway', 'path',\n                  'cycleway', 'ski', 'steps', 'bridleway', 'footway', 'funicular',\n                  'light_rail', 'preserved'\n                )\n              AND (name IS NOT NULL AND name <> '')\n              AND z(!SCALE_DENOMINATOR!) >= 14\n            )\n        )\n        --AND linelabel(z(!SCALE_DENOMINATOR!), name, way)\n        AND way && !BBOX!\n      ) data JOIN (\n        VALUES\n          ('motorway', 1000),\n          ('main', 900),\n          ('street', 800),\n          ('motorway_link', 700),\n          ('street_limited', 600),\n          ('driveway', 500),\n          ('major_rail', 400),\n          ('service', 300),\n          ('minor_rail', 200),\n          ('path', 100)\n      ) AS ordertable(feature, prio) ON class=feature\n        -- Sort the same way as the road layer, so that more important streets go\n        -- first and have a higher priority to be rendered\n        ORDER BY z_order + prio +\n          CASE \\\"is\\\"\n            WHEN 'tunnel' THEN -100000\n            WHEN 'road' THEN 0\n            WHEN 'bridge' THEN 100000\n            ELSE bail_out('Unexpected row with is=%s, osm_id=%s', \\\"is\\\", osm_id::TEXT)::INT\n          END\n  \"\"\"\n\n  [[providers.layers]]\n  name = \"place_label\"\n  geometry_type = \"Point\"\n  geometry_fieldname = \"way\"\n  fields = [ \"ldir\", \"localrank\", \"name\", \"osm_id\", \"type\" ]\n  sql = \"\"\"\n  SELECT\n            osm_id,\n            ST_AsBinary(way) AS way,\n            name,\n            name_,\n            \\\"type\\\",\n            ldir,\n            localrank\n  FROM(\n  SELECT\n    DISTINCT ON (labelgrid(way, 16, !PIXEL_WIDTH!))\n      osm_id,\n      way,\n      get_label_name(name) AS name,\n      (hstore_to_json(extract_names(tags)))::text name_,\n      place AS \\\"type\\\",\n      'SE' AS ldir,\n      1 AS localrank, -- TODO:\n      CASE\n        WHEN place = 'city' THEN 5000000000 + to_int(population)\n        WHEN place = 'town' THEN 3000000000 + to_int(population)\n        WHEN place = 'village' THEN 1000000000 + to_int(population)\n        ELSE to_int(population)\n      END AS sort_order\n    FROM planet_osm_point\n    WHERE\n      (\n        (\n          place = 'city'\n          AND z(!SCALE_DENOMINATOR!) >= 4\n          -- On zoom 4, display cities with 1M+ population. Decrease by 250k every level\n          AND (to_int(population) + z(!SCALE_DENOMINATOR!) * 250000 - 2000000) > 0\n        )\n        OR\n        (\n          place = 'town'\n          AND z(!SCALE_DENOMINATOR!) >= 9\n        )\n        OR\n        (\n          place = 'village'\n          AND z(!SCALE_DENOMINATOR!) >= 11\n        )\n        OR\n        (\n          place IN ('hamlet', 'suburb','neighbourhood')\n          AND z(!SCALE_DENOMINATOR!) >= 13\n        )\n      )\n      AND (name IS NOT NULL AND name <> '')\n      AND way && !BBOX! --ST_Expand(!BBOX!, 64*!PIXEL_WIDTH!)\n    ORDER BY\n      labelgrid(way, 16, !PIXEL_WIDTH!),\n      sort_order DESC,\n      pg_catalog.length(name) DESC,\n      name\n  ) data ORDER BY sort_order DESC\n  \"\"\"\n\n  [[providers.layers]]\n  name = \"building\"\n  geometry_type = \"Polygon\"\n  geometry_fieldname = \"way\"\n  fields = [ \"osm_id\" ]\n  sql = \"\"\"\n  SELECT osm_id, ST_AsBinary(way) AS way\n  FROM planet_osm_polygon\n  WHERE\n    z(!SCALE_DENOMINATOR!) >= 14\n    AND (building IS NOT NULL AND building <> '')\n    AND building <> 'no'\n    AND way && !BBOX!\n  \"\"\"\n\n[[maps]]\nname = \"osm\"\nattribution = 'Map data © <a href=\"http://openstreetmap.org/copyright\">OpenStreetMap contributors</a>'\ncenter = [ -122.4144, 37.7907, 14.0 ]\ntile_buffer = 8\n\n  [[maps.layers]]\n  provider_layer = \"osm.landuse\"\n  min_zoom = 0\n  max_zoom = 14\n\n  [[maps.layers]]\n  provider_layer = \"osm.waterway\"\n  min_zoom = 0\n  max_zoom = 14\n\n  [[maps.layers]]\n  provider_layer = \"osm.water\"\n  min_zoom = 0\n  max_zoom = 14\n\n  [[maps.layers]]\n  provider_layer = \"osm.aeroway\"\n  min_zoom = 0\n  max_zoom = 14\n\n  [[maps.layers]]\n  provider_layer = \"osm.road\"\n  min_zoom = 0\n  max_zoom = 14\n\n  [[maps.layers]]\n  provider_layer = \"osm.admin\"\n  min_zoom = 0\n  max_zoom = 14\n\n  [[maps.layers]]\n  provider_layer = \"osm.country_label\"\n  min_zoom = 0\n  max_zoom = 14\n\n  [[maps.layers]]\n  provider_layer = \"osm.poi_label\"\n  min_zoom = 0\n  max_zoom = 14\n\n  [[maps.layers]]\n  provider_layer = \"osm.road_label\"\n  min_zoom = 0\n  max_zoom = 14\n\n  [[maps.layers]]\n  provider_layer = \"osm.place_label\"\n  min_zoom = 0\n  max_zoom = 14\n\n  [[maps.layers]]\n  provider_layer = \"osm.building\"\n  min_zoom = 0\n  max_zoom = 14"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "maps-vector-server-release-name",
      "labels": {
        "app": "maps-vector-server",
        "chart": "maps-vector-server-0.0.1",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "NodePort",
      "selector": {
        "app": "maps-vector-server",
        "release": "release-name"
      },
      "ports": [
        {
          "name": "http",
          "targetPort": 8080,
          "port": 8080
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "maps-vector-server-release-name",
      "labels": {
        "app": "maps-vector-server",
        "chart": "maps-vector-server-0.0.1",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "maps-vector-server",
          "release": "release-name"
        }
      },
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "maps-vector-server",
            "release": "release-name"
          },
          "annotations": {
            "checksum/secrets": "eca49d99e634ec7a3bd7536b44a7b4bd1ac107468db7440505c16b69e53e944c",
            "prometheus.io/port": "9102",
            "prometheus.io/scrape": "true"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "maps-vector-server-release-name",
              "image": "docker-registry.wikimedia.org/wikimedia/operations-software-tegola:latest",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "serve",
                "--config",
                "/etc/tegola/config.toml"
              ],
              "ports": [
                {
                  "containerPort": 8080
                }
              ],
              "livenessProbe": {
                "tcpSocket": {
                  "port": 8080
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/capabilities",
                  "port": 8080
                }
              },
              "env": [
                {
                  "name": "SERVICE_IDENTIFIER",
                  "value": "maps-vector-server-release-name"
                },
                {
                  "name": "TEGOLA_POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "maps-vector-server-release-name-secret-config",
                      "key": "TEGOLA_POSTGRES_PASSWORD"
                    }
                  }
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "1m",
                  "memory": "200Mi"
                },
                "limits": {
                  "cpu": 1,
                  "memory": "400Mi"
                }
              },
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/etc/tegola"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config-volume",
              "configMap": {
                "name": "config-release-name"
              }
            }
          ]
        }
      }
    }
  }
]