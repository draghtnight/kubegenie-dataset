[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-minio-update-prometheus-secret",
      "labels": {
        "app": "minio-update-prometheus-secret",
        "chart": "minio-5.0.26",
        "release": "release-name",
        "heritage": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-minio",
      "namespace": "tYnEVXW"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-5.0.26",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "accesskey": "bWF0dGVybW9zdGFkbWlu",
      "secretkey": "bWF0dGVybW9zdGFkbWlu"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-mysqlha",
      "labels": {
        "app": "release-name-mysqlha",
        "chart": "mysqlha-2.0.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "mysql-root-password": "cm9vdHBhc3N3ZA==",
      "mysql-password": "cGFzc3dk",
      "mysql-replication-password": "eGRhOVlNeUMxbVNI"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-mattermost-enterprise-edition-mattermost-dbsecret",
      "labels": {
        "app.kubernetes.io/name": "mattermost-enterprise-edition",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "mattermost-enterprise-edition-2.6.3"
      }
    },
    "type": "Opaque",
    "data": {
      "mattermost.dbsecret": "bXlzcWw6Ly9tbXVzZXI6cGFzc3dkQHRjcChyZWxlYXNlLW5hbWUtbXlzcWxoYS0wLnJlbGVhc2UtbmFtZS1teXNxbGhhOjMzMDYpL21hdHRlcm1vc3Q/Y2hhcnNldD11dGY4bWI0LHV0ZjgmcmVhZFRpbWVvdXQ9MzBzJndyaXRlVGltZW91dD0zMHM="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-mattermost-enterprise-edition-mattermost-license",
      "labels": {
        "app.kubernetes.io/name": "mattermost-enterprise-edition",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "mattermost-enterprise-edition-2.6.3"
      }
    },
    "type": "Opaque",
    "data": {
      "mattermost.mattermost-license": "VEhJUyBTVFJJTkcgU0hPVUxEIEJFIFJFUExBQ0VEIFdJVEggVEhFIENPTlRFTlRTIE9GIFlPVVIgTElDRU5TRSBGSUxF"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-5.0.26",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "initialize": "#!/bin/sh\nset -e ; # Have script exit in the event of a failed command.\nMC_CONFIG_DIR=\"/etc/minio/mc/\"\nMC=\"/usr/bin/mc --config-dir ${MC_CONFIG_DIR}\"\n\n# connectToMinio\n# Use a check-sleep-check loop to wait for Minio service to be available\nconnectToMinio() {\n  SCHEME=$1\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n\n# checkBucketExists ($bucket)\n# Check if the bucket exists, by using the exit code of `mc ls`\ncheckBucketExists() {\n  BUCKET=$1\n  CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)\n  return $?\n}\n\n# createBucket ($bucket, $policy, $purge)\n# Ensure bucket exists, purging if asked to\ncreateBucket() {\n  BUCKET=$1\n  POLICY=$2\n  PURGE=$3\n\n  # Purge the bucket, if set & exists\n  # Since PURGE is user input, check explicitly for `true`\n  if [ $PURGE = true ]; then\n    if checkBucketExists $BUCKET ; then\n      echo \"Purging bucket '$BUCKET'.\"\n      set +e ; # don't exit if this fails\n      ${MC} rm -r --force myminio/$BUCKET\n      set -e ; # reset `e` as active\n    else\n      echo \"Bucket '$BUCKET' does not exist, skipping purge.\"\n    fi\n  fi\n\n  # Create the bucket if it does not exist\n  if ! checkBucketExists $BUCKET ; then\n    echo \"Creating bucket '$BUCKET'\"\n    ${MC} mb myminio/$BUCKET\n  else\n    echo \"Bucket '$BUCKET' already exists.\"\n  fi\n\n  # At this point, the bucket should exist, skip checking for existence\n  # Set policy on the bucket\n  echo \"Setting policy of bucket '$BUCKET' to '$POLICY'.\"\n  ${MC} policy set $POLICY myminio/$BUCKET\n}\n\n# Try connecting to Minio instance\nscheme=http\nconnectToMinio $scheme\n# Create the bucket\ncreateBucket bucket none false"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-mysqlha",
      "labels": {
        "app": "release-name-mysqlha",
        "chart": "mysqlha-2.0.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "master.cnf": "[mysqld]\nlog-bin\nskip_name_resolve\nmax_connections = 300\n",
      "slave.cnf": "[mysqld]\nsuper-read-only\nskip_name_resolve\nslave_parallel_workers = 100\nslave_parallel_type = LOGICAL_CLOCK\nmax_connections = 300\n",
      "server-id.cnf": "[mysqld]\nserver-id=@@SERVER_ID@@\n",
      "create-replication-user.sh": "#!/bin/bash\nset -e\n\nmysql -h 127.0.0.1 --verbose -e \"CREATE USER IF NOT EXISTS '${MYSQL_REPLICATION_USER}' IDENTIFIED BY '${MYSQL_REPLICATION_PASSWORD}';\"\nmysql -h 127.0.0.1 --verbose -e \"GRANT PROCESS, RELOAD, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '${MYSQL_REPLICATION_USER}';\"\nmysql -h 127.0.0.1 --verbose -e \"FLUSH PRIVILEGES;\""
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-mattermost-enterprise-edition-init-config-json",
      "labels": {
        "app.kubernetes.io/name": "mattermost-enterprise-edition",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "mattermost-enterprise-edition-2.6.3"
      }
    },
    "data": {
      "config.json": "{\n    \"ServiceSettings\": {\n        \"SiteURL\": \"http://mattermost.example.com\",\n        \"LicenseFileLocation\": \"/mattermost/mattermost.mattermost-license\",\n        \"ListenAddress\": \":8065\",\n        \"ConnectionSecurity\": \"\",\n        \"TLSCertFile\": \"\",\n        \"TLSKeyFile\": \"\",\n        \"UseLetsEncrypt\": false,\n        \"LetsEncryptCertificateCacheFile\": \"./config/letsencrypt.cache\",\n        \"Forward80To443\": false,\n        \"ReadTimeout\": 300,\n        \"WriteTimeout\": 300,\n        \"MaximumLoginAttempts\": 10,\n        \"GoroutineHealthThreshold\": -1,\n        \"GoogleDeveloperKey\": \"\",\n        \"EnableOAuthServiceProvider\": false,\n        \"EnableIncomingWebhooks\": true,\n        \"EnableOutgoingWebhooks\": true,\n        \"EnableCommands\": true,\n        \"EnableOnlyAdminIntegrations\": false,\n        \"EnablePostUsernameOverride\": false,\n        \"EnablePostIconOverride\": false,\n        \"EnableLinkPreviews\": true,\n        \"EnableTesting\": false,\n        \"EnableDeveloper\": false,\n        \"EnableSecurityFixAlert\": true,\n        \"EnableInsecureOutgoingConnections\": false,\n        \"EnableMultifactorAuthentication\": false,\n        \"EnforceMultifactorAuthentication\": false,\n        \"AllowCorsFrom\": \"\",\n        \"SessionLengthWebInDays\": 30,\n        \"SessionLengthMobileInDays\": 30,\n        \"SessionLengthSSOInDays\": 30,\n        \"SessionCacheInMinutes\": 10,\n        \"WebsocketSecurePort\": 443,\n        \"WebsocketPort\": 80,\n        \"WebserverMode\": \"gzip\",\n        \"EnableCustomEmoji\": true,\n        \"RestrictCustomEmojiCreation\": \"all\",\n        \"RestrictPostDelete\": \"all\",\n        \"AllowEditPost\": \"always\",\n        \"PostEditTimeLimit\": 300,\n        \"TimeBetweenUserTypingUpdatesMilliseconds\": 5000,\n        \"EnablePostSearch\": true,\n        \"EnableUserTypingMessages\": true,\n        \"EnableUserStatuses\": true,\n        \"ClusterLogTimeoutMilliseconds\": 2000\n    },\n    \"ElasticsearchSettings\": {\n        \"ConnectionUrl\": \"\",\n        \"Username\": \"\",\n        \"Password\": \"\",\n        \"EnableIndexing\": false,\n        \"EnableSearching\": false,\n        \"Sniff\": true\n    },\n    \"TeamSettings\": {\n        \"SiteName\": \"Mattermost\",\n        \"MaxUsersPerTeam\": 50000,\n        \"EnableTeamCreation\": true,\n        \"EnableUserCreation\": true,\n        \"EnableOpenServer\": true,\n        \"RestrictCreationToDomains\": \"\",\n        \"EnableCustomBrand\": false,\n        \"CustomBrandText\": \"\",\n        \"CustomDescriptionText\": \"\",\n        \"RestrictDirectMessage\": \"any\",\n        \"RestrictTeamInvite\": \"all\",\n        \"RestrictPublicChannelManagement\": \"all\",\n        \"RestrictPrivateChannelManagement\": \"all\",\n        \"RestrictPublicChannelCreation\": \"all\",\n        \"RestrictPrivateChannelCreation\": \"all\",\n        \"RestrictPublicChannelDeletion\": \"all\",\n        \"RestrictPrivateChannelDeletion\": \"all\",\n        \"RestrictPrivateChannelManageMembers\": \"all\",\n        \"UserStatusAwayTimeout\": 300,\n        \"MaxChannelsPerTeam\": 50000,\n        \"MaxNotificationsPerChannel\": 1000\n    },\n    \"SqlSettings\": {\n        \"DriverName\": \"mysql\",\n        \"DataSource\": \"mmuser:passwd@tcp(release-name-mysqlha-0.release-name-mysqlha:3306)/mattermost?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s\",\n        \"DataSourceReplicas\": [\"mmuser:passwd@tcp(release-name-mysqlha-readonly:3306)/mattermost?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s\"],\n        \"DataSourceSearchReplicas\": [],\n        \"MaxIdleConns\": 20,\n        \"MaxOpenConns\": 35,\n        \"Trace\": false,\n        \"AtRestEncryptKey\": \"0YmAohCRJmO4RN7xLOnK8Vq9bM9sKMuG\",\n        \"QueryTimeout\": 30\n    },\n    \"LogSettings\": {\n        \"EnableConsole\": true,\n        \"ConsoleLevel\": \"INFO\",\n        \"EnableFile\": true,\n        \"FileLevel\": \"INFO\",\n        \"FileFormat\": \"\",\n        \"FileLocation\": \"\",\n        \"EnableWebhookDebugging\": true,\n        \"EnableDiagnostics\": true\n    },\n    \"PasswordSettings\": {\n        \"MinimumLength\": 5,\n        \"Lowercase\": false,\n        \"Number\": false,\n        \"Uppercase\": false,\n        \"Symbol\": false\n    },\n    \"FileSettings\": {\n        \"EnableFileAttachments\": true,\n        \"MaxFileSize\": 52428800,\n        \"DriverName\": \"amazons3\",\n        \"Directory\": \"./data/\",\n        \"EnablePublicLink\": false,\n        \"PublicLinkSalt\": \"nLD9vyehfuOpXoXaeKXNM8fUvGNoztUk\",\n        \"ThumbnailWidth\": 120,\n        \"ThumbnailHeight\": 100,\n        \"PreviewWidth\": 1024,\n        \"PreviewHeight\": 0,\n        \"ProfileWidth\": 128,\n        \"ProfileHeight\": 128,\n        \"InitialFont\": \"luximbi.ttf\",\n        \"AmazonS3AccessKeyId\": \"mattermostadmin\",\n        \"AmazonS3SecretAccessKey\": \"mattermostadmin\",\n        \"AmazonS3Bucket\": \"bucket\",\n        \"AmazonS3Region\": \"\",\n        \"AmazonS3Endpoint\": \"release-name-minio:9000\",\n        \"AmazonS3SSL\": false,\n        \"AmazonS3SignV2\": false\n    },\n    \"EmailSettings\": {\n        \"EnableSignUpWithEmail\": true,\n        \"EnableSignInWithEmail\": true,\n        \"EnableSignInWithUsername\": true,\n        \"SendEmailNotifications\": false,\n        \"RequireEmailVerification\": false,\n        \"FeedbackName\": \"\",\n        \"FeedbackEmail\": \"test@example.com\",\n        \"FeedbackOrganization\": \"\",\n        \"SMTPUsername\": \"\",\n        \"SMTPPassword\": \"\",\n        \"SMTPServer\": \"\",\n        \"SMTPPort\": \"\",\n        \"ConnectionSecurity\": \"\",\n        \"InviteSalt\": \"e85cUzRrUerriZf923XkwWndgvYomqzY\",\n        \"SendPushNotifications\": true,\n        \"PushNotificationServer\": \"https://push.mattermost.com\",\n        \"PushNotificationContents\": \"generic\",\n        \"EnableEmailBatching\": false,\n        \"EmailBatchingBufferSize\": 256,\n        \"EmailBatchingInterval\": 30,\n        \"SkipServerCertificateVerification\": false\n    },\n    \"RateLimitSettings\": {\n        \"Enable\": false,\n        \"PerSec\": 10,\n        \"MaxBurst\": 100,\n        \"MemoryStoreSize\": 10000,\n        \"VaryByRemoteAddr\": true,\n        \"VaryByHeader\": \"\"\n    },\n    \"PrivacySettings\": {\n        \"ShowEmailAddress\": true,\n        \"ShowFullName\": true\n    },\n    \"SupportSettings\": {\n        \"TermsOfServiceLink\": \"https://about.mattermost.com/default-terms/\",\n        \"PrivacyPolicyLink\": \"https://about.mattermost.com/default-privacy-policy/\",\n        \"AboutLink\": \"https://about.mattermost.com/default-about/\",\n        \"HelpLink\": \"https://about.mattermost.com/default-help/\",\n        \"ReportAProblemLink\": \"https://about.mattermost.com/default-report-a-problem/\",\n        \"SupportEmail\": \"feedback@mattermost.com\"\n    },\n    \"AnnouncementSettings\": {\n        \"EnableBanner\": false,\n        \"BannerText\": \"\",\n        \"BannerColor\": \"#f2a93b\",\n        \"BannerTextColor\": \"#333333\",\n        \"AllowBannerDismissal\": true\n    },\n    \"GitLabSettings\": {\n        \"Enable\": false,\n        \"Secret\": \"\",\n        \"Id\": \"\",\n        \"Scope\": \"\",\n        \"AuthEndpoint\": \"\",\n        \"TokenEndpoint\": \"\",\n        \"UserApiEndpoint\": \"\"\n    },\n    \"GoogleSettings\": {\n        \"Enable\": false,\n        \"Secret\": \"\",\n        \"Id\": \"\",\n        \"Scope\": \"profile email\",\n        \"AuthEndpoint\": \"https://accounts.google.com/o/oauth2/v2/auth\",\n        \"TokenEndpoint\": \"https://www.googleapis.com/oauth2/v4/token\",\n        \"UserApiEndpoint\": \"https://www.googleapis.com/plus/v1/people/me\"\n    },\n    \"Office365Settings\": {\n        \"Enable\": false,\n        \"Secret\": \"\",\n        \"Id\": \"\",\n        \"Scope\": \"User.Read\",\n        \"AuthEndpoint\": \"https://login.microsoftonline.com/common/oauth2/v2.0/authorize\",\n        \"TokenEndpoint\": \"https://login.microsoftonline.com/common/oauth2/v2.0/token\",\n        \"UserApiEndpoint\": \"https://graph.microsoft.com/v1.0/me\"\n    },\n    \"LdapSettings\": {\n        \"Enable\": false,\n        \"LdapServer\": \"\",\n        \"LdapPort\": 389,\n        \"ConnectionSecurity\": \"\",\n        \"BaseDN\": \"\",\n        \"BindUsername\": \"\",\n        \"BindPassword\": \"\",\n        \"UserFilter\": \"\",\n        \"FirstNameAttribute\": \"\",\n        \"LastNameAttribute\": \"\",\n        \"EmailAttribute\": \"\",\n        \"UsernameAttribute\": \"\",\n        \"NicknameAttribute\": \"\",\n        \"IdAttribute\": \"\",\n        \"PositionAttribute\": \"\",\n        \"SyncIntervalMinutes\": 60,\n        \"SkipCertificateVerification\": false,\n        \"QueryTimeout\": 60,\n        \"MaxPageSize\": 0,\n        \"LoginFieldName\": \"\"\n    },\n    \"ComplianceSettings\": {\n        \"Enable\": false,\n        \"Directory\": \"./data/\",\n        \"EnableDaily\": false\n    },\n    \"LocalizationSettings\": {\n        \"DefaultServerLocale\": \"en\",\n        \"DefaultClientLocale\": \"en\",\n        \"AvailableLocales\": \"\"\n    },\n    \"SamlSettings\": {\n        \"Enable\": false,\n        \"Verify\": true,\n        \"Encrypt\": true,\n        \"IdpUrl\": \"\",\n        \"IdpDescriptorUrl\": \"\",\n        \"AssertionConsumerServiceURL\": \"\",\n        \"IdpCertificateFile\": \"\",\n        \"PublicCertificateFile\": \"\",\n        \"PrivateKeyFile\": \"\",\n        \"FirstNameAttribute\": \"\",\n        \"LastNameAttribute\": \"\",\n        \"EmailAttribute\": \"\",\n        \"UsernameAttribute\": \"\",\n        \"NicknameAttribute\": \"\",\n        \"LocaleAttribute\": \"\",\n        \"PositionAttribute\": \"\",\n        \"LoginButtonText\": \"With SAML\"\n    },\n    \"NativeAppSettings\": {\n        \"AppDownloadLink\": \"https://about.mattermost.com/downloads/\",\n        \"AndroidAppDownloadLink\": \"https://about.mattermost.com/mattermost-android-app/\",\n        \"IosAppDownloadLink\": \"https://about.mattermost.com/mattermost-ios-app/\"\n    },\n    \"ClusterSettings\": {\n        \"Enable\": true,\n        \"ClusterName\": \"release-name-cluster\",\n        \"OverrideHostname\": \"\",\n        \"UseIpAddress\": true,\n        \"UseExperimentalGossip\": true,\n        \"ReadOnlyConfig\": false,\n        \"GossipPort\": 8074,\n        \"StreamingPort\": 8075\n    },\n    \"MetricsSettings\": {\n        \"Enable\": true,\n        \"BlockProfileRate\": 0,\n        \"ListenAddress\": \":8067\"\n    },\n    \"AnalyticsSettings\": {\n        \"MaxUsersForStatistics\": 2500\n    },\n    \"WebrtcSettings\": {\n        \"Enable\": false,\n        \"GatewayWebsocketUrl\": \"\",\n        \"GatewayAdminUrl\": \"\",\n        \"GatewayAdminSecret\": \"\",\n        \"StunURI\": \"\",\n        \"TurnURI\": \"\",\n        \"TurnUsername\": \"\",\n        \"TurnSharedKey\": \"\"\n    },\n    \"PluginSettings\": {\n        \"Enable\": true,\n        \"EnableUploads\": true,\n        \"Directory\": \"./plugins\",\n        \"ClientDirectory\": \"./client/plugins\",\n        \"Plugins\": {},\n        \"PluginStates\": {}\n    },\n    \"DataRetentionSettings\": {\n        \"Enable\": false\n    },\n    \"JobSettings\": {\n        \"RunJobs\": false,\n        \"RunScheduler\": false\n    }\n}\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-mattermost-enterprise-edition-app-tests",
      "labels": {
        "app.kubernetes.io/name": "mattermost-enterprise-edition",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "mattermost-enterprise-edition-2.6.3"
      }
    },
    "data": {
      "run.sh": "#!/usr/bin/env bats\n@test \"Testing Mattermost is accessible\" {\n  url=\"http://release-name-mattermost-enterprise-edition.default.svc.cluster.local:8065\"\n  code=$(wget --server-response --spider --timeout 10 --tries 1 ${url} 2>&1 | awk '/^  HTTP/{print $2}')\n  [ \"$code\" == \"200\" ]\n}"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-5.0.26",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "10Gi"
        }
      }
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-minio-update-prometheus-secret",
      "labels": {
        "app": "minio-update-prometheus-secret",
        "chart": "minio-5.0.26",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "get",
          "create",
          "update",
          "patch"
        ],
        "resourceNames": [
          "release-name-minio-prometheus"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          "monitoring.coreos.com"
        ],
        "resources": [
          "servicemonitors"
        ],
        "verbs": [
          "get"
        ],
        "resourceNames": [
          "release-name-minio"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-minio-update-prometheus-secret",
      "labels": {
        "app": "minio-update-prometheus-secret",
        "chart": "minio-5.0.26",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-minio-update-prometheus-secret"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-minio-update-prometheus-secret",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-5.0.26",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http",
          "port": 9000,
          "protocol": "TCP",
          "targetPort": 9000
        }
      ],
      "selector": {
        "app": "minio",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-mysqlha",
      "labels": {
        "app": "release-name-mysqlha",
        "chart": "mysqlha-2.0.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "release-name-mysqlha",
          "port": 3306
        }
      ],
      "clusterIP": "None",
      "selector": {
        "app": "release-name-mysqlha"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-mysqlha-readonly",
      "labels": {
        "app": "release-name-mysqlha",
        "chart": "mysqlha-2.0.0",
        "release": "release-name",
        "heritage": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "ports": [
        {
          "name": "release-name-mysqlha",
          "port": 3306
        }
      ],
      "selector": {
        "app": "release-name-mysqlha"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-mattermost-enterprise-edition",
      "labels": {
        "app.kubernetes.io/name": "mattermost-enterprise-edition",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "mattermost-enterprise-edition-2.6.3"
      }
    },
    "spec": {
      "selector": {
        "app.kubernetes.io/name": "mattermost-enterprise-edition",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "server"
      },
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8065,
          "targetPort": 8065,
          "protocol": "TCP",
          "name": "mattermost-app"
        },
        {
          "port": 8067,
          "targetPort": 8067,
          "protocol": "TCP",
          "name": "mattermost-app-metrics"
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-5.0.26",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "strategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "maxSurge": "100%",
          "maxUnavailable": 0
        }
      },
      "selector": {
        "matchLabels": {
          "app": "minio",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-minio",
          "labels": {
            "app": "minio",
            "release": "release-name"
          },
          "annotations": {
            "rollme": "UGpNT",
            "checksum/secrets": "3624b2eb3991bf6d448975901cf03a6356c6846349ed20819c1dd5bac6cf5f94",
            "checksum/config": "562c93aa892b9b623fc1f5b6c58fa16ab7ecc92b9d00ba2249e7ce472a763a9d"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-minio",
          "securityContext": {
            "runAsUser": 1000,
            "runAsGroup": 1000,
            "fsGroup": 1000
          },
          "containers": [
            {
              "name": "minio",
              "image": "minio/minio:RELEASE.2019-05-14T23-57-45Z",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-ce",
                "/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export"
              ],
              "volumeMounts": [
                {
                  "name": "export",
                  "mountPath": "/export"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9000
                }
              ],
              "env": [
                {
                  "name": "MINIO_ACCESS_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-minio",
                      "key": "accesskey"
                    }
                  }
                },
                {
                  "name": "MINIO_SECRET_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-minio",
                      "key": "secretkey"
                    }
                  }
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/minio/health/live",
                  "port": "http",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 30,
                "timeoutSeconds": 1,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/minio/health/ready",
                  "port": "http"
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 15,
                "timeoutSeconds": 1,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "export",
              "persistentVolumeClaim": {
                "claimName": "release-name-minio"
              }
            },
            {
              "name": "minio-user",
              "secret": {
                "secretName": "release-name-minio"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-mattermost-enterprise-edition",
      "labels": {
        "app.kubernetes.io/name": "mattermost-enterprise-edition",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "server",
        "helm.sh/chart": "mattermost-enterprise-edition-2.6.3"
      }
    },
    "spec": {
      "replicas": 2,
      "strategy": {
        "rollingUpdate": {
          "maxSurge": 0,
          "maxUnavailable": 1
        },
        "type": "RollingUpdate"
      },
      "revisionHistoryLimit": 2,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "mattermost-enterprise-edition",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/managed-by": "Helm",
          "app.kubernetes.io/component": "server"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "mattermost-enterprise-edition",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "server",
            "helm.sh/chart": "mattermost-enterprise-edition-2.6.3"
          },
          "annotations": {
            "prometheus.io/scrape": "true",
            "prometheus.io/port": "8067",
            "prometheus.io/path": "/metrics"
          }
        },
        "spec": {
          "initContainers": [
            {
              "name": "init-mysql",
              "image": "appropriate/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sh",
                "-c",
                "until curl --max-time 5 http://release-name-mysqlha-readonly:3306; do echo waiting for release-name-mysqlha; sleep 5; done;"
              ]
            }
          ],
          "containers": [
            {
              "name": "mattermost-enterprise-edition",
              "image": "mattermost/mattermost-enterprise-edition:6.7.0@sha256:97347a8090b4db84d32e05546904fa96bd3ca0117bb709cf3d8f140e3709b9eb",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "containerPort": 8065,
                  "name": "api"
                },
                {
                  "containerPort": 8067,
                  "name": "metrics"
                },
                {
                  "containerPort": 8075,
                  "name": "cluster"
                },
                {
                  "containerPort": 8074,
                  "name": "gossip"
                }
              ],
              "env": [
                {
                  "name": "MM_CONFIG",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mattermost-enterprise-edition-mattermost-dbsecret",
                      "key": "mattermost.dbsecret"
                    }
                  }
                },
                {
                  "name": "MM_SERVICESETTINGS_SITEURL",
                  "value": "http://mattermost.example.com"
                },
                {
                  "name": "MM_SERVICESETTINGS_LISTENADDRESS",
                  "value": ":8065"
                },
                {
                  "name": "MM_SERVICESETTINGS_ENABLELINKPREVIEWS",
                  "value": "true"
                },
                {
                  "name": "MM_SERVICESETTINGS_ENABLECUSTOMEMOJI",
                  "value": "true"
                },
                {
                  "name": "MM_FILESETTINGS_DRIVERNAME",
                  "value": "amazons3"
                },
                {
                  "name": "MM_FILESETTINGS_AMAZONS3ACCESSKEYID",
                  "value": "mattermostadmin"
                },
                {
                  "name": "MM_FILESETTINGS_AMAZONS3SECRETACCESSKEY",
                  "value": "mattermostadmin"
                },
                {
                  "name": "MM_FILESETTINGS_AMAZONS3BUCKET",
                  "value": "bucket"
                },
                {
                  "name": "MM_FILESETTINGS_AMAZONS3ENDPOINT",
                  "value": "release-name-minio:9000"
                },
                {
                  "name": "MM_FILESETTINGS_AMAZONS3SSL",
                  "value": "false"
                },
                {
                  "name": "MM_JOBSETTINGS_RUNJOBS",
                  "value": "false"
                },
                {
                  "name": "MM_JOBSETTINGS_RUNSCHEDULER",
                  "value": "false"
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 90,
                "timeoutSeconds": 5,
                "periodSeconds": 15,
                "httpGet": {
                  "path": "/api/v4/system/ping",
                  "port": 8065
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 15,
                "timeoutSeconds": 5,
                "periodSeconds": 15,
                "httpGet": {
                  "path": "/api/v4/system/ping",
                  "port": 8065
                }
              },
              "volumeMounts": [
                {
                  "mountPath": "/mattermost/mattermost.mattermost-license",
                  "name": "mattermost-license",
                  "subPath": "mattermost.mattermost-license"
                },
                {
                  "mountPath": "/mattermost/plugins/",
                  "name": "mattermost-plugins"
                },
                {
                  "mountPath": "/mattermost/client/plugins/",
                  "name": "mattermost-plugins-client"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "mattermost-plugins",
              "emptyDir": {}
            },
            {
              "name": "mattermost-plugins-client",
              "emptyDir": {}
            },
            {
              "name": "mattermost-config",
              "emptyDir": {}
            },
            {
              "name": "mattermost-license",
              "secret": {
                "secretName": "release-name-mattermost-enterprise-edition-mattermost-license"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-mattermost-enterprise-edition-jobserver",
      "labels": {
        "app.kubernetes.io/name": "mattermost-enterprise-edition",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "jobserver",
        "helm.sh/chart": "mattermost-enterprise-edition-2.6.3"
      }
    },
    "spec": {
      "replicas": 1,
      "strategy": {
        "type": "Recreate"
      },
      "revisionHistoryLimit": 2,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "mattermost-enterprise-edition",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/managed-by": "Helm",
          "app.kubernetes.io/component": "jobserver"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "mattermost-enterprise-edition",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "jobserver",
            "helm.sh/chart": "mattermost-enterprise-edition-2.6.3"
          },
          "annotations": null
        },
        "spec": {
          "initContainers": [
            {
              "name": "init-mattermost-app",
              "image": "appropriate/curl:latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sh",
                "-c",
                "until curl --max-time 5 http://release-name-mattermost-enterprise-edition.default:8065/api/v4/system/ping ; do echo waiting for Mattermost App come up; sleep 5; done; echo init-mattermost-app finished"
              ]
            }
          ],
          "containers": [
            {
              "name": "mattermost-enterprise-edition-jobserver",
              "image": "mattermost/mattermost-enterprise-edition:6.7.0@sha256:97347a8090b4db84d32e05546904fa96bd3ca0117bb709cf3d8f140e3709b9eb",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "mattermost",
                "jobserver"
              ],
              "env": [
                {
                  "name": "MM_CONFIG",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mattermost-enterprise-edition-mattermost-dbsecret",
                      "key": "mattermost.dbsecret"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "mountPath": "/mattermost/mattermost.mattermost-license",
                  "name": "mattermost-license",
                  "subPath": "mattermost.mattermost-license"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "mattermost-license",
              "secret": {
                "secretName": "release-name-mattermost-enterprise-edition-mattermost-license"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-mysqlha",
      "labels": {
        "app": "release-name-mysqlha",
        "chart": "mysqlha-2.0.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "release-name-mysqlha"
        }
      },
      "serviceName": "release-name-mysqlha",
      "replicas": 2,
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-mysqlha",
            "release": "release-name"
          }
        },
        "spec": {
          "initContainers": [
            {
              "name": "clone-mysql",
              "image": "gcr.io/google-samples/xtrabackup:1.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "bash",
                "-c",
                "set -ex\n# Skip the clone on master (ordinal index 0).\n[[ `hostname` =~ -([0-9]+)$ ]] || exit 1\nordinal=${BASH_REMATCH[1]}\n[[ $ordinal -eq 0 ]] && exit 0\n\n# If data already exists, delete and proceed to clone.\n[[ -d /var/lib/mysql/mysql ]] && rm -fr /var/lib/mysql/*\n\n# Clone data from previous peer.\nncat --recv-only release-name-mysqlha-$(($ordinal-1)).release-name-mysqlha 3307 | xbstream -x -C /var/lib/mysql\n# Prepare the backup.\nxtrabackup --prepare --user=${MYSQL_REPLICATION_USER} --password=${MYSQL_REPLICATION_PASSWORD} --target-dir=/var/lib/mysql\n"
              ],
              "env": [
                {
                  "name": "MYSQL_REPLICATION_USER",
                  "value": "repl"
                },
                {
                  "name": "MYSQL_REPLICATION_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mysqlha",
                      "key": "mysql-replication-password"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/var/lib/mysql",
                  "subPath": "mysql"
                },
                {
                  "name": "conf",
                  "mountPath": "/etc/mysql/conf.d"
                }
              ]
            },
            {
              "name": "init-mysql",
              "image": "mysql:5.7.29",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "set -ex\n# Generate mysql server-id from pod ordinal index.\n[[ `hostname` =~ -([0-9]+)$ ]] || exit 1\nordinal=${BASH_REMATCH[1]}\n# Copy server-id.conf adding offset to avoid reserved server-id=0 value.\ncat /mnt/config-map/server-id.cnf | sed s/@@SERVER_ID@@/$((100 + $ordinal))/g > /mnt/conf.d/server-id.cnf\n# Copy appropriate conf.d files from config-map to config mount.\nif [[ $ordinal -eq 0 ]]; then\n  cp -f /mnt/config-map/master.cnf /mnt/conf.d/\nelse\n  cp -f /mnt/config-map/slave.cnf /mnt/conf.d/\nfi\n# Copy replication user script\nif [[ $ordinal -eq 0 ]]; then\n  cp -f /mnt/config-map/create-replication-user.sh /mnt/scripts/create-replication-user.sh\n  chmod 700 /mnt/scripts/create-replication-user.sh\nfi\n"
              ],
              "volumeMounts": [
                {
                  "name": "conf",
                  "mountPath": "/mnt/conf.d"
                },
                {
                  "name": "config-map",
                  "mountPath": "/mnt/config-map"
                },
                {
                  "name": "scripts",
                  "mountPath": "/mnt/scripts"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "mysql",
              "image": "mysql:5.7.29",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "MYSQL_DATABASE",
                  "value": "mattermost"
                },
                {
                  "name": "MYSQL_ROOT_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mysqlha",
                      "key": "mysql-root-password"
                    }
                  }
                },
                {
                  "name": "MYSQL_REPLICATION_USER",
                  "value": "repl"
                },
                {
                  "name": "MYSQL_REPLICATION_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mysqlha",
                      "key": "mysql-replication-password"
                    }
                  }
                },
                {
                  "name": "MYSQL_USER",
                  "value": "mmuser"
                },
                {
                  "name": "MYSQL_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mysqlha",
                      "key": "mysql-password"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "mysql",
                  "containerPort": 3306
                }
              ],
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/var/lib/mysql",
                  "subPath": "mysql"
                },
                {
                  "name": "conf",
                  "mountPath": "/etc/mysql/conf.d"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "mysqladmin ping -h 127.0.0.1 -u root -p${MYSQL_ROOT_PASSWORD}"
                  ]
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 5
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "MYSQL_PWD=\"${MYSQL_ROOT_PASSWORD}\"",
                    "mysql -h 127.0.0.1 -u root -e \"SELECT 1\""
                  ]
                },
                "initialDelaySeconds": 10,
                "timeoutSeconds": 1
              }
            },
            {
              "name": "xtrabackup",
              "image": "gcr.io/google-samples/xtrabackup:1.0",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "MYSQL_PWD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mysqlha",
                      "key": "mysql-root-password"
                    }
                  }
                },
                {
                  "name": "MYSQL_REPLICATION_USER",
                  "value": "repl"
                },
                {
                  "name": "MYSQL_REPLICATION_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mysqlha",
                      "key": "mysql-replication-password"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "xtrabackup",
                  "containerPort": 3307
                }
              ],
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "set -ex\n\necho \"Waiting for mysqld to be ready (accepting connections)\"\nuntil mysql -h 127.0.0.1 -e \"SELECT 1\"; do sleep 5; done\n\n# Create replication user\ncd /mnt/scripts\n# file exists and is not empty with -s\nif [[ -s create-replication-user.sh  ]]; then\n  ls -la\n  ./create-replication-user.sh\nfi\n\ncd /var/lib/mysql\n# Determine binlog position of cloned data, if any.\nif [[ -f xtrabackup_slave_info ]]; then\n  # XtraBackup already generated a partial \"CHANGE MASTER TO\" query\n  # because we're cloning from an existing slave.\n  cp xtrabackup_slave_info change_master_to.sql.in\nelif [[ -f xtrabackup_binlog_info ]]; then\n  # We're cloning directly from master. Parse binlog position.\n  [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1\n  echo \"CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\\\n        MASTER_LOG_POS=${BASH_REMATCH[2]}\" > change_master_to.sql.in\nfi\n\n# Check if we need to complete a clone by starting replication.\nif [[ -f change_master_to.sql.in ]]; then\n\n  # In case of container restart, attempt this at-most-once.\n  cp change_master_to.sql.in change_master_to.sql.orig\n  mysql -h 127.0.0.1 --verbose<<EOF\n  STOP SLAVE IO_THREAD;\n  $(<change_master_to.sql.orig),\n  MASTER_HOST='release-name-mysqlha-0.release-name-mysqlha',\n  MASTER_USER='${MYSQL_REPLICATION_USER}',\n  MASTER_PASSWORD='${MYSQL_REPLICATION_PASSWORD}',\n  MASTER_CONNECT_RETRY=10;\n  START SLAVE;\nEOF\nfi\n\n# Start a server to send backups when requested by peers.\nexec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \\\n  \"xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=${MYSQL_REPLICATION_USER} --password=${MYSQL_REPLICATION_PASSWORD}\"\n"
              ],
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/var/lib/mysql",
                  "subPath": "mysql"
                },
                {
                  "name": "conf",
                  "mountPath": "/etc/mysql/conf.d"
                },
                {
                  "name": "scripts",
                  "mountPath": "/mnt/scripts"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "100Mi"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "conf",
              "emptyDir": {}
            },
            {
              "name": "config-map",
              "configMap": {
                "name": "release-name-mysqlha"
              }
            },
            {
              "name": "scripts",
              "emptyDir": {}
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "annotations": null
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "10Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-mattermost-enterprise-edition-app-test-xu2rq",
      "labels": {
        "app.kubernetes.io/name": "mattermost-enterprise-edition",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "mattermost-enterprise-edition-2.6.3"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "release-name-app-test",
          "image": "bats/bats:v1.1.0",
          "imagePullPolicy": "Always",
          "command": [
            "/opt/bats/bin/bats",
            "-t",
            "/tests/run.sh"
          ],
          "volumeMounts": [
            {
              "mountPath": "/tests",
              "name": "tests",
              "readOnly": true
            },
            {
              "mountPath": "/tools",
              "name": "tools"
            }
          ]
        }
      ],
      "volumes": [
        {
          "name": "tests",
          "configMap": {
            "name": "release-name-mattermost-enterprise-edition-app-tests"
          }
        },
        {
          "name": "tools",
          "emptyDir": {}
        }
      ],
      "restartPolicy": "Never"
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-minio-make-bucket-job",
      "labels": {
        "app": "minio-make-bucket-job",
        "chart": "minio-5.0.26",
        "release": "release-name",
        "heritage": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "hook-succeeded"
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "minio-job",
            "release": "release-name"
          }
        },
        "spec": {
          "restartPolicy": "OnFailure",
          "volumes": [
            {
              "name": "minio-configuration",
              "projected": {
                "sources": [
                  {
                    "configMap": {
                      "name": "release-name-minio"
                    }
                  },
                  {
                    "secret": {
                      "name": "release-name-minio"
                    }
                  }
                ]
              }
            }
          ],
          "serviceAccountName": "release-name-minio",
          "containers": [
            {
              "name": "minio-mc",
              "image": "minio/mc:RELEASE.2020-04-25T00-43-23Z",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "/config/initialize"
              ],
              "env": [
                {
                  "name": "MINIO_ENDPOINT",
                  "value": "release-name-minio"
                },
                {
                  "name": "MINIO_PORT",
                  "value": "9000"
                }
              ],
              "volumeMounts": [
                {
                  "name": "minio-configuration",
                  "mountPath": "/config"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  }
]