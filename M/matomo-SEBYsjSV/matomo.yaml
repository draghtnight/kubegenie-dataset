apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-mariadb
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-10.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
automountServiceAccountToken: false
---
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: release-name-redis
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-matomo
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.10.1
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-matomo-env
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.10.1
    app.kubernetes.io/managed-by: Helm
data:
  ALLOW_EMPTY_PASSWORD: bm8=
  MATOMO_HOST: Y2hhcnQtZXhhbXBsZS5sb2NhbA==
  MATOMO_USERNAME: YWRtaW4=
  MATOMO_EMAIL: YWRtaW5AY2hhcnQtZXhhbXBsZS5sb2NhbA==
  MATOMO_WEBSITE_NAME: VHJhY2tlZCBXZWJzaXRl
  MATOMO_WEBSITE_HOST: aHR0cHM6Ly90cmFja2VkLXdlYnNpdGUubG9jYWw=
  MATOMO_DATABASE_HOST: cmVsZWFzZS1uYW1lLW1hcmlhZGI=
  MATOMO_DATABASE_PORT_NUMBER: MzMwNg==
  MATOMO_DATABASE_NAME: bWF0b21v
  MATOMO_DATABASE_USER: bWF0b21v
  MATOMO_CACHE_HOST: cmVsZWFzZS1uYW1lLXJlZGlzLWhlYWRsZXNz
  MATOMO_CACHE_PORT_NUMBER: NjM3OQ==
  MATOMO_CACHE_DATABASE_NUMBER: MA==
---
apiVersion: v1
kind: Secret
metadata:
  name: matomo-shared-credentials
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.10.1
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  matomo-password: ajA1R3BBZXFxMA==
  mariadb-password: SVA3cE5ZVmdBOQ==
  mariadb-root-password: U29ORGpaRHc3Tw==
  redis-password: V1RCT0tYd3h1eA==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mariadb
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-10.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    plugin_dir=/opt/bitnami/mariadb/plugin
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=128M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci

    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mariadb/plugin

    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-configuration
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-mariadb
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-10.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-matomo
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.10.1
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-matomo
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.10.1
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: matomo
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: matomo
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-matomo
      securityContext: {}
      initContainers:
        - name: redis-init
          image: bitnami/redis
          imagePullPolicy: Always
          securityContext: {}
          resources:
            requests:
              memory: 50Mi
          env:
            - name: MATOMO_CACHE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: redis-password
          envFrom:
            - secretRef:
                name: release-name-matomo-env
          command:
            - /bin/bash
            - -c
          args:
            - for i in {30..0}; do redis-cli -h ${MATOMO_CACHE_HOST} -a ${MATOMO_CACHE_PASSWORD} ping &> /dev/null; if [[ $? == 0 ]]; then echo "Connection to Redis established."; exit 0; fi; echo "Redis init process in progress..."; sleep 1; done; echo "No connection to Redis could be established!"; exit 1;
        - name: mariadb-init
          image: bitnami/mariadb
          imagePullPolicy: Always
          securityContext: {}
          resources:
            requests:
              memory: 50Mi
          command:
            - /bin/bash
            - -c
          args:
            - for i in {30..0}; do mysql -h${MATOMO_DATABASE_HOST} -u${MATOMO_DATABASE_USER} -p${MATOMO_DATABASE_PASSWORD} -N -e "SELECT 1" &> /dev/null; if [[ $? == 0 ]]; then echo "Connection to MariaDB established."; exit 0; fi; echo "MariaDB init process in progress..."; sleep 1; done; echo "No connection to MariaDB could be established!"; exit 1;
          env:
            - name: MATOMO_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: mariadb-password
          envFrom:
            - secretRef:
                name: release-name-matomo-env
      containers:
        - name: matomo
          image: bitnami/matomo:4.10.1-debian-10-r5
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: MATOMO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: matomo-password
            - name: MATOMO_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: mariadb-password
          envFrom:
            - secretRef:
                name: release-name-matomo-env
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: https
              scheme: HTTPS
            initialDelaySeconds: 90
          readinessProbe:
            httpGet:
              path: /
              port: https
              scheme: HTTPS
            initialDelaySeconds: 90
          volumeMounts:
            - name: data
              mountPath: /bitnami
              subPath: ""
          resources:
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: data
          emptyDir: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-mariadb
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-10.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  serviceName: release-name-mariadb
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 4794a271bab65c557f545d8f5fe346a8a7580eb2ca3e5d3389ab04387f408cef
      labels:
        app.kubernetes.io/name: mariadb
        helm.sh/chart: mariadb-10.5.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: release-name-mariadb
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mariadb
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: mariadb
          image: docker.io/bitnami/mariadb:10.5.15-debian-10-r62
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 11208
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: mariadb-root-password
            - name: MARIADB_USER
              value: matomo
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: mariadb-password
            - name: MARIADB_DATABASE
              value: matomo
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
            - name: config
              mountPath: /opt/bitnami/mariadb/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: release-name-mariadb
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: mariadb
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: SEBYsjSV
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: master
  serviceName: release-name-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-16.10.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: ca5ec5938e97830f841d41643a8112e224b936f41a5c0a3e26b7be8cdbc5b991
        checksum/health: dae93e1c28a413a00b22403f391174f1ddcb6388ba72c595d8ea28a4d6da3b5c
        checksum/scripts: fc9d8a3f7907696f4c3a810c46abe0463a69428e12487727111d59c8d346c37d
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: release-name-redis
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: master
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.7-debian-10-r23
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11588
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: null
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 493
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: release-name-matomo-archive
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.10.1
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: 0 * * * *
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          initContainers:
            - name: redis-init
              image: bitnami/redis
              imagePullPolicy: Always
              securityContext: {}
              resources:
                requests:
                  memory: 50Mi
              env:
                - name: MATOMO_CACHE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: redis-password
              envFrom:
                - secretRef:
                    name: release-name-matomo-env
              command:
                - /bin/bash
                - -c
              args:
                - for i in {30..0}; do redis-cli -h ${MATOMO_CACHE_HOST} -a ${MATOMO_CACHE_PASSWORD} ping &> /dev/null; if [[ $? == 0 ]]; then echo "Connection to Redis established."; exit 0; fi; echo "Redis init process in progress..."; sleep 1; done; echo "No connection to Redis could be established!"; exit 1;
            - name: mariadb-init
              image: bitnami/mariadb
              imagePullPolicy: Always
              securityContext: {}
              resources:
                requests:
                  memory: 50Mi
              command:
                - /bin/bash
                - -c
              args:
                - for i in {30..0}; do mysql -h${MATOMO_DATABASE_HOST} -u${MATOMO_DATABASE_USER} -p${MATOMO_DATABASE_PASSWORD} -N -e "SELECT 1" &> /dev/null; if [[ $? == 0 ]]; then echo "Connection to MariaDB established."; exit 0; fi; echo "MariaDB init process in progress..."; sleep 1; done; echo "No connection to MariaDB could be established!"; exit 1;
              env:
                - name: MATOMO_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: mariadb-password
              envFrom:
                - secretRef:
                    name: release-name-matomo-env
          containers:
            - name: release-name-matomo-archive
              image: bitnami/matomo:4.10.1-debian-10-r5
              imagePullPolicy: IfNotPresent
              securityContext: {}
              env:
                - name: MATOMO_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: mariadb-password
                - name: MATOMO_SKIP_BOOTSTRAP
                  value: "yes"
              envFrom:
                - secretRef:
                    name: release-name-matomo-env
              command:
                - /bin/bash
                - -c
              args:
                - . /opt/bitnami/scripts/matomo-env.sh && . /opt/bitnami/scripts/libbitnami.sh && . /opt/bitnami/scripts/liblog.sh && /opt/bitnami/scripts/php/setup.sh && /opt/bitnami/scripts/mysql-client/setup.sh && /opt/bitnami/scripts/matomo/setup.sh && /post-init.sh && /opt/bitnami/php/bin/php /opt/bitnami/matomo/console core:archive
              volumeMounts:
                - name: data
                  mountPath: /bitnami
                  subPath: ""
              resources: {}
          volumes:
            - name: data
              emptyDir: {}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: release-name-matomo-scheduled-tasks
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.10.1
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: '*/5 * * * *'
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          initContainers:
            - name: redis-init
              image: bitnami/redis
              imagePullPolicy: Always
              securityContext: {}
              resources:
                requests:
                  memory: 50Mi
              env:
                - name: MATOMO_CACHE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: redis-password
              envFrom:
                - secretRef:
                    name: release-name-matomo-env
              command:
                - /bin/bash
                - -c
              args:
                - for i in {30..0}; do redis-cli -h ${MATOMO_CACHE_HOST} -a ${MATOMO_CACHE_PASSWORD} ping &> /dev/null; if [[ $? == 0 ]]; then echo "Connection to Redis established."; exit 0; fi; echo "Redis init process in progress..."; sleep 1; done; echo "No connection to Redis could be established!"; exit 1;
            - name: mariadb-init
              image: bitnami/mariadb
              imagePullPolicy: Always
              securityContext: {}
              resources:
                requests:
                  memory: 50Mi
              command:
                - /bin/bash
                - -c
              args:
                - for i in {30..0}; do mysql -h${MATOMO_DATABASE_HOST} -u${MATOMO_DATABASE_USER} -p${MATOMO_DATABASE_PASSWORD} -N -e "SELECT 1" &> /dev/null; if [[ $? == 0 ]]; then echo "Connection to MariaDB established."; exit 0; fi; echo "MariaDB init process in progress..."; sleep 1; done; echo "No connection to MariaDB could be established!"; exit 1;
              env:
                - name: MATOMO_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: mariadb-password
              envFrom:
                - secretRef:
                    name: release-name-matomo-env
          containers:
            - name: release-name-matomo-scheduled-tasks
              image: bitnami/matomo:4.10.1-debian-10-r5
              imagePullPolicy: IfNotPresent
              securityContext: {}
              env:
                - name: MATOMO_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: mariadb-password
              envFrom:
                - secretRef:
                    name: release-name-matomo-env
              command:
                - /bin/bash
                - -c
              args:
                - . /opt/bitnami/scripts/matomo-env.sh && . /opt/bitnami/scripts/libbitnami.sh && . /opt/bitnami/scripts/liblog.sh && /opt/bitnami/scripts/php/setup.sh && /opt/bitnami/scripts/mysql-client/setup.sh && /opt/bitnami/scripts/matomo/setup.sh && /post-init.sh && /opt/bitnami/php/bin/php /opt/bitnami/matomo/console core:run-scheduled-tasks
              volumeMounts:
                - name: data
                  mountPath: /bitnami
                  subPath: ""
              resources: {}
          volumes:
            - name: data
              emptyDir: {}
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-matomo-test-connection
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.10.1
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-matomo:80
  restartPolicy: Never
