[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-botkube-sa",
      "labels": {
        "app.kubernetes.io/name": "botkube",
        "helm.sh/chart": "botkube-v0.12.4",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-botkube-communication-secret",
      "labels": {
        "app.kubernetes.io/name": "botkube",
        "helm.sh/chart": "botkube-v0.12.4",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "stringData": {
      "comm_config.yaml": "# Communication settings\ncommunications:\n  discord:\n    botid: DISCORD_BOT_ID\n    channel: DISCORD_CHANNEL_ID\n    enabled: false\n    notiftype: short\n    token: DISCORD_TOKEN\n  elasticsearch:\n    awsSigning:\n      awsRegion: us-east-1\n      enabled: false\n      roleArn: \"\"\n    enabled: false\n    index:\n      name: botkube\n      replicas: 0\n      shards: 1\n      type: botkube-event\n    password: ELASTICSEARCH_PASSWORD\n    server: ELASTICSEARCH_ADDRESS\n    skipTLSVerify: false\n    username: ELASTICSEARCH_USERNAME\n  existingSecretName: \"\"\n  mattermost:\n    botName: BotKube\n    channel: MATTERMOST_CHANNEL\n    enabled: false\n    notiftype: short\n    team: MATTERMOST_TEAM\n    token: MATTERMOST_TOKEN\n    url: MATTERMOST_SERVER_URL\n  slack:\n    channel: SLACK_CHANNEL\n    enabled: false\n    notiftype: short\n    token: SLACK_API_TOKEN\n  teams:\n    appID: APPLICATION_ID\n    appPassword: APPLICATION_PASSWORD\n    enabled: false\n    notiftype: short\n    port: 3978\n  webhook:\n    enabled: false\n    url: WEBHOOK_URL\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-botkube-configmap",
      "labels": {
        "app.kubernetes.io/name": "botkube",
        "helm.sh/chart": "botkube-v0.12.4",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "resource_config.yaml": "recommendations: true\nresources:\n- events:\n  - create\n  - delete\n  - error\n  name: v1/pods\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - delete\n  - error\n  name: v1/services\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - update\n  - delete\n  - error\n  name: apps/v1/deployments\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n  updateSetting:\n    fields:\n    - spec.template.spec.containers[*].image\n    - status.availableReplicas\n    includeDiff: true\n- events:\n  - create\n  - update\n  - delete\n  - error\n  name: apps/v1/statefulsets\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n  updateSetting:\n    fields:\n    - spec.template.spec.containers[*].image\n    - status.readyReplicas\n    includeDiff: true\n- events:\n  - create\n  - delete\n  - error\n  name: networking.k8s.io/v1beta1/ingresses\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - delete\n  - error\n  name: v1/nodes\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - delete\n  - error\n  name: v1/namespaces\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - delete\n  - error\n  name: v1/persistentvolumes\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - delete\n  - error\n  name: v1/persistentvolumeclaims\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - delete\n  - error\n  name: v1/configmaps\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - update\n  - delete\n  - error\n  name: apps/v1/daemonsets\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n  updateSetting:\n    fields:\n    - spec.template.spec.containers[*].image\n    - status.numberReady\n    includeDiff: true\n- events:\n  - create\n  - update\n  - delete\n  - error\n  name: batch/v1/jobs\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n  updateSetting:\n    fields:\n    - spec.template.spec.containers[*].image\n    - status.conditions[*].type\n    includeDiff: true\n- events:\n  - create\n  - delete\n  - error\n  name: rbac.authorization.k8s.io/v1/roles\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - delete\n  - error\n  name: rbac.authorization.k8s.io/v1/rolebindings\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - delete\n  - error\n  name: rbac.authorization.k8s.io/v1/clusterrolebindings\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\n- events:\n  - create\n  - delete\n  - error\n  name: rbac.authorization.k8s.io/v1/clusterroles\n  namespaces:\n    ignore:\n    - null\n    include:\n    - all\nsettings:\n  clustername: not-configured\n  configwatcher: true\n  kubectl:\n    commands:\n      resources:\n      - deployments\n      - pods\n      - namespaces\n      - daemonsets\n      - statefulsets\n      - storageclasses\n      - nodes\n      verbs:\n      - api-resources\n      - api-versions\n      - cluster-info\n      - describe\n      - diff\n      - explain\n      - get\n      - logs\n      - top\n      - auth\n    defaultNamespace: default\n    enabled: false\n    restrictAccess: false\n  upgradeNotifier: true\nssl:\n  enabled: false\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "name": "release-name-botkube-clusterrole",
      "labels": {
        "app.kubernetes.io/name": "botkube",
        "helm.sh/chart": "botkube-v0.12.4",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "*"
        ],
        "resources": [
          "*"
        ],
        "verbs": [
          "get",
          "watch",
          "list"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "name": "release-name-botkube-clusterrolebinding",
      "labels": {
        "app.kubernetes.io/name": "botkube",
        "helm.sh/chart": "botkube-v0.12.4",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-botkube-clusterrole"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-botkube-sa",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-botkube",
      "labels": {
        "app.kubernetes.io/name": "botkube",
        "helm.sh/chart": "botkube-v0.12.4",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "component": "controller",
        "app": "botkube"
      },
      "annotations": null
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "component": "controller",
          "app": "botkube"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "component": "controller",
            "app": "botkube"
          },
          "annotations": {
            "checksum/config": "6bb8078f58b6133fd21f1ad0ddc39f5ac46af8c8039591d1c4497e9c6a00c814"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-botkube-sa",
          "containers": [
            {
              "name": "botkube",
              "image": "ghcr.io/infracloudio/botkube:v0.12.4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/config"
                }
              ],
              "env": [
                {
                  "name": "CONFIG_PATH",
                  "value": "/config/"
                },
                {
                  "name": "LOG_LEVEL",
                  "value": "info"
                },
                {
                  "name": "METRICS_PORT",
                  "value": "2112"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config-volume",
              "projected": {
                "sources": [
                  {
                    "configMap": {
                      "name": "release-name-botkube-configmap"
                    }
                  },
                  {
                    "secret": {
                      "name": "release-name-botkube-communication-secret"
                    }
                  }
                ]
              }
            }
          ],
          "securityContext": {
            "runAsUser": 101,
            "runAsGroup": 101
          }
        }
      }
    }
  }
]