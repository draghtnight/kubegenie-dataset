[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "kafka",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-14.1.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "kafka"
      }
    },
    "automountServiceAccountToken": true
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "mysql",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.8.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "secrets": [
      {
        "name": "mysql"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "mysql",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.8.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "mysql-root-password": "cm9vdFBhc3N3b3Jk",
      "mysql-password": "cGFzc3dvcmQ="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "wso2-is-admin-creds",
      "namespace": "rqpt5z"
    },
    "data": {
      "password": "YWRtaW4="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "kafka-jmx-configuration",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-14.1.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "jmx-kafka-prometheus.yml": "jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:5555/jmxrmi\nlowercaseOutputName: true\nlowercaseOutputLabelNames: true\nssl: false\nwhitelistObjectNames: [\"kafka.controller:*\",\"kafka.server:*\",\"java.lang:*\",\"kafka.network:*\",\"kafka.log:*\"]\nrules:\n  - pattern: kafka.controller<type=(ControllerChannelManager), name=(QueueSize), broker-id=(\\d+)><>(Value)\n    name: kafka_controller_$1_$2_$4\n    labels:\n      broker_id: \"$3\"\n  - pattern: kafka.controller<type=(ControllerChannelManager), name=(TotalQueueSize)><>(Value)\n    name: kafka_controller_$1_$2_$3\n  - pattern: kafka.controller<type=(KafkaController), name=(.+)><>(Value)\n    name: kafka_controller_$1_$2_$3\n  - pattern: kafka.controller<type=(ControllerStats), name=(.+)><>(Count)\n    name: kafka_controller_$1_$2_$3\n  - pattern: kafka.server<type=(ReplicaFetcherManager), name=(.+), clientId=(.+)><>(Value)\n    name: kafka_server_$1_$2_$4\n    labels:\n      client_id: \"$3\"\n  - pattern : kafka.network<type=(Processor), name=(IdlePercent), networkProcessor=(.+)><>(Value)\n    name: kafka_network_$1_$2_$4\n    labels:\n      network_processor: $3\n  - pattern : kafka.network<type=(RequestMetrics), name=(RequestsPerSec), request=(.+)><>(Count)\n    name: kafka_network_$1_$2_$4\n    labels:\n      request: $3\n  - pattern: kafka.server<type=(.+), name=(.+), topic=(.+)><>(Count|OneMinuteRate)\n    name: kafka_server_$1_$2_$4\n    labels:\n      topic: $3\n  - pattern: kafka.server<type=(DelayedOperationPurgatory), name=(.+), delayedOperation=(.+)><>(Value)\n    name: kafka_server_$1_$2_$3_$4\n  - pattern: kafka.server<type=(.+), name=(.+)><>(Count|Value|OneMinuteRate)\n    name: kafka_server_$1_total_$2_$3\n  - pattern: kafka.server<type=(.+)><>(queue-size)\n    name: kafka_server_$1_$2\n  - pattern: java.lang<type=(.+), name=(.+)><(.+)>(\\w+)\n    name: java_lang_$1_$4_$3_$2\n  - pattern: java.lang<type=(.+), name=(.+)><>(\\w+)\n    name: java_lang_$1_$3_$2\n  - pattern : java.lang<type=(.*)>\n  - pattern: kafka.log<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value\n    name: kafka_log_$1_$2\n    labels:\n      topic: $3\n      partition: $4"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "kafka-scripts",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-14.1.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "setup.sh": "#!/bin/bash\n\nID=\"${MY_POD_NAME#\"kafka-\"}\"\nif [[ -f \"/bitnami/kafka/data/meta.properties\" ]]; then\n    export KAFKA_CFG_BROKER_ID=\"$(grep \"broker.id\" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')\"\nelse\n    export KAFKA_CFG_BROKER_ID=\"$((ID + 0))\"\nfi\n\nexec /entrypoint.sh /run.sh"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "mysql",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.8.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      }
    },
    "data": {
      "my.cnf": "\n[mysqld]\ndefault_authentication_plugin=mysql_native_password\nskip-name-resolve\nexplicit_defaults_for_timestamp\nbasedir=/opt/bitnami/mysql\nplugin_dir=/opt/bitnami/mysql/lib/plugin\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\ndatadir=/bitnami/mysql/data\ntmpdir=/opt/bitnami/mysql/tmp\nmax_allowed_packet=16M\nbind-address=0.0.0.0\npid-file=/opt/bitnami/mysql/tmp/mysqld.pid\nlog-error=/opt/bitnami/mysql/logs/mysqld.log\ncharacter-set-server=UTF8\ncollation-server=utf8_general_ci\n\n[client]\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\ndefault-character-set=UTF8\nplugin_dir=/opt/bitnami/mysql/lib/plugin\n\n[manager]\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\npid-file=/opt/bitnami/mysql/tmp/mysqld.pid"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "mysql-init-scripts",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.8.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      }
    },
    "data": {
      "accountLookupInit.sql": "DROP DATABASE IF EXISTS account_lookup;\nCREATE DATABASE account_lookup;\nDROP USER IF EXISTS account_lookup@'%';\nCREATE USER 'account_lookup'@'%' IDENTIFIED WITH mysql_native_password BY 'password';\nGRANT ALL PRIVILEGES ON account_lookup.* TO 'account_lookup'@'%';\nFLUSH PRIVILEGES;",
      "centralLedgerInit.sql": "DROP DATABASE IF EXISTS central_ledger;\nCREATE DATABASE central_ledger;\nDROP USER IF EXISTS central_ledger@'%';\nCREATE USER 'central_ledger'@'%' IDENTIFIED WITH mysql_native_password BY 'password';\nGRANT ALL PRIVILEGES ON central_ledger.* TO 'central_ledger'@'%';\nFLUSH PRIVILEGES;",
      "defaultInit.sql": "ALTER USER 'user'@'%' IDENTIFIED WITH mysql_native_password BY 'password';\nFLUSH PRIVILEGES;"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-zookeeper-headless",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "zookeeper",
        "helm.sh/chart": "zookeeper-7.4.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "zookeeper"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-client",
          "port": 2181,
          "targetPort": "client"
        },
        {
          "name": "follower",
          "port": 2888,
          "targetPort": "follower"
        },
        {
          "name": "tcp-election",
          "port": 3888,
          "targetPort": "election"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "zookeeper",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "zookeeper"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-zookeeper",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "zookeeper",
        "helm.sh/chart": "zookeeper-7.4.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "zookeeper"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-client",
          "port": 2181,
          "targetPort": "client",
          "nodePort": null
        },
        {
          "name": "follower",
          "port": 2888,
          "targetPort": "follower"
        },
        {
          "name": "tcp-election",
          "port": 3888,
          "targetPort": "election"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "zookeeper",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "zookeeper"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "kafka-jmx-metrics",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-14.1.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "kafka"
      },
      "annotations": {
        "prometheus.io/path": "/",
        "prometheus.io/port": "5556",
        "prometheus.io/scrape": "true"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http-metrics",
          "port": 5556,
          "protocol": "TCP",
          "targetPort": "metrics",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "kafka",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "kafka"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "kafka-metrics",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-14.1.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "metrics"
      },
      "annotations": {
        "prometheus.io/path": "/metrics",
        "prometheus.io/port": "9308",
        "prometheus.io/scrape": "true"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http-metrics",
          "port": 9308,
          "protocol": "TCP",
          "targetPort": "metrics",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "kafka",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "metrics"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "kafka-headless",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-14.1.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "kafka"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-client",
          "port": 9092,
          "protocol": "TCP",
          "targetPort": "kafka-client"
        },
        {
          "name": "tcp-internal",
          "port": 9093,
          "protocol": "TCP",
          "targetPort": "kafka-internal"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "kafka",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "kafka"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "kafka",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-14.1.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "kafka"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-client",
          "port": 9092,
          "protocol": "TCP",
          "targetPort": "kafka-client",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "kafka",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "kafka"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "mysql-metrics",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.8.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "metrics"
      },
      "annotations": {
        "prometheus.io/port": "9104",
        "prometheus.io/scrape": "true"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 9104,
          "targetPort": "metrics",
          "protocol": "TCP",
          "name": "metrics"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "mysql",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "mysql-headless",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.8.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "mysql",
          "port": 3306,
          "targetPort": "mysql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "mysql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "mysql",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.8.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "mysql",
          "port": 3306,
          "protocol": "TCP",
          "targetPort": "mysql",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "mysql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "kafka-exporter",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-14.1.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "metrics"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "kafka",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "metrics"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kafka",
            "helm.sh/chart": "kafka-14.1.1",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "metrics"
          }
        },
        "spec": {
          "serviceAccountName": "kafka",
          "containers": [
            {
              "name": "kafka-exporter",
              "image": "docker.io/bitnami/kafka-exporter:1.3.1-debian-10-r88",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-ec",
                "kafka_exporter \\\n--kafka.server=kafka-0.kafka-headless.default.svc.cluster.local:9092 \\\n--web.listen-address=:9308\n"
              ],
              "ports": [
                {
                  "name": "metrics",
                  "containerPort": 9308
                }
              ],
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-zookeeper",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "zookeeper",
        "helm.sh/chart": "zookeeper-7.4.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "zookeeper",
        "role": "zookeeper"
      }
    },
    "spec": {
      "serviceName": "release-name-zookeeper-headless",
      "replicas": 1,
      "podManagementPolicy": "Parallel",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "zookeeper",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "zookeeper"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-zookeeper",
          "labels": {
            "app.kubernetes.io/name": "zookeeper",
            "helm.sh/chart": "zookeeper-7.4.3",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "zookeeper"
          }
        },
        "spec": {
          "serviceAccountName": "default",
          "securityContext": {
            "fsGroup": 1001
          },
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "zookeeper",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "zookeeper"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "containers": [
            {
              "name": "zookeeper",
              "image": "docker.io/bitnami/zookeeper:3.7.0-debian-10-r127",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 10995,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "bash",
                "-ec",
                "# Execute entrypoint as usual after obtaining ZOO_SERVER_ID\n# check ZOO_SERVER_ID in persistent volume via myid\n# if not present, set based on POD hostname\nif [[ -f \"/bitnami/zookeeper/data/myid\" ]]; then\n  export ZOO_SERVER_ID=\"$(cat /bitnami/zookeeper/data/myid)\"\nelse\n  HOSTNAME=`hostname -s`\n  if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then\n    ORD=${BASH_REMATCH[2]}\n    export ZOO_SERVER_ID=$((ORD + 1 ))\n  else\n    echo \"Failed to get index from hostname $HOST\"\n    exit 1\n  fi\nfi\nexec /entrypoint.sh /run.sh\n"
              ],
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "ZOO_DATA_LOG_DIR",
                  "value": ""
                },
                {
                  "name": "ZOO_PORT_NUMBER",
                  "value": "2181"
                },
                {
                  "name": "ZOO_TICK_TIME",
                  "value": "2000"
                },
                {
                  "name": "ZOO_INIT_LIMIT",
                  "value": "10"
                },
                {
                  "name": "ZOO_SYNC_LIMIT",
                  "value": "5"
                },
                {
                  "name": "ZOO_PRE_ALLOC_SIZE",
                  "value": "65536"
                },
                {
                  "name": "ZOO_SNAPCOUNT",
                  "value": "100000"
                },
                {
                  "name": "ZOO_MAX_CLIENT_CNXNS",
                  "value": "60"
                },
                {
                  "name": "ZOO_4LW_COMMANDS_WHITELIST",
                  "value": "srvr, mntr, ruok"
                },
                {
                  "name": "ZOO_LISTEN_ALLIPS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "ZOO_AUTOPURGE_INTERVAL",
                  "value": "0"
                },
                {
                  "name": "ZOO_AUTOPURGE_RETAIN_COUNT",
                  "value": "3"
                },
                {
                  "name": "ZOO_MAX_SESSION_TIMEOUT",
                  "value": "40000"
                },
                {
                  "name": "ZOO_SERVERS",
                  "value": "release-name-zookeeper-0.release-name-zookeeper-headless.default.svc.cluster.local:2888:3888::1"
                },
                {
                  "name": "ZOO_ENABLE_AUTH",
                  "value": "no"
                },
                {
                  "name": "ZOO_HEAP_SIZE",
                  "value": "1024"
                },
                {
                  "name": "ZOO_LOG_LEVEL",
                  "value": "ERROR"
                },
                {
                  "name": "ALLOW_ANONYMOUS_LOGIN",
                  "value": "yes"
                },
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "client",
                  "containerPort": 2181
                },
                {
                  "name": "follower",
                  "containerPort": 2888
                },
                {
                  "name": "election",
                  "containerPort": 3888
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-c",
                    "echo \"ruok\" | timeout 2 nc -w 2 localhost 2181 | grep imok"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-c",
                    "echo \"ruok\" | timeout 2 nc -w 2 localhost 2181 | grep imok"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/bitnami/zookeeper"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "kafka",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-14.1.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "kafka"
      }
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "kafka",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "kafka"
        }
      },
      "serviceName": "kafka-headless",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kafka",
            "helm.sh/chart": "kafka-14.1.1",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "kafka"
          },
          "annotations": {
            "checksum/jmx-configuration": "8ec1a8ffc94ec309cba0400624481d16a3373655524fcd577995e5d4c40407cd"
          }
        },
        "spec": {
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "kafka",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "kafka"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001,
            "runAsUser": 1001
          },
          "serviceAccountName": "kafka",
          "containers": [
            {
              "name": "kafka",
              "image": "docker.io/bitnami/kafka:2.8.0-debian-10-r84",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/scripts/setup.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MY_POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "KAFKA_CFG_ZOOKEEPER_CONNECT",
                  "value": "release-name-zookeeper"
                },
                {
                  "name": "KAFKA_INTER_BROKER_LISTENER_NAME",
                  "value": "INTERNAL"
                },
                {
                  "name": "KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP",
                  "value": "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
                },
                {
                  "name": "KAFKA_CFG_LISTENERS",
                  "value": "INTERNAL://:9093,CLIENT://:9092"
                },
                {
                  "name": "KAFKA_CFG_ADVERTISED_LISTENERS",
                  "value": "INTERNAL://$(MY_POD_NAME).kafka-headless.default.svc.cluster.local:9093,CLIENT://$(MY_POD_NAME).kafka-headless.default.svc.cluster.local:9092"
                },
                {
                  "name": "ALLOW_PLAINTEXT_LISTENER",
                  "value": "yes"
                },
                {
                  "name": "JMX_PORT",
                  "value": "5555"
                },
                {
                  "name": "KAFKA_VOLUME_DIR",
                  "value": "/bitnami/kafka"
                },
                {
                  "name": "KAFKA_LOG_DIR",
                  "value": "/opt/bitnami/kafka/logs"
                },
                {
                  "name": "KAFKA_CFG_DELETE_TOPIC_ENABLE",
                  "value": "true"
                },
                {
                  "name": "KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE",
                  "value": "true"
                },
                {
                  "name": "KAFKA_HEAP_OPTS",
                  "value": "-Xmx1024m -Xms1024m"
                },
                {
                  "name": "KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES",
                  "value": "10000"
                },
                {
                  "name": "KAFKA_CFG_LOG_FLUSH_INTERVAL_MS",
                  "value": "1000"
                },
                {
                  "name": "KAFKA_CFG_LOG_RETENTION_BYTES",
                  "value": "1073741824"
                },
                {
                  "name": "KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS",
                  "value": "300000"
                },
                {
                  "name": "KAFKA_CFG_LOG_RETENTION_HOURS",
                  "value": "168"
                },
                {
                  "name": "KAFKA_CFG_MESSAGE_MAX_BYTES",
                  "value": "1000012"
                },
                {
                  "name": "KAFKA_CFG_LOG_SEGMENT_BYTES",
                  "value": "1073741824"
                },
                {
                  "name": "KAFKA_CFG_LOG_DIRS",
                  "value": "/bitnami/kafka/data"
                },
                {
                  "name": "KAFKA_CFG_DEFAULT_REPLICATION_FACTOR",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_NUM_IO_THREADS",
                  "value": "8"
                },
                {
                  "name": "KAFKA_CFG_NUM_NETWORK_THREADS",
                  "value": "3"
                },
                {
                  "name": "KAFKA_CFG_NUM_PARTITIONS",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES",
                  "value": "102400"
                },
                {
                  "name": "KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES",
                  "value": "104857600"
                },
                {
                  "name": "KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES",
                  "value": "102400"
                },
                {
                  "name": "KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS",
                  "value": "6000"
                }
              ],
              "ports": [
                {
                  "name": "kafka-client",
                  "containerPort": 9092
                },
                {
                  "name": "kafka-internal",
                  "containerPort": 9093
                }
              ],
              "livenessProbe": {
                "tcpSocket": {
                  "port": "kafka-client"
                },
                "initialDelaySeconds": 10,
                "timeoutSeconds": 5,
                "failureThreshold": 3,
                "periodSeconds": 10,
                "successThreshold": 1
              },
              "readinessProbe": {
                "tcpSocket": {
                  "port": "kafka-client"
                },
                "initialDelaySeconds": 5,
                "timeoutSeconds": 5,
                "failureThreshold": 6,
                "periodSeconds": 10,
                "successThreshold": 1
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/bitnami/kafka"
                },
                {
                  "name": "logs",
                  "mountPath": "/opt/bitnami/kafka/logs"
                },
                {
                  "name": "scripts",
                  "mountPath": "/scripts/setup.sh",
                  "subPath": "setup.sh"
                }
              ]
            },
            {
              "name": "jmx-exporter",
              "image": "docker.io/bitnami/jmx-exporter:0.16.1-debian-10-r41",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "java",
                "-XX:+UnlockExperimentalVMOptions",
                "-XX:+UseCGroupMemoryLimitForHeap",
                "-XX:MaxRAMFraction=1",
                "-XshowSettings:vm",
                "-jar",
                "jmx_prometheus_httpserver.jar",
                "5556",
                "/etc/jmx-kafka/jmx-kafka-prometheus.yml"
              ],
              "ports": [
                {
                  "name": "metrics",
                  "containerPort": 5556
                }
              ],
              "resources": {
                "limits": {},
                "requests": {}
              },
              "volumeMounts": [
                {
                  "name": "jmx-config",
                  "mountPath": "/etc/jmx-kafka"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "scripts",
              "configMap": {
                "name": "kafka-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "jmx-config",
              "configMap": {
                "name": "kafka-jmx-configuration"
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            },
            {
              "name": "logs",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "mysql",
      "namespace": "rqpt5z",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.8.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "mysql",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "primary"
        }
      },
      "serviceName": "mysql",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configuration": "af8545230f6b8bd16e7f154e0433cf1070acb52d09ea25385250a9a41968a0f0"
          },
          "labels": {
            "app.kubernetes.io/name": "mysql",
            "helm.sh/chart": "mysql-8.8.8",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "primary"
          }
        },
        "spec": {
          "serviceAccountName": "mysql",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "mysql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "containers": [
            {
              "name": "mysql",
              "image": "docker.io/bitnami/mysql:8.0.26-debian-10-r31",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 10946,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MYSQL_ROOT_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "mysql",
                      "key": "mysql-root-password"
                    }
                  }
                },
                {
                  "name": "MYSQL_USER",
                  "value": "user"
                },
                {
                  "name": "MYSQL_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "mysql",
                      "key": "mysql-password"
                    }
                  }
                },
                {
                  "name": "MYSQL_DATABASE",
                  "value": "default"
                }
              ],
              "ports": [
                {
                  "name": "mysql",
                  "containerPort": 3306
                }
              ],
              "livenessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\nif [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\nfi\nmysqladmin status -uroot -p\"${password_aux}\"\n"
                  ]
                }
              },
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\nif [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\nfi\nmysqladmin status -uroot -p\"${password_aux}\"\n"
                  ]
                }
              },
              "startupProbe": {
                "failureThreshold": 10,
                "initialDelaySeconds": 15,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\nif [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\nfi\nmysqladmin status -uroot -p\"${password_aux}\"\n"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/bitnami/mysql"
                },
                {
                  "name": "custom-init-scripts",
                  "mountPath": "/docker-entrypoint-initdb.d"
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/mysql/conf/my.cnf",
                  "subPath": "my.cnf"
                }
              ]
            },
            {
              "name": "metrics",
              "image": "docker.io/bitnami/mysqld-exporter:0.13.0-debian-10-r75",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "MYSQL_ROOT_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "mysql",
                      "key": "mysql-root-password"
                    }
                  }
                }
              ],
              "command": [
                "/bin/bash",
                "-ec",
                "password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\nif [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\nfi\nDATA_SOURCE_NAME=\"root:${password_aux}@(localhost:3306)/\" /bin/mysqld_exporter\n"
              ],
              "ports": [
                {
                  "name": "metrics",
                  "containerPort": 9104
                }
              ],
              "livenessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 120,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "httpGet": {
                  "path": "/metrics",
                  "port": "metrics"
                }
              },
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "httpGet": {
                  "path": "/metrics",
                  "port": "metrics"
                }
              },
              "resources": {
                "limits": {},
                "requests": {}
              }
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "mysql"
              }
            },
            {
              "name": "custom-init-scripts",
              "configMap": {
                "name": "mysql-init-scripts"
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  }
]