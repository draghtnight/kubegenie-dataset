[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-rabbitmq",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.14.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-7.7.3",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "postgresql-password": "c2lnbmFsZW4="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-rabbitmq",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.14.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "rabbitmq-password": "c2lnbmFsZW4=",
      "rabbitmq-erlang-cookie": "Mkp4bG5rRDc3UUswMk0wT05WeGJ1b1Q3WFlzWDAwR2k="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-backend",
      "labels": {
        "helm.sh/chart": "backend-2.6.5",
        "app.kubernetes.io/name": "backend",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "DATABASE_PASSWORD": "c2lnbmFsZW4=",
      "EMAIL_HOST_PASSWORD": "",
      "RABBITMQ_PASSWORD": "c2lnbmFsZW4=",
      "SECRET_KEY": "Y2hhbmdlLXRvLXNvbWV0aGluZy1zZWNyZXQ="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-rabbitmq-config",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.14.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "enabled_plugins": "[rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap].",
      "rabbitmq.conf": "##username and password\ndefault_user=signalen\ndefault_pass=CHANGEME\n## Clustering\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator=min-masters\n# enable guest user\nloopback_users.guest = false\n#disk_free_limit.absolute = 50MB\n#management.load_definitions = /app/load_definition.json"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-rabbitmq-healthchecks",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.14.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "rabbitmq-health-check": "#!/bin/sh\nSTART_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\nif [ -f ${START_FLAG} ]; then\n    rabbitmqctl node_health_check\n    RESULT=$?\n    if [ $RESULT -ne 0 ]; then\n      rabbitmqctl status\n      exit $?\n    fi\n    rm -f ${START_FLAG}\n    exit ${RESULT}\nfi\nrabbitmq-api-check $1 $2",
      "rabbitmq-api-check": "#!/bin/sh\nset -e\nURL=$1\nEXPECTED=$2\nACTUAL=$(curl --silent --show-error --fail \"${URL}\")\necho \"${ACTUAL}\"\ntest \"${EXPECTED}\" = \"${ACTUAL}\""
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-backend",
      "labels": {
        "helm.sh/chart": "backend-2.6.5",
        "app.kubernetes.io/name": "backend",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "ALLOWED_HOSTS": "*",
      "ALLOW_INVALID_ADDRESS_AS_UNVERIFIED": "True",
      "API_PDF_LOGO_STATIC_FILE": "api/logo-gemeente-amsterdam.svg",
      "API_TRANSFORM_SOURCE_BASED_ON_REPORTER": "False",
      "CELERY_EMAIL_BACKEND": "django.core.mail.backends.smtp.EmailBackend",
      "DATABASE_HOST_OVERRIDE": "signalen-backend-postgresql",
      "DATABASE_PORT_OVERRIDE": "5432",
      "DATABASE_USER": "postgres",
      "DATABASE_NAME": "signalen",
      "DATAPUNT_API_URL": "https://api.data.amsterdam.nl/",
      "DEFAULT_FROM_EMAIL": "webmaster@localhost",
      "DEFAULT_MAP_TILE_SERVER": "",
      "DEFAULT_PDOK_MUNICIPALITIES": "",
      "DWH_MEDIA_ROOT": "/dwh_media",
      "DJANGO_LOG_LEVEL": "error",
      "DJANGO_SETTINGS_MODULE": "signals.settings.production",
      "EMAIL_HOST": "mailhog",
      "EMAIL_PORT": "25",
      "EMAIL_HOST_USER": "",
      "EMAIL_REST_ENDPOINT": "",
      "EMAIL_REST_ENDPOINT_CLIENT_CERT": "",
      "EMAIL_REST_ENDPOINT_CLIENT_KEY": "",
      "EMAIL_USE_TLS": "False",
      "EMAIL_USE_SSL": "False",
      "ELASTICSEARCH_HOST": "elasticsearch-master:9200",
      "ELASTICSEARCH_INDEX": "signalen",
      "ENABLE_PUBLIC_GEO_SIGNAL_ENDPOINT": "False",
      "ENVIRONMENT": "production",
      "FRONTEND_URL": "",
      "JWKS_URL": "",
      "ORGANIZATION_NAME": "Signalen",
      "RABBITMQ_HOST": "signalen-backend-rabbitmq",
      "RABBITMQ_USER": "signalen",
      "RABBITMQ_VHOST": "",
      "SIGNALS_ML_TOOL_ENDPOINT": "https://api.data.amsterdam.nl/signals_mltool",
      "USER_ID_FIELD": "sub",
      "USER_ID_FIELDS": "sub",
      "EXCLUDED_PERMISSIONS_IN_RESPONSE": "sia_delete_attachment_of_normal_signal,sia_delete_attachment_of_parent_signal,sia_delete_attachment_of_child_signal,sia_delete_attachment_of_other_user",
      "SYSTEM_MAIL_FEEDBACK_RECEIVED_ENABLED": "False",
      "REPORTER_MAIL_HANDLED_NEGATIVE_CONTACT_ENABLED": "False"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "name": "release-name-backend",
      "labels": {
        "helm.sh/chart": "backend-2.6.5",
        "app.kubernetes.io/name": "backend",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "1Gi"
        }
      }
    }
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.14.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "get"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.14.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-rabbitmq"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-rabbitmq-endpoint-reader"
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "elasticsearch-master",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {}
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "ports": [
        {
          "name": "http",
          "protocol": "TCP",
          "port": 9200
        },
        {
          "name": "transport",
          "protocol": "TCP",
          "port": 9300
        }
      ]
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "elasticsearch-master-headless",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "selector": {
        "app": "elasticsearch-master"
      },
      "ports": [
        {
          "name": "http",
          "port": 9200
        },
        {
          "name": "transport",
          "port": 9300
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-7.7.3",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "postgresql",
          "port": 5432,
          "targetPort": "postgresql"
        }
      ],
      "selector": {
        "app": "postgresql",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-7.7.3",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "postgresql",
          "port": 5432,
          "targetPort": "postgresql"
        }
      ],
      "selector": {
        "app": "postgresql",
        "release": "release-name",
        "role": "master"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq-headless",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.14.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd"
        },
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp"
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist"
        },
        {
          "name": "stats",
          "port": 15672,
          "targetPort": "stats"
        }
      ],
      "selector": {
        "app": "rabbitmq",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.14.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd",
          "nodePort": null
        },
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp",
          "nodePort": null
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist",
          "nodePort": null
        },
        {
          "name": "stats",
          "port": 15672,
          "targetPort": "stats",
          "nodePort": null
        }
      ],
      "selector": {
        "app": "rabbitmq",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-backend",
      "labels": {
        "helm.sh/chart": "backend-2.6.5",
        "app.kubernetes.io/name": "backend",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "selector": {
        "helm.sh/chart": "backend-2.6.5",
        "app.kubernetes.io/name": "backend",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "component": "backend"
      },
      "type": "ClusterIP",
      "ports": [
        {
          "port": 80,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-backend-celery-beat",
      "labels": {
        "helm.sh/chart": "backend-2.6.5",
        "app.kubernetes.io/name": "backend",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "component": "cellery-beat"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "backend",
          "app.kubernetes.io/instance": "release-name",
          "component": "celery-beat"
        }
      },
      "strategy": {
        "type": "Recreate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configmap": "fbf76a211997f3a328cd10e13281153255e78927f6c1aeb91ed0690ec4816ef9",
            "checksum/secret": "a928b364ca4350688e454a37b50db749021465a28b868b3fd1c0f2c81580e3a8"
          },
          "labels": {
            "helm.sh/chart": "backend-2.6.5",
            "app.kubernetes.io/name": "backend",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "component": "celery-beat"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "celery-beat",
              "image": "signalen/backend:latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/local/bin/celery"
              ],
              "args": [
                "--app=signals",
                "beat",
                "--loglevel=WARNING",
                "--pidfile=/tmp/celerybeat.pid"
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-backend"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-backend"
                  }
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-backend-celery-worker",
      "labels": {
        "helm.sh/chart": "backend-2.6.5",
        "app.kubernetes.io/name": "backend",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "component": "cellery-worker"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "backend",
          "app.kubernetes.io/instance": "release-name",
          "component": "celery-worker"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configmap": "fbf76a211997f3a328cd10e13281153255e78927f6c1aeb91ed0690ec4816ef9",
            "checksum/secret": "a928b364ca4350688e454a37b50db749021465a28b868b3fd1c0f2c81580e3a8"
          },
          "labels": {
            "helm.sh/chart": "backend-2.6.5",
            "app.kubernetes.io/name": "backend",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "component": "celery-worker"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "celery-worker",
              "image": "signalen/backend:latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/local/bin/celery"
              ],
              "args": [
                "--app=signals",
                "worker",
                "--loglevel=WARNING",
                "--concurrency=2"
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-backend"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-backend"
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "dwh-media",
                  "mountPath": "/dwh_media"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "dwh-media",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-backend",
      "labels": {
        "helm.sh/chart": "backend-2.6.5",
        "app.kubernetes.io/name": "backend",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "component": "backend"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "backend",
          "app.kubernetes.io/instance": "release-name",
          "component": "backend"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configmap": "fbf76a211997f3a328cd10e13281153255e78927f6c1aeb91ed0690ec4816ef9",
            "checksum/secret": "a928b364ca4350688e454a37b50db749021465a28b868b3fd1c0f2c81580e3a8"
          },
          "labels": {
            "helm.sh/chart": "backend-2.6.5",
            "app.kubernetes.io/name": "backend",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "component": "backend"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 999
          },
          "initContainers": [
            {
              "name": "migrate",
              "image": "signalen/backend:latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/local/bin/python"
              ],
              "args": [
                "/app/manage.py",
                "migrate"
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-backend"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-backend"
                  }
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "api",
              "image": "signalen/backend:latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/local/bin/uwsgi"
              ],
              "args": [
                "--master",
                "--http=:8000",
                "--module=signals.wsgi:application",
                "--buffer-size=8192",
                "--processes=4",
                "--threads=2",
                "--static-map=/signals/static=/static",
                "--static-map=/signals/media=/media",
                "--die-on-term"
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-backend"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-backend"
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "media",
                  "mountPath": "/media"
                },
                {
                  "name": "dwh-media",
                  "mountPath": "/dwh_media"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/status/health",
                  "port": "http"
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/status/health",
                  "port": "http"
                },
                "initialDelaySeconds": 1,
                "periodSeconds": 10
              },
              "ports": [
                {
                  "name": "http",
                  "protocol": "TCP",
                  "containerPort": 8000
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "media",
              "persistentVolumeClaim": {
                "claimName": "release-name-backend"
              }
            },
            {
              "name": "dwh-media",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "elasticsearch-master",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {
        "esMajorVersion": "6"
      }
    },
    "spec": {
      "serviceName": "elasticsearch-master-headless",
      "selector": {
        "matchLabels": {
          "app": "elasticsearch-master"
        }
      },
      "replicas": 1,
      "podManagementPolicy": "Parallel",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "elasticsearch-master"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "30Gi"
              }
            }
          }
        }
      ],
      "template": {
        "metadata": {
          "name": "elasticsearch-master",
          "labels": {
            "heritage": "Helm",
            "release": "release-name",
            "chart": "elasticsearch",
            "app": "elasticsearch-master"
          },
          "annotations": null
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1000,
            "runAsUser": 1000
          },
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "app",
                        "operator": "In",
                        "values": [
                          "elasticsearch-master"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              ]
            }
          },
          "terminationGracePeriodSeconds": 120,
          "volumes": null,
          "enableServiceLinks": true,
          "initContainers": [
            {
              "name": "configure-sysctl",
              "securityContext": {
                "runAsUser": 11557,
                "privileged": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "image": "docker.elastic.co/elasticsearch/elasticsearch:6.8.13",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sysctl",
                "-w",
                "vm.max_map_count=262144"
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "containers": [
            {
              "name": "elasticsearch",
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "runAsNonRoot": true,
                "runAsUser": 11343,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "image": "docker.elastic.co/elasticsearch/elasticsearch:6.8.13",
              "imagePullPolicy": "IfNotPresent",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "#!/usr/bin/env bash -e\n# If the node is starting up wait for the cluster to be ready (request params: \"wait_for_status=yellow&timeout=1s\" )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\n# Disable nss cache to avoid filling dentry cache when calling curl\n# This is required with Elasticsearch Docker using nss < 3.52\nexport NSS_SDB_USE_CACHE=no\n\nhttp () {\n  local path=\"${1}\"\n  local args=\"${2}\"\n  set -- -XGET -s\n\n  if [ \"$args\" != \"\" ]; then\n    set -- \"$@\" $args\n  fi\n\n  if [ -n \"${ELASTIC_USERNAME}\" ] && [ -n \"${ELASTIC_PASSWORD}\" ]; then\n    set -- \"$@\" -u \"${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}\"\n  fi\n\n  curl --output /dev/null -k \"$@\" \"http://127.0.0.1:9200${path}\"\n}\n\nif [ -f \"${START_FILE}\" ]; then\n  echo 'Elasticsearch is already running, lets check the node is healthy'\n  HTTP_CODE=$(http \"/\" \"-w %{http_code}\")\n  RC=$?\n  if [[ ${RC} -ne 0 ]]; then\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}\"\n    exit ${RC}\n  fi\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\n  if [[ ${HTTP_CODE} == \"200\" ]]; then\n    exit 0\n  elif [[ ${HTTP_CODE} == \"503\" && \"6\" == \"6\" ]]; then\n    exit 0\n  else\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\"\n    exit 1\n  fi\n\nelse\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \"wait_for_status=yellow&timeout=1s\" )'\n  if http \"/_cluster/health?wait_for_status=yellow&timeout=1s\" \"--fail\" ; then\n    touch ${START_FILE}\n    exit 0\n  else\n    echo 'Cluster is not yet ready (request params: \"wait_for_status=yellow&timeout=1s\" )'\n    exit 1\n  fi\nfi\n"
                  ]
                },
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 3,
                "timeoutSeconds": 5
              },
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9200
                },
                {
                  "name": "transport",
                  "containerPort": 9300
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "500m",
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": "500m",
                  "memory": "1Gi"
                }
              },
              "env": [
                {
                  "name": "node.name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "discovery.zen.minimum_master_nodes",
                  "value": "1"
                },
                {
                  "name": "discovery.zen.ping.unicast.hosts",
                  "value": "elasticsearch-master-headless"
                },
                {
                  "name": "cluster.name",
                  "value": "elasticsearch"
                },
                {
                  "name": "network.host",
                  "value": "0.0.0.0"
                },
                {
                  "name": "ES_JAVA_OPTS",
                  "value": "-Xmx512m -Xms512m"
                },
                {
                  "name": "node.data",
                  "value": "true"
                },
                {
                  "name": "node.ingest",
                  "value": "true"
                },
                {
                  "name": "node.master",
                  "value": "true"
                }
              ],
              "volumeMounts": [
                {
                  "name": "elasticsearch-master",
                  "mountPath": "/usr/share/elasticsearch/data"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-7.7.3",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app": "postgresql",
          "release": "release-name",
          "role": "master"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app": "postgresql",
            "chart": "postgresql-7.7.3",
            "release": "release-name",
            "heritage": "Helm",
            "role": "master"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "initContainers": [
            {
              "name": "init-chmod-data",
              "image": "docker.io/bitnami/minideb:stretch",
              "imagePullPolicy": "Always",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                }
              },
              "command": [
                "/bin/sh",
                "-c",
                "mkdir -p /bitnami/postgresql/data\nchmod 700 /bitnami/postgresql/data\nfind /bitnami/postgresql -mindepth 0 -maxdepth 1 -not -name \".snapshot\" -not -name \"lost+found\" | \\\n  xargs chown -R 1001:1001\nchmod -R 777 /dev/shm\n"
              ],
              "securityContext": {
                "runAsUser": 0
              },
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql",
                  "subPath": null
                },
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/bitnami/postgresql:11.6.0-debian-9-r0",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "securityContext": {
                "runAsUser": 11785,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "postgres"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "signalen"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                }
              ],
              "ports": [
                {
                  "name": "postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"postgres\" -d \"signalen\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "pg_isready -U \"postgres\" -d \"signalen\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ]\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory",
                "sizeLimit": "1Gi"
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-rabbitmq",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.14.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-rabbitmq-headless",
      "podManagementPolicy": "OrderedReady",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app": "rabbitmq",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "rabbitmq",
            "release": "release-name",
            "chart": "rabbitmq-6.14.2"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-rabbitmq",
          "terminationGracePeriodSeconds": 10,
          "containers": [
            {
              "name": "rabbitmq",
              "image": "docker.io/bitnami/rabbitmq:3.8",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "bash",
                "-ec",
                "mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/\nmkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/\ntouch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\n#persist the erlang cookie in both places for server and cli tools\necho $RABBITMQ_ERL_COOKIE > /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\ncp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/\n#change permission so only the user has access to the cookie file\nchmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\n#copy the mounted configuration to both places\ncp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq\n# Apply resources limits\nulimit -n \"${RABBITMQ_ULIMIT_NOFILES}\"\n#replace the default password that is generated\nsed -i \"/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\\\/\\\\\\\\}\" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf\nexec rabbitmq-server\n"
              ],
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/opt/bitnami/rabbitmq/conf"
                },
                {
                  "name": "healthchecks",
                  "mountPath": "/usr/local/sbin/rabbitmq-api-check",
                  "subPath": "rabbitmq-api-check"
                },
                {
                  "name": "healthchecks",
                  "mountPath": "/usr/local/sbin/rabbitmq-health-check",
                  "subPath": "rabbitmq-health-check"
                },
                {
                  "name": "data",
                  "mountPath": "/opt/bitnami/rabbitmq/var/lib/rabbitmq"
                }
              ],
              "ports": [
                {
                  "name": "epmd",
                  "containerPort": 4369
                },
                {
                  "name": "amqp",
                  "containerPort": 5672
                },
                {
                  "name": "dist",
                  "containerPort": 25672
                },
                {
                  "name": "stats",
                  "containerPort": 15672
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "rabbitmq-api-check \"http://signalen:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\" '{\"status\":\"ok\"}'"
                  ]
                },
                "initialDelaySeconds": 120,
                "timeoutSeconds": 20,
                "periodSeconds": 30,
                "failureThreshold": 6,
                "successThreshold": 1
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "rabbitmq-health-check \"http://signalen:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\" '{\"status\":\"ok\"}'"
                  ]
                },
                "initialDelaySeconds": 10,
                "timeoutSeconds": 20,
                "periodSeconds": 30,
                "failureThreshold": 3,
                "successThreshold": 1
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MY_POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "K8S_SERVICE_NAME",
                  "value": "release-name-rabbitmq-headless"
                },
                {
                  "name": "K8S_ADDRESS_TYPE",
                  "value": "hostname"
                },
                {
                  "name": "RABBITMQ_NODENAME",
                  "value": "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "K8S_HOSTNAME_SUFFIX",
                  "value": ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "RABBITMQ_LOGS",
                  "value": "-"
                },
                {
                  "name": "RABBITMQ_ULIMIT_NOFILES",
                  "value": "65536"
                },
                {
                  "name": "RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS",
                  "value": "+S 2:1"
                },
                {
                  "name": "RABBITMQ_USE_LONGNAME",
                  "value": "true"
                },
                {
                  "name": "RABBITMQ_ERL_COOKIE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-rabbitmq",
                      "key": "rabbitmq-erlang-cookie"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                }
              ]
            }
          ],
          "securityContext": {
            "fsGroup": 1001,
            "runAsUser": 1001
          },
          "volumes": [
            {
              "name": "config-volume",
              "configMap": {
                "name": "release-name-rabbitmq-config",
                "items": [
                  {
                    "key": "rabbitmq.conf",
                    "path": "rabbitmq.conf"
                  },
                  {
                    "key": "enabled_plugins",
                    "path": "enabled_plugins"
                  }
                ]
              }
            },
            {
              "name": "healthchecks",
              "configMap": {
                "name": "release-name-rabbitmq-healthchecks",
                "items": [
                  {
                    "key": "rabbitmq-health-check",
                    "path": "rabbitmq-health-check",
                    "mode": 111
                  },
                  {
                    "key": "rabbitmq-api-check",
                    "path": "rabbitmq-api-check",
                    "mode": 111
                  }
                ]
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "labels": {
              "app": "rabbitmq",
              "release": "release-name",
              "heritage": "Helm"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1beta1",
    "kind": "Ingress",
    "metadata": {
      "name": "release-name-backend",
      "labels": {
        "helm.sh/chart": "backend-2.6.5",
        "app.kubernetes.io/name": "backend",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "nginx.ingress.kubernetes.io/proxy-body-size": "8m"
      }
    },
    "spec": {
      "tls": [
        {
          "hosts": [
            "api.signals.local"
          ],
          "secretName": "backend-tls"
        }
      ],
      "rules": [
        {
          "host": "api.signals.local",
          "http": {
            "paths": [
              {
                "path": "/signals",
                "backend": {
                  "serviceName": "release-name-backend",
                  "servicePort": 80
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-ocplh-test",
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "securityContext": {
        "fsGroup": 1000,
        "runAsUser": 1000
      },
      "containers": [
        {
          "name": "release-name-annnx-test",
          "image": "docker.elastic.co/elasticsearch/elasticsearch:6.8.13",
          "imagePullPolicy": "IfNotPresent",
          "command": [
            "sh",
            "-c",
            "#!/usr/bin/env bash -e\ncurl -XGET --fail 'elasticsearch-master:9200/_cluster/health?wait_for_status=yellow&timeout=1s'\n"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]