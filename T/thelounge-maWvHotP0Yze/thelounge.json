[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-thelounge",
      "labels": {
        "helm.sh/chart": "thelounge-4.3.1",
        "app.kubernetes.io/name": "thelounge",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "4.3.0-alpine",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-thelounge",
      "labels": {
        "helm.sh/chart": "thelounge-4.3.1",
        "app.kubernetes.io/name": "thelounge",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "4.3.0-alpine",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "config.js": "\"use strict\";\n\nmodule.exports = {\n  // ## Server settings\n\n  // ### `public`\n  //\n  // When set to `true`, The Lounge starts in public mode. When set to `false`,\n  // it starts in private mode.\n  //\n  // - A **public server** does not require authentication. Anyone can connect\n  //   to IRC networks in this mode. All IRC connections and channel\n  //   scrollbacks are lost when a user leaves the client.\n  // - A **private server** requires users to log in. Their IRC connections are\n  //   kept even when they are not using or logged in to the client. All joined\n  //   channels and scrollbacks are available when they come back.\n  //\n  // This value is set to `false` by default.\n  public: false,\n\n  // ### `host`\n  //\n  // IP address or hostname for the web server to listen to. For example, set it\n  // to `\"127.0.0.1\"` to accept connections from localhost only.\n  //\n  // For UNIX domain sockets, use `\"unix:/absolute/path/to/file.sock\"`.\n  //\n  // This value is set to `undefined` by default to listen on all interfaces.\n  host: undefined,\n\n  // ### `port`\n  //\n  // Set the port to listen to.\n  //\n  // This value is set to `9000` by default.\n  port: 9000,\n\n  // ### `bind`\n  //\n  // Set the local IP to bind to for outgoing connections.\n  //\n  // This value is set to `undefined` by default to let the operating system\n  // pick its preferred one.\n  bind: undefined,\n\n  // ### `reverseProxy`\n  //\n  // When set to `true`, The Lounge is marked as served behind a reverse proxy\n  // and will honor the `X-Forwarded-For` header.\n  //\n  // This value is set to `false` by default.\n  reverseProxy: true,\n\n  // ### `maxHistory`\n  //\n  // Defines the maximum number of history lines that will be kept in memory per\n  // channel/query, in order to reduce the memory usage of the server. Setting\n  // this to `-1` will keep unlimited amount.\n  //\n  // This value is set to `10000` by default.\n  maxHistory: 10000,\n\n  // ### `https`\n  //\n  // These settings are used to run The Lounge's web server using encrypted TLS.\n  //\n  // If you want more control over the webserver,\n  // [use a reverse proxy instead](https://thelounge.chat/docs/guides/reverse-proxies).\n  //\n  // The available keys for the `https` object are:\n  //\n  // - `enable`: when set to `false`, HTTPS support is disabled\n  //    and all other values are ignored.\n  // - `key`: Path to the private key file.\n  // - `certificate`: Path to the certificate.\n  // - `ca`: Path to the CA bundle.\n  //\n  // The value of `enable` is set to `false` to disable HTTPS by default, in\n  // which case the other two string settings are ignored.\n  https: {\n    enable: false,\n    key: \"\",\n    certificate: \"\",\n    ca: \"\",\n  },\n\n  // ## Client settings\n\n  // ### `theme`\n  //\n  // Set the default theme to serve to new users. They will be able to select a\n  // different one in their client settings among those available.\n  //\n  // The Lounge ships with two themes (`default` and `morning`) and can be\n  // extended by installing more themes. Read more about how to manage them\n  // [here](https://thelounge.chat/docs/guides/theme-creation).\n  //\n  // This value needs to be the package name and not the display name. For\n  // example, the value for Morning would be `morning`, and the value for\n  // Solarized would be `thelounge-theme-solarized`.\n  //\n  // This value is set to `\"default\"` by default.\n  theme: \"default\",\n\n  // ### `prefetch`\n  //\n  // When set to `true`, The Lounge will load thumbnails and site descriptions\n  // from URLs posted in channels and private messages.\n  //\n  // This value is set to `false` by default.\n  prefetch: false,\n\n  // ### `prefetchStorage`\n\n  // When set to `true`, The Lounge will store and proxy prefetched images and\n  // thumbnails on the filesystem rather than directly display the content at\n  // the original URLs.\n  //\n  // This improves security and privacy by not exposing the client IP address,\n  // always loading images from The Lounge and making all assets secure, which\n  // resolves mixed content warnings.\n  //\n  // If storage is enabled, The Lounge will fetch and store images and thumbnails\n  // in the `${THELOUNGE_HOME}/storage` folder.\n  //\n  // Images are deleted when they are no longer referenced by any message\n  // (controlled by `maxHistory`), and the folder is cleaned up when The Lounge\n  // restarts.\n  //\n  // This value is set to `false` by default.\n  prefetchStorage: false,\n\n  // ### `prefetchMaxImageSize`\n  //\n  // When `prefetch` is enabled, images will only be displayed if their file\n  // size does not exceed this limit.\n  //\n  // This value is set to `2048` kilobytes by default.\n  prefetchMaxImageSize: 2048,\n\n  // ### `fileUpload`\n  //\n  // Allow uploading files to the server hosting The Lounge.\n  //\n  // Files are stored in the `${THELOUNGE_HOME}/uploads` folder, do not expire,\n  // and are not removed by The Lounge. This may cause issues depending on your\n  // hardware, for example in terms of disk usage.\n  //\n  // The available keys for the `fileUpload` object are:\n  //\n  // - `enable`: When set to `true`, files can be uploaded on the client with a\n  //   drag-and-drop or using the upload dialog.\n  // - `maxFileSize`: When file upload is enabled, users sending files above\n  //   this limit will be prompted with an error message in their browser. A value of\n  //   `-1` disables the file size limit and allows files of any size. **Use at\n  //   your own risk.** This value is set to `10240` kilobytes by default.\n  // - `baseUrl`: If you want change the URL where uploaded files are accessed,\n  //   you can set this option to `\"https://example.com/folder/\"` and the final URL\n  //   would look like `\"https://example.com/folder/aabbccddeeff1234/name.png\"`.\n  //   If you use this option, you must have a reverse proxy configured,\n  //   to correctly proxy the uploads URLs back to The Lounge.\n  //   This value is set to `null` by default.\n  fileUpload: {\"baseUrl\":null,\"enable\":false,\"maxFileSize\":10240},\n\n  // ### `transports`\n  //\n  // Set `socket.io` transports.\n  //\n  // This value is set to `[\"polling\", \"websocket\"]` by default.\n  transports: [\"polling\", \"websocket\"],\n\n  // ### `leaveMessage`\n  //\n  // Set users' default `quit` and `part` messages if they are not providing\n  // one.\n  //\n  // This value is set to `\"The Lounge - https://thelounge.chat\"` by\n  // default.\n  leaveMessage: \"The Lounge - https://thelounge.chat\",\n\n  // ## Default network\n\n  // ### `defaults`\n  //\n  // Specifies default network information that will be used as placeholder\n  // values in the *Connect* window.\n  //\n  // The available keys for the `defaults` object are:\n  //\n  // - `name`: Name to display in the channel list of The Lounge. This value is\n  //   not forwarded to the IRC network.\n  // - `host`: IP address or hostname of the IRC server.\n  // - `port`: Usually 6667 for unencrypted connections and 6697 for\n  //   connections encrypted with TLS.\n  // - `password`: Connection password. If the server supports SASL capability,\n  //   then this password will be used in SASL authentication.\n  // - `tls`: Enable TLS connections\n  // - `rejectUnauthorized`: Whether the server certificate should be verified\n  //   against the list of supplied Certificate Authorities (CAs) by your\n  //   Node.js installation.\n  // - `nick`: Nick name. Percent signs (`%`) will be replaced by random\n  //   numbers from 0 to 9. For example, `Guest%%%` may become `Guest123`.\n  // - `username`: User name.\n  // - `realname`: Real name.\n  // - `join`: Comma-separated list of channels to auto-join once connected.\n  //\n  // This value is set to connect to the official channel of The Lounge on\n  // Freenode by default:\n  //\n  // ```js\n  // defaults: {\n  //   name: \"Freenode\",\n  //   host: \"chat.freenode.net\",\n  //   port: 6697,\n  //   password: \"\",\n  //   tls: true,\n  //   rejectUnauthorized: true,\n  //   nick: \"thelounge%%\",\n  //   username: \"thelounge\",\n  //   realname: \"The Lounge User\",\n  //   join: \"#thelounge\"\n  // }\n  // ```\n  defaults: {\n    name: \"Freenode\",\n    host: \"chat.freenode.net\",\n    port: 6697,\n    password: \"\",\n    tls: true,\n    rejectUnauthorized: true,\n    nick: \"thelounge%%\",\n    username: \"thelounge\",\n    realname: \"The Lounge User\",\n    join: \"#thelounge\",\n  },\n\n  // ### `displayNetwork`\n  //\n  // When set to `false`, network fields will not be shown in the \"Connect\"\n  // window.\n  //\n  // Note that even though users cannot access and set these fields, they can\n  // still connect to other networks using the `/connect` command. See the\n  // `lockNetwork` setting to restrict users from connecting to other networks.\n  //\n  // This value is set to `true` by default.\n  displayNetwork: true,\n\n  // ### `lockNetwork`\n  //\n  // When set to `true`, users will not be able to modify host, port and TLS\n  // settings and will be limited to the configured network.\n  //\n  // It is often useful to use it with `displayNetwork` when setting The\n  // Lounge as a public web client for a specific IRC network.\n  //\n  // This value is set to `false` by default.\n  lockNetwork: false,\n\n  // ## User management\n\n  // ### `messageStorage`\n\n  // The Lounge can log user messages, for example to access them later or to\n  // reload messages on server restart.\n\n  // Set this array with one or multiple values to enable logging:\n  // - `text`: Messages per network and channel will be stored as text files.\n  //   **Messages will not be reloaded on restart.**\n  // - `sqlite`: Messages are stored in SQLite database files, one per user.\n  //\n  // Logging can be disabled globally by setting this value to an empty array\n  // `[]`. Logging is also controlled per user individually in the `log` key of\n  // their JSON configuration file.\n  //\n  // This value is set to `[\"sqlite\", \"text\"]` by default.\n  messageStorage: [\"sqlite\", \"text\"],\n\n  // ### `useHexIp`\n  //\n  // When set to `true`, users' IP addresses will be encoded as hex.\n  //\n  // This is done to share the real user IP address with the server for host\n  // masking purposes. This is encoded in the `username` field and only supports\n  // IPv4.\n  //\n  // This value is set to `false` by default.\n  useHexIp: false,\n\n  // ## WEBIRC support\n  //\n  // When enabled, The Lounge will pass the connecting user's host and IP to the\n  // IRC server. Note that this requires to obtain a password from the IRC\n  // network that The Lounge will be connecting to and generally involves a lot\n  // of trust from the network you are connecting to.\n  //\n  // There are 2 ways to configure the `webirc` setting:\n  //\n  // - **Basic**: an object where keys are IRC hosts and values are passwords.\n  //   For example:\n  //\n  //   ```json\n  //   webirc: {\n  //     \"irc.example.net\": \"thisiswebircpassword1\",\n  //     \"irc.example.org\": \"thisiswebircpassword2\",\n  //   },\n  //   ```\n  //\n  // - **Advanced**: an object where keys are IRC hosts and values are functions\n  //   that take two arguments (`webircObj`, `network`) and return an\n  //   object to be directly passed to `irc-framework`. `webircObj` contains the\n  //   generated object which you can modify. For example:\n  //\n  //   ```js\n  //   webirc: {\n  //     \"irc.example.com\": (webircObj, network) => {\n  //       webircObj.password = \"thisiswebircpassword\";\n  //       webircObj.hostname = `webirc/${webircObj.hostname}`;\n  //       return webircObj;\n  //     },\n  //   },\n  //   ```\n  //\n  // This value is set to `null` to disable WEBIRC by default.\n  webirc: null,\n\n  // ## identd and oidentd support\n\n  // ### `identd`\n  //\n  // Run The Lounge with `identd` support.\n  //\n  // The available keys for the `identd` object are:\n  //\n  // - `enable`: When `true`, the identd daemon runs on server start.\n  // - `port`: Port to listen for ident requests.\n  //\n  // The value of `enable` is set to `false` to disable `identd` support by\n  // default, in which case the value of `port` is ignored. The default value of\n  // `port` is 113.\n  identd: {\n    enable: false,\n    port: 113,\n  },\n\n  // ### `oidentd`\n  //\n  // When this setting is a string, this enables `oidentd` support using the\n  // configuration file located at the given path.\n  //\n  // This is set to `null` by default to disable `oidentd` support.\n  oidentd: null,\n\n  // ## LDAP support\n\n  // These settings enable and configure LDAP authentication.\n  //\n  // They are only being used in private mode. To know more about private mode,\n  // see the `public` setting above.\n\n  //\n  // The authentication process works as follows:\n  //\n  // 1. The Lounge connects to the LDAP server with its system credentials.\n  // 2. It performs an LDAP search query to find the full DN associated to the\n  //    user requesting to log in.\n  // 3. The Lounge tries to connect a second time, but this time using the\n  //    user's DN and password. Authentication is validated if and only if this\n  //    connection is successful.\n  //\n  // The search query takes a couple of parameters in `searchDN`:\n  //\n  // - a base DN `searchDN/base`. Only children nodes of this DN will be likely\n  //   be returned;\n  // - a search scope `searchDN/scope` (see LDAP documentation);\n  // - the query itself, built as `(&(<primaryKey>=<username>) <filter>)`\n  //   where `<username>` is the user name provided in the log in request,\n  //   `<primaryKey>` is provided by the config and `<filter>` is a filtering\n  //   complement also given in the config, to filter for instance only for\n  //   nodes of type `inetOrgPerson`, or whatever LDAP search allows.\n  //\n  // Alternatively, you can specify the `bindDN` parameter. This will make The\n  // Lounge ignore `searchDN` options and assume that the user DN is always\n  // `<bindDN>,<primaryKey>=<username>`, where `<username>` is the user name\n  // provided in the log in request, and `<bindDN>` and `<primaryKey>` are\n  // provided by the configuration.\n  //\n  // The available keys for the `ldap` object are:\n  ldap: {\n    // - `enable`: when set to `false`, LDAP support is disabled and all other\n    //   values are ignored.\n    enable: false,\n\n    // - `url`: A url of the form `ldaps://<ip>:<port>`.\n    //   For plain connections, use the `ldap` scheme.\n    url: \"ldap://ldap.example.com\",\n\n    // - `tlsOptions`: LDAP connection TLS options (only used if scheme is\n    //   `ldaps://`). It is an object whose values are Node.js' `tls.connect()`\n    //   options. It is set to `{}` by default.\n    //   For example, this option can be used in order to force the use of IPv6:\n    //   ```js\n    //   {\n    //     host: 'my::ip::v6',\n    //     servername: 'example.com'\n    //   }\n    //   ```\n    tlsOptions: {},\n\n    // - `primaryKey`: LDAP primary key. It is set to `\"uid\"` by default.\n    primaryKey: \"uid\",\n\n    // - `baseDN`: LDAP base DN, alternative to `searchDN`. For example, set it\n    //   to `\"ou=accounts,dc=example,dc=com\"`.\n    //   When unset, the LDAP auth logic with use `searchDN` instead to locate users.\n\n    // - `searchDN`: LDAP search DN settings. This defines the procedure by\n    //   which The Lounge first looks for the user DN before authenticating them.\n    //   It is ignored if `baseDN` is specified. It is an object with the\n    //   following keys:\n    searchDN: {\n      //   - `rootDN`: This bind DN is used to query the server for the DN of\n      //     the user. This is supposed to be a system user that has access in\n      //     read-only to the DNs of the people that are allowed to log in.\n      //     It is set to `\"cn=thelounge,ou=system-users,dc=example,dc=com\"` by\n      //     default.\n      rootDN: \"uid=my-service,ou=ServiceAccount,dc=example,dc=com\",\n\n      //   - `rootPassword`: Password of The Lounge LDAP system user.\n      rootPassword: \"my-password\",\n\n      //   - `ldapFilter`: it is set to `\"(objectClass=person)(memberOf=ou=accounts,dc=example,dc=com)\"`\n      //     by default.\n      filter: \"(objectClass=person)(memberOf=ou=accounts,dc=example,dc=com)\",\n\n      //   - `base`: LDAP search base (search only within this node). It is set\n      //     to `\"dc=example,dc=com\"` by default.\n      base: \"dc=example,dc=com\",\n\n      //   - `scope`: LDAP search scope. It is set to `\"sub\"` by default.\n      scope: \"sub\",\n    },\n  },\n\n  // ## Debugging settings\n\n  // The `debug` object contains several settings to enable debugging in The\n  // Lounge. Use them to learn more about an issue you are noticing but be aware\n  // this may produce more logging or may affect connection performance so it is\n  // not recommended to use them by default.\n  //\n  // All values in the `debug` object are set to `false`.\n  debug: {\n    // ### `debug.ircFramework`\n    //\n    // When set to true, this enables extra debugging output provided by\n    // [`irc-framework`](https://github.com/kiwiirc/irc-framework), the\n    // underlying IRC library for Node.js used by The Lounge.\n    ircFramework: false,\n\n    // ### `debug.raw`\n    //\n    // When set to `true`, this enables logging of raw IRC messages into each\n    // server window, displayed on the client.\n    raw: false,\n  },\n};\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-thelounge",
      "labels": {
        "helm.sh/chart": "thelounge-4.3.1",
        "app.kubernetes.io/name": "thelounge",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "4.3.0-alpine",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "externalTrafficPolicy": null,
      "ports": [
        {
          "port": 9000,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "thelounge",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-thelounge",
      "labels": {
        "helm.sh/chart": "thelounge-4.3.1",
        "app.kubernetes.io/name": "thelounge",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "4.3.0-alpine",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "thelounge",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "thelounge",
            "app.kubernetes.io/instance": "release-name"
          },
          "annotations": {
            "checksum/config": "81e1239be56bdacfbe63ebec5240cc71dc64b5761a95dc403bcdacb430507b45"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-thelounge",
          "securityContext": {},
          "containers": [
            {
              "name": "thelounge",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "thelounge/thelounge:4.3.0-alpine",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "thelounge",
                "start",
                "-c",
                "reverseProxy=true",
                "-c",
                "public=false"
              ],
              "env": [
                {
                  "name": "PORT",
                  "value": "9000"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9000,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                },
                "failureThreshold": 5,
                "periodSeconds": 10
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                },
                "failureThreshold": 5,
                "periodSeconds": 10
              },
              "startupProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                },
                "initialDelaySeconds": 5,
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "volumeMounts": [
                {
                  "name": "thelounge-data",
                  "mountPath": "/var/opt/thelounge"
                },
                {
                  "name": "thelounge-config",
                  "mountPath": "/var/opt/thelounge/config.js",
                  "subPath": "config.js"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                },
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              }
            }
          ],
          "volumes": [
            {
              "name": "thelounge-config",
              "configMap": {
                "name": "release-name-thelounge"
              }
            },
            {
              "name": "thelounge-data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-thelounge-test-connection",
      "labels": {
        "app.kubernetes.io/name": "thelounge",
        "helm.sh/chart": "thelounge-4.3.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "wget",
          "image": "busybox",
          "command": [
            "wget"
          ],
          "args": [
            "release-name-thelounge:9000"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]