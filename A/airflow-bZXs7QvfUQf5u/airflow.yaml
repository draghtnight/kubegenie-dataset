apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: release-name
    heritage: Helm
type: Opaque
data:
  postgresql-password: YWlyZmxvdw==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis
  labels:
    app: redis
    chart: redis-10.5.7
    release: release-name
    heritage: Helm
type: Opaque
data:
  redis-password: YWlyZmxvdw==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-config-envs
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
data:
  TZ: RXRjL1VUQw==
  DATABASE_HOST: cmVsZWFzZS1uYW1lLXBnYm91bmNlci5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2Fs
  DATABASE_PORT: NjQzMg==
  DATABASE_DB: YWlyZmxvdw==
  DATABASE_USER_CMD: ZWNobyAiJHtEQVRBQkFTRV9VU0VSfSIgfCBweXRob24zIC1jICJpbXBvcnQgdXJsbGliLnBhcnNlOyBlbmNvZGVkX3VzZXIgPSB1cmxsaWIucGFyc2UucXVvdGUoaW5wdXQoKSk7IHByaW50KGVuY29kZWRfdXNlciki
  DATABASE_PASSWORD_CMD: ZWNobyAiJHtEQVRBQkFTRV9QQVNTV09SRH0iIHwgcHl0aG9uMyAtYyAiaW1wb3J0IHVybGxpYi5wYXJzZTsgZW5jb2RlZF9wYXNzID0gdXJsbGliLnBhcnNlLnF1b3RlKGlucHV0KCkpOyBwcmludChlbmNvZGVkX3Bhc3MpIg==
  DATABASE_SQLALCHEMY_CMD: ZWNobyAtbiAicG9zdGdyZXNxbCtwc3ljb3BnMjovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i
  DATABASE_CELERY_CMD: ZWNobyAtbiAiZGIrcG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0i
  DATABASE_PSQL_CMD: ZWNobyAtbiAicG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0ke0RBVEFCQVNFX1BST1BFUlRJRVN9Ig==
  REDIS_HOST: cmVsZWFzZS1uYW1lLXJlZGlzLW1hc3Rlci5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2Fs
  REDIS_PORT: NjM3OQ==
  REDIS_DBNUM: MQ==
  REDIS_PASSWORD_CMD: ZWNobyAiJHtSRURJU19QQVNTV09SRH0iIHwgcHl0aG9uMyAtYyAiaW1wb3J0IHVybGxpYi5wYXJzZTsgZW5jb2RlZF9wYXNzID0gdXJsbGliLnBhcnNlLnF1b3RlKGlucHV0KCkpOyBwcmludChmXCI6e2VuY29kZWRfcGFzc31AXCIpIGlmIGxlbihlbmNvZGVkX3Bhc3MpID4gMCBlbHNlIE5vbmUi
  REDIS_CONNECTION_CMD: ZWNobyAtbiAicmVkaXM6Ly8kKGV2YWwgJFJFRElTX1BBU1NXT1JEX0NNRCkke1JFRElTX0hPU1R9OiR7UkVESVNfUE9SVH0vJHtSRURJU19EQk5VTX0ke1JFRElTX1BST1BFUlRJRVN9Ig==
  AIRFLOW__CORE__DAGS_FOLDER: L29wdC9haXJmbG93L2RhZ3M=
  AIRFLOW__CORE__EXECUTOR: Q2VsZXJ5RXhlY3V0b3I=
  AIRFLOW__CORE__FERNET_KEY: N1Q1MTJVWFNTbUJPa3BXaW1GSElWYjhqSzZsZm1TQXZ4NG1PNkFyZWhuYz0=
  AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic=
  AIRFLOW__WEBSERVER__SECRET_KEY: VEhJUyBJUyBVTlNBRkUh
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: ODA4MA==
  AIRFLOW__CELERY__FLOWER_PORT: NTU1NQ==
  AIRFLOW__TRIGGERER__DEFAULT_CAPACITY: MTAwMA==
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: L29wdC9haXJmbG93L2xvZ3M=
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: L29wdC9haXJmbG93L2xvZ3MvZGFnX3Byb2Nlc3Nvcl9tYW5hZ2VyL2RhZ19wcm9jZXNzb3JfbWFuYWdlci5sb2c=
  AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: L29wdC9haXJmbG93L2xvZ3Mvc2NoZWR1bGVy
  AIRFLOW__CELERY__WORKER_LOG_SERVER_PORT: ODc5Mw==
  AIRFLOW__CELERY__BROKER_URL_CMD: YmFzaCAtYyAnZXZhbCAiJFJFRElTX0NPTk5FQ1RJT05fQ01EIic=
  AIRFLOW__CELERY__RESULT_BACKEND_CMD: YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX0NFTEVSWV9DTUQiJw==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-webserver-config
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
data:
  webserver_config.py: ZnJvbSBhaXJmbG93IGltcG9ydCBjb25maWd1cmF0aW9uIGFzIGNvbmYKZnJvbSBmbGFza19hcHBidWlsZGVyLnNlY3VyaXR5Lm1hbmFnZXIgaW1wb3J0IEFVVEhfREIKCiMgdGhlIFNRTEFsY2hlbXkgY29ubmVjdGlvbiBzdHJpbmcKU1FMQUxDSEVNWV9EQVRBQkFTRV9VUkkgPSBjb25mLmdldCgnY29yZScsICdTUUxfQUxDSEVNWV9DT05OJykKCiMgdXNlIGVtYmVkZGVkIERCIGZvciBhdXRoCkFVVEhfVFlQRSA9IEFVVEhfREIK
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
data:
  db_migrations.py: CiMjIyMjIyMjIyMjIyMKIyMgSW1wb3J0cyAjIwojIyMjIyMjIyMjIyMjCmltcG9ydCBsb2dnaW5nCmltcG9ydCB0aW1lCmZyb20gYWlyZmxvdy51dGlscy5kYiBpbXBvcnQgdXBncmFkZWRiCgoKIyMjIyMjIyMjIyMjIwojIyBDb25maWdzICMjCiMjIyMjIyMjIyMjIyMKbG9nID0gbG9nZ2luZy5nZXRMb2dnZXIoX19maWxlX18pCmxvZy5zZXRMZXZlbCgiSU5GTyIpCgojIGhvdyBmcmVxdWVudGx5IHRvIGNoZWNrIGZvciB1bmFwcGxpZWQgbWlncmF0aW9ucwpDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMID0gMzAwCgoKIyMjIyMjIyMjIyMjIyMjCiMjIEZ1bmN0aW9ucyAjIwojIyMjIyMjIyMjIyMjIyMKZnJvbSBhaXJmbG93LnV0aWxzLmRiIGltcG9ydCBjaGVja19taWdyYXRpb25zCgoKZGVmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKSAtPiBib29sOgogICAgIiIiCiAgICBSZXR1cm4gYSBib29sZWFuIHJlcHJlc2VudGluZyBpZiB0aGUgZGF0YWJhc2UgaGFzIHVuYXBwbGllZCBtaWdyYXRpb25zLgogICAgIiIiCiAgICBsb2dfYWxlbWJpYyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCJhbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uIikKICAgIGxvZ19hbGVtYmljX2xldmVsID0gbG9nX2FsZW1iaWMubGV2ZWwKICAgIHRyeToKICAgICAgICBsb2dfYWxlbWJpYy5zZXRMZXZlbCgiV0FSTiIpCiAgICAgICAgY2hlY2tfbWlncmF0aW9ucygwKQogICAgICAgIGxvZ19hbGVtYmljLnNldExldmVsKGxvZ19hbGVtYmljX2xldmVsKQogICAgICAgIHJldHVybiBGYWxzZQogICAgZXhjZXB0IFRpbWVvdXRFcnJvcjoKICAgICAgICByZXR1cm4gVHJ1ZQoKCmRlZiBhcHBseV9kYl9taWdyYXRpb25zKCkgLT4gTm9uZToKICAgICIiIgogICAgQXBwbHkgYW55IHBlbmRpbmcgREIgbWlncmF0aW9ucy4KICAgICIiIgogICAgbG9nLmluZm8oIi0tLS0tLS0tIFNUQVJUIC0gQVBQTFkgREIgTUlHUkFUSU9OUyAtLS0tLS0tLSIpCiAgICB1cGdyYWRlZGIoKQogICAgbG9nLmluZm8oIi0tLS0tLS0tIEZJTklTSCAtIEFQUExZIERCIE1JR1JBVElPTlMgLS0tLS0tLS0iKQoKCmRlZiBtYWluKHN5bmNfZm9yZXZlcjogYm9vbCk6CiAgICAjIGluaXRpYWwgY2hlY2sgJiBhcHBseQogICAgaWYgbmVlZHNfZGJfbWlncmF0aW9ucygpOgogICAgICAgIGxvZy53YXJuaW5nKCJ0aGVyZSBhcmUgdW5hcHBsaWVkIGRiIG1pZ3JhdGlvbnMsIHRyaWdnZXJpbmcgYXBwbHkuLi4iKQogICAgICAgIGFwcGx5X2RiX21pZ3JhdGlvbnMoKQogICAgZWxzZToKICAgICAgICBsb2cuaW5mbygidGhlcmUgYXJlIG5vIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCBjb250aW51aW5nLi4uIikKCiAgICBpZiBzeW5jX2ZvcmV2ZXI6CiAgICAgICAgIyBkZWZpbmUgdmFyaWFibGUgdG8gdHJhY2sgaG93IGxvbmcgc2luY2UgbGFzdCBtaWdyYXRpb25zIGNoZWNrCiAgICAgICAgbWlncmF0aW9uc19jaGVja19lcG9jaCA9IHRpbWUudGltZSgpCgogICAgICAgICMgbWFpbiBsb29wCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgKHRpbWUudGltZSgpIC0gbWlncmF0aW9uc19jaGVja19lcG9jaCkgPiBDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMOgogICAgICAgICAgICAgICAgbG9nLmRlYnVnKGYiY2hlY2sgaW50ZXJ2YWwgcmVhY2hlZCwgY2hlY2tpbmcgZm9yIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLi4uIikKICAgICAgICAgICAgICAgIGlmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKToKICAgICAgICAgICAgICAgICAgICBsb2cud2FybmluZygidGhlcmUgYXJlIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCB0cmlnZ2VyaW5nIGFwcGx5Li4uIikKICAgICAgICAgICAgICAgICAgICBhcHBseV9kYl9taWdyYXRpb25zKCkKICAgICAgICAgICAgICAgIG1pZ3JhdGlvbnNfY2hlY2tfZXBvY2ggPSB0aW1lLnRpbWUoKQoKICAgICAgICAgICAgIyBlbnN1cmUgd2UgZG9udCBsb29wIHRvbyBmYXN0CiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQoKCiMjIyMjIyMjIyMjIyMjCiMjIFJ1biBNYWluICMjCiMjIyMjIyMjIyMjIyMjCm1haW4oc3luY19mb3JldmVyPVRydWUp
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-pgbouncer-certs
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
data:
  client.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc0RweWs2cW5GTm1sQmdCZkhid3VDYnU0ZHhRU2RtbUZUR0tYMCtDaGVEbHJJbnl1CnNQOWNzdElvYmRTN0NMUFV0aTFLOW9nMk9ocCtWbVBXWkw5dHVzaFh5d010cGM4elkyMEo5MkJSQzgwbURFUXcKcENaVWZXeHdTT1pYS1RRaC92MC9QQ29YRmtTR3RUUjlHT3RlTTZFejFQUUtQYUtlTGNUTnFFQ1NwOGc0djRXRgp0b3MrNXQvZUppUkNLTHFtbUFXQWErRDQraWZseURBcDFnRkxiaGRhUWZPc1g4WXJIMWRXeHljOFpSeDVTSDVzCllzYVVtRk9sYWJ1ek1Pcnp6WTc5bXQ0cXNYR0NzQlZkU1V1Wk9SUno4REsxZXpjY3c1djRUU0R1ZWIya1FrcW0KUzdsaTI5VUNVYW9pMEE1SjB6ZFhuNSt6dnNqZTRrTlFXalc3WFFJREFRQUJBb0lCQUhZaldIZ0JxT3hqVXl1SQp5RHJJMGh3WVNmc1o2NTZSOHBoWVordlQ1S3NSNHU1Rm8xNW9jaDQyb0grd1lvbmM5RFlFZXdKMklkUWx1cGZ6CmFlQTBMRDFRM1BudGNZWjhOcmpxZWducCthcnRwaG9IQkl5bVhYR1BabDZZZThuVmR3elhmTEs2akt1UzJMTlYKTXArbitZaW5Bblk1K3p1Q2JvUEVNUklmNTdDdGZXOFJsK1FLbFJ4RTNvSDgwU0J2WkdsbitkbVZySFlhRUwrZQp0djJCRzVFS3hrZkhNaDk5UlNwZkp5K2FXQ2hMMUQzSVN1R0c3T0tMeEw5L1BwZGtnNk54cGFFeFEvR1JYN1hzCmVnSHFpY1hpZEpPT3dKZThrZUlmOEZ0TWJxOHliejNWTzgrMnkyV1V3cXJlLzNrcElwM0UrbUNoaEQyeC9vNFIKWVFDSkM0RUNnWUVBNG9NdGdEazBVRXo1MzgrZ0M4WUVDUFZ3dTRETTZ0Wmh4RkViSzZEU0VxWk1zb0hJcGhBTgovSWsxMlVxaW9aRVZ4VWk0b3dFeVo2NlJTS1k5Q3hHd3J4QTNOR0phWVp2ZFd0MHdHL0N1KzdXVXh0aDFSZ2g3Cm8wcVJ1YVJxQU1Jd293U0ZtenlYV2gybVJNaEtsWmFHUlhDdlNMdnl1ME5TdmpwK3I0dXg3VzBDZ1lFQXh5dDgKaEFSOGlFT0lLZlFMbjZYQlFET1piR1h5bGNxelZ2dEFXbmhQWGxjRDhCZ3hUb0RES3ZEZHBPSTJVTStaQ1kxZwpGMkdqWVoxcFBPVUkyUFdqNTVRN2VQcXBvV3ZoSWljSkFuaXJGMWNxaXNpak9aZkk1dVg3TDJpYUo4UlhGM096CmI3STVsMzBZVGlhOHIrclVVTzhJVjhOY05GUlFsczA1VXRIVi83RUNnWUI4ZVRXUjF0Mm1td1pkTlUxdjZ0cmcKeVcrdnVqSGhndm1xMWg4bU5IUDhoNkp5SGR2VFZkTTV5WFRyK1pXeFQzYzFPS2N0L0VSa3NZdG83dUZ3cWNIOApFZDhrVEQvNmo1cHVpa29ic0lHWUZNcXpFdFF2TGc0elI1RVpBUDYzZC84ZU5pZnRqTGhuYncrbGtLTmIzS0hnCm12SFgrR0NGQTVQK3NVcFkwVjF2YVFLQmdRQ3krQ2FaVXBhOHMwSkZ3S0E1UXU3V1RBZVBXa1NUeVdOQnc5L2QKNjhJV0djYldGa2NvTFpneW0rSHU2YjY0K3ZLZm5NUTkvbVNic0tFQ01TUzBJSGE1LzM4NWhMU3M4bzJJN042eApzOUM1MW4vSjJlU2lPZnd6VDNGWTludWZSRlNtSkRlWEpPV1BkTDlFYXBhZTFUc1h4dE1PV2VRZXVhejQ5VXlQCldUTWM0UUtCZ1FDbCtYRTJncTRiTG9BWjlZeXdLMjNGTXJTUDVDRS83YThmTkZMWWZGRG9tMGlWSWhsMnduZTgKY1VxVko1TTNka09NMk44UTdHY0VSLzJGUUtWRWZTOXRIeE9hMjU2eEJ1WWEwcXJiNWd1NW93clFSUnhFS2gzTApmMTNKTkdOZXRaUWlBeVlyYUpCTThzb0h3RlBaakFoYkFPYUM4aU55MjEwZXVCeUdKblRuU1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  client.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4akNDQWRxZ0F3SUJBZ0lSQUtPbHcrVldkeFlxNVJvSTJ1V1BEeUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmJHOWpZV3hvYjNOME1CNFhEVEl5TURZeE1qQTVNRFl3TUZvWERUSXpNRFl4TWpBNQpNRFl3TUZvd0ZERVNNQkFHQTFVRUF4TUpiRzlqWVd4b2IzTjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzRHB5azZxbkZObWxCZ0JmSGJ3dUNidTRkeFFTZG1tRlRHS1gwK0NoZURscklueXUKc1A5Y3N0SW9iZFM3Q0xQVXRpMUs5b2cyT2hwK1ZtUFdaTDl0dXNoWHl3TXRwYzh6WTIwSjkyQlJDODBtREVRdwpwQ1pVZld4d1NPWlhLVFFoL3YwL1BDb1hGa1NHdFRSOUdPdGVNNkV6MVBRS1BhS2VMY1ROcUVDU3A4ZzR2NFdGCnRvcys1dC9lSmlSQ0tMcW1tQVdBYStENCtpZmx5REFwMWdGTGJoZGFRZk9zWDhZckgxZFd4eWM4WlJ4NVNINXMKWXNhVW1GT2xhYnV6TU9yenpZNzltdDRxc1hHQ3NCVmRTVXVaT1JSejhESzFlemNjdzV2NFRTRHVlYjJrUWtxbQpTN2xpMjlVQ1Vhb2kwQTVKMHpkWG41K3p2c2plNGtOUVdqVzdYUUlEQVFBQm96OHdQVEFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBOWt0dUpJWkZVMGpuVWxXdWdPWHU4eVdEbEliN3k4V3c5UApESGNxbm5lYzNGclliYXMxbmxDSXprN28yMlp3cy8zZmV2RjZaOWFTeEM2OFZCRGc0UGZNbUFSSkQ4OEhmdmcyCjAzSnRJL2RBTC9scERtL05BeEhNdklLWXZtK084bU5JVTFURWpnSEd4TGhmTFdyZHZwOEV4TEN2TzdqenBJTHoKQ3NBeTBWR3lxcGtGL3IvbzVLM211VVhCVStrTTY3K1Fsc1Qzams1dTF0Yi8rYlhUQ2FFWDU0SGpsdUJiN1pkUwpwZnZyOFNLNGxtR1l0Q3dQNE5KajJmRVl4UFZ5Yk5CV3JPSHU2YjdGeXBvWTdzbWFrakVkT1ZBS0QzSWlta3JXCnhPWFBqSmVETDJma0tmZzVNN3YrczdBazZSYWQwL25MN1ZSN0M0L1FOUUF5d0pIS2k3Yz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
data:
  pgbouncer.ini: CltkYXRhYmFzZXNdCiogPSBob3N0PXJlbGVhc2UtbmFtZS1wb3N0Z3Jlc3FsLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwgcG9ydD01NDMyCgpbcGdib3VuY2VyXQpwb29sX21vZGUgPSB0cmFuc2FjdGlvbgptYXhfY2xpZW50X2Nvbm4gPSAxMDAwCmRlZmF1bHRfcG9vbF9zaXplID0gIDIwCmlnbm9yZV9zdGFydHVwX3BhcmFtZXRlcnMgPSBleHRyYV9mbG9hdF9kaWdpdHMKCmxpc3Rlbl9wb3J0ID0gNjQzMgpsaXN0ZW5fYWRkciA9ICoKCmF1dGhfdHlwZSA9IG1kNQphdXRoX2ZpbGUgPSAvaG9tZS9wZ2JvdW5jZXIvdXNlcnMudHh0Cgpsb2dfZGlzY29ubmVjdGlvbnMgPSAwCmxvZ19jb25uZWN0aW9ucyA9IDAKCiMgbG9ja3Mgd2lsbCBuZXZlciBiZSByZWxlYXNlZCB3aGVuIGBwb29sX21vZGU9dHJhbnNhY3Rpb25gIChhaXJmbG93IGluaXRkYi91cGdyYWRlZGIgc2NyaXB0cyBjcmVhdGUgbG9ja3MpCnNlcnZlcl9yZXNldF9xdWVyeSA9IFNFTEVDVCBwZ19hZHZpc29yeV91bmxvY2tfYWxsKCkKc2VydmVyX3Jlc2V0X3F1ZXJ5X2Fsd2F5cyA9IDEKCiMjIENMSUVOVCBUTFMgU0VUVElOR1MgIyMKY2xpZW50X3Rsc19zc2xtb2RlID0gcHJlZmVyCmNsaWVudF90bHNfY2lwaGVycyA9IG5vcm1hbApjbGllbnRfdGxzX2tleV9maWxlID0gL2hvbWUvcGdib3VuY2VyL2NlcnRzL2NsaWVudC5rZXkKY2xpZW50X3Rsc19jZXJ0X2ZpbGUgPSAvaG9tZS9wZ2JvdW5jZXIvY2VydHMvY2xpZW50LmNydAoKIyMgU0VSVkVSIFRMUyBTRVRUSU5HUyAjIwpzZXJ2ZXJfdGxzX3NzbG1vZGUgPSBwcmVmZXIKc2VydmVyX3Rsc19jaXBoZXJzID0gbm9ybWFs
  gen_auth_file.sh: CiMhL2Jpbi9zaCAtZQoKIyBERVNDUklQVElPTjoKIyAtIHVwZGF0ZXMgdGhlIHBnYm91bmNlciBgYXV0aF9maWxlYCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcwojIC0gY2FsbGVkIGluIG1haW4gcGdib3VuY2VyIGNvbnRhaW5lciBzdGFydC1jb21tYW5kIHNvIHRoYXQgYGF1dGhfZmlsZWAgaXMgdXBkYXRlZCBlYWNoIHJlc3RhcnQsCiMgICBmb3IgZXhhbXBsZSwgd2hlbiB0aGUgbGl2ZW5lc3NQcm9iZSBmYWlscyBkdWUgdG8gYSBEQVRBQkFTRV9QQVNTV09SRCBzZWNyZXQgdXBkYXRlCgojIHZhcmlhYmxlcyB0byBpbmNyZWFzZSBjbGFyaXR5IG9mIHBhdHRlcm4gbWF0Y2hpbmcKT05FX1FVT1RFPSciJwpUV09fUVVPVEU9JyIiJwoKIyBwZ2JvdW5jZXIgcmVxdWlyZXMgYCJgIHRvIGJlIGVzY2FwZWQgYXMgYCIiYApFU0NBUEVEX0RBVEFCQVNFX1VTRVI9IiR7REFUQUJBU0VfVVNFUi8kT05FX1FVT1RFLyRUV09fUVVPVEV9IgpFU0NBUEVEX0RBVEFCQVNFX1BBU1NXT1JEPSIke0RBVEFCQVNFX1BBU1NXT1JELyRPTkVfUVVPVEUvJFRXT19RVU9URX0iCgojIHBnYm91bmNlciByZXF1aXJlcyBhdXRoX2ZpbGUgaW4gZm9ybWF0IGAibXktdXNlcm5hbWUiICJteS1wYXNzd29yZCJgCmVjaG8gXCIkRVNDQVBFRF9EQVRBQkFTRV9VU0VSXCIgXCIkRVNDQVBFRF9EQVRBQkFTRV9QQVNTV09SRFwiID4gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAplY2hvICJTdWNjZXNzZnVsbHkgZ2VuZXJhdGVkIGF1dGhfZmlsZTogL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dCI=
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
data:
  sync_users.py: 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis
  labels:
    app: redis
    chart: redis-10.5.7
    heritage: Helm
    release: release-name
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  labels:
    app: redis
    chart: redis-10.5.7
    heritage: Helm
    release: release-name
data:
  ping_readiness_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_PASSWORD --no-auth-warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_PASSWORD --no-auth-warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD --no-auth-warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD --no-auth-warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
      - get
      - delete
      - list
      - patch
      - watch
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods/exec
    verbs:
      - create
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name
  labels:
    app: airflow
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name
subjects:
  - kind: ServiceAccount
    name: release-name
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: release-name
    role: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  labels:
    app: redis
    chart: redis-10.5.7
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  labels:
    app: redis
    chart: redis-10.5.7
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
    role: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-flower
  labels:
    app: airflow
    component: flower
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: flower
    release: release-name
  ports:
    - name: flower
      protocol: TCP
      port: 5555
      targetPort: 5555
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: pgbouncer
    release: release-name
  ports:
    - name: pgbouncer
      protocol: TCP
      port: 6432
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: web
    release: release-name
  sessionAffinity: None
  ports:
    - name: web
      protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-worker
  labels:
    app: airflow
    component: worker
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  ports:
    - name: worker
      protocol: TCP
      port: 8793
  clusterIP: None
  selector:
    app: airflow
    component: worker
    release: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-db-migrations
  labels:
    app: airflow
    component: db-migrations
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: db-migrations
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 61e19d34beb27a07e79b07cd1732953a16bc580a985d37104e3889023ed17425
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/db-migrations-script: 5f00610c570937a76488380602536f1a0487c0dea26e2a421a63560257180aae
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: db-migrations
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector: {}
      affinity: {}
      tolerations: []
      securityContext:
        fsGroup: 0
      serviceAccountName: release-name
      initContainers:
        - name: check-db
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec timeout 60s airflow db check
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: db-migrations
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10304
            runAsGroup: 0
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          resources:
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - python
            - -u
            - /mnt/scripts/db_migrations.py
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
      volumes:
        - name: logs-data
          emptyDir: {}
        - name: scripts
          secret:
            secretName: release-name-db-migrations
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-flower
  labels:
    app: airflow
    component: flower
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: flower
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 61e19d34beb27a07e79b07cd1732953a16bc580a985d37104e3889023ed17425
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: flower
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector: {}
      affinity: {}
      tolerations: []
      securityContext:
        fsGroup: 0
      serviceAccountName: release-name
      initContainers:
        - name: check-db
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec timeout 60s airflow db check
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow db check-migrations -t 60
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: airflow-flower
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10897
            runAsGroup: 0
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          resources:
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          ports:
            - name: flower
              containerPort: 5555
              protocol: TCP
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow celery flower
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            exec:
              command:
                - bash
                - -c
                - exec curl 'http://localhost:5555'
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            exec:
              command:
                - bash
                - -c
                - exec curl 'http://localhost:5555'
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      volumes:
        - name: logs-data
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pgbouncer
  labels:
    app: airflow
    component: pgbouncer
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: pgbouncer
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 61e19d34beb27a07e79b07cd1732953a16bc580a985d37104e3889023ed17425
        checksum/secret-pgbouncer: ab387aee862621d44711643df5a5df750db1a058f32d9d5eae1a9a680d5f09b4
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: pgbouncer
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector: {}
      affinity: {}
      tolerations: []
      securityContext:
        fsGroup: 0
      terminationGracePeriodSeconds: 120
      serviceAccountName: release-name
      containers:
        - name: pgbouncer
          image: ghcr.io/airflow-helm/pgbouncer:1.17.0-patch.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11138
            runAsGroup: 1001
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          resources:
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          ports:
            - name: pgbouncer
              containerPort: 6432
              protocol: TCP
          command:
            - /usr/bin/dumb-init
            - --rewrite=15:2
            - --
          args:
            - /bin/sh
            - -c
            - |-
              /home/pgbouncer/config/gen_auth_file.sh && \
              exec pgbouncer /home/pgbouncer/config/pgbouncer.ini
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 3
            exec:
              command:
                - /bin/sh
                - -c
                - psql $(eval $DATABASE_PSQL_CMD) --tuples-only --command="SELECT 1;" | grep -q "1"
          startupProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 15
            failureThreshold: 30
            tcpSocket:
              port: 6432
          volumeMounts:
            - name: pgbouncer-config
              mountPath: /home/pgbouncer/config
              readOnly: true
            - name: pgbouncer-certs
              mountPath: /home/pgbouncer/certs
              readOnly: true
      volumes:
        - name: pgbouncer-config
          secret:
            secretName: release-name-pgbouncer
            items:
              - key: gen_auth_file.sh
                path: gen_auth_file.sh
                mode: 493
              - key: pgbouncer.ini
                path: pgbouncer.ini
        - name: pgbouncer-certs
          projected:
            sources:
              - secret:
                  name: release-name-pgbouncer-certs
                  items:
                    - key: client.key
                      path: client.key
                    - key: client.crt
                      path: client.crt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-scheduler
  labels:
    app: airflow
    component: scheduler
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: scheduler
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 61e19d34beb27a07e79b07cd1732953a16bc580a985d37104e3889023ed17425
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: scheduler
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector: {}
      affinity: {}
      tolerations: []
      securityContext:
        fsGroup: 0
      serviceAccountName: release-name
      initContainers:
        - name: check-db
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec timeout 60s airflow db check
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow db check-migrations -t 60
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: airflow-scheduler
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11763
            runAsGroup: 0
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          resources:
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow scheduler -n -1
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 60
            exec:
              command:
                - /usr/bin/dumb-init
                - --
                - /entrypoint
                - python
                - -Wignore
                - -c
                - |
                  import os
                  import sys

                  # suppress logs triggered from importing airflow packages
                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  from airflow.jobs.scheduler_job import SchedulerJob
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname

                  with create_session() as session:
                      # ensure the SchedulerJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      scheduler_job = session \
                          .query(SchedulerJob) \
                          .filter_by(hostname=hostname) \
                          .order_by(SchedulerJob.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (scheduler_job is not None) and scheduler_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The SchedulerJob (id={scheduler_job.id}) for hostname '{hostname}' is not alive")
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: log-cleanup
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources: {}
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: LOG_PATH
              value: /opt/airflow/logs
            - name: RETENTION_MINUTES
              value: "21600"
            - name: INTERVAL_SECONDS
              value: "900"
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - |
              set -euo pipefail

              # break the infinite loop when we receive SIGINT or SIGTERM
              trap "exit 0" SIGINT SIGTERM

              while true; do
                START_EPOCH=$(date --utc +%s)
                echo "[$(date --utc +%FT%T.%3N)] deleting log files older than $RETENTION_MINUTES minutes..."

                # delete all writable files ending in ".log" with modified-time older than $RETENTION_MINUTES
                # NOTE: `-printf "."` prints a "." for each deleted file, which we count the bytes of with `wc -c`
                DELETED_COUNT=$(
                  find "$LOG_PATH" \
                    -type f \
                    -name "*.log" \
                    -mmin +"$RETENTION_MINUTES" \
                    -writable \
                    -delete \
                    -printf "." \
                  | wc -c
                )

                END_EPOCH=$(date --utc +%s)
                LOOP_DURATION=$((END_EPOCH - START_EPOCH))
                echo "[$(date --utc +%FT%T.%3N)] deleted $DELETED_COUNT files in $LOOP_DURATION seconds"

                SECONDS_TO_SLEEP=$((INTERVAL_SECONDS - LOOP_DURATION))
                if (( SECONDS_TO_SLEEP > 0 )); then
                  echo "[$(date --utc +%FT%T.%3N)] waiting $SECONDS_TO_SLEEP seconds..."
                  sleep $SECONDS_TO_SLEEP
                fi
              done
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      volumes:
        - name: logs-data
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: airflow
      component: sync-users
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 61e19d34beb27a07e79b07cd1732953a16bc580a985d37104e3889023ed17425
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-users-script: cbef1346dbaba52ce4169fb6c86cbbe8538961970d25518f6b4246b5d12d370a
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-users
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector: {}
      affinity: {}
      tolerations: []
      securityContext:
        fsGroup: 0
      serviceAccountName: release-name
      initContainers:
        - name: check-db
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec timeout 60s airflow db check
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow db check-migrations -t 60
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: sync-airflow-users
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11434
            runAsGroup: 0
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          resources:
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - python
            - -u
            - /mnt/scripts/sync_users.py
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: scripts
              mountPath: /mnt/scripts
              readOnly: true
      volumes:
        - name: logs-data
          emptyDir: {}
        - name: scripts
          secret:
            secretName: release-name-sync-users
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-triggerer
  labels:
    app: airflow
    component: triggerer
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: triggerer
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 61e19d34beb27a07e79b07cd1732953a16bc580a985d37104e3889023ed17425
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: triggerer
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector: {}
      affinity: {}
      tolerations: []
      serviceAccountName: release-name
      securityContext:
        fsGroup: 0
      initContainers:
        - name: check-db
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec timeout 60s airflow db check
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow db check-migrations -t 60
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: airflow-triggerer
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11967
            runAsGroup: 0
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          resources:
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow triggerer
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 5
            exec:
              command:
                - /usr/bin/dumb-init
                - --
                - /entrypoint
                - python
                - -Wignore
                - -c
                - |
                  import os
                  import sys

                  # suppress logs triggered from importing airflow packages
                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  from airflow.jobs.triggerer_job import TriggererJob
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname

                  with create_session() as session:
                      # ensure the TriggererJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      triggerer_job = session \
                          .query(TriggererJob) \
                          .filter_by(hostname=hostname) \
                          .order_by(TriggererJob.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (triggerer_job is not None) and triggerer_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The TriggererJob (id={triggerer_job.id}) for hostname '{hostname}' is not alive")
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      volumes:
        - name: logs-data
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-web
  labels:
    app: airflow
    component: web
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: web
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 61e19d34beb27a07e79b07cd1732953a16bc580a985d37104e3889023ed17425
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config-webserver-config: 143e94d34aff7eeb4704810b48fb754a25f0c6481faaaabf4c4de846f4134eee
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: web
        release: release-name
    spec:
      restartPolicy: Always
      nodeSelector: {}
      affinity: {}
      tolerations: []
      serviceAccountName: release-name
      securityContext:
        fsGroup: 0
      initContainers:
        - name: check-db
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec timeout 60s airflow db check
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow db check-migrations -t 60
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: airflow-web
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11289
            runAsGroup: 0
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          resources:
            seccompProfile:
              type: RuntimeDefault
          ports:
            - name: web
              containerPort: 8080
              protocol: TCP
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow webserver
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            httpGet:
              scheme: HTTP
              path: /health
              port: web
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            httpGet:
              scheme: HTTP
              path: /health
              port: web
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
            - name: webserver-config
              mountPath: /opt/airflow/webserver_config.py
              subPath: webserver_config.py
              readOnly: true
      volumes:
        - name: logs-data
          emptyDir: {}
        - name: webserver-config
          secret:
            secretName: release-name-webserver-config
            defaultMode: 420
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: release-name
    heritage: Helm
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: release-name
      role: master
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.6.4
        release: release-name
        heritage: Helm
        role: master
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      securityContext:
        fsGroup: 1001
      initContainers: null
      containers:
        - name: release-name-postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r9
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          securityContext:
            runAsUser: 11219
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: airflow
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "airflow" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: null
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  labels:
    app: redis
    chart: redis-10.5.7
    release: release-name
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: release-name
      role: master
  serviceName: release-name-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-10.5.7
        release: release-name
        role: master
      annotations:
        checksum/health: 1957420aac30345fc7ab07ecf223f18319089ca45ac2ad5dabb6eaaac6ae1e50
        checksum/configmap: 2a432f7bc5fe401bc1d5db0ac89f6c7d3f843b3aa24d5c9540b55b2fecb40987
        checksum/secret: e09a1f5300436c929c9361996872076a54b41a357d3446c44a2218f3144be6f4
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: release-name-redis
          image: docker.io/bitnami/redis:5.0.7-debian-10-r32
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11474
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
            - -c
            - |
              if [[ -n $REDIS_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_PASSWORD_FILE}`
                export REDIS_PASSWORD=$password_aux
              fi
              if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
              fi
              if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
              fi
              ARGS=("--port" "${REDIS_PORT}")
              ARGS+=("--requirepass" "${REDIS_PASSWORD}")
              ARGS+=("--masterauth" "${REDIS_PASSWORD}")
              ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
              ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
              /run.sh ${ARGS[@]}
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 5
          resources:
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: null
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
      volumes:
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: release-name-redis
        - name: redis-data
          emptyDir: {}
        - name: redis-tmp-conf
          emptyDir: {}
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-worker
  labels:
    app: airflow
    component: worker
    chart: airflow-8.6.0
    release: release-name
    heritage: Helm
spec:
  serviceName: release-name-worker
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: airflow
      component: worker
      release: release-name
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 61e19d34beb27a07e79b07cd1732953a16bc580a985d37104e3889023ed17425
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: worker
        release: release-name
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      serviceAccountName: release-name
      nodeSelector: {}
      affinity: {}
      tolerations: []
      securityContext:
        fsGroup: 0
      initContainers:
        - name: check-db
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec timeout 60s airflow db check
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow db check-migrations -t 60
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: airflow-worker
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11703
            runAsGroup: 0
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          resources:
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: DUMB_INIT_SETSID
              value: "0"
          ports:
            - name: wlog
              containerPort: 8793
              protocol: TCP
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - exec airflow celery worker
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: log-cleanup
          image: apache/airflow:2.2.5-python3.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 50000
            runAsGroup: 0
          resources: {}
          envFrom:
            - secretRef:
                name: release-name-config-envs
          env:
            - name: LOG_PATH
              value: /opt/airflow/logs
            - name: RETENTION_MINUTES
              value: "21600"
            - name: INTERVAL_SECONDS
              value: "900"
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
          args:
            - bash
            - -c
            - |
              set -euo pipefail

              # break the infinite loop when we receive SIGINT or SIGTERM
              trap "exit 0" SIGINT SIGTERM

              while true; do
                START_EPOCH=$(date --utc +%s)
                echo "[$(date --utc +%FT%T.%3N)] deleting log files older than $RETENTION_MINUTES minutes..."

                # delete all writable files ending in ".log" with modified-time older than $RETENTION_MINUTES
                # NOTE: `-printf "."` prints a "." for each deleted file, which we count the bytes of with `wc -c`
                DELETED_COUNT=$(
                  find "$LOG_PATH" \
                    -type f \
                    -name "*.log" \
                    -mmin +"$RETENTION_MINUTES" \
                    -writable \
                    -delete \
                    -printf "." \
                  | wc -c
                )

                END_EPOCH=$(date --utc +%s)
                LOOP_DURATION=$((END_EPOCH - START_EPOCH))
                echo "[$(date --utc +%FT%T.%3N)] deleted $DELETED_COUNT files in $LOOP_DURATION seconds"

                SECONDS_TO_SLEEP=$((INTERVAL_SECONDS - LOOP_DURATION))
                if (( SECONDS_TO_SLEEP > 0 )); then
                  echo "[$(date --utc +%FT%T.%3N)] waiting $SECONDS_TO_SLEEP seconds..."
                  sleep $SECONDS_TO_SLEEP
                fi
              done
          volumeMounts:
            - name: logs-data
              mountPath: /opt/airflow/logs
      volumes:
        - name: logs-data
          emptyDir: {}
