[
  {
    "kind": "NetworkPolicy",
    "apiVersion": "networking.k8s.io/v1",
    "metadata": {
      "name": "release-name-couchdb",
      "labels": {
        "app": "couchdb",
        "chart": "couchdb-3.3.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "podSelector": {
        "matchLabels": {
          "app": "couchdb",
          "release": "release-name"
        }
      },
      "ingress": [
        {
          "ports": [
            {
              "protocol": "TCP",
              "port": 5984
            }
          ]
        },
        {
          "ports": [
            {
              "protocol": "TCP",
              "port": 9100
            },
            {
              "protocol": "TCP",
              "port": 4369
            }
          ],
          "from": [
            {
              "podSelector": {
                "matchLabels": {
                  "app": "couchdb",
                  "release": "release-name"
                }
              }
            }
          ]
        }
      ],
      "policyTypes": [
        "Ingress"
      ]
    }
  },
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "elasticsearch-master-pdb"
    },
    "spec": {
      "maxUnavailable": 1,
      "selector": {
        "matchLabels": {
          "app": "elasticsearch-master"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-couchdb",
      "labels": {
        "app": "couchdb",
        "chart": "couchdb-3.3.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-rabbitmq",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.18.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-archesproject",
      "labels": {
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-couchdb",
      "labels": {
        "app": "release-name-couchdb",
        "chart": "couchdb-3.3.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "adminUsername": "YWRtaW4=",
      "adminPassword": "Y2Mwa1VWTGJrTHc5bTFOSWxXOGk=",
      "cookieAuthSecret": "YkJ0OXlsSlg5dDhvODFkOGcwSzU="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.10.6",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "postgresql-password": "cG9zdGdyZXM="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-rabbitmq",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.18.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "rabbitmq-password": "PFlPVVJfTkVXX1JBQkJJVE1RX1BBU1NXT1JEPg==",
      "rabbitmq-erlang-cookie": "a052b1dsd1I0TkZvcjVlZlc5Vmdsd0xwMENXSVdhcXA="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-archesproject",
      "labels": {
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "celery-broker-url": "YW1xcDovL3VzZXI6PFlPVVJfTkVXX1JBQkJJVE1RX1BBU1NXT1JEPkByZWxlYXNlLW5hbWUtcmFiYml0bXE6NTY3Mg=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-couchdb",
      "labels": {
        "app": "couchdb",
        "chart": "couchdb-3.3.2",
        "heritage": "Helm",
        "release": "release-name"
      }
    },
    "data": {
      "inifile": "[chttpd]\nbind_address = any\nrequire_valid_user = false\n\n[couchdb]\nuuid = <YOUR_NEW_COUCHDB_UUID>\n",
      "seedlistinifile": "[cluster]\nseedlist = couchdb@release-name-couchdb-0.release-name-couchdb.default.svc.cluster.local,couchdb@release-name-couchdb-1.release-name-couchdb.default.svc.cluster.local,couchdb@release-name-couchdb-2.release-name-couchdb.default.svc.cluster.local\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-rabbitmq-config",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.18.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "enabled_plugins": "[rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap].",
      "rabbitmq.conf": "##username and password\ndefault_user=user\ndefault_pass=CHANGEME\n## Clustering\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator=min-masters\n# enable guest user\nloopback_users.guest = false\n#disk_free_limit.absolute = 50MB\n#management.load_definitions = /app/load_definition.json"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-rabbitmq-healthchecks",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.18.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "rabbitmq-health-check": "#!/bin/sh\nSTART_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\nif [ -f ${START_FLAG} ]; then\n    rabbitmqctl node_health_check\n    RESULT=$?\n    if [ $RESULT -ne 0 ]; then\n      rabbitmqctl status\n      exit $?\n    fi\n    rm -f ${START_FLAG}\n    exit ${RESULT}\nfi\nrabbitmq-api-check $1 $2",
      "rabbitmq-api-check": "#!/bin/sh\nset -e\nURL=$1\nEXPECTED=$2\nACTUAL=$(curl --silent --show-error --fail \"${URL}\")\necho \"${ACTUAL}\"\ntest \"${EXPECTED}\" = \"${ACTUAL}\""
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-archesproject-env-static",
      "labels": {
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "DOMAIN_NAMES": "arches.example.org",
      "LOCAL_PROXY_HOST": "arches",
      "LOCAL_PROXY_PORT": "8000",
      "NGINX_PROTOCOL": "http",
      "NGINX_PROXY_MODE": "local",
      "PUBLIC_MODE": "False",
      "TZ": "PST"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-archesproject-env",
      "labels": {
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "COUCHDB_HOST": "release-name-couchdb",
      "COUCHDB_PORT": "5984",
      "COUCHDB_USER": "admin",
      "DJANGO_DEBUG": "False",
      "DJANGO_MODE": "PROD",
      "DOMAIN_NAMES": "arches.example.org",
      "ESHOST": "elasticsearch-master",
      "ESPORT": "9200",
      "INSTALL_DEFAULT_CONCEPTS": "False",
      "INSTALL_DEFAULT_GRAPHS": "False",
      "MOBILE_OAUTH_CLIENT_ID": null,
      "PGDBNAME": "arches",
      "PGHOST": "release-name-postgresql",
      "PGPORT": "5432",
      "PGUSERNAME": "postgres",
      "PYTHONUNBUFFERED": "0",
      "TZ": "PST"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-archesproject-init-db",
      "labels": {
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "init.sql": "CREATE DATABASE template_postgis WITH ENCODING 'UTF8' LC_COLLATE='en_US.utf8' LC_CTYPE='en_US.utf8';\nUPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis';\n\n\\c template_postgis\n\nCREATE EXTENSION IF NOT EXISTS postgis;\nGRANT ALL ON geometry_columns TO PUBLIC;\nGRANT ALL ON geography_columns TO PUBLIC;\nGRANT ALL ON spatial_ref_sys TO PUBLIC;\n\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n"
    }
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.18.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "get"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.18.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-rabbitmq"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-rabbitmq-endpoint-reader"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-couchdb",
      "labels": {
        "app": "couchdb",
        "chart": "couchdb-3.3.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "couchdb",
          "port": 5984
        }
      ],
      "selector": {
        "app": "couchdb",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-svc-couchdb",
      "labels": {
        "app": "couchdb",
        "chart": "couchdb-3.3.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "port": 5984,
          "protocol": "TCP",
          "targetPort": 5984
        }
      ],
      "type": "ClusterIP",
      "selector": {
        "app": "couchdb",
        "release": "release-name"
      }
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "elasticsearch-master",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {}
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "ports": [
        {
          "name": "http",
          "protocol": "TCP",
          "port": 9200
        },
        {
          "name": "transport",
          "protocol": "TCP",
          "port": 9300
        }
      ]
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "elasticsearch-master-headless",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "selector": {
        "app": "elasticsearch-master"
      },
      "ports": [
        {
          "name": "http",
          "port": 9200
        },
        {
          "name": "transport",
          "port": 9300
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.10.6",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app": "postgresql",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.10.6",
        "release": "release-name",
        "heritage": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app": "postgresql",
        "release": "release-name",
        "role": "master"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq-headless",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.18.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd"
        },
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp"
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist"
        },
        {
          "name": "stats",
          "port": 15672,
          "targetPort": "stats"
        }
      ],
      "selector": {
        "app": "rabbitmq",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.18.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd",
          "nodePort": null
        },
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp",
          "nodePort": null
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist",
          "nodePort": null
        },
        {
          "name": "stats",
          "port": 15672,
          "targetPort": "stats",
          "nodePort": null
        }
      ],
      "selector": {
        "app": "rabbitmq",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-archesproject-static",
      "labels": {
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 80,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "tier": "frontend",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-archesproject",
      "labels": {
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 80,
          "targetPort": 8000,
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "tier": "backend",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-archesproject-static",
      "labels": {
        "tier": "frontend",
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "tier": "frontend",
          "app.kubernetes.io/name": "archesproject",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "tier": "frontend",
            "app.kubernetes.io/name": "archesproject",
            "app.kubernetes.io/instance": "release-name"
          },
          "annotations": {
            "checksum/configmap-env-static": "26e8c681426b2825e23357ed3ad9176b18e9c586b2ea5b7d4819c62fe93acfd3"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-archesproject",
          "securityContext": {},
          "containers": [
            {
              "name": "archesproject",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-archesproject-env-static"
                  }
                }
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "flaxandteal/arches-static:5.0",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                }
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-archesproject-worker",
      "labels": {
        "tier": "worker",
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "tier": "worker",
          "app.kubernetes.io/name": "archesproject",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "tier": "worker",
            "app.kubernetes.io/name": "archesproject",
            "app.kubernetes.io/instance": "release-name"
          },
          "annotations": {
            "checksum/configmap-env": "4b4512e7d8c5bed6e9fe0518b96d449d08093eeede27a9173e03527515a6f95b"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-archesproject",
          "securityContext": {},
          "containers": [
            {
              "name": "archesproject",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-archesproject-env"
                  }
                }
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "flaxandteal/arches:5.0",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "command": [
                "../entrypoint.sh",
                "run_celery"
              ],
              "env": [
                {
                  "name": "PGPASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "postgresql-password",
                      "name": "release-name-postgresql"
                    }
                  }
                },
                {
                  "name": "COUCHDB_PASS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "adminPassword",
                      "name": "release-name-couchdb"
                    }
                  }
                },
                {
                  "name": "CELERY_BROKER_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "celery-broker-url",
                      "name": "release-name-archesproject"
                    }
                  }
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-archesproject",
      "labels": {
        "tier": "backend",
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "tier": "backend",
          "app.kubernetes.io/name": "archesproject",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "tier": "backend",
            "app.kubernetes.io/name": "archesproject",
            "app.kubernetes.io/instance": "release-name"
          },
          "annotations": {
            "checksum/configmap-env": "4b4512e7d8c5bed6e9fe0518b96d449d08093eeede27a9173e03527515a6f95b"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-archesproject",
          "securityContext": {},
          "containers": [
            {
              "name": "archesproject",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-archesproject-env"
                  }
                }
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "flaxandteal/arches:5.0",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8000,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                }
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "PGPASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "postgresql-password",
                      "name": "release-name-postgresql"
                    }
                  }
                },
                {
                  "name": "COUCHDB_PASS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "adminPassword",
                      "name": "release-name-couchdb"
                    }
                  }
                },
                {
                  "name": "CELERY_BROKER_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "celery-broker-url",
                      "name": "release-name-archesproject"
                    }
                  }
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-couchdb",
      "labels": {
        "app": "couchdb",
        "chart": "couchdb-3.3.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 3,
      "serviceName": "release-name-couchdb",
      "podManagementPolicy": "Parallel",
      "selector": {
        "matchLabels": {
          "app": "couchdb",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "couchdb",
            "release": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-couchdb",
          "initContainers": [
            {
              "name": "init-copy",
              "image": "busybox:latest",
              "imagePullPolicy": "Always",
              "command": [
                "sh",
                "-c",
                "cp /tmp/chart.ini /default.d; cp /tmp/seedlist.ini /default.d; ls -lrt /default.d;"
              ],
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/tmp/"
                },
                {
                  "name": "config-storage",
                  "mountPath": "/default.d"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "couchdb",
              "image": "couchdb:2.3.1",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "couchdb",
                  "containerPort": 5984
                },
                {
                  "name": "epmd",
                  "containerPort": 4369
                },
                {
                  "containerPort": 9100
                }
              ],
              "env": [
                {
                  "name": "COUCHDB_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-couchdb",
                      "key": "adminUsername"
                    }
                  }
                },
                {
                  "name": "COUCHDB_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-couchdb",
                      "key": "adminPassword"
                    }
                  }
                },
                {
                  "name": "COUCHDB_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-couchdb",
                      "key": "cookieAuthSecret"
                    }
                  }
                },
                {
                  "name": "ERL_FLAGS",
                  "value": " -name couchdb  -setcookie monster "
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/_up",
                  "port": 5984
                },
                "failureThreshold": 3,
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/_up",
                  "port": 5984
                },
                "failureThreshold": 3,
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "config-storage",
                  "mountPath": "/opt/couchdb/etc/default.d"
                },
                {
                  "name": "database-storage",
                  "mountPath": "/opt/couchdb/data"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config-storage",
              "emptyDir": {}
            },
            {
              "name": "config",
              "configMap": {
                "name": "release-name-couchdb",
                "items": [
                  {
                    "key": "inifile",
                    "path": "chart.ini"
                  },
                  {
                    "key": "seedlistinifile",
                    "path": "seedlist.ini"
                  }
                ]
              }
            },
            {
              "name": "database-storage",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "elasticsearch-master",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {
        "esMajorVersion": "7"
      }
    },
    "spec": {
      "serviceName": "elasticsearch-master-headless",
      "selector": {
        "matchLabels": {
          "app": "elasticsearch-master"
        }
      },
      "replicas": 3,
      "podManagementPolicy": "Parallel",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "elasticsearch-master"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "30Gi"
              }
            }
          }
        }
      ],
      "template": {
        "metadata": {
          "name": "elasticsearch-master",
          "labels": {
            "heritage": "Helm",
            "release": "release-name",
            "chart": "elasticsearch",
            "app": "elasticsearch-master"
          },
          "annotations": null
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1000,
            "runAsUser": 1000
          },
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "app",
                        "operator": "In",
                        "values": [
                          "elasticsearch-master"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              ]
            }
          },
          "terminationGracePeriodSeconds": 120,
          "volumes": null,
          "initContainers": [
            {
              "name": "configure-sysctl",
              "securityContext": {
                "runAsUser": 10236,
                "privileged": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "image": "docker.elastic.co/elasticsearch/elasticsearch:7.7.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sysctl",
                "-w",
                "vm.max_map_count=262144"
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "containers": [
            {
              "name": "elasticsearch",
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "runAsNonRoot": true,
                "runAsUser": 11665,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "image": "docker.elastic.co/elasticsearch/elasticsearch:7.7.0",
              "imagePullPolicy": "IfNotPresent",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "#!/usr/bin/env bash -e\n# If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=green&timeout=1s' )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\nif [ -n \"${ELASTIC_USERNAME}\" ] && [ -n \"${ELASTIC_PASSWORD}\" ]; then\n  BASIC_AUTH=\"-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}\"\nelse\n  BASIC_AUTH=''\nfi\n\nif [ -f \"${START_FILE}\" ]; then\n  echo 'Elasticsearch is already running, lets check the node is healthy'\n  HTTP_CODE=$(curl -XGET -s -k ${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/)\n  RC=$?\n  if [[ ${RC} -ne 0 ]]; then\n    echo \"curl -XGET -s -k \\${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with RC ${RC}\"\n    exit ${RC}\n  fi\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\n  if [[ ${HTTP_CODE} == \"200\" ]]; then\n    exit 0\n  elif [[ ${HTTP_CODE} == \"503\" && \"7\" == \"6\" ]]; then\n    exit 0\n  else\n    echo \"curl -XGET -s -k \\${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\"\n    exit 1\n  fi\n\nelse\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \"wait_for_status=green&timeout=1s\" )'\n  if curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200/_cluster/health?wait_for_status=green&timeout=1s ; then\n    touch ${START_FILE}\n    exit 0\n  else\n    echo 'Cluster is not yet ready (request params: \"wait_for_status=green&timeout=1s\" )'\n    exit 1\n  fi\nfi\n"
                  ]
                },
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 3,
                "timeoutSeconds": 5
              },
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9200
                },
                {
                  "name": "transport",
                  "containerPort": 9300
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "1000m",
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": "1000m",
                  "memory": "2Gi"
                }
              },
              "env": [
                {
                  "name": "node.name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "cluster.initial_master_nodes",
                  "value": "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
                },
                {
                  "name": "discovery.seed_hosts",
                  "value": "elasticsearch-master-headless"
                },
                {
                  "name": "cluster.name",
                  "value": "elasticsearch"
                },
                {
                  "name": "network.host",
                  "value": "0.0.0.0"
                },
                {
                  "name": "ES_JAVA_OPTS",
                  "value": "-Xmx1g -Xms1g"
                },
                {
                  "name": "node.data",
                  "value": "true"
                },
                {
                  "name": "node.ingest",
                  "value": "true"
                },
                {
                  "name": "node.master",
                  "value": "true"
                }
              ],
              "volumeMounts": [
                {
                  "name": "elasticsearch-master",
                  "mountPath": "/usr/share/elasticsearch/data"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.10.6",
        "release": "release-name",
        "heritage": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app": "postgresql",
          "release": "release-name",
          "role": "master"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app": "postgresql",
            "chart": "postgresql-8.10.6",
            "release": "release-name",
            "heritage": "Helm",
            "role": "master"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 0
          },
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/postgis/postgis:12-3.0-alpine",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "securityContext": {
                "runAsUser": 10572,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "postgres"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "postgres"
                },
                {
                  "name": "POSTGRES_MULTIPLE_EXTENSIONS",
                  "value": "postgis,postgis_topology"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"postgres\" -d \"postgres\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"postgres\" -d \"postgres\" -h 127.0.0.1 -p 5432\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "custom-init-scripts",
                  "mountPath": "/docker-entrypoint-initdb.d/"
                },
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql",
                  "subPath": null
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "custom-init-scripts",
              "configMap": {
                "name": "release-name-archesproject-init-db"
              }
            },
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory",
                "sizeLimit": "1Gi"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-rabbitmq",
      "labels": {
        "app": "rabbitmq",
        "chart": "rabbitmq-6.18.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-rabbitmq-headless",
      "podManagementPolicy": "OrderedReady",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app": "rabbitmq",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "rabbitmq",
            "release": "release-name",
            "chart": "rabbitmq-6.18.2"
          },
          "annotations": {
            "checksum/secret": "f39bd3375e9f8bde2e27e8435bac08cba183886945be9f4ce63e7dfaccc615e6"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-rabbitmq",
          "terminationGracePeriodSeconds": 10,
          "containers": [
            {
              "name": "rabbitmq",
              "image": "docker.io/bitnami/rabbitmq:3.8.2-debian-10-r30",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "bash",
                "-ec",
                "mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/\nmkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/\ntouch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\n#persist the erlang cookie in both places for server and cli tools\necho $RABBITMQ_ERL_COOKIE > /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\ncp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/\n#change permission so only the user has access to the cookie file\nchmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\n#copy the mounted configuration to both places\ncp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq\n# Apply resources limits\nulimit -n \"${RABBITMQ_ULIMIT_NOFILES}\"\n#replace the default password that is generated\nsed -i \"/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\\\/\\\\\\\\}\" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf\nexec rabbitmq-server\n"
              ],
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/opt/bitnami/rabbitmq/conf"
                },
                {
                  "name": "healthchecks",
                  "mountPath": "/usr/local/sbin/rabbitmq-api-check",
                  "subPath": "rabbitmq-api-check"
                },
                {
                  "name": "healthchecks",
                  "mountPath": "/usr/local/sbin/rabbitmq-health-check",
                  "subPath": "rabbitmq-health-check"
                },
                {
                  "name": "data",
                  "mountPath": "/opt/bitnami/rabbitmq/var/lib/rabbitmq"
                }
              ],
              "ports": [
                {
                  "name": "epmd",
                  "containerPort": 4369
                },
                {
                  "name": "amqp",
                  "containerPort": 5672
                },
                {
                  "name": "dist",
                  "containerPort": 25672
                },
                {
                  "name": "stats",
                  "containerPort": 15672
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "rabbitmq-api-check \"http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\" '{\"status\":\"ok\"}'"
                  ]
                },
                "initialDelaySeconds": 120,
                "timeoutSeconds": 20,
                "periodSeconds": 30,
                "failureThreshold": 6,
                "successThreshold": 1
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "rabbitmq-health-check \"http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\" '{\"status\":\"ok\"}'"
                  ]
                },
                "initialDelaySeconds": 10,
                "timeoutSeconds": 20,
                "periodSeconds": 30,
                "failureThreshold": 3,
                "successThreshold": 1
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MY_POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "K8S_SERVICE_NAME",
                  "value": "release-name-rabbitmq-headless"
                },
                {
                  "name": "K8S_ADDRESS_TYPE",
                  "value": "hostname"
                },
                {
                  "name": "RABBITMQ_NODENAME",
                  "value": "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "K8S_HOSTNAME_SUFFIX",
                  "value": ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "RABBITMQ_LOGS",
                  "value": "-"
                },
                {
                  "name": "RABBITMQ_ULIMIT_NOFILES",
                  "value": "65536"
                },
                {
                  "name": "RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS",
                  "value": "+S 2:1"
                },
                {
                  "name": "RABBITMQ_USE_LONGNAME",
                  "value": "true"
                },
                {
                  "name": "RABBITMQ_ERL_COOKIE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-rabbitmq",
                      "key": "rabbitmq-erlang-cookie"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                }
              ]
            }
          ],
          "securityContext": {
            "fsGroup": 1001,
            "runAsUser": 1001
          },
          "volumes": [
            {
              "name": "config-volume",
              "configMap": {
                "name": "release-name-rabbitmq-config",
                "items": [
                  {
                    "key": "rabbitmq.conf",
                    "path": "rabbitmq.conf"
                  },
                  {
                    "key": "enabled_plugins",
                    "path": "enabled_plugins"
                  }
                ]
              }
            },
            {
              "name": "healthchecks",
              "configMap": {
                "name": "release-name-rabbitmq-healthchecks",
                "items": [
                  {
                    "key": "rabbitmq-health-check",
                    "path": "rabbitmq-health-check",
                    "mode": 111
                  },
                  {
                    "key": "rabbitmq-api-check",
                    "path": "rabbitmq-api-check",
                    "mode": 111
                  }
                ]
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "labels": {
              "app": "rabbitmq",
              "release": "release-name",
              "heritage": "Helm"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-lgkge-test",
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "securityContext": {
        "fsGroup": 1000,
        "runAsUser": 1000
      },
      "containers": [
        {
          "name": "release-name-fgmsp-test",
          "image": "docker.elastic.co/elasticsearch/elasticsearch:7.7.0",
          "command": [
            "sh",
            "-c",
            "#!/usr/bin/env bash -e\ncurl -XGET --fail 'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'\n"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-archesproject-test-connection",
      "labels": {
        "helm.sh/chart": "archesproject-0.0.1",
        "app.kubernetes.io/name": "archesproject",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "5.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "wget",
          "image": "busybox",
          "command": [
            "wget"
          ],
          "args": [
            "release-name-archesproject:80"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]