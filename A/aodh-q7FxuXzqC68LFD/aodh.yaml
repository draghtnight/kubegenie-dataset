apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: aodh-api
spec:
  minAvailable: 0
  selector:
    matchLabels:
      release_group: release-name
      application: aodh
      component: api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-alarms-cleaner
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-api
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-evaluator
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-listener
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-notifier
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-db-init
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-db-sync
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-ks-endpoints
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-ks-service
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-ks-user
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aodh-rabbit-init
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-test
  namespace: q7FxuXzqC68LFD
---
apiVersion: v1
kind: Secret
metadata:
  name: aodh-etc
type: Opaque
data:
  aodh.conf: W0RFRkFVTFRdCmRlYnVnID0gZmFsc2UKbG9nX2NvbmZpZ19hcHBlbmQgPSAvZXRjL2FvZGgvbG9nZ2luZy5jb25mCnRyYW5zcG9ydF91cmwgPSByYWJiaXQ6Ly9hb2RoOnBhc3N3b3JkQHJhYmJpdG1xLXJhYmJpdG1xLTAucmFiYml0bXEuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDo1NjcyLGFvZGg6cGFzc3dvcmRAcmFiYml0bXEtcmFiYml0bXEtMS5yYWJiaXRtcS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjU2NzIvYW9kaApbZGF0YWJhc2VdCmFsYXJtX2hpc3RvcnlfdGltZV90b19saXZlID0gODY0MDAKY29ubmVjdGlvbiA9IG15c3FsK3B5bXlzcWw6Ly9hb2RoOnBhc3N3b3JkQG1hcmlhZGIuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDozMzA2L2FvZGgKbWF4X3JldHJpZXMgPSAtMQpba2V5c3RvbmVfYXV0aHRva2VuXQphdXRoX3R5cGUgPSBwYXNzd29yZAphdXRoX3VyaSA9IGh0dHA6Ly9rZXlzdG9uZS1hcGkuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDo1MDAwL3YzCmF1dGhfdXJsID0gaHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjMKYXV0aF92ZXJzaW9uID0gdjMKbWVtY2FjaGVfc2VjcmV0X2tleSA9IFRQaGk0U2xiOU1EN3VMNXlObUphNm82WHZra1pzeThTa3YzakVRY05GalNLREhBdzQwN2xrcW0weHlHa1psM3MKbWVtY2FjaGVfc2VjdXJpdHlfc3RyYXRlZ3kgPSBFTkNSWVBUCm1lbWNhY2hlZF9zZXJ2ZXJzID0gbWVtY2FjaGVkLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6MTEyMTEKcGFzc3dvcmQgPSBwYXNzd29yZApwcm9qZWN0X2RvbWFpbl9uYW1lID0gc2VydmljZQpwcm9qZWN0X25hbWUgPSBzZXJ2aWNlCnJlZ2lvbl9uYW1lID0gUmVnaW9uT25lCnVzZXJfZG9tYWluX25hbWUgPSBzZXJ2aWNlCnVzZXJuYW1lID0gYW9kaApbb3Nsb19taWRkbGV3YXJlXQplbmFibGVfcHJveHlfaGVhZGVyc19wYXJzaW5nID0gdHJ1ZQpbc2VydmljZV9jcmVkZW50aWFsc10KYXV0aF90eXBlID0gcGFzc3dvcmQKYXV0aF91cmwgPSBodHRwOi8va2V5c3RvbmUtYXBpLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6NTAwMC92MwphdXRoX3ZlcnNpb24gPSB2MwppbnRlcmZhY2UgPSBpbnRlcm5hbApwYXNzd29yZCA9IHBhc3N3b3JkCnByb2plY3RfZG9tYWluX25hbWUgPSBzZXJ2aWNlCnByb2plY3RfbmFtZSA9IHNlcnZpY2UKcmVnaW9uX25hbWUgPSBSZWdpb25PbmUKdXNlcl9kb21haW5fbmFtZSA9IHNlcnZpY2UKdXNlcm5hbWUgPSBhb2RoCg==
  logging.conf: W2Zvcm1hdHRlcl9jb250ZXh0XQpjbGFzcyA9IG9zbG9fbG9nLmZvcm1hdHRlcnMuQ29udGV4dEZvcm1hdHRlcgpbZm9ybWF0dGVyX2RlZmF1bHRdCmZvcm1hdCA9ICUobWVzc2FnZSlzCltmb3JtYXR0ZXJzXQprZXlzID0gY29udGV4dCxkZWZhdWx0CltoYW5kbGVyX251bGxdCmFyZ3MgPSAoKQpjbGFzcyA9IGxvZ2dpbmcuTnVsbEhhbmRsZXIKZm9ybWF0dGVyID0gZGVmYXVsdApbaGFuZGxlcl9zdGRlcnJdCmFyZ3MgPSAoc3lzLnN0ZGVyciwpCmNsYXNzID0gU3RyZWFtSGFuZGxlcgpmb3JtYXR0ZXIgPSBjb250ZXh0CltoYW5kbGVyX3N0ZG91dF0KYXJncyA9IChzeXMuc3Rkb3V0LCkKY2xhc3MgPSBTdHJlYW1IYW5kbGVyCmZvcm1hdHRlciA9IGNvbnRleHQKW2hhbmRsZXJzXQprZXlzID0gc3Rkb3V0LHN0ZGVycixudWxsCltsb2dnZXJfYW1xcF0KaGFuZGxlcnMgPSBzdGRlcnIKbGV2ZWwgPSBXQVJOSU5HCnF1YWxuYW1lID0gYW1xcApbbG9nZ2VyX2FtcXBsaWJdCmhhbmRsZXJzID0gc3RkZXJyCmxldmVsID0gV0FSTklORwpxdWFsbmFtZSA9IGFtcXBsaWIKW2xvZ2dlcl9hb2RoXQpoYW5kbGVycyA9IHN0ZG91dApsZXZlbCA9IElORk8KcXVhbG5hbWUgPSBhb2RoCltsb2dnZXJfYm90b10KaGFuZGxlcnMgPSBzdGRlcnIKbGV2ZWwgPSBXQVJOSU5HCnF1YWxuYW1lID0gYm90bwpbbG9nZ2VyX2V2ZW50bGV0d3NnaV0KaGFuZGxlcnMgPSBzdGRlcnIKbGV2ZWwgPSBXQVJOSU5HCnF1YWxuYW1lID0gZXZlbnRsZXQud3NnaS5zZXJ2ZXIKW2xvZ2dlcl9yb290XQpoYW5kbGVycyA9IG51bGwKbGV2ZWwgPSBXQVJOSU5HCltsb2dnZXJfc3FsYWxjaGVteV0KaGFuZGxlcnMgPSBzdGRlcnIKbGV2ZWwgPSBXQVJOSU5HCnF1YWxuYW1lID0gc3FsYWxjaGVteQpbbG9nZ2Vyc10Ka2V5cyA9IHJvb3QsYW9kaAo=
  api-paste.ini: W2FwcDphb2RodjJdCnBhc3RlLmFwcF9mYWN0b3J5ID0gYW9kaC5hcGkuYXBwOmFwcF9mYWN0b3J5CnJvb3QgPSBhb2RoLmFwaS5jb250cm9sbGVycy52Mi5yb290LlYyQ29udHJvbGxlcgpbYXBwOmFvZGh2ZXJzaW9uc10KcGFzdGUuYXBwX2ZhY3RvcnkgPSBhb2RoLmFwaS5hcHA6YXBwX2ZhY3RvcnkKcm9vdCA9IGFvZGguYXBpLmNvbnRyb2xsZXJzLnJvb3QuVmVyc2lvbnNDb250cm9sbGVyClthcHA6aGVhbHRoY2hlY2tdCm9zbG9fY29uZmlnX3Byb2plY3QgPSBhb2RoCnVzZSA9IGVnZzpvc2xvLm1pZGRsZXdhcmUjaGVhbHRoY2hlY2sKW2NvbXBvc2l0ZTphb2RoK2tleXN0b25lXQovID0gYW9kaHZlcnNpb25zX3BpcGVsaW5lCi9oZWFsdGhjaGVjayA9IGhlYWx0aGNoZWNrCi92MiA9IGFvZGh2Ml9rZXlzdG9uZV9waXBlbGluZQp1c2UgPSBlZ2c6UGFzdGUjdXJsbWFwCltjb21wb3NpdGU6YW9kaCtub2F1dGhdCi8gPSBhb2RodmVyc2lvbnNfcGlwZWxpbmUKL2hlYWx0aGNoZWNrID0gaGVhbHRoY2hlY2sKL3YyID0gYW9kaHYyX25vYXV0aF9waXBlbGluZQp1c2UgPSBlZ2c6UGFzdGUjdXJsbWFwCltmaWx0ZXI6YXV0aHRva2VuXQpvc2xvX2NvbmZpZ19wcm9qZWN0ID0gYW9kaApwYXN0ZS5maWx0ZXJfZmFjdG9yeSA9IGtleXN0b25lbWlkZGxld2FyZS5hdXRoX3Rva2VuOmZpbHRlcl9mYWN0b3J5CltmaWx0ZXI6Y29yc10Kb3Nsb19jb25maWdfcHJvamVjdCA9IGFvZGgKcGFzdGUuZmlsdGVyX2ZhY3RvcnkgPSBvc2xvX21pZGRsZXdhcmUuY29yczpmaWx0ZXJfZmFjdG9yeQpbZmlsdGVyOmh0dHBfcHJveHlfdG9fd3NnaV0Kb3Nsb19jb25maWdfcHJvamVjdCA9IGFvZGgKcGFzdGUuZmlsdGVyX2ZhY3RvcnkgPSBvc2xvX21pZGRsZXdhcmUuaHR0cF9wcm94eV90b193c2dpOkhUVFBQcm94eVRvV1NHSS5mYWN0b3J5CltmaWx0ZXI6cmVxdWVzdF9pZF0KcGFzdGUuZmlsdGVyX2ZhY3RvcnkgPSBvc2xvX21pZGRsZXdhcmU6UmVxdWVzdElkLmZhY3RvcnkKW3BpcGVsaW5lOmFvZGh2Ml9rZXlzdG9uZV9waXBlbGluZV0KcGlwZWxpbmUgPSBjb3JzIGh0dHBfcHJveHlfdG9fd3NnaSByZXF1ZXN0X2lkIGF1dGh0b2tlbiBhb2RodjIKW3BpcGVsaW5lOmFvZGh2Ml9ub2F1dGhfcGlwZWxpbmVdCnBpcGVsaW5lID0gY29ycyBodHRwX3Byb3h5X3RvX3dzZ2kgcmVxdWVzdF9pZCBhb2RodjIKW3BpcGVsaW5lOmFvZGh2ZXJzaW9uc19waXBlbGluZV0KcGlwZWxpbmUgPSBjb3JzIGh0dHBfcHJveHlfdG9fd3NnaSBhb2RodmVyc2lvbnMK
  policy.json: eyJhZG1pbl9vcl9vd25lciI6InJ1bGU6Y29udGV4dF9pc19hZG1pbiBvciBwcm9qZWN0X2lkOiUocHJvamVjdF9pZClzIiwiY29udGV4dF9pc19hZG1pbiI6InJvbGU6YWRtaW4iLCJkZWZhdWx0IjoicnVsZTphZG1pbl9vcl9vd25lciIsInNlZ3JlZ2F0aW9uIjoicnVsZTpjb250ZXh0X2lzX2FkbWluIiwidGVsZW1ldHJ5OmFsYXJtX2hpc3RvcnkiOiJydWxlOmFkbWluX29yX293bmVyIiwidGVsZW1ldHJ5OmNoYW5nZV9hbGFybSI6InJ1bGU6YWRtaW5fb3Jfb3duZXIiLCJ0ZWxlbWV0cnk6Y2hhbmdlX2FsYXJtX3N0YXRlIjoicnVsZTphZG1pbl9vcl9vd25lciIsInRlbGVtZXRyeTpjcmVhdGVfYWxhcm0iOiIiLCJ0ZWxlbWV0cnk6ZGVsZXRlX2FsYXJtIjoicnVsZTphZG1pbl9vcl9vd25lciIsInRlbGVtZXRyeTpnZXRfYWxhcm0iOiJydWxlOmFkbWluX29yX293bmVyIiwidGVsZW1ldHJ5OmdldF9hbGFybV9zdGF0ZSI6InJ1bGU6YWRtaW5fb3Jfb3duZXIiLCJ0ZWxlbWV0cnk6Z2V0X2FsYXJtcyI6InJ1bGU6YWRtaW5fb3Jfb3duZXIiLCJ0ZWxlbWV0cnk6cXVlcnlfYWxhcm0iOiJydWxlOmFkbWluX29yX293bmVyIiwidGVsZW1ldHJ5OnF1ZXJ5X2FsYXJtX2hpc3RvcnkiOiJydWxlOmFkbWluX29yX293bmVyIn0=
  wsgi-aodh.conf: TGlzdGVuIDAuMC4wLjA6ODA0MgoKTG9nRm9ybWF0ICIlaCAlbCAldSAldCBcIiVyXCIgJT5zICViIFwiJXtSZWZlcmVyfWlcIiBcIiV7VXNlci1BZ2VudH1pXCIiIGNvbWJpbmVkCkxvZ0Zvcm1hdCAiJXtYLUZvcndhcmRlZC1Gb3J9aSAlbCAldSAldCBcIiVyXCIgJT5zICViIFwiJXtSZWZlcmVyfWlcIiBcIiV7VXNlci1BZ2VudH1pXCIiIHByb3h5CgpTZXRFbnZJZiBYLUZvcndhcmRlZC1Gb3IgIl4uKlwuLipcLi4qXC4uKiIgZm9yd2FyZGVkCkN1c3RvbUxvZyAvZGV2L3N0ZG91dCBjb21iaW5lZCBlbnY9IWZvcndhcmRlZApDdXN0b21Mb2cgL2Rldi9zdGRvdXQgcHJveHkgZW52PWZvcndhcmRlZAoKPFZpcnR1YWxIb3N0ICo6ODA0Mj4KICAgIFdTR0lEYWVtb25Qcm9jZXNzIGFvZGggcHJvY2Vzc2VzPTIgdGhyZWFkcz0xIHVzZXI9YW9kaCBncm91cD1hb2RoIGRpc3BsYXktbmFtZT0le0dST1VQfQogICAgV1NHSVByb2Nlc3NHcm91cCBhb2RoCiAgICBXU0dJU2NyaXB0QWxpYXMgLyAvdmFyL3d3dy9jZ2ktYmluL2FvZGgvYW9kaC1hcGkKICAgIFdTR0lBcHBsaWNhdGlvbkdyb3VwICV7R0xPQkFMfQogICAgPElmVmVyc2lvbiA+PSAyLjQ+CiAgICAgIEVycm9yTG9nRm9ybWF0ICIle2N1fXQgJU0iCiAgICA8L0lmVmVyc2lvbj4KCiAgICBFcnJvckxvZyAvZGV2L3N0ZG91dAogICAgU2V0RW52SWYgWC1Gb3J3YXJkZWQtRm9yICJeLipcLi4qXC4uKlwuLioiIGZvcndhcmRlZAogICAgQ3VzdG9tTG9nIC9kZXYvc3Rkb3V0IGNvbWJpbmVkIGVudj0hZm9yd2FyZGVkCiAgICBDdXN0b21Mb2cgL2Rldi9zdGRvdXQgcHJveHkgZW52PWZvcndhcmRlZAo8L1ZpcnR1YWxIb3N0Pg==
---
apiVersion: v1
kind: Secret
metadata:
  name: aodh-db-admin
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvYW9kaA==
---
apiVersion: v1
kind: Secret
metadata:
  name: aodh-db-user
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL2FvZGg6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvYW9kaA==
---
apiVersion: v1
kind: Secret
metadata:
  name: aodh-keystone-admin
type: Opaque
data:
  OS_AUTH_URL: aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=
  OS_REGION_NAME: UmVnaW9uT25l
  OS_INTERFACE: aW50ZXJuYWw=
  OS_PROJECT_DOMAIN_NAME: ZGVmYXVsdA==
  OS_PROJECT_NAME: YWRtaW4=
  OS_USER_DOMAIN_NAME: ZGVmYXVsdA==
  OS_USERNAME: YWRtaW4=
  OS_PASSWORD: cGFzc3dvcmQ=
  OS_DEFAULT_DOMAIN: ZGVmYXVsdA==
---
apiVersion: v1
kind: Secret
metadata:
  name: aodh-keystone-user
type: Opaque
data:
  OS_AUTH_URL: aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=
  OS_REGION_NAME: UmVnaW9uT25l
  OS_INTERFACE: aW50ZXJuYWw=
  OS_PROJECT_DOMAIN_NAME: c2VydmljZQ==
  OS_PROJECT_NAME: c2VydmljZQ==
  OS_USER_DOMAIN_NAME: c2VydmljZQ==
  OS_USERNAME: YW9kaA==
  OS_PASSWORD: cGFzc3dvcmQ=
  OS_DEFAULT_DOMAIN: ZGVmYXVsdA==
---
apiVersion: v1
kind: Secret
metadata:
  name: aodh-rabbitmq-admin
type: Opaque
data:
  RABBITMQ_CONNECTION: cmFiYml0Oi8vcmFiYml0bXE6cGFzc3dvcmRAcmFiYml0bXEuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDoxNTY3Mi9hb2Ro
---
apiVersion: v1
kind: Secret
metadata:
  name: aodh-rabbitmq-user
type: Opaque
data:
  RABBITMQ_CONNECTION: cmFiYml0Oi8vYW9kaDpwYXNzd29yZEByYWJiaXRtcS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjE1NjcyL2FvZGg=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aodh-bin
data:
  aodh-test.sh: |
    #!/bin/bash



    set -ex

    export HOME=/tmp

    echo "Test: create an alarm"
    aodh alarm create \
        --name test_cpu_aggregation \
        --type gnocchi_aggregation_by_resources_threshold \
        --metric cpu --threshold 214106115 \
        --comparison-operator lt \
        --aggregation-method mean \
        --granularity 300  \
        --evaluation-periods 1 \
        --alarm-action 'http://localhost:8776/alarm' \
        --resource-type instance \
        --query '{"=": {"flavor_name": "small"}}'
    sleep 5

    echo "Test: list alarms"
    aodh alarm list
    sleep 5

    echo "Test: show an alarm"
    ALARM_UUID=$(aodh alarm list -c alarm_id -f value | head -1)
    aodh alarm show ${ALARM_UUID}
    sleep 5

    echo "Test: update an alarm"
    aodh alarm update ${ALARM_UUID} --comparison-operator gt
    sleep 5

    echo "Test: delete an alarm"
    aodh alarm delete ${ALARM_UUID}

    exit 0
  db-init.py: |
    #!/usr/bin/env python

    # Creates db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.

    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine

    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Init')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)


    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)

    mysql_x509 = os.getenv('MARIADB_X509', "")
    ssl_args = {}
    if mysql_x509:
        ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',
                    'key': '/etc/mysql/certs/tls.key',
                    'cert': '/etc/mysql/certs/tls.crt'}}

    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)

    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url, connect_args=ssl_args)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise

    # User DB engine
    try:
        user_engine = create_engine(user_db_conn, connect_args=ssl_args)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise

    # Create DB
    try:
        root_engine.execute("CREATE DATABASE IF NOT EXISTS {0}".format(database))
        logger.info("Created database {0}".format(database))
    except:
        logger.critical("Could not create database {0}".format(database))
        raise

    # Create DB User
    try:
        root_engine.execute(
            "GRANT ALL ON `{0}`.* TO \'{1}\'@\'%%\' IDENTIFIED BY \'{2}\' {3}".format(
                database, user, password, mysql_x509))
        logger.info("Created user {0} for {1}".format(user, database))
    except:
        logger.critical("Could not create user {0} for {1}".format(user, database))
        raise

    # Test connection
    try:
        connection = user_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1}/{2} as {3}".format(
            host, port, database, user))
    except:
        logger.critical('Could not connect to database as user')
        raise

    logger.info('Finished DB Management')
  db-sync.sh: |
    #!/bin/bash



    set -ex

    exec aodh-dbsync
  db-drop.py: |
    #!/usr/bin/env python

    # Drops db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.

    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine

    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Drop')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)


    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)

    mysql_x509 = os.getenv('MARIADB_X509', "")
    ssl_args = {}
    if mysql_x509:
        ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',
                            'key': '/etc/mysql/certs/tls.key',
                            'cert': '/etc/mysql/certs/tls.crt'}}

    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)

    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url, connect_args=ssl_args)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise

    # User DB engine
    try:
        user_engine = create_engine(user_db_conn, connect_args=ssl_args)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise

    # Delete DB
    try:
        root_engine.execute("DROP DATABASE IF EXISTS {0}".format(database))
        logger.info("Deleted database {0}".format(database))
    except:
        logger.critical("Could not drop database {0}".format(database))
        raise

    # Delete DB User
    try:
        root_engine.execute("DROP USER IF EXISTS {0}".format(user))
        logger.info("Deleted user {0}".format(user))
    except:
        logger.critical("Could not delete user {0}".format(user))
        raise

    logger.info('Finished DB Management')
  aodh-api.sh: |
    #!/bin/bash



    set -ex

    COMMAND="${@:-start}"

    function start () {

      cp -a $(type -p aodh-api) /var/www/cgi-bin/aodh/

      if [ -f /etc/apache2/envvars ]; then
        # Loading Apache2 ENV variables
        source /etc/apache2/envvars
        # The directory below has to be created due to the fact that
        # libapache2-mod-wsgi-py3 doesn't create it in contrary by libapache2-mod-wsgi
        if [ ! -d ${APACHE_RUN_DIR} ]; then
           mkdir -p ${APACHE_RUN_DIR}
        fi
      fi

      # Get rid of stale pid file if present.
      rm -f /var/run/apache2/*.pid

      # Start Apache2
      exec apache2 -DFOREGROUND
    }

    function stop () {
      apachectl -k graceful-stop
    }

    $COMMAND
  aodh-evaluator.sh: |
    #!/bin/bash



    set -ex

    exec aodh-evaluator --config-file=/etc/aodh/aodh.conf
  aodh-listener.sh: |
    #!/bin/bash



    set -ex

    exec aodh-listener --config-file=/etc/aodh/aodh.conf
  aodh-notifier.sh: |
    #!/bin/bash



    set -ex

    exec aodh-notifier --config-file=/etc/aodh/aodh.conf
  aodh-alarms-cleaner.sh: |
    #!/bin/bash



    set -ex

    exec aodh-expirer
  ks-service.sh: |
    #!/bin/bash

    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    set -ex

    # Service boilerplate description
    OS_SERVICE_DESC="${OS_REGION_NAME}: ${OS_SERVICE_NAME} (${OS_SERVICE_TYPE}) service"

    # Get Service ID if it exists
    unset OS_SERVICE_ID

    # FIXME - There seems to be an issue once in a while where the
    # openstack service list fails and encounters an error message such as:
    #   Unable to establish connection to
    #   https://keystone-api.openstack.svc.cluster.local:5000/v3/auth/tokens:
    #   ('Connection aborted.', OSError("(104, 'ECONNRESET')",))
    # During an upgrade scenario, this would cause the OS_SERVICE_ID to be blank
    # and it would attempt to create a new service when it was not needed.
    # This duplciate service would sometimes be used by other services such as
    # Horizon and would give an 'Invalid Service Catalog' error.
    # This loop allows for a 'retry' of the openstack service list in an
    # attempt to get the service list as expected if it does ecounter an error.
    # This loop and recheck can be reverted once the underlying issue is addressed.

    # If OS_SERVICE_ID is blank then wait a few seconds to give it
    # additional time and try again
    for i in $(seq 3)
    do
      OS_SERVICE_ID=$( openstack service list -f csv --quote none | \
                       grep ",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$" | \
                       sed -e "s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g" )

      # If the service was found, go ahead and exit successfully.
      if [[ -n "${OS_SERVICE_ID}" ]]; then
        exit 0
      fi

      sleep 2
    done

    # If we've reached this point and a Service ID was not found,
    # then create the service
    OS_SERVICE_ID=$(openstack service create -f value -c id \
                    --name="${OS_SERVICE_NAME}" \
                    --description "${OS_SERVICE_DESC}" \
                    --enable \
                    "${OS_SERVICE_TYPE}")
  ks-endpoints.sh: |
    #!/bin/bash

    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    set -ex

    # Get Service ID
    OS_SERVICE_ID=$( openstack service list -f csv --quote none | \
                      grep ",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$" | \
                        sed -e "s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g" )

    # Get Endpoint ID if it exists
    OS_ENDPOINT_ID=$( openstack endpoint list  -f csv --quote none | \
                      grep "^[a-z0-9]*,${OS_REGION_NAME},${OS_SERVICE_NAME},${OS_SERVICE_TYPE},True,${OS_SVC_ENDPOINT}," | \
                      awk -F ',' '{ print $1 }' )

    # Making sure only a single endpoint exists for a service within a region
    if [ "$(echo $OS_ENDPOINT_ID | wc -w)" -gt "1" ]; then
      echo "More than one endpoint found, cleaning up"
      for ENDPOINT_ID in $OS_ENDPOINT_ID; do
        openstack endpoint delete ${ENDPOINT_ID}
      done
      unset OS_ENDPOINT_ID
    fi

    # Determine if Endpoint needs updated
    if [[ ${OS_ENDPOINT_ID} ]]; then
      OS_ENDPOINT_URL_CURRENT=$(openstack endpoint show ${OS_ENDPOINT_ID} -f value -c url)
      if [ "${OS_ENDPOINT_URL_CURRENT}" == "${OS_SERVICE_ENDPOINT}" ]; then
        echo "Endpoints Match: no action required"
        OS_ENDPOINT_UPDATE="False"
      else
        echo "Endpoints Dont Match: removing existing entries"
        openstack endpoint delete ${OS_ENDPOINT_ID}
        OS_ENDPOINT_UPDATE="True"
      fi
    else
      OS_ENDPOINT_UPDATE="True"
    fi

    # Update Endpoint if required
    if [[ "${OS_ENDPOINT_UPDATE}" == "True" ]]; then
      OS_ENDPOINT_ID=$( openstack endpoint create -f value -c id \
        --region="${OS_REGION_NAME}" \
        "${OS_SERVICE_ID}" \
        ${OS_SVC_ENDPOINT} \
        "${OS_SERVICE_ENDPOINT}" )
    fi

    # Display the Endpoint
    openstack endpoint show ${OS_ENDPOINT_ID}
  ks-user.sh: |
    #!/bin/bash

    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    set -ex

    shopt -s nocasematch

    if [[ "${SERVICE_OS_PROJECT_DOMAIN_NAME}" == "Default" ]]
    then
      PROJECT_DOMAIN_ID="default"
    else
      # Manage project domain
      PROJECT_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \
        --description="Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}" \
        "${SERVICE_OS_PROJECT_DOMAIN_NAME}")
    fi

    if [[ "${SERVICE_OS_USER_DOMAIN_NAME}" == "Default" ]]
    then
      USER_DOMAIN_ID="default"
    else
      # Manage user domain
      USER_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \
        --description="Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}" \
        "${SERVICE_OS_USER_DOMAIN_NAME}")
    fi

    shopt -u nocasematch

    # Manage user project
    USER_PROJECT_DESC="Service Project for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}"
    USER_PROJECT_ID=$(openstack project create --or-show --enable -f value -c id \
        --domain="${PROJECT_DOMAIN_ID}" \
        --description="${USER_PROJECT_DESC}" \
        "${SERVICE_OS_PROJECT_NAME}");

    # Manage user
    USER_DESC="Service User for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}/${SERVICE_OS_SERVICE_NAME}"
    USER_ID=$(openstack user create --or-show --enable -f value -c id \
        --domain="${USER_DOMAIN_ID}" \
        --project-domain="${PROJECT_DOMAIN_ID}" \
        --project="${USER_PROJECT_ID}" \
        --description="${USER_DESC}" \
        "${SERVICE_OS_USERNAME}");

    # Manage user password (we do this in a seperate step to ensure the password is updated if required)
    set +x
    echo "Setting user password via: openstack user set --password=xxxxxxx ${USER_ID}"
    openstack user set --password="${SERVICE_OS_PASSWORD}" "${USER_ID}"
    set -x

    function ks_assign_user_role () {
      if [[ "$SERVICE_OS_ROLE" == "admin" ]]
      then
        USER_ROLE_ID="$SERVICE_OS_ROLE"
      else
        USER_ROLE_ID=$(openstack role create --or-show -f value -c id "${SERVICE_OS_ROLE}");
      fi

      # Manage user role assignment
      openstack role add \
          --user="${USER_ID}" \
          --user-domain="${USER_DOMAIN_ID}" \
          --project-domain="${PROJECT_DOMAIN_ID}" \
          --project="${USER_PROJECT_ID}" \
          "${USER_ROLE_ID}"
    }

    # Manage user service role
    IFS=','
    for SERVICE_OS_ROLE in ${SERVICE_OS_ROLES}; do
      ks_assign_user_role
    done

    # Manage user member role
    : ${MEMBER_OS_ROLE:="member"}
    export USER_ROLE_ID=$(openstack role create --or-show -f value -c id \
        "${MEMBER_OS_ROLE}");
    ks_assign_user_role
  rabbit-init.sh: |
    #!/bin/bash
    set -e
    # Extract connection details
    RABBIT_HOSTNAME=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $1}')
    RABBIT_PORT=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $2}')

    # Extract Admin User creadential
    RABBITMQ_ADMIN_USERNAME=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $4}')
    RABBITMQ_ADMIN_PASSWORD=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $5}')

    # Extract User creadential
    RABBITMQ_USERNAME=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $4}')
    RABBITMQ_PASSWORD=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $5}')

    # Extract User vHost
    RABBITMQ_VHOST=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $3}')
    # Resolve vHost to / if no value is set
    RABBITMQ_VHOST="${RABBITMQ_VHOST:-/}"

    function rabbitmqadmin_cli () {
      rabbitmqadmin \
        --host="${RABBIT_HOSTNAME}" \
        --port="${RABBIT_PORT}" \
        --username="${RABBITMQ_ADMIN_USERNAME}" \
        --password="${RABBITMQ_ADMIN_PASSWORD}" \
        ${@}
    }

    echo "Managing: User: ${RABBITMQ_USERNAME}"
    rabbitmqadmin_cli \
      declare user \
      name="${RABBITMQ_USERNAME}" \
      password="${RABBITMQ_PASSWORD}" \
      tags="user"

    if [ "${RABBITMQ_VHOST}" != "/" ]
    then
      echo "Managing: vHost: ${RABBITMQ_VHOST}"
      rabbitmqadmin_cli \
        declare vhost \
        name="${RABBITMQ_VHOST}"
    else
      echo "Skipping root vHost declaration: vHost: ${RABBITMQ_VHOST}"
    fi

    echo "Managing: Permissions: ${RABBITMQ_USERNAME} on ${RABBITMQ_VHOST}"
    rabbitmqadmin_cli \
      declare permission \
      vhost="${RABBITMQ_VHOST}" \
      user="${RABBITMQ_USERNAME}" \
      configure=".*" \
      write=".*" \
      read=".*"

    if [ ! -z "$RABBITMQ_AUXILIARY_CONFIGURATION" ]
    then
      echo "Applying additional configuration"
      echo "${RABBITMQ_AUXILIARY_CONFIGURATION}" > /tmp/rmq_definitions.json
      rabbitmqadmin_cli import /tmp/rmq_definitions.json
    fi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-aodh-api
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-aodh-evaluator
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-aodh-listener
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-aodh-notifier
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-aodh-db-init
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-aodh-db-sync
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-aodh-ks-endpoints
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-aodh-ks-service
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-aodh-ks-user
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-aodh-rabbit-init
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-release-name-test
  namespace: q7FxuXzqC68LFD
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-aodh-api
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-aodh-api
subjects:
  - kind: ServiceAccount
    name: aodh-api
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-aodh-evaluator
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-aodh-evaluator
subjects:
  - kind: ServiceAccount
    name: aodh-evaluator
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-aodh-listener
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-aodh-listener
subjects:
  - kind: ServiceAccount
    name: aodh-listener
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-aodh-notifier
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-aodh-notifier
subjects:
  - kind: ServiceAccount
    name: aodh-notifier
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-aodh-db-init
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-aodh-db-init
subjects:
  - kind: ServiceAccount
    name: aodh-db-init
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-aodh-db-sync
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-aodh-db-sync
subjects:
  - kind: ServiceAccount
    name: aodh-db-sync
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-aodh-ks-endpoints
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-aodh-ks-endpoints
subjects:
  - kind: ServiceAccount
    name: aodh-ks-endpoints
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-aodh-ks-service
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-aodh-ks-service
subjects:
  - kind: ServiceAccount
    name: aodh-ks-service
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-aodh-ks-user
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-aodh-ks-user
subjects:
  - kind: ServiceAccount
    name: aodh-ks-user
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-aodh-rabbit-init
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-aodh-rabbit-init
subjects:
  - kind: ServiceAccount
    name: aodh-rabbit-init
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-release-name-test
  namespace: q7FxuXzqC68LFD
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-release-name-test
subjects:
  - kind: ServiceAccount
    name: release-name-test
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: aodh-api
spec:
  ports:
    - name: a-api
      port: 8042
  selector:
    release_group: release-name
    application: aodh
    component: api
---
apiVersion: v1
kind: Service
metadata:
  name: aodh
spec:
  ports:
    - name: http
      port: 80
    - name: https
      port: 443
  selector:
    app: ingress-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aodh-api
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
    labels: null
    release_group: release-name
    application: aodh
    component: api
spec:
  replicas: 1
  selector:
    matchLabels:
      release_group: release-name
      application: aodh
      component: api
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 3
  template:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: api
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
        configmap-bin-hash: 28753e596f8cd5193d1bbf7592f1a17d24fe2b6880e50aec14c8323443710d1f
        configmap-etc-hash: f0959fa70e5ab7403dbe97d7b9f63e73dbde62f728b91c403f10b1e7a3907683
    spec:
      serviceAccountName: aodh-api
      securityContext:
        runAsUser: 42402
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: release_group
                      operator: In
                      values:
                        - release-name
                    - key: application
                      operator: In
                      values:
                        - aodh
                    - key: component
                      operator: In
                      values:
                        - api
                topologyKey: kubernetes.io/hostname
              weight: 10
      nodeSelector:
        openstack-control-plane: enabled
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb,default:keystone-api
            - name: DEPENDENCY_JOBS
              value: aodh-db-sync,aodh-ks-user,aodh-ks-endpoints
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: null
      containers:
        - name: aodh-api
          image: docker.io/kolla/ubuntu-source-aodh-api:ocata
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10374
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /tmp/aodh-api.sh
            - start
          lifecycle:
            preStop:
              exec:
                command:
                  - /tmp/aodh-api.sh
                  - stop
          ports:
            - name: a-api
              containerPort: 8042
          readinessProbe:
            tcpSocket:
              port: 8042
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: wsgi-aodh
              mountPath: /var/www/cgi-bin/aodh
            - name: pod-etc-aodh
              mountPath: /etc/aodh
            - name: aodh-etc
              mountPath: /etc/aodh/aodh.conf
              subPath: aodh.conf
              readOnly: true
            - name: aodh-etc
              mountPath: /etc/aodh/logging.conf
              subPath: logging.conf
              readOnly: true
            - name: aodh-etc
              mountPath: /etc/aodh/api_paste.ini
              subPath: api-paste.ini
              readOnly: true
            - name: aodh-etc
              mountPath: /etc/aodh/policy.json
              subPath: policy.json
              readOnly: true
            - name: aodh-etc
              mountPath: /etc/apache2/conf-enabled/wsgi-aodh.conf
              subPath: wsgi-aodh.conf
              readOnly: true
            - name: aodh-bin
              mountPath: /tmp/aodh-api.sh
              subPath: aodh-api.sh
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: wsgi-aodh
          emptyDir: {}
        - name: pod-etc-aodh
          emptyDir: {}
        - name: aodh-etc
          secret:
            secretName: aodh-etc
            defaultMode: 292
        - name: aodh-bin
          configMap:
            name: aodh-bin
            defaultMode: 365
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aodh-evaluator
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
  labels:
    release_group: release-name
    application: aodh
    component: evaluator
spec:
  replicas: 1
  selector:
    matchLabels:
      release_group: release-name
      application: aodh
      component: evaluator
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 3
  template:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: evaluator
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
        configmap-bin-hash: 28753e596f8cd5193d1bbf7592f1a17d24fe2b6880e50aec14c8323443710d1f
        configmap-etc-hash: f0959fa70e5ab7403dbe97d7b9f63e73dbde62f728b91c403f10b1e7a3907683
    spec:
      serviceAccountName: aodh-evaluator
      securityContext:
        runAsUser: 42402
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: release_group
                      operator: In
                      values:
                        - release-name
                    - key: application
                      operator: In
                      values:
                        - aodh
                    - key: component
                      operator: In
                      values:
                        - evaluator
                topologyKey: kubernetes.io/hostname
              weight: 10
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb,default:keystone-api,default:aodh-api
            - name: DEPENDENCY_JOBS
              value: aodh-db-sync,aodh-rabbit-init
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: null
      containers:
        - name: aodh-evaluator
          image: docker.io/kolla/ubuntu-source-aodh-evaluator:ocata
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
          command:
            - /tmp/aodh-evaluator.sh
            - start
          lifecycle:
            preStop:
              exec:
                command:
                  - /tmp/aodh-evaluator.sh
                  - stop
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: pod-etc-aodh
              mountPath: /etc/aodh
            - name: aodh-etc
              mountPath: /etc/aodh/aodh.conf
              subPath: aodh.conf
              readOnly: true
            - name: aodh-etc
              mountPath: /etc/aodh/logging.conf
              subPath: logging.conf
              readOnly: true
            - name: aodh-etc
              mountPath: /etc/aodh/policy.json
              subPath: policy.json
              readOnly: true
            - name: aodh-bin
              mountPath: /tmp/aodh-evaluator.sh
              subPath: aodh-evaluator.sh
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: pod-etc-aodh
          emptyDir: {}
        - name: aodh-etc
          secret:
            secretName: aodh-etc
            defaultMode: 292
        - name: aodh-bin
          configMap:
            name: aodh-bin
            defaultMode: 365
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aodh-listener
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
  labels:
    release_group: release-name
    application: aodh
    component: listener
spec:
  replicas: 1
  selector:
    matchLabels:
      release_group: release-name
      application: aodh
      component: listener
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 3
  template:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: listener
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
        configmap-bin-hash: 28753e596f8cd5193d1bbf7592f1a17d24fe2b6880e50aec14c8323443710d1f
        configmap-etc-hash: f0959fa70e5ab7403dbe97d7b9f63e73dbde62f728b91c403f10b1e7a3907683
    spec:
      serviceAccountName: aodh-listener
      securityContext:
        runAsUser: 42402
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: release_group
                      operator: In
                      values:
                        - release-name
                    - key: application
                      operator: In
                      values:
                        - aodh
                    - key: component
                      operator: In
                      values:
                        - listener
                topologyKey: kubernetes.io/hostname
              weight: 10
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb,default:keystone-api,default:aodh-api
            - name: DEPENDENCY_JOBS
              value: aodh-db-sync,aodh-rabbit-init
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: null
      containers:
        - name: aodh-listener
          image: docker.io/kolla/ubuntu-source-aodh-listener:ocata
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
          command:
            - /tmp/aodh-listener.sh
            - start
          lifecycle:
            preStop:
              exec:
                command:
                  - /tmp/aodh-listener.sh
                  - stop
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: pod-etc-aodh
              mountPath: /etc/aodh
            - name: aodh-etc
              mountPath: /etc/aodh/aodh.conf
              subPath: aodh.conf
              readOnly: true
            - name: aodh-etc
              mountPath: /etc/aodh/logging.conf
              subPath: logging.conf
              readOnly: true
            - name: aodh-etc
              mountPath: /etc/aodh/policy.json
              subPath: policy.json
              readOnly: true
            - name: aodh-bin
              mountPath: /tmp/aodh-listener.sh
              subPath: aodh-listener.sh
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: pod-etc-aodh
          emptyDir: {}
        - name: aodh-etc
          secret:
            secretName: aodh-etc
            defaultMode: 292
        - name: aodh-bin
          configMap:
            name: aodh-bin
            defaultMode: 365
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aodh-notifier
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
  labels:
    release_group: release-name
    application: aodh
    component: notifier
spec:
  replicas: 1
  selector:
    matchLabels:
      release_group: release-name
      application: aodh
      component: notifier
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 3
  template:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: notifier
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
        configmap-bin-hash: 28753e596f8cd5193d1bbf7592f1a17d24fe2b6880e50aec14c8323443710d1f
        configmap-etc-hash: f0959fa70e5ab7403dbe97d7b9f63e73dbde62f728b91c403f10b1e7a3907683
    spec:
      serviceAccountName: aodh-notifier
      securityContext:
        runAsUser: 42402
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: release_group
                      operator: In
                      values:
                        - release-name
                    - key: application
                      operator: In
                      values:
                        - aodh
                    - key: component
                      operator: In
                      values:
                        - notifier
                topologyKey: kubernetes.io/hostname
              weight: 10
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb,default:keystone-api,default:aodh-api
            - name: DEPENDENCY_JOBS
              value: aodh-db-sync,aodh-rabbit-init
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: null
      containers:
        - name: aodh-notifier
          image: docker.io/kolla/ubuntu-source-aodh-notifier:ocata
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
          command:
            - /tmp/aodh-notifier.sh
            - start
          lifecycle:
            preStop:
              exec:
                command:
                  - /tmp/aodh-notifier.sh
                  - stop
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: pod-etc-aodh
              mountPath: /etc/aodh
            - name: aodh-etc
              mountPath: /etc/aodh/aodh.conf
              subPath: aodh.conf
              readOnly: true
            - name: aodh-etc
              mountPath: /etc/aodh/logging.conf
              subPath: logging.conf
              readOnly: true
            - name: aodh-etc
              mountPath: /etc/aodh/policy.json
              subPath: policy.json
              readOnly: true
            - name: aodh-bin
              mountPath: /tmp/aodh-notifier.sh
              subPath: aodh-notifier.sh
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: pod-etc-aodh
          emptyDir: {}
        - name: aodh-etc
          secret:
            secretName: aodh-etc
            defaultMode: 292
        - name: aodh-bin
          configMap:
            name: aodh-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: aodh-db-init
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: db-init
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: aodh-db-init
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: aodh-db-init-0
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          env:
            - name: ROOT_DB_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: aodh-db-admin
                  key: DB_CONNECTION
            - name: OPENSTACK_CONFIG_FILE
              value: /etc/aodh/aodh.conf
            - name: OPENSTACK_CONFIG_DB_SECTION
              value: database
            - name: OPENSTACK_CONFIG_DB_KEY
              value: connection
          command:
            - /tmp/db-init.py
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: db-init-sh
              mountPath: /tmp/db-init.py
              subPath: db-init.py
              readOnly: true
            - name: etc-service
              mountPath: /etc/aodh
            - name: db-init-conf
              mountPath: /etc/aodh/aodh.conf
              subPath: aodh.conf
              readOnly: true
            - name: db-init-conf
              mountPath: /etc/aodh/logging.conf
              subPath: logging.conf
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: db-init-sh
          configMap:
            name: aodh-bin
            defaultMode: 365
        - name: etc-service
          emptyDir: {}
        - name: db-init-conf
          secret:
            secretName: aodh-etc
            defaultMode: 292
---
apiVersion: batch/v1
kind: Job
metadata:
  name: aodh-db-sync
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: db-sync
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: aodh-db-sync
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_JOBS
              value: aodh-db-init
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: aodh-db-sync
          image: docker.io/kolla/ubuntu-source-aodh-api:ocata
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/db-sync.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: db-sync-sh
              mountPath: /tmp/db-sync.sh
              subPath: db-sync.sh
              readOnly: true
            - name: etc-service
              mountPath: /etc/aodh
            - name: db-sync-conf
              mountPath: /etc/aodh/aodh.conf
              subPath: aodh.conf
              readOnly: true
            - name: db-sync-conf
              mountPath: /etc/aodh/logging.conf
              subPath: logging.conf
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: db-sync-sh
          configMap:
            name: aodh-bin
            defaultMode: 365
        - name: etc-service
          emptyDir: {}
        - name: db-sync-conf
          secret:
            secretName: aodh-etc
            defaultMode: 292
---
apiVersion: batch/v1
kind: Job
metadata:
  name: aodh-ks-endpoints
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: ks-endpoints
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: aodh-ks-endpoints
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:keystone-api
            - name: DEPENDENCY_JOBS
              value: aodh-ks-service
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: alarming-ks-endpoints-admin
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-endpoints.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-endpoints-sh
              mountPath: /tmp/ks-endpoints.sh
              subPath: ks-endpoints.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SVC_ENDPOINT
              value: admin
            - name: OS_SERVICE_NAME
              value: aodh
            - name: OS_SERVICE_TYPE
              value: alarming
            - name: OS_SERVICE_ENDPOINT
              value: http://aodh-api.default.svc.cluster.local:8042/
        - name: alarming-ks-endpoints-internal
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-endpoints.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-endpoints-sh
              mountPath: /tmp/ks-endpoints.sh
              subPath: ks-endpoints.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SVC_ENDPOINT
              value: internal
            - name: OS_SERVICE_NAME
              value: aodh
            - name: OS_SERVICE_TYPE
              value: alarming
            - name: OS_SERVICE_ENDPOINT
              value: http://aodh-api.default.svc.cluster.local:8042/
        - name: alarming-ks-endpoints-public
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-endpoints.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-endpoints-sh
              mountPath: /tmp/ks-endpoints.sh
              subPath: ks-endpoints.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SVC_ENDPOINT
              value: public
            - name: OS_SERVICE_NAME
              value: aodh
            - name: OS_SERVICE_TYPE
              value: alarming
            - name: OS_SERVICE_ENDPOINT
              value: http://aodh.default.svc.cluster.local/
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: ks-endpoints-sh
          configMap:
            name: aodh-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: aodh-ks-service
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: ks-service
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: aodh-ks-service
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:keystone-api
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: alarming-ks-service-registration
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-service.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-service-sh
              mountPath: /tmp/ks-service.sh
              subPath: ks-service.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SERVICE_NAME
              value: aodh
            - name: OS_SERVICE_TYPE
              value: alarming
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: ks-service-sh
          configMap:
            name: aodh-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: aodh-ks-user
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: ks-user
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: aodh-ks-user
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:keystone-api
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: ks-user
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-user.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-user-sh
              mountPath: /tmp/ks-user.sh
              subPath: ks-user.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: SERVICE_OS_SERVICE_NAME
              value: aodh
            - name: SERVICE_OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-user
                  key: OS_REGION_NAME
            - name: SERVICE_OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-user
                  key: OS_PROJECT_DOMAIN_NAME
            - name: SERVICE_OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-user
                  key: OS_PROJECT_NAME
            - name: SERVICE_OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-user
                  key: OS_USER_DOMAIN_NAME
            - name: SERVICE_OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-user
                  key: OS_USERNAME
            - name: SERVICE_OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aodh-keystone-user
                  key: OS_PASSWORD
            - name: SERVICE_OS_ROLES
              value: admin
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: ks-user-sh
          configMap:
            name: aodh-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: aodh-rabbit-init
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: rabbit-init
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: aodh-rabbit-init
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:rabbitmq
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: rabbit-init
          image: docker.io/rabbitmq:3.7-management
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/rabbit-init.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: rabbit-init-sh
              mountPath: /tmp/rabbit-init.sh
              subPath: rabbit-init.sh
              readOnly: true
          env:
            - name: RABBITMQ_ADMIN_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: aodh-rabbitmq-admin
                  key: RABBITMQ_CONNECTION
            - name: RABBITMQ_USER_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: aodh-rabbitmq-user
                  key: RABBITMQ_CONNECTION
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: rabbit-init-sh
          configMap:
            name: aodh-bin
            defaultMode: 365
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: aodh-alarms-cleaner
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
spec:
  schedule: 0 */24 * * *
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        release_group: release-name
        application: aodh
        component: alarms-cleaner
    spec:
      template:
        metadata:
          labels:
            release_group: release-name
            application: aodh
            component: alarms-cleaner
        spec:
          serviceAccountName: aodh-alarms-cleaner
          restartPolicy: OnFailure
          nodeSelector:
            openstack-control-plane: enabled
          initContainers:
            - name: init
              image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
              imagePullPolicy: IfNotPresent
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                runAsUser: 65534
              env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.name
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: INTERFACE_NAME
                  value: eth0
                - name: PATH
                  value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
                - name: DEPENDENCY_SERVICE
                  value: ""
                - name: DEPENDENCY_DAEMONSET
                  value: ""
                - name: DEPENDENCY_CONTAINER
                  value: ""
                - name: DEPENDENCY_POD_JSON
                  value: ""
                - name: DEPENDENCY_CUSTOM_RESOURCE
                  value: ""
              command:
                - kubernetes-entrypoint
              volumeMounts: null
          containers:
            - name: aodh-alarms-cleaner
              image: docker.io/kolla/ubuntu-source-aodh-base:ocata
              imagePullPolicy: IfNotPresent
              command:
                - /tmp/aodh-alarms-cleaner.sh
              volumeMounts:
                - name: pod-tmp
                  mountPath: /tmp
                - name: aodh-bin
                  mountPath: /tmp/aodh-alarms-cleaner.sh
                  subPath: aodh-alarms-cleaner.sh
                  readOnly: true
                - name: pod-etc-aodh
                  mountPath: /etc/aodh
                - name: aodh-etc
                  mountPath: /etc/aodh/aodh.conf
                  subPath: aodh.conf
                  readOnly: true
                - name: aodh-etc
                  mountPath: /etc/aodh/logging.conf
                  subPath: logging.conf
                  readOnly: true
          volumes:
            - name: pod-tmp
              emptyDir: {}
            - name: pod-etc-aodh
              emptyDir: {}
            - name: aodh-etc
              secret:
                secretName: aodh-etc
                defaultMode: 292
            - name: aodh-bin
              configMap:
                name: aodh-bin
                defaultMode: 365
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: aodh
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: aodh
      http:
        paths:
          - path: /
            backend:
              serviceName: aodh-api
              servicePort: a-api
    - host: aodh.default
      http:
        paths:
          - path: /
            backend:
              serviceName: aodh-api
              servicePort: a-api
    - host: aodh.default.svc.cluster.local
      http:
        paths:
          - path: /
            backend:
              serviceName: aodh-api
              servicePort: a-api
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-test
  labels:
    release_group: release-name
    application: aodh
    component: test
  annotations:
    helm.sh/hook: test-success
    openstackhelm.openstack.org/release_uuid: ""
spec:
  restartPolicy: Never
  nodeSelector:
    openstack-control-plane: enabled
  serviceAccountName: release-name-test
  initContainers:
    - name: init
      image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
      imagePullPolicy: IfNotPresent
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsUser: 65534
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INTERFACE_NAME
          value: eth0
        - name: PATH
          value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
        - name: DEPENDENCY_SERVICE
          value: default:keystone-api,default:mariadb,default:aodh-api
        - name: DEPENDENCY_JOBS
          value: aodh-db-sync
        - name: DEPENDENCY_DAEMONSET
          value: ""
        - name: DEPENDENCY_CONTAINER
          value: ""
        - name: DEPENDENCY_POD_JSON
          value: ""
        - name: DEPENDENCY_CUSTOM_RESOURCE
          value: ""
      command:
        - kubernetes-entrypoint
      volumeMounts: null
  containers:
    - name: release-name-test
      image: docker.io/kolla/ubuntu-source-aodh-api:ocata
      imagePullPolicy: IfNotPresent
      env:
        - name: OS_IDENTITY_API_VERSION
          value: "3"
        - name: OS_AUTH_URL
          valueFrom:
            secretKeyRef:
              name: aodh-keystone-admin
              key: OS_AUTH_URL
        - name: OS_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: aodh-keystone-admin
              key: OS_REGION_NAME
        - name: OS_INTERFACE
          valueFrom:
            secretKeyRef:
              name: aodh-keystone-admin
              key: OS_INTERFACE
        - name: OS_ENDPOINT_TYPE
          valueFrom:
            secretKeyRef:
              name: aodh-keystone-admin
              key: OS_INTERFACE
        - name: OS_PROJECT_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: aodh-keystone-admin
              key: OS_PROJECT_DOMAIN_NAME
        - name: OS_PROJECT_NAME
          valueFrom:
            secretKeyRef:
              name: aodh-keystone-admin
              key: OS_PROJECT_NAME
        - name: OS_USER_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: aodh-keystone-admin
              key: OS_USER_DOMAIN_NAME
        - name: OS_USERNAME
          valueFrom:
            secretKeyRef:
              name: aodh-keystone-admin
              key: OS_USERNAME
        - name: OS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: aodh-keystone-admin
              key: OS_PASSWORD
        - name: OS_DEFAULT_DOMAIN
          valueFrom:
            secretKeyRef:
              name: aodh-keystone-admin
              key: OS_DEFAULT_DOMAIN
      command:
        - /tmp/aodh-test.sh
      volumeMounts:
        - name: pod-tmp
          mountPath: /tmp
        - name: aodh-etc
          mountPath: /etc/aodh/aodh.conf
          subPath: aodh.conf
          readOnly: true
        - name: aodh-bin
          mountPath: /tmp/aodh-test.sh
          subPath: aodh-test.sh
          readOnly: true
  volumes:
    - name: pod-tmp
      emptyDir: {}
    - name: aodh-etc
      secret:
        secretName: aodh-etc
        defaultMode: 292
    - name: aodh-bin
      configMap:
        name: aodh-bin
        defaultMode: 365
