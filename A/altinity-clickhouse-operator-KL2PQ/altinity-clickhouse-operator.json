[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-altinity-clickhouse-operator",
      "namespace": "KL2PQ",
      "labels": {
        "clickhouse.altinity.com/chop": "0.18.1",
        "helm.sh/chart": "altinity-clickhouse-operator-0.0.14",
        "app.kubernetes.io/name": "altinity-clickhouse-operator",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.18.1",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-altinity-clickhouse-operator-confd-files",
      "namespace": "KL2PQ",
      "labels": {
        "clickhouse.altinity.com/chop": "0.18.1",
        "helm.sh/chart": "altinity-clickhouse-operator-0.0.14",
        "app.kubernetes.io/name": "altinity-clickhouse-operator",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.18.1",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": null
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-altinity-clickhouse-operator-configd-files",
      "namespace": "KL2PQ",
      "labels": {
        "clickhouse.altinity.com/chop": "0.18.1",
        "helm.sh/chart": "altinity-clickhouse-operator-0.0.14",
        "app.kubernetes.io/name": "altinity-clickhouse-operator",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.18.1",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "01-clickhouse-01-listen.xml": "<yandex>\n    <!-- Listen wildcard address to allow accepting connections from other containers and host network. -->\n    <listen_host>::</listen_host>\n    <listen_host>0.0.0.0</listen_host>\n    <listen_try>1</listen_try>\n</yandex>\n",
      "01-clickhouse-02-logger.xml": "<yandex>\n    <logger>\n        <!-- Possible levels: https://github.com/pocoproject/poco/blob/develop/Foundation/include/Poco/Logger.h#L105 -->\n        <level>debug</level>\n        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\n        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\n        <size>1000M</size>\n        <count>10</count>\n        <!-- Default behavior is autodetection (log to console if not daemon mode and is tty) -->\n        <console>1</console>\n    </logger>\n</yandex>\n",
      "01-clickhouse-03-query_log.xml": "<yandex>\n    <query_log replace=\"1\">\n        <database>system</database>\n        <table>query_log</table>\n        <engine>Engine = MergeTree PARTITION BY event_date ORDER BY event_time TTL event_date + interval 30 day</engine>\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n    </query_log>\n    <query_thread_log remove=\"1\"/>\n</yandex>\n",
      "01-clickhouse-04-part_log.xml": "<yandex>\n    <part_log replace=\"1\">\n        <database>system</database>\n        <table>part_log</table>\n        <engine>Engine = MergeTree PARTITION BY event_date ORDER BY event_time TTL event_date + interval 30 day</engine>\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n    </part_log>\n</yandex>\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-altinity-clickhouse-operator-files",
      "namespace": "KL2PQ",
      "labels": {
        "clickhouse.altinity.com/chop": "0.18.1",
        "helm.sh/chart": "altinity-clickhouse-operator-0.0.14",
        "app.kubernetes.io/name": "altinity-clickhouse-operator",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.18.1",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "config.yaml": "# IMPORTANT\n# This file is auto-generated from deploy/builder/templates-config.\n# It will be overwritten upon next sources build.\n#\n# Template parameters available:\n#   watchNamespaces\n#   chUsername\n#   chPassword\n#   password_sha256_hex\n\n################################################\n##\n## Watch Section\n##\n################################################\nwatch:\n  # List of namespaces where clickhouse-operator watches for events.\n  # Concurrently running operators should watch on different namespaces\n  #namespaces: [\"dev\", \"test\"]\n  namespaces: []\n\nclickhouse:\n  configuration:\n    ################################################\n    ##\n    ## Configuration Files Section\n    ##\n    ################################################\n    file:\n      path:\n        # Path to the folder where ClickHouse configuration files common for all instances within a CHI are located.\n        common: config.d\n        # Path to the folder where ClickHouse configuration files unique for each instance (host) within a CHI are located.\n        host: conf.d\n        # Path to the folder where ClickHouse configuration files with users settings are located.\n        # Files are common for all instances within a CHI.\n        user: users.d\n    ################################################\n    ##\n    ## Configuration Users Section\n    ##\n    ################################################\n    user:\n      default:\n        # Default values for ClickHouse user configuration\n        # 1. user/profile - string\n        # 2. user/quota - string\n        # 3. user/networks/ip - multiple strings\n        # 4. user/password - string\n        profile: default\n        quota: default\n        networksIP:\n          - \"::1\"\n          - \"127.0.0.1\"\n        password: \"default\"\n    ################################################\n    ##\n    ## Configuration Network Section\n    ##\n    ################################################\n    network:\n      # Default host_regexp to limit network connectivity from outside\n      hostRegexpTemplate: \"(chi-{chi}-[^.]+\\\\d+-\\\\d+|clickhouse\\\\-{chi})\\\\.{namespace}\\\\.svc\\\\.cluster\\\\.local$\"\n  ################################################\n  ##\n  ## Access to ClickHouse instances\n  ##\n  ################################################\n  access:\n    # ClickHouse credentials (username, password and port) to be used by operator to connect to ClickHouse instances\n    # for:\n    # 1. Metrics requests\n    # 2. Schema maintenance\n    # 3. DROP DNS CACHE\n    # User with such credentials can be specified in additional ClickHouse .xml config files,\n    # located in `chUsersConfigsPath` folder\n    username: \"clickhouse_operator\"\n    password: \"clickhouse_operator_password\"\n    secret:\n      # Location of k8s Secret with username and password to be used by operator to connect to ClickHouse instances\n      # Can be used instead of explicitly specified username and password\n      namespace: \"\"\n      name: \"\"\n    # Port where to connect to ClickHouse instances to\n    port: 8123\n\n################################################\n##\n## Templates Section\n##\n################################################\ntemplate:\n  chi:\n    # Path to the folder where ClickHouseInstallation .yaml manifests are located.\n    # Manifests are applied in sorted alpha-numeric order.\n    path: templates.d\n\n################################################\n##\n## Reconcile Section\n##\n################################################\nreconcile:\n  runtime:\n    # Max number of concurrent reconciles in progress\n    threadsNumber: 10\n\n  statefulSet:\n    create:\n      # What to do in case created StatefulSet is not in Ready after `statefulSetUpdateTimeout` seconds\n      # Possible options:\n      # 1. abort - do nothing, just break the process and wait for admin\n      # 2. delete - delete newly created problematic StatefulSet\n      # 3. ignore - ignore error, pretend nothing happened and move on to the next StatefulSet\n      onFailure: ignore\n\n    update:\n      # How many seconds to wait for created/updated StatefulSet to be Ready\n      timeout: 300\n      # How many seconds to wait between checks for created/updated StatefulSet status\n      pollInterval: 5\n      # What to do in case updated StatefulSet is not in Ready after `statefulSetUpdateTimeout` seconds\n      # Possible options:\n      # 1. abort - do nothing, just break the process and wait for admin\n      # 2. rollback - delete Pod and rollback StatefulSet to previous Generation.\n      # Pod would be recreated by StatefulSet based on rollback-ed configuration\n      # 3. ignore - ignore error, pretend nothing happened and move on to the next StatefulSet\n      onFailure: rollback\n\n  host:\n    wait:\n      exclude: true\n      include: false\n\n################################################\n##\n## Annotations management\n##\n################################################\nannotation:\n  # Applied when:\n  #  1. Propagating annotations from the CHI's `metadata.annotations` to child objects' `metadata.annotations`,\n  #  2. Propagating annotations from the CHI Template's `metadata.annotations` to CHI's `metadata.annotations`,\n  # Include annotations from the following list:\n  # Applied only when not empty. Empty list means \"include all, no selection\"\n  include: []\n  # Exclude annotations from the following list:\n  exclude: []\n\n################################################\n##\n## Labels management\n##\n################################################\nlabel:\n  # Applied when:\n  #  1. Propagating labels from the CHI's `metadata.labels` to child objects' `metadata.labels`,\n  #  2. Propagating labels from the CHI Template's `metadata.labels` to CHI's `metadata.labels`,\n  # Include labels from the following list:\n  # Applied only when not empty. Empty list means \"include all, no selection\"\n  include: []\n  # Exclude labels from the following list:\n  exclude: []\n  # Whether to append *Scope* labels to StatefulSet and Pod.\n  # Full list of available *scope* labels check in labeler.go\n  #  LabelShardScopeIndex\n  #  LabelReplicaScopeIndex\n  #  LabelCHIScopeIndex\n  #  LabelCHIScopeCycleSize\n  #  LabelCHIScopeCycleIndex\n  #  LabelCHIScopeCycleOffset\n  #  LabelClusterScopeIndex\n  #  LabelClusterScopeCycleSize\n  #  LabelClusterScopeCycleIndex\n  #  LabelClusterScopeCycleOffset\n  appendScope: \"no\"\n\n################################################\n##\n## StatefulSet management\n##\n################################################\nstatefulSet:\n  revisionHistoryLimit: 0\n\n################################################\n##\n## Pod management\n##\n################################################\npod:\n  # Grace period for Pod termination.\n  # How many seconds to wait between sending\n  # SIGTERM and SIGKILL during Pod termination process.\n  # Increase this number is case of slow shutdown.\n  terminationGracePeriod: 30\n\n################################################\n##\n## Log parameters\n##\n################################################\nlogger:\n  logtostderr: \"true\"\n  alsologtostderr: \"false\"\n  v: \"1\"\n  stderrthreshold: \"\"\n  vmodule: \"\"\n  log_backtrace_at: \"\"\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-altinity-clickhouse-operator-templatesd-files",
      "namespace": "KL2PQ",
      "labels": {
        "clickhouse.altinity.com/chop": "0.18.1",
        "helm.sh/chart": "altinity-clickhouse-operator-0.0.14",
        "app.kubernetes.io/name": "altinity-clickhouse-operator",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.18.1",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "001-templates.json.example": "{\n  \"apiVersion\": \"clickhouse.altinity.com/v1\",\n  \"kind\": \"ClickHouseInstallationTemplate\",\n  \"metadata\": {\n    \"name\": \"01-default-volumeclaimtemplate\"\n  },\n  \"spec\": {\n    \"templates\": {\n      \"volumeClaimTemplates\": [\n        {\n          \"name\": \"chi-default-volume-claim-template\",\n          \"spec\": {\n            \"accessModes\": [\n              \"ReadWriteOnce\"\n            ],\n            \"resources\": {\n              \"requests\": {\n                \"storage\": \"2Gi\"\n              }\n            }\n          }\n        }\n      ],\n      \"podTemplates\": [\n        {\n          \"name\": \"chi-default-oneperhost-pod-template\",\n          \"distribution\": \"OnePerHost\",\n          \"spec\": {\n            \"containers\" : [\n              {\n                \"name\": \"clickhouse\",\n                \"image\": \"yandex/clickhouse-server:21.3\",\n                \"ports\": [\n                  {\n                    \"name\": \"http\",\n                    \"containerPort\": 8123\n                  },\n                  {\n                    \"name\": \"client\",\n                    \"containerPort\": 9000\n                  },\n                  {\n                    \"name\": \"interserver\",\n                    \"containerPort\": 9009\n                  }\n                ]\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n",
      "default-pod-template.yaml.example": "apiVersion: \"clickhouse.altinity.com/v1\"\nkind: \"ClickHouseInstallationTemplate\"\nmetadata:\n  name: \"default-oneperhost-pod-template\"\nspec:\n  templates:\n    podTemplates:\n      - name: default-oneperhost-pod-template\n        distribution: \"OnePerHost\"\n",
      "default-storage-template.yaml.example": "apiVersion: \"clickhouse.altinity.com/v1\"\nkind: \"ClickHouseInstallationTemplate\"\nmetadata:\n  name: \"default-storage-template-2Gi\"\nspec:\n  templates:\n    volumeClaimTemplates:\n      - name: default-storage-template-2Gi\n        spec:\n          accessModes:\n            - ReadWriteOnce\n          resources:\n            requests:\n              storage: 2Gi\n",
      "readme": "Templates in this folder are packaged with an operator and available via 'useTemplate'\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-altinity-clickhouse-operator-usersd-files",
      "namespace": "KL2PQ",
      "labels": {
        "clickhouse.altinity.com/chop": "0.18.1",
        "helm.sh/chart": "altinity-clickhouse-operator-0.0.14",
        "app.kubernetes.io/name": "altinity-clickhouse-operator",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.18.1",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "01-clickhouse-user.xml": "<yandex>\n    <users>\n        <clickhouse_operator>\n            <networks>\n                <ip>127.0.0.1</ip>\n                <ip>0.0.0.0/0</ip>\n                <ip>::/0</ip>\n            </networks>\n            <password_sha256_hex>716b36073a90c6fe1d445ac1af85f4777c5b7a155cea359961826a030513e448</password_sha256_hex>\n            <profile>clickhouse_operator</profile>\n            <quota>default</quota>\n        </clickhouse_operator>\n    </users>\n    <profiles>\n        <clickhouse_operator>\n            <log_queries>0</log_queries>\n            <skip_unavailable_shards>1</skip_unavailable_shards>\n            <http_connection_timeout>10</http_connection_timeout>\n        </clickhouse_operator>\n    </profiles>\n</yandex>\n",
      "02-clickhouse-default-profile.xml": "<yandex>\n  <profiles>\n    <default>\n      <log_queries>1</log_queries>\n      <connect_timeout_with_failover_ms>1000</connect_timeout_with_failover_ms>\n      <distributed_aggregation_memory_efficient>1</distributed_aggregation_memory_efficient>\n      <parallel_view_processing>1</parallel_view_processing>\n    </default>\n  </profiles>\n</yandex>\n",
      "03-database-ordinary.xml": "<!--  Remove it for ClickHouse versions before 20.4 -->\n<yandex>\n    <profiles>\n        <default>\n            <default_database_engine>Ordinary</default_database_engine>\n        </default>\n    </profiles>\n</yandex>\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "name": "release-name-altinity-clickhouse-operator",
      "namespace": "default",
      "labels": {
        "clickhouse.altinity.com/chop": "0.18.1"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps",
          "services"
        ],
        "verbs": [
          "get",
          "list",
          "patch",
          "update",
          "watch",
          "create",
          "delete"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "persistentvolumeclaims"
        ],
        "verbs": [
          "get",
          "list",
          "patch",
          "update",
          "watch",
          "delete"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "persistentvolumes",
          "pods"
        ],
        "verbs": [
          "get",
          "list",
          "patch",
          "update",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "apps"
        ],
        "resources": [
          "statefulsets"
        ],
        "verbs": [
          "get",
          "list",
          "patch",
          "update",
          "watch",
          "create",
          "delete"
        ]
      },
      {
        "apiGroups": [
          "apps"
        ],
        "resources": [
          "replicasets"
        ],
        "verbs": [
          "get",
          "patch",
          "update",
          "delete"
        ]
      },
      {
        "apiGroups": [
          "apps"
        ],
        "resourceNames": [
          "clickhouse-operator"
        ],
        "resources": [
          "deployments"
        ],
        "verbs": [
          "get",
          "patch",
          "update",
          "delete"
        ]
      },
      {
        "apiGroups": [
          "policy"
        ],
        "resources": [
          "poddisruptionbudgets"
        ],
        "verbs": [
          "get",
          "list",
          "patch",
          "update",
          "watch",
          "create",
          "delete"
        ]
      },
      {
        "apiGroups": [
          "clickhouse.altinity.com"
        ],
        "resources": [
          "clickhouseinstallations"
        ],
        "verbs": [
          "get",
          "patch",
          "update",
          "delete"
        ]
      },
      {
        "apiGroups": [
          "clickhouse.altinity.com"
        ],
        "resources": [
          "clickhouseinstallations",
          "clickhouseinstallationtemplates",
          "clickhouseoperatorconfigurations"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "clickhouse.altinity.com"
        ],
        "resources": [
          "clickhouseinstallations/finalizers",
          "clickhouseinstallationtemplates/finalizers",
          "clickhouseoperatorconfigurations/finalizers"
        ],
        "verbs": [
          "update"
        ]
      },
      {
        "apiGroups": [
          "clickhouse.altinity.com"
        ],
        "resources": [
          "clickhouseinstallations/status",
          "clickhouseinstallationtemplates/status",
          "clickhouseoperatorconfigurations/status"
        ],
        "verbs": [
          "get",
          "update",
          "patch",
          "create",
          "delete"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "get",
          "list"
        ]
      },
      {
        "apiGroups": [
          "apiextensions.k8s.io"
        ],
        "resources": [
          "customresourcedefinitions"
        ],
        "verbs": [
          "get",
          "list"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "name": "release-name-altinity-clickhouse-operator",
      "namespace": "default",
      "labels": {
        "clickhouse.altinity.com/chop": "0.18.1"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-altinity-clickhouse-operator"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-altinity-clickhouse-operator",
        "namespace": "default"
      }
    ]
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "release-name-altinity-clickhouse-operator-metrics",
      "namespace": "KL2PQ",
      "labels": {
        "clickhouse.altinity.com/chop": "0.18.1",
        "helm.sh/chart": "altinity-clickhouse-operator-0.0.14",
        "app.kubernetes.io/name": "altinity-clickhouse-operator",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.18.1",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "port": 8888,
          "name": "clickhouse-operator-metrics",
          "targetPort": "metrics"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "altinity-clickhouse-operator",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "kind": "Deployment",
    "apiVersion": "apps/v1",
    "metadata": {
      "name": "release-name-altinity-clickhouse-operator",
      "namespace": "KL2PQ",
      "labels": {
        "clickhouse.altinity.com/chop": "0.18.1",
        "helm.sh/chart": "altinity-clickhouse-operator-0.0.14",
        "app.kubernetes.io/name": "altinity-clickhouse-operator",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.18.1",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "altinity-clickhouse-operator",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "altinity-clickhouse-operator",
            "app.kubernetes.io/instance": "release-name"
          },
          "annotations": {
            "prometheus.io/port": "8888",
            "prometheus.io/scrape": "true",
            "checksum/confd-files": "5c8a34dc165b4fd04bff37a0ad0bf6fe51e873afceb95b03bace37fa88a4f066",
            "checksum/configd-files": "6fc1a17f0e03aa0706897fd3a722a6e89eeab40fe4ee39c545a8f57ed2993165",
            "checksum/files": "8e0ff225bb1675e930fe68e101d4d72d9ef86944300210d732dee4fe7623e328",
            "checksum/templatesd-files": "84e97427ba37b87260680f1f1b3027a8db677e2a1c755b017337ae5a0a39cf32",
            "checksum/usersd-files": "8ea4a37dd67996810671a897ebed9d8ff462a0dc349176bcc2c471184a5363a9"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-altinity-clickhouse-operator",
          "volumes": [
            {
              "name": "etc-clickhouse-operator-folder",
              "configMap": {
                "name": "release-name-altinity-clickhouse-operator-files"
              }
            },
            {
              "name": "etc-clickhouse-operator-confd-folder",
              "configMap": {
                "name": "release-name-altinity-clickhouse-operator-confd-files"
              }
            },
            {
              "name": "etc-clickhouse-operator-configd-folder",
              "configMap": {
                "name": "release-name-altinity-clickhouse-operator-configd-files"
              }
            },
            {
              "name": "etc-clickhouse-operator-templatesd-folder",
              "configMap": {
                "name": "release-name-altinity-clickhouse-operator-templatesd-files"
              }
            },
            {
              "name": "etc-clickhouse-operator-usersd-folder",
              "configMap": {
                "name": "release-name-altinity-clickhouse-operator-usersd-files"
              }
            }
          ],
          "containers": [
            {
              "name": "altinity-clickhouse-operator",
              "image": "altinity/clickhouse-operator:0.18.1",
              "imagePullPolicy": "IfNotPresent",
              "volumeMounts": [
                {
                  "name": "etc-clickhouse-operator-folder",
                  "mountPath": "/etc/clickhouse-operator"
                },
                {
                  "name": "etc-clickhouse-operator-confd-folder",
                  "mountPath": "/etc/clickhouse-operator/conf.d"
                },
                {
                  "name": "etc-clickhouse-operator-configd-folder",
                  "mountPath": "/etc/clickhouse-operator/config.d"
                },
                {
                  "name": "etc-clickhouse-operator-templatesd-folder",
                  "mountPath": "/etc/clickhouse-operator/templates.d"
                },
                {
                  "name": "etc-clickhouse-operator-usersd-folder",
                  "mountPath": "/etc/clickhouse-operator/users.d"
                }
              ],
              "env": [
                {
                  "name": "OPERATOR_POD_NODE_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.nodeName"
                    }
                  }
                },
                {
                  "name": "OPERATOR_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "OPERATOR_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "OPERATOR_POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "OPERATOR_POD_SERVICE_ACCOUNT",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "spec.serviceAccountName"
                    }
                  }
                },
                {
                  "name": "OPERATOR_CONTAINER_CPU_REQUEST",
                  "valueFrom": {
                    "resourceFieldRef": {
                      "containerName": "altinity-clickhouse-operator",
                      "resource": "requests.cpu"
                    }
                  }
                },
                {
                  "name": "OPERATOR_CONTAINER_CPU_LIMIT",
                  "valueFrom": {
                    "resourceFieldRef": {
                      "containerName": "altinity-clickhouse-operator",
                      "resource": "limits.cpu"
                    }
                  }
                },
                {
                  "name": "OPERATOR_CONTAINER_MEM_REQUEST",
                  "valueFrom": {
                    "resourceFieldRef": {
                      "containerName": "altinity-clickhouse-operator",
                      "resource": "requests.memory"
                    }
                  }
                },
                {
                  "name": "OPERATOR_CONTAINER_MEM_LIMIT",
                  "valueFrom": {
                    "resourceFieldRef": {
                      "containerName": "altinity-clickhouse-operator",
                      "resource": "limits.memory"
                    }
                  }
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            },
            {
              "name": "metrics-exporter",
              "image": "altinity/metrics-exporter:0.18.1",
              "imagePullPolicy": "IfNotPresent",
              "volumeMounts": [
                {
                  "name": "etc-clickhouse-operator-folder",
                  "mountPath": "/etc/clickhouse-operator"
                },
                {
                  "name": "etc-clickhouse-operator-confd-folder",
                  "mountPath": "/etc/clickhouse-operator/conf.d"
                },
                {
                  "name": "etc-clickhouse-operator-configd-folder",
                  "mountPath": "/etc/clickhouse-operator/config.d"
                },
                {
                  "name": "etc-clickhouse-operator-templatesd-folder",
                  "mountPath": "/etc/clickhouse-operator/templates.d"
                },
                {
                  "name": "etc-clickhouse-operator-usersd-folder",
                  "mountPath": "/etc/clickhouse-operator/users.d"
                }
              ],
              "ports": [
                {
                  "containerPort": 8888,
                  "name": "metrics"
                }
              ],
              "resources": {}
            }
          ]
        }
      }
    }
  }
]