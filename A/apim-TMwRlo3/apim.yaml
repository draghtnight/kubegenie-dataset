apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-apim-api
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: api
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
data:
  gravitee.yml: "\nmanagement:\n  type: mongodb\n  mongodb:\n    sslEnabled: false\n    socketKeepAlive: false\n    uri: mongodb://graviteeio-apim-mongodb-replicaset:27017/gravitee?&replicaSet=rs0&connectTimeoutMS=30000\nservices:\n  core:\n    http: \n      enabled: true\n      port: 18083\n      host: localhost\n      authentication:\n        type: basic\n        users:\n          admin: adminadmin\nhttpClient:\n  timeout: 10000\n  proxy:\n    type: HTTP\n    http:\n      host: localhost\n      port: 3128\n    https:\n      host: localhost\n      port: 3128\nhttp:\n  api:\n    entrypoint: /management\n\nanalytics:\n  type: elasticsearch\n  elasticsearch:\n    endpoints:\n      - http://graviteeio-apim-elasticsearch-client.default.svc.cluster.local:9200\n    index: gravitee\nsecurity:\n  providers:\n    - type: gravitee\n    - type: memory\n      # password encoding/hashing algorithm. One of:\n      # - bcrypt : passwords are hashed with bcrypt\n      # - none : passwords are not hashed/encrypted\n      # default value is bcrypt\n      password-encoding-algo: bcrypt\n      allow-email-in-search-results: false\n      users:\n        - user:\n          username: admin\n          password: $2a$10$Ihk05VSds5rUSgMdsMVi9OKMIx2yUvMz7y9VP3rJmQeizZLrhLMyq\n          roles: MANAGEMENT:ADMIN, PORTAL:ADMIN\n          email: \n          firstName: \n          lastName: \n        - user:\n          username: user\n          # Password value: password\n          password: $2a$10$9kjw/SH9gucCId3Lnt6EmuFreUAcXSZgpvAYuW2ISv7hSOhHRH1AO\n          roles: MANAGEMENT:USER, PORTAL:USER\n          # Useful to receive notifications\n          #email:\n          #firstName:\n          #lastName:\n        - user:\n          username: api1\n          # Password value: api1\n          password: $2a$10$iXdXO4wAYdhx2LOwijsp7.PsoAZQ05zEdHxbriIYCbtyo.y32LTji\n          # You can declare multiple roles using comma separator\n          roles: MANAGEMENT:API_PUBLISHER, PORTAL:API_PUBLISHER\n          #email:\n          #firstName:\n          #lastName:\n        - user:\n          username: application1\n          # Password value: application1\n          password: $2a$10$2gtKPYRB9zaVaPcn5RBx/.3T.7SeZoDGs9GKqbo9G64fKyXFR1He.\n          roles: MANAGEMENT:USER, PORTAL:USER\n          #email:\n          #firstName:\n          #lastName:\n        \n# SMTP configuration used to send mails\nemail:\n  enabled: true \n  host: smtp.example.com\n  subject: \"[gravitee] %s\"\n  port: 25\n  from: info@example.com\n  username: info@example.com\n  password: example.com\n  properties:\n    auth: true\n    starttls.enable: false\n\n# SMTP configuration used to send notifications / alerts\nnotifiers:\n  email:\n    enabled: true\n    host: ${email.host}\n    subject: \"${email.subject}\"\n    port: ${email.port}\n    from: ${email.from}\n    username: ${email.username}\n    password: ${email.password}\n    starttls.enabled: false\n\n# Mail templates\ntemplates:\n  path: ${gravitee.home}/templates\n\njwt:\n  secret: myJWT4Gr4v1t33_S3cr3t\n  # Allows to define the end of validity of the token in seconds (default 604800 = a week)\n  #expire-after: 604800\n  # Allows to define the end of validity of the token in seconds for email registration (default 86400 = a day)\n  #email-registration-expire-after: 86400\n  # Allows to define issuer (default gravitee-management-auth)\n  #issuer: gravitee-management-auth\n  # Allows to define cookie context path (default /)\n  #cookie-path: /\n  # Allows to define cookie domain (default \"\")\n  #cookie-domain: .gravitee.io\n  # Allows to define if cookie secure only (default false)\n  #cookie-secure: true\n\nswagger:\n  # Default scheme used when creating an API from a Swagger descriptor if there is no scheme specified.\n  scheme: https\n\nuser:\n  login:\n    # Create a default application when user connects to the portal for the very first time (default true)\n    defaultApplication: true\n  creation:\n    # Allows to register new users from portal (default false)\n    #enabled: true\n    token:\n      #expire-after: 86400\n    anonymize-on-delete:\n      enabled: false\n# The portal URL used in emails\nportalURL: https://apim.example.com\n\n# Allows to create support ticket (default value: false)\nsupport:\n  enabled: true\n\n# Allows to rate an API (default value: false)\nrating :\n  enabled: true\n"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-apim-gateway
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: gateway
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
data:
  gravitee.yml: "# Gateway HTTP server\nhttp:\n  port: 8082\n  host: 0.0.0.0\n#  idleTimeout: 0\n#  tcpKeepAlive: true\n#  compressionSupported: false\n#  instances: 0\n  alpn: true\n  websocket:\n    enabled: false  \nmanagement:\n  type: mongodb\n  mongodb:\n    uri: mongodb://graviteeio-apim-mongodb-replicaset:27017/gravitee?&replicaSet=rs0&connectTimeoutMS=30000\nratelimit:\n  type: mongodb\n  mongodb:\n    uri: mongodb://graviteeio-apim-mongodb-replicaset:27017/gravitee?&replicaSet=rs0&connectTimeoutMS=30000\ncache:\n  type: ehcache\n  enabled: true\n\n# Sharding tags configuration\n# Allows to define inclusion/exclusion sharding tags to only deploy a part of APIs. To exclude just prefix the tag with '!'.\ntags:   \n\n# Multi-tenant configuration\n# Allow only a single-value\ntenant:   \n\n# Reporters configuration (used to store reporting monitoring data, request metrics, healthchecks and others...\n# All reporters are enabled by default. To stop one of them, you have to add the property 'enabled: false'\nreporters:\n  # Elasticsearch reporter\n  elasticsearch:\n    enabled: true # Is the reporter enabled or not (default to true)\n    endpoints:\n      - http://graviteeio-apim-elasticsearch-client.default.svc.cluster.local:9200\n    index: gravitee\n    bulk:\n      actions: 1000           # Number of requests action before flush\n      flush_interval: 5       # Flush interval in seconds\nservices:\n  core:\n    http:\n      port: 18082\n      host: localhost\n      authentication:\n        # authentication type to be used for the core services\n        # - none : to disable authentication\n        # - basic : to use basic authentication\n        # default is \"basic\"\n        type: basic\n        users:\n          admin: adminadmin\n  # Synchronization daemon used to keep the gateway state in sync with the configuration from the management repository\n  # Be aware that, by disabling it, the gateway will not be sync with the configuration done through management API\n  # and management UI\n  sync:\n    # Synchronization is done each 5 seconds\n    cron: '*/5 * * * * *'\n\n  # Service used to store and cache api-keys from the management repository to avoid direct repository communication\n  # while serving requests.\n  apikeyscache:\n    delay: 10000\n    unit: MILLISECONDS\n    threads: 3 # Threads core size used to retrieve api-keys from repository.\n\n  # Local registry service.\n  # This registry is used to load API Definition with json format from the file system. By doing so, you do not need\n  # to configure your API using the web console or the rest API (but you need to know and understand the json descriptor\n  # format to make it work....)\n  local:\n    enabled: false\n    path: ${gravitee.home}/apis # The path to API descriptors\n\n  # Gateway monitoring service.\n  # This service retrieves metrics like os / process / jvm metrics and send them to an underlying reporting service.\n  monitoring:\n    delay: 5000\n    unit: MILLISECONDS\n\n  # Endpoint healthcheck service.\n  healthcheck:\n    threads: 3 # Threads core size used to check endpoint availability\n\nhandlers:\n  request:\n    transaction:\n      header: X-Gravitee-Transaction-Id\n\n# Customize the api-key header and / or query parameter.\npolicy:\n  api-key:\n    header: X-Gravitee-Api-Key\n    param: api-key\n"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-apim-ui
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: ui
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
data:
  use-gzip: "true"
  gzip-level: "5"
  gzip-types: '*'
  constants.json: |
    {
      "baseURL": "https://apim.example.com/management/",
      "management": {
        "title": "API Management"
      },
      "documentation": {
        "url": "http://docs.gravitee.io/"
      },
      "portal": {
        "entrypoint": "https://apim.example.com/gateway",
        "title": "API Portal",
        "analytics": {"enabled":false,"trackingId":""},
        "apikeyHeader": "X-Gravitee-Api-Key",
        "devMode": {"enabled":false},
        "rating": {"enabled":false},
        "support": {"enabled":true},
        "userCreation": {"enabled":false}
      },
      "theme": {"loader":"assets/gravitee_logo_anim.gif","logo":"themes/assets/GRAVITEE_LOGO1-01.png","name":"default"},
      "scheduler": {"tasks":10}
    }
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-apim-api
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: api
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
  annotations: null
spec:
  type: ClusterIP
  ports:
    - port: 83
      targetPort: 8083
      protocol: TCP
      name: api
  selector:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: api
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-apim-gateway
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: gateway
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
  annotations: null
spec:
  type: ClusterIP
  ports:
    - port: 82
      targetPort: 8082
      protocol: TCP
      name: gateway
  selector:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: gateway
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-apim-ui
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: ui
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
  annotations: null
spec:
  type: ClusterIP
  ports:
    - port: 8002
      targetPort: 80
      protocol: TCP
      name: ui
  selector:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: ui
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-apim-api
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: api
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: apim
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: api
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: da64ab64c90ef0007017ba3b1176828d8d65516c2607c07715d18ac1337d4b52
      labels:
        app.kubernetes.io/name: apim
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: api
    spec:
      containers:
        - name: release-name-apim-api
          image: graviteeio/management-api:1.30.26
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8083
          livenessProbe:
            tcpSocket:
              port: 8083
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            tcpSocket:
              port: 8083
            initialDelaySeconds: 60
            periodSeconds: 30
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: config
              mountPath: /opt/graviteeio-management-api/config/gravitee.yml
              subPath: gravitee.yml
      volumes:
        - name: config
          configMap:
            name: release-name-apim-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-apim-gateway
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: gateway
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: apim
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: gateway
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: f6321bd7b7d1266a05b7ebf9aab5085fb5b7eef3f68cb8c75abd4e591b48dbe4
      labels:
        app.kubernetes.io/name: apim
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: gateway
    spec:
      containers:
        - name: release-name-apim-gateway
          image: graviteeio/gateway:1.30.26
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8082
          livenessProbe:
            tcpSocket:
              port: 8082
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            tcpSocket:
              port: 8082
            initialDelaySeconds: 5
            periodSeconds: 30
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - name: config
              mountPath: /opt/graviteeio-gateway/config/gravitee.yml
              subPath: gravitee.yml
      volumes:
        - name: config
          configMap:
            name: release-name-apim-gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-apim-ui
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: ui
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: apim
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: ui
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: 8147621093cc70536ed67e0d13e06c52a64d0aff8bd6266ab9953101a21cc810
      labels:
        app.kubernetes.io/name: apim
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: ui
    spec:
      containers:
        - name: release-name-apim-ui
          image: graviteeio/management-ui:1.30.26
          imagePullPolicy: Always
          env:
            - name: MGMT_API_URL
              value: https://apim.example.com/management/
          ports:
            - name: http
              containerPort: 80
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 30
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - name: config
              mountPath: /var/www/html/constants.json
              subPath: constants.json
      volumes:
        - name: config
          configMap:
            name: release-name-apim-ui
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: release-name-apim-api
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: api
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: release-name-apim-api
  minReplicas: 1
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 50
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: 80
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: release-name-apim-gateway
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: gateway
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: release-name-apim-gateway
  minReplicas: 1
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 50
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: 80
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: release-name-apim-ui
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: ui
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: release-name-apim-ui
  minReplicas: 1
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 50
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: 80
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: release-name-apim-api
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: api
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/configuration-snippet: |
      etag on;
      proxy_pass_header ETag;
      proxy_set_header if-match "";
spec:
  rules:
    - host: apim.example.com
      http:
        paths:
          - path: /management
            backend:
              serviceName: release-name-apim-api
              servicePort: 83
  tls:
    - hosts:
        - apim.example.com
      secretName: api-custom-cert
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: release-name-apim-gateway
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: gateway
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
  annotations:
    kubernetes.io/app-root: /gateway
    kubernetes.io/ingress.class: nginx
    kubernetes.io/rewrite-target: /gateway
    nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - host: apim.example.com
      http:
        paths:
          - path: /gateway
            backend:
              serviceName: release-name-apim-gateway
              servicePort: 82
  tls:
    - hosts:
        - apim.example.com
      secretName: api-custom-cert
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: release-name-apim-ui
  labels:
    app.kubernetes.io/name: apim
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.30.26
    app.kubernetes.io/component: ui
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim-1.29.13
  annotations:
    kubernetes.io/app-root: /management
    kubernetes.io/ingress.class: nginx
    kubernetes.io/rewrite-target: /management
    nginx.ingress.kubernetes.io/configuration-snippet: |
      etag on;
      proxy_pass_header ETag;
spec:
  rules:
    - host: apim.example.com
      http:
        paths:
          - path: /
            backend:
              serviceName: release-name-apim-ui
              servicePort: 8002
  tls:
    - hosts:
        - apim.example.com
      secretName: api-custom-cert
