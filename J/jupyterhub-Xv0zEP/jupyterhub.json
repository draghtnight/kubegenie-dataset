[
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": {
      "name": "hub",
      "labels": {
        "component": "hub",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "podSelector": {
        "matchLabels": {
          "component": "hub",
          "app": "jupyterhub",
          "release": "release-name"
        }
      },
      "policyTypes": [
        "Ingress",
        "Egress"
      ],
      "ingress": [
        {
          "ports": [
            {
              "port": "http"
            }
          ],
          "from": [
            {
              "podSelector": {
                "matchLabels": {
                  "hub.jupyter.org/network-access-hub": "true"
                }
              }
            }
          ]
        }
      ],
      "egress": [
        {
          "ports": [
            {
              "port": 8001
            }
          ],
          "to": [
            {
              "podSelector": {
                "matchLabels": {
                  "component": "proxy",
                  "app": "jupyterhub",
                  "release": "release-name"
                }
              }
            }
          ]
        },
        {
          "ports": [
            {
              "port": 8888
            }
          ],
          "to": [
            {
              "podSelector": {
                "matchLabels": {
                  "component": "singleuser-server",
                  "app": "jupyterhub",
                  "release": "release-name"
                }
              }
            }
          ]
        },
        {
          "ports": [
            {
              "protocol": "UDP",
              "port": 53
            },
            {
              "protocol": "TCP",
              "port": 53
            }
          ]
        },
        {
          "to": [
            {
              "ipBlock": {
                "cidr": "0.0.0.0/0"
              }
            }
          ]
        }
      ]
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": {
      "name": "proxy",
      "labels": {
        "component": "proxy",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "podSelector": {
        "matchLabels": {
          "component": "proxy",
          "app": "jupyterhub",
          "release": "release-name"
        }
      },
      "policyTypes": [
        "Ingress",
        "Egress"
      ],
      "ingress": [
        {
          "ports": [
            {
              "port": "http"
            },
            {
              "port": "https"
            }
          ]
        },
        {
          "ports": [
            {
              "port": "http"
            }
          ],
          "from": [
            {
              "podSelector": {
                "matchLabels": {
                  "hub.jupyter.org/network-access-proxy-http": "true"
                }
              }
            }
          ]
        },
        {
          "ports": [
            {
              "port": "api"
            }
          ],
          "from": [
            {
              "podSelector": {
                "matchLabels": {
                  "hub.jupyter.org/network-access-proxy-api": "true"
                }
              }
            }
          ]
        }
      ],
      "egress": [
        {
          "ports": [
            {
              "port": 8081
            }
          ],
          "to": [
            {
              "podSelector": {
                "matchLabels": {
                  "component": "hub",
                  "app": "jupyterhub",
                  "release": "release-name"
                }
              }
            }
          ]
        },
        {
          "ports": [
            {
              "port": 8888
            }
          ],
          "to": [
            {
              "podSelector": {
                "matchLabels": {
                  "component": "singleuser-server",
                  "app": "jupyterhub",
                  "release": "release-name"
                }
              }
            }
          ]
        },
        {
          "ports": [
            {
              "protocol": "UDP",
              "port": 53
            },
            {
              "protocol": "TCP",
              "port": 53
            }
          ]
        },
        {
          "to": [
            {
              "ipBlock": {
                "cidr": "0.0.0.0/0"
              }
            }
          ]
        }
      ]
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": {
      "name": "singleuser",
      "labels": {
        "component": "singleuser",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "podSelector": {
        "matchLabels": {
          "component": "singleuser-server",
          "app": "jupyterhub",
          "release": "release-name"
        }
      },
      "policyTypes": [
        "Ingress",
        "Egress"
      ],
      "ingress": [
        {
          "ports": [
            {
              "port": "notebook-port"
            }
          ],
          "from": [
            {
              "podSelector": {
                "matchLabels": {
                  "hub.jupyter.org/network-access-singleuser": "true"
                }
              }
            }
          ]
        }
      ],
      "egress": [
        {
          "ports": [
            {
              "port": 8081
            }
          ],
          "to": [
            {
              "podSelector": {
                "matchLabels": {
                  "component": "hub",
                  "app": "jupyterhub",
                  "release": "release-name"
                }
              }
            }
          ]
        },
        {
          "ports": [
            {
              "protocol": "UDP",
              "port": 53
            },
            {
              "protocol": "TCP",
              "port": 53
            }
          ]
        },
        {
          "to": [
            {
              "ipBlock": {
                "cidr": "0.0.0.0/0",
                "except": [
                  "169.254.169.254/32"
                ]
              }
            }
          ]
        }
      ]
    }
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "user-placeholder",
      "labels": {
        "component": "user-placeholder",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "minAvailable": 0,
      "selector": {
        "matchLabels": {
          "component": "user-placeholder",
          "app": "jupyterhub",
          "release": "release-name"
        }
      }
    }
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "user-scheduler",
      "labels": {
        "component": "user-scheduler",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "maxUnavailable": 1,
      "selector": {
        "matchLabels": {
          "component": "user-scheduler",
          "app": "jupyterhub",
          "release": "release-name"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "hub",
      "labels": {
        "component": "hub",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "user-scheduler",
      "labels": {
        "component": "user-scheduler",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    }
  },
  {
    "kind": "Secret",
    "apiVersion": "v1",
    "metadata": {
      "name": "hub",
      "labels": {
        "component": "hub",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "values.yaml": "",
      "hub.config.ConfigurableHTTPProxy.auth_token": "aFdvVFFmYUdlZmZ3NFJQWDJtZGVIVDZuTFJxaWFhQTlOam44dmMyV255a21EcUxCcGg4dGVYVTQyZGltQzhQVg==",
      "hub.config.JupyterHub.cookie_secret": "MjA0NWE5NWQ2NzFjOGZkNzMyOTI3ZGE3N2I3OWI0MTNiZGE4YTg5OGZkZGUyZDM0ZGE2MzEwOGM0MjdjZDQ3OA==",
      "hub.config.CryptKeeper.keys": "ODFlNzRlOWEyOGVlOWUyMmQ4YzcwNTkwOGIzZmU0MzU0NWZiYmQxYmU1OTlhMzgwZmQzNmM1ZjVmMzQ0ZjBlNQ=="
    }
  },
  {
    "kind": "ConfigMap",
    "apiVersion": "v1",
    "metadata": {
      "name": "hub",
      "labels": {
        "component": "hub",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "data": {
      "fullname": "",
      "fullname-dash": "",
      "hub": "hub",
      "hub-existing-secret": "",
      "hub-existing-secret-or-default": "hub",
      "hub-pvc": "hub-db-dir",
      "proxy": "proxy",
      "proxy-api": "proxy-api",
      "proxy-http": "proxy-http",
      "proxy-public": "\"jupyterhub\"",
      "proxy-public-tls": "\"jupyterhub\"-tls-acme",
      "proxy-public-manual-tls": "\"jupyterhub\"-manual-tls",
      "autohttps": "autohttps",
      "user-scheduler-deploy": "user-scheduler",
      "user-scheduler-lock": "user-scheduler-lock",
      "user-placeholder": "user-placeholder",
      "hook-image-awaiter": "hook-image-awaiter",
      "hook-image-puller": "hook-image-puller",
      "continuous-image-puller": "continuous-image-puller",
      "singleuser": "singleuser",
      "image-pull-secret": "image-pull-secret",
      "ingress": "jupyterhub",
      "priority": "release-name-default-priority",
      "user-placeholder-priority": "release-name-user-placeholder-priority",
      "user-scheduler": "release-name-user-scheduler",
      "jupyterhub_config.py": "import glob\nimport os\nimport re\nimport sys\n\nfrom binascii import a2b_hex\n\nfrom tornado.httpclient import AsyncHTTPClient\nfrom kubernetes import client\nfrom jupyterhub.utils import url_path_join\n\n# Make sure that modules placed in the same directory as the jupyterhub config are added to the pythonpath\nconfiguration_directory = os.path.dirname(os.path.realpath(__file__))\nsys.path.insert(0, configuration_directory)\n\nfrom z2jh import (\n    get_config,\n    set_config_if_not_none,\n    get_name,\n    get_name_env,\n    get_secret_value,\n)\n\n\ndef camelCaseify(s):\n    \"\"\"convert snake_case to camelCase\n\n    For the common case where some_value is set from someValue\n    so we don't have to specify the name twice.\n    \"\"\"\n    return re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), s)\n\n\n# Configure JupyterHub to use the curl backend for making HTTP requests,\n# rather than the pure-python implementations. The default one starts\n# being too slow to make a large number of requests to the proxy API\n# at the rate required.\nAsyncHTTPClient.configure(\"tornado.curl_httpclient.CurlAsyncHTTPClient\")\n\nc.JupyterHub.spawner_class = \"kubespawner.KubeSpawner\"\n\n# Connect to a proxy running in a different pod. Note that *_SERVICE_*\n# environment variables are set by Kubernetes for Services\nc.ConfigurableHTTPProxy.api_url = (\n    f'http://{get_name(\"proxy-api\")}:{get_name_env(\"proxy-api\", \"_SERVICE_PORT\")}'\n)\nc.ConfigurableHTTPProxy.should_start = False\n\n# Do not shut down user pods when hub is restarted\nc.JupyterHub.cleanup_servers = False\n\n# Check that the proxy has routes appropriately setup\nc.JupyterHub.last_activity_interval = 60\n\n# Don't wait at all before redirecting a spawning user to the progress page\nc.JupyterHub.tornado_settings = {\n    \"slow_spawn_timeout\": 0,\n}\n\n\n# configure the hub db connection\ndb_type = get_config(\"hub.db.type\")\nif db_type == \"sqlite-pvc\":\n    c.JupyterHub.db_url = \"sqlite:///jupyterhub.sqlite\"\nelif db_type == \"sqlite-memory\":\n    c.JupyterHub.db_url = \"sqlite://\"\nelse:\n    set_config_if_not_none(c.JupyterHub, \"db_url\", \"hub.db.url\")\ndb_password = get_secret_value(\"hub.db.password\", None)\nif db_password is not None:\n    if db_type == \"mysql\":\n        os.environ[\"MYSQL_PWD\"] = db_password\n    elif db_type == \"postgres\":\n        os.environ[\"PGPASSWORD\"] = db_password\n    else:\n        print(f\"Warning: hub.db.password is ignored for hub.db.type={db_type}\")\n\n\n# c.JupyterHub configuration from Helm chart's configmap\nfor trait, cfg_key in (\n    (\"concurrent_spawn_limit\", None),\n    (\"active_server_limit\", None),\n    (\"base_url\", None),\n    (\"allow_named_servers\", None),\n    (\"named_server_limit_per_user\", None),\n    (\"authenticate_prometheus\", None),\n    (\"redirect_to_server\", None),\n    (\"shutdown_on_logout\", None),\n    (\"template_paths\", None),\n    (\"template_vars\", None),\n):\n    if cfg_key is None:\n        cfg_key = camelCaseify(trait)\n    set_config_if_not_none(c.JupyterHub, trait, \"hub.\" + cfg_key)\n\n# hub_bind_url configures what the JupyterHub process within the hub pod's\n# container should listen to.\nhub_container_port = 8081\nc.JupyterHub.hub_bind_url = f\"http://:{hub_container_port}\"\n\n# hub_connect_url is the URL for connecting to the hub for use by external\n# JupyterHub services such as the proxy. Note that *_SERVICE_* environment\n# variables are set by Kubernetes for Services.\nc.JupyterHub.hub_connect_url = (\n    f'http://{get_name(\"hub\")}:{get_name_env(\"hub\", \"_SERVICE_PORT\")}'\n)\n\n# implement common labels\n# this duplicates the jupyterhub.commonLabels helper\ncommon_labels = c.KubeSpawner.common_labels = {}\ncommon_labels[\"app\"] = get_config(\n    \"nameOverride\",\n    default=get_config(\"Chart.Name\", \"jupyterhub\"),\n)\ncommon_labels[\"heritage\"] = \"jupyterhub\"\nchart_name = get_config(\"Chart.Name\")\nchart_version = get_config(\"Chart.Version\")\nif chart_name and chart_version:\n    common_labels[\"chart\"] = \"{}-{}\".format(\n        chart_name,\n        chart_version.replace(\"+\", \"_\"),\n    )\nrelease = get_config(\"Release.Name\")\nif release:\n    common_labels[\"release\"] = release\n\nc.KubeSpawner.namespace = os.environ.get(\"POD_NAMESPACE\", \"default\")\n\n# Max number of consecutive failures before the Hub restarts itself\n# requires jupyterhub 0.9.2\nset_config_if_not_none(\n    c.Spawner,\n    \"consecutive_failure_limit\",\n    \"hub.consecutiveFailureLimit\",\n)\n\nfor trait, cfg_key in (\n    (\"pod_name_template\", None),\n    (\"start_timeout\", None),\n    (\"image_pull_policy\", \"image.pullPolicy\"),\n    # ('image_pull_secrets', 'image.pullSecrets'), # Managed manually below\n    (\"events_enabled\", \"events\"),\n    (\"extra_labels\", None),\n    (\"extra_annotations\", None),\n    (\"uid\", None),\n    (\"fs_gid\", None),\n    (\"service_account\", \"serviceAccountName\"),\n    (\"storage_extra_labels\", \"storage.extraLabels\"),\n    # (\"tolerations\", \"extraTolerations\"), # Managed manually below\n    (\"node_selector\", None),\n    (\"node_affinity_required\", \"extraNodeAffinity.required\"),\n    (\"node_affinity_preferred\", \"extraNodeAffinity.preferred\"),\n    (\"pod_affinity_required\", \"extraPodAffinity.required\"),\n    (\"pod_affinity_preferred\", \"extraPodAffinity.preferred\"),\n    (\"pod_anti_affinity_required\", \"extraPodAntiAffinity.required\"),\n    (\"pod_anti_affinity_preferred\", \"extraPodAntiAffinity.preferred\"),\n    (\"lifecycle_hooks\", None),\n    (\"init_containers\", None),\n    (\"extra_containers\", None),\n    (\"mem_limit\", \"memory.limit\"),\n    (\"mem_guarantee\", \"memory.guarantee\"),\n    (\"cpu_limit\", \"cpu.limit\"),\n    (\"cpu_guarantee\", \"cpu.guarantee\"),\n    (\"extra_resource_limits\", \"extraResource.limits\"),\n    (\"extra_resource_guarantees\", \"extraResource.guarantees\"),\n    (\"environment\", \"extraEnv\"),\n    (\"profile_list\", None),\n    (\"extra_pod_config\", None),\n):\n    if cfg_key is None:\n        cfg_key = camelCaseify(trait)\n    set_config_if_not_none(c.KubeSpawner, trait, \"singleuser.\" + cfg_key)\n\nimage = get_config(\"singleuser.image.name\")\nif image:\n    tag = get_config(\"singleuser.image.tag\")\n    if tag:\n        image = \"{}:{}\".format(image, tag)\n\n    c.KubeSpawner.image = image\n\n# Combine imagePullSecret.create (single), imagePullSecrets (list), and\n# singleuser.image.pullSecrets (list).\nimage_pull_secrets = []\nif get_config(\"imagePullSecret.automaticReferenceInjection\") and get_config(\n    \"imagePullSecret.create\"\n):\n    image_pull_secrets.append(get_name(\"image-pull-secret\"))\nif get_config(\"imagePullSecrets\"):\n    image_pull_secrets.extend(get_config(\"imagePullSecrets\"))\nif get_config(\"singleuser.image.pullSecrets\"):\n    image_pull_secrets.extend(get_config(\"singleuser.image.pullSecrets\"))\nif image_pull_secrets:\n    c.KubeSpawner.image_pull_secrets = image_pull_secrets\n\n# scheduling:\nif get_config(\"scheduling.userScheduler.enabled\"):\n    c.KubeSpawner.scheduler_name = get_name(\"user-scheduler\")\nif get_config(\"scheduling.podPriority.enabled\"):\n    c.KubeSpawner.priority_class_name = get_name(\"priority\")\n\n# add node-purpose affinity\nmatch_node_purpose = get_config(\"scheduling.userPods.nodeAffinity.matchNodePurpose\")\nif match_node_purpose:\n    node_selector = dict(\n        matchExpressions=[\n            dict(\n                key=\"hub.jupyter.org/node-purpose\",\n                operator=\"In\",\n                values=[\"user\"],\n            )\n        ],\n    )\n    if match_node_purpose == \"prefer\":\n        c.KubeSpawner.node_affinity_preferred.append(\n            dict(\n                weight=100,\n                preference=node_selector,\n            ),\n        )\n    elif match_node_purpose == \"require\":\n        c.KubeSpawner.node_affinity_required.append(node_selector)\n    elif match_node_purpose == \"ignore\":\n        pass\n    else:\n        raise ValueError(\n            \"Unrecognized value for matchNodePurpose: %r\" % match_node_purpose\n        )\n\n# Combine the common tolerations for user pods with singleuser tolerations\nscheduling_user_pods_tolerations = get_config(\"scheduling.userPods.tolerations\", [])\nsingleuser_extra_tolerations = get_config(\"singleuser.extraTolerations\", [])\ntolerations = scheduling_user_pods_tolerations + singleuser_extra_tolerations\nif tolerations:\n    c.KubeSpawner.tolerations = tolerations\n\n# Configure dynamically provisioning pvc\nstorage_type = get_config(\"singleuser.storage.type\")\nif storage_type == \"dynamic\":\n    pvc_name_template = get_config(\"singleuser.storage.dynamic.pvcNameTemplate\")\n    c.KubeSpawner.pvc_name_template = pvc_name_template\n    volume_name_template = get_config(\"singleuser.storage.dynamic.volumeNameTemplate\")\n    c.KubeSpawner.storage_pvc_ensure = True\n    set_config_if_not_none(\n        c.KubeSpawner, \"storage_class\", \"singleuser.storage.dynamic.storageClass\"\n    )\n    set_config_if_not_none(\n        c.KubeSpawner,\n        \"storage_access_modes\",\n        \"singleuser.storage.dynamic.storageAccessModes\",\n    )\n    set_config_if_not_none(\n        c.KubeSpawner, \"storage_capacity\", \"singleuser.storage.capacity\"\n    )\n\n    # Add volumes to singleuser pods\n    c.KubeSpawner.volumes = [\n        {\n            \"name\": volume_name_template,\n            \"persistentVolumeClaim\": {\"claimName\": pvc_name_template},\n        }\n    ]\n    c.KubeSpawner.volume_mounts = [\n        {\n            \"mountPath\": get_config(\"singleuser.storage.homeMountPath\"),\n            \"name\": volume_name_template,\n        }\n    ]\nelif storage_type == \"static\":\n    pvc_claim_name = get_config(\"singleuser.storage.static.pvcName\")\n    c.KubeSpawner.volumes = [\n        {\"name\": \"home\", \"persistentVolumeClaim\": {\"claimName\": pvc_claim_name}}\n    ]\n\n    c.KubeSpawner.volume_mounts = [\n        {\n            \"mountPath\": get_config(\"singleuser.storage.homeMountPath\"),\n            \"name\": \"home\",\n            \"subPath\": get_config(\"singleuser.storage.static.subPath\"),\n        }\n    ]\n\n# Inject singleuser.extraFiles as volumes and volumeMounts with data loaded from\n# the dedicated k8s Secret prepared to hold the extraFiles actual content.\nextra_files = get_config(\"singleuser.extraFiles\", {})\nif extra_files:\n    volume = {\n        \"name\": \"files\",\n    }\n    items = []\n    for file_key, file_details in extra_files.items():\n        # Each item is a mapping of a key in the k8s Secret to a path in this\n        # abstract volume, the goal is to enable us to set the mode /\n        # permissions only though so we don't change the mapping.\n        item = {\n            \"key\": file_key,\n            \"path\": file_key,\n        }\n        if \"mode\" in file_details:\n            item[\"mode\"] = file_details[\"mode\"]\n        items.append(item)\n    volume[\"secret\"] = {\n        \"secretName\": get_name(\"singleuser\"),\n        \"items\": items,\n    }\n    c.KubeSpawner.volumes.append(volume)\n\n    volume_mounts = []\n    for file_key, file_details in extra_files.items():\n        volume_mounts.append(\n            {\n                \"mountPath\": file_details[\"mountPath\"],\n                \"subPath\": file_key,\n                \"name\": \"files\",\n            }\n        )\n    c.KubeSpawner.volume_mounts.extend(volume_mounts)\n\n# Inject extraVolumes / extraVolumeMounts\nc.KubeSpawner.volumes.extend(get_config(\"singleuser.storage.extraVolumes\", []))\nc.KubeSpawner.volume_mounts.extend(\n    get_config(\"singleuser.storage.extraVolumeMounts\", [])\n)\n\nc.JupyterHub.services = []\n\nif get_config(\"cull.enabled\", False):\n    cull_cmd = [\"python3\", \"-m\", \"jupyterhub_idle_culler\"]\n    base_url = c.JupyterHub.get(\"base_url\", \"/\")\n    cull_cmd.append(\"--url=http://localhost:8081\" + url_path_join(base_url, \"hub/api\"))\n\n    cull_timeout = get_config(\"cull.timeout\")\n    if cull_timeout:\n        cull_cmd.append(\"--timeout=%s\" % cull_timeout)\n\n    cull_every = get_config(\"cull.every\")\n    if cull_every:\n        cull_cmd.append(\"--cull-every=%s\" % cull_every)\n\n    cull_concurrency = get_config(\"cull.concurrency\")\n    if cull_concurrency:\n        cull_cmd.append(\"--concurrency=%s\" % cull_concurrency)\n\n    if get_config(\"cull.users\"):\n        cull_cmd.append(\"--cull-users\")\n\n    if get_config(\"cull.removeNamedServers\"):\n        cull_cmd.append(\"--remove-named-servers\")\n\n    cull_max_age = get_config(\"cull.maxAge\")\n    if cull_max_age:\n        cull_cmd.append(\"--max-age=%s\" % cull_max_age)\n\n    c.JupyterHub.services.append(\n        {\n            \"name\": \"cull-idle\",\n            \"admin\": True,\n            \"command\": cull_cmd,\n        }\n    )\n\nfor key, service in get_config(\"hub.services\", {}).items():\n    # c.JupyterHub.services is a list of dicts, but\n    # hub.services is a dict of dicts to make the config mergable\n    service.setdefault(\"name\", key)\n\n    # As the api_token could be exposed in hub.existingSecret, we need to read\n    # it it from there or fall back to the chart managed k8s Secret's value.\n    service.pop(\"apiToken\", None)\n    service[\"api_token\"] = get_secret_value(f\"hub.services.{key}.apiToken\")\n\n    c.JupyterHub.services.append(service)\n\n\nset_config_if_not_none(c.Spawner, \"cmd\", \"singleuser.cmd\")\nset_config_if_not_none(c.Spawner, \"default_url\", \"singleuser.defaultUrl\")\n\ncloud_metadata = get_config(\"singleuser.cloudMetadata\", {})\n\nif cloud_metadata.get(\"blockWithIptables\") == True:\n    # Use iptables to block access to cloud metadata by default\n    network_tools_image_name = get_config(\"singleuser.networkTools.image.name\")\n    network_tools_image_tag = get_config(\"singleuser.networkTools.image.tag\")\n    ip_block_container = client.V1Container(\n        name=\"block-cloud-metadata\",\n        image=f\"{network_tools_image_name}:{network_tools_image_tag}\",\n        command=[\n            \"iptables\",\n            \"-A\",\n            \"OUTPUT\",\n            \"-d\",\n            cloud_metadata.get(\"ip\", \"169.254.169.254\"),\n            \"-j\",\n            \"DROP\",\n        ],\n        security_context=client.V1SecurityContext(\n            privileged=True,\n            run_as_user=0,\n            capabilities=client.V1Capabilities(add=[\"NET_ADMIN\"]),\n        ),\n    )\n\n    c.KubeSpawner.init_containers.append(ip_block_container)\n\n\nif get_config(\"debug.enabled\", False):\n    c.JupyterHub.log_level = \"DEBUG\"\n    c.Spawner.debug = True\n\n# load /usr/local/etc/jupyterhub/jupyterhub_config.d config files\nconfig_dir = \"/usr/local/etc/jupyterhub/jupyterhub_config.d\"\nif os.path.isdir(config_dir):\n    for file_path in sorted(glob.glob(f\"{config_dir}/*.py\")):\n        file_name = os.path.basename(file_path)\n        print(f\"Loading {config_dir} config: {file_name}\")\n        with open(file_path) as f:\n            file_content = f.read()\n        # compiling makes debugging easier: https://stackoverflow.com/a/437857\n        exec(compile(source=file_content, filename=file_name, mode=\"exec\"))\n\n# load potentially seeded secrets\n#\n# NOTE: ConfigurableHTTPProxy.auth_token is set through an environment variable\n#       that is set using the chart managed secret.\nc.JupyterHub.cookie_secret = get_secret_value(\"hub.config.JupyterHub.cookie_secret\")\n# NOTE: CryptKeeper.keys should be a list of strings, but we have encoded as a\n#       single string joined with ; in the k8s Secret.\n#\nc.CryptKeeper.keys = get_secret_value(\"hub.config.CryptKeeper.keys\").split(\";\")\n\n# load hub.config values, except potentially seeded secrets already loaded\nfor app, cfg in get_config(\"hub.config\", {}).items():\n    if app == \"JupyterHub\":\n        cfg.pop(\"proxy_auth_token\", None)\n        cfg.pop(\"cookie_secret\", None)\n        cfg.pop(\"services\", None)\n    elif app == \"ConfigurableHTTPProxy\":\n        cfg.pop(\"auth_token\", None)\n    elif app == \"CryptKeeper\":\n        cfg.pop(\"keys\", None)\n    c[app].update(cfg)\n\n# execute hub.extraConfig entries\nfor key, config_py in sorted(get_config(\"hub.extraConfig\", {}).items()):\n    print(\"Loading extra config: %s\" % key)\n    exec(config_py)\n",
      "z2jh.py": "\"\"\"\nUtility methods for use in jupyterhub_config.py and dynamic subconfigs.\n\nMethods here can be imported by extraConfig in values.yaml\n\"\"\"\nfrom collections import Mapping\nfrom functools import lru_cache\nimport os\n\nimport yaml\n\n# memoize so we only load config once\n@lru_cache()\ndef _load_config():\n    \"\"\"Load the Helm chart configuration used to render the Helm templates of\n    the chart from a mounted k8s Secret, and merge in values from an optionally\n    mounted secret (hub.existingSecret).\"\"\"\n\n    cfg = {}\n    for source in (\"secret/values.yaml\", \"existing-secret/values.yaml\"):\n        path = f\"/usr/local/etc/jupyterhub/{source}\"\n        if os.path.exists(path):\n            print(f\"Loading {path}\")\n            with open(path) as f:\n                values = yaml.safe_load(f)\n            cfg = _merge_dictionaries(cfg, values)\n        else:\n            print(f\"No config at {path}\")\n    return cfg\n\n\n@lru_cache()\ndef _get_config_value(key):\n    \"\"\"Load value from the k8s ConfigMap given a key.\"\"\"\n\n    path = f\"/usr/local/etc/jupyterhub/config/{key}\"\n    if os.path.exists(path):\n        with open(path) as f:\n            return f.read()\n    else:\n        raise Exception(f\"{path} not found!\")\n\n\n@lru_cache()\ndef get_secret_value(key, default=\"never-explicitly-set\"):\n    \"\"\"Load value from the user managed k8s Secret or the default k8s Secret\n    given a key.\"\"\"\n\n    for source in (\"existing-secret\", \"secret\"):\n        path = f\"/usr/local/etc/jupyterhub/{source}/{key}\"\n        if os.path.exists(path):\n            with open(path) as f:\n                return f.read()\n    if default != \"never-explicitly-set\":\n        return default\n    raise Exception(f\"{key} not found in either k8s Secret!\")\n\n\ndef get_name(name):\n    \"\"\"Returns the fullname of a resource given its short name\"\"\"\n    return _get_config_value(name)\n\n\ndef get_name_env(name, suffix=\"\"):\n    \"\"\"Returns the fullname of a resource given its short name along with a\n    suffix, converted to uppercase with dashes replaced with underscores. This\n    is useful to reference named services associated environment variables, such\n    as PROXY_PUBLIC_SERVICE_PORT.\"\"\"\n    env_key = _get_config_value(name) + suffix\n    env_key = env_key.upper().replace(\"-\", \"_\")\n    return os.environ[env_key]\n\n\ndef _merge_dictionaries(a, b):\n    \"\"\"Merge two dictionaries recursively.\n\n    Simplified From https://stackoverflow.com/a/7205107\n    \"\"\"\n    merged = a.copy()\n    for key in b:\n        if key in a:\n            if isinstance(a[key], Mapping) and isinstance(b[key], Mapping):\n                merged[key] = _merge_dictionaries(a[key], b[key])\n            else:\n                merged[key] = b[key]\n        else:\n            merged[key] = b[key]\n    return merged\n\n\ndef get_config(key, default=None):\n    \"\"\"\n    Find a config item of a given name & return it\n\n    Parses everything as YAML, so lists and dicts are available too\n\n    get_config(\"a.b.c\") returns config['a']['b']['c']\n    \"\"\"\n    value = _load_config()\n    # resolve path in yaml\n    for level in key.split(\".\"):\n        if not isinstance(value, dict):\n            # a parent is a scalar or null,\n            # can't resolve full path\n            return default\n        if level not in value:\n            return default\n        else:\n            value = value[level]\n    return value\n\n\ndef set_config_if_not_none(cparent, name, key):\n    \"\"\"\n    Find a config item of a given name, set the corresponding Jupyter\n    configuration item if not None\n    \"\"\"\n    data = get_config(key)\n    if data is not None:\n        setattr(cparent, name, data)\n",
      "checksum_hook-image-puller": "d5efa163c53d52c02ef3b112acc99b8afd6264da01c601dbb683a87337c868dc"
    }
  },
  {
    "kind": "ConfigMap",
    "apiVersion": "v1",
    "metadata": {
      "name": "user-scheduler",
      "labels": {
        "component": "user-scheduler",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "data": {
      "config.yaml": "apiVersion: kubescheduler.config.k8s.io/v1beta1\nkind: KubeSchedulerConfiguration\nleaderElection:\n  resourceLock: endpoints\n  resourceName: user-scheduler-lock\n  resourceNamespace: \"default\"\nprofiles:\n  - schedulerName: release-name-user-scheduler\n    plugins:\n      score:\n        disabled:\n        - name: SelectorSpread\n        - name: TaintToleration\n        - name: PodTopologySpread\n        - name: NodeResourcesBalancedAllocation\n        - name: NodeResourcesLeastAllocated\n        - name: NodePreferAvoidPods\n        - name: NodeAffinity\n        - name: InterPodAffinity\n        - name: ImageLocality\n        enabled:\n        - name: NodePreferAvoidPods\n          weight: 161051\n        - name: NodeAffinity\n          weight: 14631\n        - name: InterPodAffinity\n          weight: 1331\n        - name: NodeResourcesMostAllocated\n          weight: 121\n        - name: ImageLocality\n          weight: 11\n"
    }
  },
  {
    "kind": "PersistentVolumeClaim",
    "apiVersion": "v1",
    "metadata": {
      "name": "hub-db-dir",
      "labels": {
        "component": "hub",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "1Gi"
        }
      }
    }
  },
  {
    "kind": "ClusterRole",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-user-scheduler",
      "labels": {
        "component": "user-scheduler",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "events.k8s.io"
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create",
          "patch",
          "update"
        ]
      },
      {
        "apiGroups": [
          "coordination.k8s.io"
        ],
        "resources": [
          "leases"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          "coordination.k8s.io"
        ],
        "resourceNames": [
          "user-scheduler-lock"
        ],
        "resources": [
          "leases"
        ],
        "verbs": [
          "get",
          "update"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resourceNames": [
          "user-scheduler-lock"
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "get",
          "update"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "nodes"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "pods"
        ],
        "verbs": [
          "delete",
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "bindings",
          "pods/binding"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "pods/status"
        ],
        "verbs": [
          "patch",
          "update"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "replicationcontrollers",
          "services"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "apps",
          "extensions"
        ],
        "resources": [
          "replicasets"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "apps"
        ],
        "resources": [
          "statefulsets"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "policy"
        ],
        "resources": [
          "poddisruptionbudgets"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "persistentvolumeclaims",
          "persistentvolumes"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "authentication.k8s.io"
        ],
        "resources": [
          "tokenreviews"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          "authorization.k8s.io"
        ],
        "resources": [
          "subjectaccessreviews"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          "storage.k8s.io"
        ],
        "resources": [
          "csinodes"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "persistentvolumes"
        ],
        "verbs": [
          "get",
          "list",
          "patch",
          "update",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "storage.k8s.io"
        ],
        "resources": [
          "storageclasses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "persistentvolumeclaims"
        ],
        "verbs": [
          "get",
          "list",
          "patch",
          "update",
          "watch"
        ]
      }
    ]
  },
  {
    "kind": "ClusterRoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-user-scheduler",
      "labels": {
        "component": "user-scheduler",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "user-scheduler",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "kind": "ClusterRole",
      "name": "release-name-user-scheduler",
      "apiGroup": "rbac.authorization.k8s.io"
    }
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "hub",
      "labels": {
        "component": "hub",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "pods",
          "persistentvolumeclaims",
          "secrets",
          "services"
        ],
        "verbs": [
          "get",
          "watch",
          "list",
          "create",
          "delete"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "get",
          "watch",
          "list"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "hub",
      "labels": {
        "component": "hub",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "hub",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "kind": "Role",
      "name": "hub",
      "apiGroup": "rbac.authorization.k8s.io"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "hub",
      "labels": {
        "component": "hub",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      },
      "annotations": {
        "prometheus.io/scrape": "true",
        "prometheus.io/path": "/hub/metrics",
        "prometheus.io/port": "8081"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "component": "hub",
        "app": "jupyterhub",
        "release": "release-name"
      },
      "ports": [
        {
          "name": "hub",
          "port": 8081,
          "targetPort": "http"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "proxy-api",
      "labels": {
        "component": "proxy-api",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "component": "proxy",
        "app": "jupyterhub",
        "release": "release-name"
      },
      "ports": [
        {
          "port": 8001,
          "targetPort": "api"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "jupyterhub",
      "labels": {
        "component": "proxy-public",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "component": "proxy",
        "release": "release-name"
      },
      "ports": [
        {
          "name": "http",
          "port": 80,
          "targetPort": "http"
        }
      ],
      "type": "LoadBalancer"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "DaemonSet",
    "metadata": {
      "name": "continuous-image-puller",
      "labels": {
        "component": "continuous-image-puller",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "component": "continuous-image-puller",
          "app": "jupyterhub",
          "release": "release-name"
        }
      },
      "updateStrategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "maxUnavailable": "100%"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "component": "continuous-image-puller",
            "app": "jupyterhub",
            "release": "release-name"
          }
        },
        "spec": {
          "nodeSelector": {},
          "tolerations": [
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org/dedicated",
              "operator": "Equal",
              "value": "user"
            },
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org_dedicated",
              "operator": "Equal",
              "value": "user"
            }
          ],
          "terminationGracePeriodSeconds": 0,
          "automountServiceAccountToken": false,
          "initContainers": [
            {
              "name": "image-pull-metadata-block",
              "image": "jupyterhub/k8s-network-tools:1.1.3",
              "command": [
                "/bin/sh",
                "-c",
                "echo \"Pulling complete\""
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 65534,
                "runAsUser": 65534
              }
            },
            {
              "name": "image-pull-singleuser",
              "image": "jupyterhub/k8s-singleuser-sample:1.1.3",
              "command": [
                "/bin/sh",
                "-c",
                "echo \"Pulling complete\""
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 65534,
                "runAsUser": 65534
              }
            }
          ],
          "containers": [
            {
              "name": "pause",
              "image": "k8s.gcr.io/pause:3.5",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 65534,
                "runAsUser": 11406,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "hub",
      "labels": {
        "component": "hub",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "component": "hub",
          "app": "jupyterhub",
          "release": "release-name"
        }
      },
      "strategy": {
        "type": "Recreate"
      },
      "template": {
        "metadata": {
          "labels": {
            "component": "hub",
            "app": "jupyterhub",
            "release": "release-name",
            "hub.jupyter.org/network-access-proxy-api": "true",
            "hub.jupyter.org/network-access-proxy-http": "true",
            "hub.jupyter.org/network-access-singleuser": "true"
          },
          "annotations": {
            "checksum/config-map": "5cd84052c2ba479a5d7a1ad5258e75963a252da78b2c0d80a6d3cd2d46340acf",
            "checksum/secret": "56c12d831127be49ba391e3b89038cadfe5c35fe8e9e319dad39470d4bafeaed"
          }
        },
        "spec": {
          "nodeSelector": {},
          "tolerations": [
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org/dedicated",
              "operator": "Equal",
              "value": "core"
            },
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org_dedicated",
              "operator": "Equal",
              "value": "core"
            }
          ],
          "affinity": {
            "nodeAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 100,
                  "preference": {
                    "matchExpressions": [
                      {
                        "key": "hub.jupyter.org/node-purpose",
                        "operator": "In",
                        "values": [
                          "core"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "hub"
              }
            },
            {
              "name": "secret",
              "secret": {
                "secretName": "hub"
              }
            },
            {
              "name": "pvc",
              "persistentVolumeClaim": {
                "claimName": "hub-db-dir"
              }
            }
          ],
          "serviceAccountName": "hub",
          "securityContext": {
            "fsGroup": 1000
          },
          "containers": [
            {
              "name": "hub",
              "image": "jupyterhub/k8s-hub:1.1.3",
              "args": [
                "jupyterhub",
                "--config",
                "/usr/local/etc/jupyterhub/jupyterhub_config.py",
                "--upgrade-db"
              ],
              "volumeMounts": [
                {
                  "mountPath": "/usr/local/etc/jupyterhub/jupyterhub_config.py",
                  "subPath": "jupyterhub_config.py",
                  "name": "config"
                },
                {
                  "mountPath": "/usr/local/etc/jupyterhub/z2jh.py",
                  "subPath": "z2jh.py",
                  "name": "config"
                },
                {
                  "mountPath": "/usr/local/etc/jupyterhub/config/",
                  "name": "config"
                },
                {
                  "mountPath": "/usr/local/etc/jupyterhub/secret/",
                  "name": "secret"
                },
                {
                  "mountPath": "/srv/jupyterhub",
                  "name": "pvc"
                }
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 1000,
                "runAsUser": 10710,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "PYTHONUNBUFFERED",
                  "value": "1"
                },
                {
                  "name": "HELM_RELEASE_NAME",
                  "value": "release-name"
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "CONFIGPROXY_AUTH_TOKEN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "hub",
                      "key": "hub.config.ConfigurableHTTPProxy.auth_token"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8081
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 300,
                "periodSeconds": 10,
                "timeoutSeconds": 3,
                "failureThreshold": 30,
                "httpGet": {
                  "path": "/hub/health",
                  "port": "http"
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 0,
                "periodSeconds": 2,
                "timeoutSeconds": 1,
                "failureThreshold": 1000,
                "httpGet": {
                  "path": "/hub/health",
                  "port": "http"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "proxy",
      "labels": {
        "component": "proxy",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "component": "proxy",
          "app": "jupyterhub",
          "release": "release-name"
        }
      },
      "strategy": {
        "rollingUpdate": null,
        "type": "Recreate"
      },
      "template": {
        "metadata": {
          "labels": {
            "component": "proxy",
            "app": "jupyterhub",
            "release": "release-name",
            "hub.jupyter.org/network-access-hub": "true",
            "hub.jupyter.org/network-access-singleuser": "true"
          },
          "annotations": {
            "checksum/auth-token": "99ca",
            "checksum/proxy-secret": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
          }
        },
        "spec": {
          "terminationGracePeriodSeconds": 60,
          "nodeSelector": {},
          "tolerations": [
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org/dedicated",
              "operator": "Equal",
              "value": "core"
            },
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org_dedicated",
              "operator": "Equal",
              "value": "core"
            }
          ],
          "affinity": {
            "nodeAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 100,
                  "preference": {
                    "matchExpressions": [
                      {
                        "key": "hub.jupyter.org/node-purpose",
                        "operator": "In",
                        "values": [
                          "core"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "containers": [
            {
              "name": "chp",
              "image": "jupyterhub/configurable-http-proxy:4.5.0",
              "command": [
                "configurable-http-proxy",
                "--ip=",
                "--api-ip=",
                "--api-port=8001",
                "--default-target=http://hub:$(HUB_SERVICE_PORT)",
                "--error-target=http://hub:$(HUB_SERVICE_PORT)/hub/error",
                "--port=8000"
              ],
              "env": [
                {
                  "name": "CONFIGPROXY_AUTH_TOKEN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "hub",
                      "key": "hub.config.ConfigurableHTTPProxy.auth_token"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8000
                },
                {
                  "name": "api",
                  "containerPort": 8001
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "httpGet": {
                  "path": "/_chp_healthz",
                  "port": "http",
                  "scheme": "HTTP"
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 0,
                "periodSeconds": 2,
                "httpGet": {
                  "path": "/_chp_healthz",
                  "port": "http",
                  "scheme": "HTTP"
                }
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 65534,
                "runAsUser": 11375,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "user-scheduler",
      "labels": {
        "component": "user-scheduler",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 2,
      "selector": {
        "matchLabels": {
          "component": "user-scheduler",
          "app": "jupyterhub",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "component": "user-scheduler",
            "app": "jupyterhub",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config-map": "5c829efc3504c429be2fe5f1d5a13573d48d1df869ac439d5fbe6bbd4614ed2a"
          }
        },
        "spec": {
          "serviceAccountName": "user-scheduler",
          "nodeSelector": {},
          "tolerations": [
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org/dedicated",
              "operator": "Equal",
              "value": "core"
            },
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org_dedicated",
              "operator": "Equal",
              "value": "core"
            }
          ],
          "affinity": {
            "nodeAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 100,
                  "preference": {
                    "matchExpressions": [
                      {
                        "key": "hub.jupyter.org/node-purpose",
                        "operator": "In",
                        "values": [
                          "core"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "user-scheduler"
              }
            }
          ],
          "containers": [
            {
              "name": "kube-scheduler",
              "image": "k8s.gcr.io/kube-scheduler:v1.19.13",
              "command": [
                "/usr/local/bin/kube-scheduler",
                "--config=/etc/user-scheduler/config.yaml",
                "--authentication-skip-lookup=true",
                "--v=4"
              ],
              "volumeMounts": [
                {
                  "mountPath": "/etc/user-scheduler",
                  "name": "config"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 10251
                },
                "initialDelaySeconds": 15
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 10251
                }
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 65534,
                "runAsUser": 10448,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "user-placeholder",
      "labels": {
        "component": "user-placeholder",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm"
      }
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 0,
      "selector": {
        "matchLabels": {
          "component": "user-placeholder",
          "app": "jupyterhub",
          "release": "release-name"
        }
      },
      "serviceName": "user-placeholder",
      "template": {
        "metadata": {
          "labels": {
            "component": "user-placeholder",
            "app": "jupyterhub",
            "release": "release-name"
          }
        },
        "spec": {
          "schedulerName": "release-name-user-scheduler",
          "nodeSelector": {},
          "tolerations": [
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org/dedicated",
              "operator": "Equal",
              "value": "user"
            },
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org_dedicated",
              "operator": "Equal",
              "value": "user"
            }
          ],
          "affinity": {
            "nodeAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 100,
                  "preference": {
                    "matchExpressions": [
                      {
                        "key": "hub.jupyter.org/node-purpose",
                        "operator": "In",
                        "values": [
                          "user"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "terminationGracePeriodSeconds": 0,
          "automountServiceAccountToken": false,
          "containers": [
            {
              "name": "pause",
              "image": "k8s.gcr.io/pause:3.5",
              "resources": {
                "requests": {
                  "memory": "1G"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 65534,
                "runAsUser": 11767,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "hook-image-awaiter",
      "labels": {
        "component": "image-puller",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm",
        "hub.jupyter.org/deletable": "true"
      },
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded",
        "helm.sh/hook-weight": "0"
      }
    }
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "hook-image-awaiter",
      "labels": {
        "component": "image-puller",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm",
        "hub.jupyter.org/deletable": "true"
      },
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded",
        "helm.sh/hook-weight": "0"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "apps"
        ],
        "resources": [
          "daemonsets"
        ],
        "verbs": [
          "get"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "hook-image-awaiter",
      "labels": {
        "component": "image-puller",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm",
        "hub.jupyter.org/deletable": "true"
      },
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded",
        "helm.sh/hook-weight": "0"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "hook-image-awaiter",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "kind": "Role",
      "name": "hook-image-awaiter",
      "apiGroup": "rbac.authorization.k8s.io"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "DaemonSet",
    "metadata": {
      "name": "hook-image-puller",
      "labels": {
        "component": "hook-image-puller",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm",
        "hub.jupyter.org/deletable": "true"
      },
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded",
        "helm.sh/hook-weight": "-10"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "component": "hook-image-puller",
          "app": "jupyterhub",
          "release": "release-name"
        }
      },
      "updateStrategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "maxUnavailable": "100%"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "component": "hook-image-puller",
            "app": "jupyterhub",
            "release": "release-name"
          }
        },
        "spec": {
          "nodeSelector": {},
          "tolerations": [
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org/dedicated",
              "operator": "Equal",
              "value": "user"
            },
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org_dedicated",
              "operator": "Equal",
              "value": "user"
            }
          ],
          "terminationGracePeriodSeconds": 0,
          "automountServiceAccountToken": false,
          "initContainers": [
            {
              "name": "image-pull-metadata-block",
              "image": "jupyterhub/k8s-network-tools:1.1.3",
              "command": [
                "/bin/sh",
                "-c",
                "echo \"Pulling complete\""
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 65534,
                "runAsUser": 65534
              }
            },
            {
              "name": "image-pull-singleuser",
              "image": "jupyterhub/k8s-singleuser-sample:1.1.3",
              "command": [
                "/bin/sh",
                "-c",
                "echo \"Pulling complete\""
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 65534,
                "runAsUser": 65534
              }
            }
          ],
          "containers": [
            {
              "name": "pause",
              "image": "k8s.gcr.io/pause:3.5",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 65534,
                "runAsUser": 11572,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "hook-image-awaiter",
      "labels": {
        "component": "image-puller",
        "app": "jupyterhub",
        "release": "release-name",
        "chart": "jupyterhub-1.1.3000",
        "heritage": "Helm",
        "hub.jupyter.org/deletable": "true"
      },
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded",
        "helm.sh/hook-weight": "10"
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "component": "image-puller",
            "app": "jupyterhub",
            "release": "release-name"
          }
        },
        "spec": {
          "restartPolicy": "Never",
          "serviceAccountName": "hook-image-awaiter",
          "nodeSelector": {},
          "tolerations": [
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org/dedicated",
              "operator": "Equal",
              "value": "core"
            },
            {
              "effect": "NoSchedule",
              "key": "hub.jupyter.org_dedicated",
              "operator": "Equal",
              "value": "core"
            }
          ],
          "containers": [
            {
              "image": "jupyterhub/k8s-image-awaiter:1.1.3",
              "name": "hook-image-awaiter",
              "command": [
                "/image-awaiter",
                "-ca-path=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                "-auth-token-path=/var/run/secrets/kubernetes.io/serviceaccount/token",
                "-api-server-address=https://kubernetes.default.svc:$(KUBERNETES_SERVICE_PORT)",
                "-namespace=default",
                "-daemonset=hook-image-puller",
                "-pod-scheduling-wait-duration=10"
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "runAsGroup": 65534,
                "runAsUser": 11905,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              }
            }
          ]
        }
      }
    }
  }
]