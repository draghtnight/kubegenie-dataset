[
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "name": "release-name-kubeaddons-catalog",
      "namespace": "default",
      "labels": {
        "app.kubernetes.io/name": "kubeaddons-catalog",
        "helm.sh/chart": "kubeaddons-catalog-0.1.16",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.11.4",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "kubeaddons.mesosphere.io"
        ],
        "resources": [
          "addonrepositories"
        ],
        "verbs": [
          "get",
          "watch",
          "list"
        ]
      },
      {
        "apiGroups": [
          "kubeaddons.mesosphere.io"
        ],
        "resources": [
          "addonrepositories/status"
        ],
        "verbs": [
          "update"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "namespaces"
        ],
        "verbs": [
          "get",
          "watch",
          "list"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create",
          "patch"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "name": "release-name-kubeaddons-catalog",
      "namespace": "default",
      "labels": {
        "app.kubernetes.io/name": "kubeaddons-catalog",
        "helm.sh/chart": "kubeaddons-catalog-0.1.16",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.11.4",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-kubeaddons-catalog"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-kubeaddons-catalog",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-kubeaddons-catalog",
      "namespace": "GhPLikg4",
      "labels": {
        "app.kubernetes.io/name": "kubeaddons-catalog",
        "helm.sh/chart": "kubeaddons-catalog-0.1.16",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.11.4",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "port": 80,
          "protocol": "TCP",
          "targetPort": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "kubeaddons-catalog",
        "app.kubernetes.io/instance": "release-name"
      },
      "sessionAffinity": "None",
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-kubeaddons-catalog",
      "namespace": "GhPLikg4",
      "labels": {
        "app.kubernetes.io/name": "kubeaddons-catalog",
        "helm.sh/chart": "kubeaddons-catalog-0.1.16",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.11.4",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "kubeaddons-catalog",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kubeaddons-catalog",
            "app.kubernetes.io/instance": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-kubeaddons-catalog",
          "containers": [
            {
              "name": "kubeaddons-catalog",
              "image": "mesosphere/kubeaddons-catalog:v0.11.4",
              "imagePullPolicy": "IfNotPresent",
              "env": null,
              "ports": [
                {
                  "name": "http",
                  "containerPort": 3000,
                  "protocol": "TCP"
                },
                {
                  "name": "metrics",
                  "containerPort": 9094,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/v1beta1/health",
                  "port": "http"
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/v1beta1/healthz",
                  "port": "http"
                }
              },
              "resources": {
                "limits": {
                  "cpu": "400m",
                  "memory": "500Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "20Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "catalog-crds",
      "namespace": "GhPLikg4",
      "annotations": {
        "helm.sh/hook": "pre-install, pre-upgrade",
        "helm.sh/hook-weight": "-5",
        "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-kubeaddons-catalog",
      "namespace": "GhPLikg4",
      "labels": {
        "app.kubernetes.io/name": "kubeaddons-catalog",
        "helm.sh/chart": "kubeaddons-catalog-0.1.16",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.11.4",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "catalog-crds",
      "namespace": "GhPLikg4",
      "annotations": {
        "helm.sh/hook": "pre-install, pre-upgrade",
        "helm.sh/hook-weight": "-5",
        "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
      },
      "labels": {
        "app.kubernetes.io/name": "kubeaddons-catalog",
        "helm.sh/chart": "kubeaddons-catalog-0.1.16",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.11.4",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "crd_addonsrepository.yaml": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n    controller-gen.kubebuilder.io/version: v0.2.5\n    \"helm.sh/hook\": crd-install\n  creationTimestamp: null\n  name: addonrepositories.kubeaddons.mesosphere.io\nspec:\n  additionalPrinterColumns:\n    - JSONPath: .status.ready\n      name: ready\n      type: string\n  group: kubeaddons.mesosphere.io\n  names:\n    kind: AddonRepository\n    listKind: AddonRepositoryList\n    plural: addonrepositories\n    singular: addonrepository\n  preserveUnknownFields: false\n  scope: Namespaced\n  subresources:\n    status: {}\n  validation:\n    openAPIV3Schema:\n      description: AddonRepository is the Schema for the addonrepositories API\n      properties:\n        apiVersion:\n          description: 'APIVersion defines the versioned schema of this representation\n            of an object. Servers should convert recognized schemas to the latest\n            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n          type: string\n        kind:\n          description: 'Kind is a string value representing the REST resource this\n            object represents. Servers may infer this from the endpoint the client\n            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n          type: string\n        metadata:\n          type: object\n        spec:\n          description: AddonRepositorySpec defines the desired state of AddonRepository\n          properties:\n            options:\n              description: AddonRepositoryOptions defines the credentials reference\n                for the repository\n              properties:\n                credentialsRef:\n                  description: LocalObjectReference contains enough information to\n                    let you locate the referenced object inside the same namespace.\n                  properties:\n                    name:\n                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                        TODO: Add other useful fields. apiVersion, kind, uid?'\n                      type: string\n                  type: object\n              required:\n                - credentialsRef\n              type: object\n            priority:\n              anyOf:\n                - type: integer\n                - type: string\n              pattern: ^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$\n              x-kubernetes-int-or-string: true\n            ref:\n              type: string\n            type:\n              type: string\n            url:\n              type: string\n          required:\n            - ref\n            - url\n          type: object\n        status:\n          description: AddonRepositoryStatus defines the observed state of AddonRepository\n          properties:\n            ready:\n              type: boolean\n          required:\n            - ready\n          type: object\n      type: object\n  version: v1beta1\n  versions:\n    - name: v1beta1\n      served: true\n      storage: false\n    - name: v1beta2\n      served: true\n      storage: true\nstatus:\n  acceptedNames:\n    kind: ''\n    plural: ''\n  conditions: []\n  storedVersions: []\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "name": "catalog-crds",
      "namespace": "default",
      "annotations": {
        "helm.sh/hook": "pre-install, pre-upgrade",
        "helm.sh/hook-weight": "-5",
        "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "apiextensions.k8s.io"
        ],
        "resources": [
          "customresourcedefinitions"
        ],
        "verbs": [
          "create",
          "get",
          "list",
          "watch",
          "patch"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "name": "catalog-crds",
      "namespace": "default",
      "annotations": {
        "helm.sh/hook": "pre-install, pre-upgrade",
        "helm.sh/hook-weight": "-5",
        "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "catalog-crds"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "catalog-crds",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "namespace": "GhPLikg4",
      "name": "catalog-crds",
      "annotations": {
        "helm.sh/hook": "pre-install, pre-upgrade",
        "helm.sh/hook-weight": "-4",
        "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
      }
    },
    "spec": {
      "template": {
        "spec": {
          "serviceAccountName": "catalog-crds",
          "containers": [
            {
              "name": "catalog-crds",
              "image": "bitnami/kubectl:1.19.7",
              "volumeMounts": [
                {
                  "name": "catalog-crds",
                  "mountPath": "/etc/catalog-crds",
                  "readOnly": true
                }
              ],
              "command": [
                "kubectl",
                "apply",
                "-f",
                "/etc/catalog-crds"
              ]
            }
          ],
          "volumes": [
            {
              "name": "catalog-crds",
              "configMap": {
                "name": "catalog-crds"
              }
            }
          ],
          "restartPolicy": "OnFailure"
        }
      }
    }
  }
]