[
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "type": "Opaque",
    "metadata": {
      "name": "kubebench",
      "labels": {
        "app.kubernetes.io/name": "kubebench",
        "helm.sh/chart": "kubebench-1.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "DD_API_KEY": "",
      "DD_APP_KEY": ""
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-kubebench",
      "labels": {
        "helm.sh/chart": "kubebench-1.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "node.yaml": "---\ncontrols:\nversion: 1.11\nid: 2\ntext: \"Worker Node Security Configuration\"\ntype: \"node\"\ngroups:\n- id: 2.1\n  text: \"Kubelet\"\n  checks:\n  - id: 2.1.1\n    text: \"Ensure that the --allow-privileged argument is set to false (Scored)\"\n    type: \"skip\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--allow-privileged\"\n        compare:\n          op: eq\n          value: false\n        set: true\n    remediation: |\n      Edit the kubelet service file $kubeletsvc\n      on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n      --allow-privileged=false\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.2\n    text: \"Ensure that the --anonymous-auth argument is set to false (Scored)\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--anonymous-auth\"\n        compare:\n          op: eq\n          value: false\n        set: true\n    remediation: |\n      If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\n      false .\n      If using executable arguments, edit the kubelet service file\n      $kubeletsvc on each worker node and\n      set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n      --anonymous-auth=false\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.3\n    text: \"Ensure that the --authorization-mode argument is not set to AlwaysAllow (Scored)\"\n    type: \"skip\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--authorization-mode\"\n        compare:\n          op: nothave\n          value: \"AlwaysAllow\"\n        set: true\n    remediation: |\n      If using a Kubelet config file, edit the file to set authorization: mode to Webhook.\n      If using executable arguments, edit the kubelet service file\n      $kubeletsvc on each worker node and\n      set the below parameter in KUBELET_AUTHZ_ARGS variable.\n      --authorization-mode=Webhook\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.4\n    text: \"Ensure that the --client-ca-file argument is set as appropriate (Scored)\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--client-ca-file\"\n        set: true\n    remediation: |\n      If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\n      the location of the client CA file.\n      If using command line arguments, edit the kubelet service file\n      $kubeletsvc on each worker node and\n      set the below parameter in KUBELET_AUTHZ_ARGS variable.\n      --client-ca-file=<path/to/client-ca-file>\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.5\n    text: \"Ensure that the --read-only-port argument is set to 0 (Scored)\"\n    type: \"skip\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--read-only-port\"\n        compare:\n          op: eq\n          value: 0\n        set: true\n    remediation: |\n      If using a Kubelet config file, edit the file to set readOnlyPort to 0 .\n      If using command line arguments, edit the kubelet service file\n      $kubeletsvc on each worker node and\n      set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n      --read-only-port=0\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.6\n    text: \"Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Scored)\"\n    type: \"skip\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--streaming-connection-idle-timeout\"\n        compare:\n          op: noteq\n          value: 0\n        set: true\n    remediation: |\n      If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\n      value other than 0.\n      If using command line arguments, edit the kubelet service file\n      $kubeletsvc on each worker node and\n      set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n      --streaming-connection-idle-timeout=5m\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.7\n    type: \"skip\"\n    text: \"Ensure that the --protect-kernel-defaults argument is set to true (Scored)\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--protect-kernel-defaults\"\n        compare:\n          op: eq\n          value: true\n        set: true\n    remediation: |\n      If using a Kubelet config file, edit the file to set protectKernelDefaults: true .\n      If using command line arguments, edit the kubelet service file\n      $kubeletsvc on each worker node and\n      set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n      --protect-kernel-defaults=true\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.8\n    text: \"Ensure that the --make-iptables-util-chains argument is set to true (Scored)\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      bin_op: or\n      test_items:\n      - flag: \"--make-iptables-util-chains\"\n        compare:\n          op: eq\n          value: true\n        set: true\n      - flag: \"--make-iptables-util-chains\"\n        set: false\n    remediation: |\n      If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true .\n      If using command line arguments, edit the kubelet service file\n      $kubeletsvc on each worker node and\n      remove the --make-iptables-util-chains argument from the\n      KUBELET_SYSTEM_PODS_ARGS variable.\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.9\n    type: \"skip\"\n    text: \"Ensure that the --hostname-override argument is not set (Scored)\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--hostname-override\"\n        set: false\n    remediation: |\n      Edit the kubelet service file $kubeletsvc\n      on each worker node and remove the --hostname-override argument from the\n      KUBELET_SYSTEM_PODS_ARGS variable.\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.10\n    text: \"Ensure that the --event-qps argument is set to 0 (Scored)\"\n    type: \"skip\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--event-qps\"\n        compare:\n          op: eq\n          value: 0\n        set: true\n    remediation: |\n      If using a Kubelet config file, edit the file to set eventRecordQPS: 0 .\n      If using command line arguments, edit the kubelet service file\n      $kubeletsvc on each worker node and\n      set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n      --event-qps=0\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.11\n    type: \"skip\"\n    text: \"Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Scored)\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      bin_op: and\n      test_items:\n      - flag: \"--tls-cert-file\"\n        set: true\n      - flag: \"--tls-private-key-file\"\n        set: true\n    remediation: |\n      If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate\n      file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the\n      corresponding private key file.\n      If using command line arguments, edit the kubelet service file\n      $kubeletsvc on each worker node and\n      set the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n      --tls-cert-file=<path/to/tls-certificate-file>\n      file=<path/to/tls-key-file>\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.12\n    text: \"Ensure that the --cadvisor-port argument is set to 0 (Scored)\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      bin_op: or\n      test_items:\n      - flag: \"--cadvisor-port\"\n        compare:\n          op: eq\n          value: 0\n        set: true\n      - flag: \"--cadvisor-port\"\n        set: false\n    remediation: |\n      Edit the kubelet service file $kubeletsvc\n      on each worker node and set the below parameter in KUBELET_CADVISOR_ARGS variable.\n      --cadvisor-port=0\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.13\n    text: \"Ensure that the --rotate-certificates argument is not set to false (Scored)\"\n    type: \"skip\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--rotate-certificates\"\n        compare:\n          op: eq\n          value: true\n        set: true\n    remediation: |\n      If using a Kubelet config file, edit the file to add the line rotateCertificates: true.\n      If using command line arguments, edit the kubelet service file $kubeletsvc\n      on each worker node and add --rotate-certificates=true argument to the KUBELET_CERTIFICATE_ARGS variable.\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.14\n    type: \"skip\"\n    text: \"Ensure that the RotateKubeletServerCertificate argument is set to true (Scored)\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"RotateKubeletServerCertificate\"\n        compare:\n          op: eq\n          value: true\n        set: true\n    remediation: |\n      Edit the kubelet service file $kubeletsvc\n      on each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n      --feature-gates=RotateKubeletServerCertificate=true\n      Based on your system, restart the kubelet service. For example:\n      systemctl daemon-reload\n      systemctl restart kubelet.service\n    scored: true\n\n  - id: 2.1.15\n    text: \"Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Not Scored)\"\n    audit: \"ps -fC $kubeletbin\"\n    tests:\n      test_items:\n      - flag: \"--tls-cipher-suites\"\n        compare:\n          op: eq\n          value: \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\"\n        set: true\n    remediation: |\n      If using a Kubelet config file, edit the file to set TLSCipherSuites: to TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 ,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\n      If using executable arguments, edit the kubelet service file $kubeletconf on each worker node and set the below parameter.\n      --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\n    scored: false\n\n- id: 2.2\n  text: \"Configuration Files\"\n  checks:\n    - id: 2.2.1\n      type: \"skip\"\n      text: \"Ensure that the kubelet.conf file permissions are set to 644 or\n      more restrictive (Scored)\"\n      audit: \"/bin/sh -c 'if test -e $kubeletkubeconfig; then stat -c %a $kubeletkubeconfig; fi'\"\n      tests:\n        bin_op: or\n        test_items:\n          - flag: \"644\"\n            compare:\n              op: eq\n              value: \"644\"\n            set: true\n          - flag: \"640\"\n            compare:\n              op: eq\n              value: \"640\"\n            set: true\n          - flag: \"600\"\n            compare:\n              op: eq\n              value: \"600\"\n            set: true\n      remediation: |\n        Run the below command (based on the file location on your system) on the each worker\n        node. For example,\n        chmod 644 $kubeletkubeconfig\n      scored: true\n\n    - id: 2.2.2\n      type: \"skip\"\n      text: \"Ensure that the kubelet.conf file ownership is set to root:root (Scored)\"\n      audit: \"/bin/sh -c 'if test -e $kubeletkubeconfig; then stat -c %U:%G $kubeletkubeconfig; fi'\"\n      tests:\n        test_items:\n          - flag: \"root:root\"\n            compare:\n              op: eq\n              value: root:root\n            set: true\n      remediation: |\n        Run the below command (based on the file location on your system) on the each worker\n        node. For example,\n        chown root:root $kubeletkubeconfig\n      scored: true\n\n    - id: 2.2.3\n      text: \"Ensure that the kubelet service file permissions are set to 644 or\n      more restrictive (Scored)\"\n      type: \"skip\"\n      audit: \"/bin/sh -c 'if test -e $kubeletsvc; then stat -c %a $kubeletsvc; fi'\"\n      tests:\n        bin_op: or\n        test_items:\n        - flag: \"644\"\n          compare:\n            op: eq\n            value: 644\n          set: true\n        - flag: \"640\"\n          compare:\n            op: eq\n            value: \"640\"\n          set: true\n        - flag: \"600\"\n          compare:\n            op: eq\n            value: \"600\"\n          set: true\n      remediation: |\n        Run the below command (based on the file location on your system) on the each worker\n        node. For example,\n        chmod 755 $kubeletsvc\n      scored: true\n\n    - id: 2.2.4\n      text: \"Ensure that the kubelet service file ownership is set to root:root (Scored)\"\n      type: \"skip\"\n      audit: \"/bin/sh -c 'if test -e $kubeletsvc; then stat -c %U:%G $kubeletsvc; fi'\"\n      tests:\n        test_items:\n        - flag: \"root:root\"\n          set: true\n      remediation: |\n        Run the below command (based on the file location on your system) on the each worker\n        node. For example,\n        chown root:root $kubeletsvc\n      scored: true\n\n    - id: 2.2.5\n      text: \"Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive (Scored)\"\n      type: \"skip\"\n      audit: \"/bin/sh -c 'if test -e $proxykubeconfig; then stat -c %a $proxykubeconfig; fi'\"\n      tests:\n        bin_op: or\n        test_items:\n        - flag: \"644\"\n          compare:\n            op: eq\n            value: \"644\"\n          set: true\n        - flag: \"640\"\n          compare:\n            op: eq\n            value: \"640\"\n          set: true\n        - flag: \"600\"\n          compare:\n            op: eq\n            value: \"600\"\n          set: true\n      remediation: |\n        Run the below command (based on the file location on your system) on the each worker\n        node. For example,\n        chmod 644 $proxykubeconfig\n      scored: true\n\n    - id: 2.2.6\n      text: \"Ensure that the proxy kubeconfig file ownership is set to root:root (Scored)\"\n      type: \"skip\"\n      audit: \"/bin/sh -c 'if test -e $proxykubeconfig; then stat -c %U:%G $proxykubeconfig; fi'\"\n      tests:\n        test_items:\n        - flag: \"root:root\"\n          set: true\n      remediation: |\n          Run the below command (based on the file location on your system) on the each worker\n          node. For example,\n          chown root:root $proxykubeconfig\n      scored: true\n\n    - id: 2.2.7\n      text: \"Ensure that the certificate authorities file permissions are set to\n      644 or more restrictive (Scored)\"\n      type: manual\n      remediation: |\n        Run the following command to modify the file permissions of the --client-ca-file\n        chmod 644 <filename>\n      scored: true\n\n    - id: 2.2.8\n      text: \"Ensure that the client certificate authorities file ownership is set to root:root (Scored)\"\n      audit: \"/bin/sh -c 'if test -e $ca-file; then stat -c %U:%G $ca-file; fi'\"\n      type: manual\n      remediation: |\n        Run the following command to modify the ownership of the --client-ca-file .\n        chown root:root <filename>\n      scored: true\n\n    - id: 2.2.9\n      text: \"Ensure that the kubelet configuration file ownership is set to root:root (Scored)\"\n      type: \"skip\"\n      audit: \"/bin/sh -c 'if test -e $kubeletconf; then stat -c %U:%G $kubeletconf; fi'\"\n      tests:\n        test_items:\n        - flag: \"root:root\"\n          set: true\n      remediation: |\n        Run the following command (using the config file location identied in the Audit step)\n        chown root:root $kubeletconf\n      scored: true\n\n    - id: 2.2.10\n      text: \"Ensure that the kubelet configuration file has permissions set to 644 or more restrictive (Scored)\"\n      type: \"skip\"\n      audit: \"/bin/sh -c 'if test -e $kubeletconf; then stat -c %a $kubeletconf; fi'\"\n      tests:\n        bin_op: or\n        test_items:\n        - flag: \"644\"\n          compare:\n            op: eq\n            value: \"644\"\n          set: true\n        - flag: \"640\"\n          compare:\n            op: eq\n            value: \"640\"\n          set: true\n        - flag: \"600\"\n          compare:\n            op: eq\n            value: \"600\"\n          set: true\n      remediation: |\n        Run the following command (using the config file location identied in the Audit step)\n        chmod 644 $kubeletconf\n      scored: true"
    }
  },
  {
    "apiVersion": "batch/v1beta1",
    "kind": "CronJob",
    "metadata": {
      "name": "release-name-kubebench",
      "labels": {
        "app.kubernetes.io/name": "kubebench",
        "helm.sh/chart": "kubebench-1.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "schedule": "30 8 * * 1",
      "jobTemplate": {
        "spec": {
          "template": {
            "spec": {
              "hostPID": true,
              "initContainers": [
                {
                  "name": "kubebench",
                  "image": "aquasec/kube-bench:latest",
                  "imagePullPolicy": "Always",
                  "command": [
                    "sh",
                    "-c",
                    "/opt/kube-bench/entrypoint.sh node --version 1.11 > /data/output"
                  ],
                  "volumeMounts": [
                    {
                      "mountPath": "/data",
                      "name": "data"
                    },
                    {
                      "mountPath": "/opt/kube-bench/cfg/1.11",
                      "name": "config"
                    }
                  ]
                }
              ],
              "containers": [
                {
                  "name": "kubebench-exporter",
                  "image": "quay.io/reactiveops/kubebench-exporter:v1.0",
                  "imagePullPolicy": "IfNotPresent",
                  "args": [
                    "/data/output",
                    "kubebench",
                    "kubebench"
                  ],
                  "volumeMounts": [
                    {
                      "mountPath": "/data",
                      "name": "data"
                    }
                  ],
                  "env": [
                    {
                      "name": "DATADOG_API_KEY",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "kubebench",
                          "key": "DD_API_KEY"
                        }
                      }
                    },
                    {
                      "name": "DATADOG_APP_KEY",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "kubebench",
                          "key": "DD_APP_KEY"
                        }
                      }
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "data",
                  "emptyDir": {}
                },
                {
                  "name": "config",
                  "configMap": {
                    "name": "release-name-kubebench"
                  }
                }
              ],
              "restartPolicy": "OnFailure"
            }
          }
        }
      }
    }
  }
]