[
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "catalog-kubedb-com-elasticsearchversion"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "catalog.kubedb.com/v1alpha1",
        "kind": "ElasticsearchVersion"
      },
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "info",
          "help": "Elastic search versions info",
          "type": "gauge",
          "labels": [
            {
              "key": "auth_plugin",
              "valuePath": ".spec.authPlugin"
            },
            {
              "key": "db_image",
              "valuePath": ".spec.db.image"
            },
            {
              "key": "deprecated",
              "valuePath": ".spec.deprecated"
            },
            {
              "key": "distribution",
              "valuePath": ".spec.distribution"
            },
            {
              "key": "exporter_image",
              "valuePath": ".spec.exporter.image"
            },
            {
              "key": "stash_addon_backup_task",
              "valuePath": ".spec.stash.addon.backupTask.name"
            },
            {
              "key": "stash_addon_restore_task",
              "valuePath": ".spec.stash.addon.restoreTask.name"
            }
          ],
          "metricValue": {
            "value": 1
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "kubedb-com-elasticsearch"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "kubedb.com/v1alpha2",
        "kind": "Elasticsearch"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".metadata.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        }
      ],
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation time stamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "info",
          "help": "Kubedb elasticsearch information",
          "type": "gauge",
          "labels": [
            {
              "key": "version",
              "valuePath": ".spec.version"
            },
            {
              "key": "storageType",
              "valuePath": ".spec.storageType"
            },
            {
              "key": "enableSSL",
              "valuePath": ".spec.enableSSL"
            },
            {
              "key": "terminationPolicy",
              "valuePath": ".spec.terminationPolicy"
            },
            {
              "key": "storageClassName",
              "valuePath": ".spec.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "replicas",
          "help": "Number of elasticsearch replicas in general mode",
          "type": "gauge",
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            }
          ],
          "metricValue": {
            "valueFromExpression": "resource_replicas(obj)"
          }
        },
        {
          "name": "status_conditions",
          "help": "Elasticsearch instance status condition",
          "type": "gauge",
          "field": {
            "path": ".status.conditions",
            "type": "Array"
          },
          "labels": [
            {
              "key": "type",
              "valuePath": ".status.conditions[*].type"
            },
            {
              "key": "status",
              "valuePath": ".status.conditions[*].status"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_phase",
          "help": "Elasticsearch instance current phase",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Ready",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Ready')"
                }
              },
              {
                "labelValue": "Halted",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Halted')"
                }
              },
              {
                "labelValue": "Provisioning",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Provisioning')"
                }
              },
              {
                "labelValue": "Critical",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Critical')"
                }
              },
              {
                "labelValue": "NotReady",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'NotReady')"
                }
              },
              {
                "labelValue": "DataRestoring",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'DataRestoring')"
                }
              }
            ]
          }
        },
        {
          "name": "security_http_ssl_enabled",
          "help": "Elasticsearch ssl information",
          "type": "gauge",
          "params": [
            {
              "key": "ssl",
              "valuePath": ".spec.enableSSL"
            }
          ],
          "metricValue": {
            "valueFromExpression": "int(ssl == 'true')"
          }
        },
        {
          "name": "certmanager_managed_tls_enabled",
          "help": "Elasticsearch cert manager managed tls info",
          "type": "gauge",
          "params": [
            {
              "key": "tls_issuerRef",
              "valuePath": ".spec.tls.issuerRef"
            }
          ],
          "metricValue": {
            "valueFromExpression": "int(tls_issuerRef != 'nil')"
          }
        },
        {
          "name": "resource_request_cpu",
          "help": "Requested CPU by Elasticsearch in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_memory",
          "help": "Requested memory by Elasticsearch in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_storage",
          "help": "Requested storage by Elasticsearch in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_cpu",
          "help": "CPU limit for Elasticsearch in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_memory",
          "help": "Memory limit for Elasticsearch in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_storage",
          "help": "Storage limit for Elasticsearch in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "master_node_replicas",
          "help": "Number of replicas for elasticsearch master node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.master.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.master.replicas"
          }
        },
        {
          "name": "master_node_storage_class_info",
          "help": "Elasticsearch master node storage class information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.master.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "master_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.master.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.master.maxUnavailable"
          }
        },
        {
          "name": "data_node_replicas",
          "help": "Number of replicas for elasticsearch data node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.data.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.data.replicas"
          }
        },
        {
          "name": "data_node_storage_class_info",
          "help": "Elasticsearch data node storage class information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.data.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "data_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.data.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.data.maxUnavailable"
          }
        },
        {
          "name": "datacontent_node_replicas",
          "help": "Number of replicas for elasticsearch dataContent node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.dataContent.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.dataContent.replicas"
          }
        },
        {
          "name": "datacontent_node_storage_class_info",
          "help": "Elasticsearch dataContent node storage class information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.dataContent.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "datacontent_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.dataContent.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.dataContent.maxUnavailable"
          }
        },
        {
          "name": "datahot_node_replicas",
          "help": "Number of replicas for elasticsearch dataHot node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.dataHot.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.dataHot.replicas"
          }
        },
        {
          "name": "datahot_node_storage_class_info",
          "help": "Elasticsearch dataHot node information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.dataHot.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "datahot_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.dataHot.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.dataHot.maxUnavailable"
          }
        },
        {
          "name": "datawarm_node_replicas",
          "help": "Number of replicas for elasticsearch dataWarm node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.dataWarm.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.dataWarm.replicas"
          }
        },
        {
          "name": "datawarm_node_storage_class_info",
          "help": "Elasticsearch dataWarm node storage class information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.dataWarm.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "datawarm_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.dataWarm.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.dataWarm.maxUnavailable"
          }
        },
        {
          "name": "datacold_node_replicas",
          "help": "Number of replicas for elasticsearch dataCold node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.dataCold.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.dataCold.replicas"
          }
        },
        {
          "name": "datacold_node_storage_class_info",
          "help": "Elasticsearch dataCold node storage information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.dataCold.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "datacold_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.dataCold.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.dataCold.maxUnavailable"
          }
        },
        {
          "name": "datafrozen_node_replicas",
          "help": "Number of replicas for elasticsearch dataFrozen node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.dataFrozen.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.dataFrozen.replicas"
          }
        },
        {
          "name": "datafrozen_node_storage_class_info",
          "help": "Elasticsearch dataFrozen node storage class information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.dataFrozen.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "datafrozen_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.dataFrozen.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.dataFrozen.maxUnavailable"
          }
        },
        {
          "name": "ingest_node_replicas",
          "help": "Number of replicas for elasticsearch ingest node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.ingest.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.ingest.replicas"
          }
        },
        {
          "name": "ingest_node_storage_class_info",
          "help": "Elasticsearch ingest node storage class information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.ingest.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "ingest_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.ingest.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.ingest.maxUnavailable"
          }
        },
        {
          "name": "ml_node_replicas",
          "help": "Number of replicas for elasticsearch ml node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.ml.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.ml.replicas"
          }
        },
        {
          "name": "ml_node_storage_class_info",
          "help": "Elasticsearch ml node storage class information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.ml.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "ml_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.ml.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.ml.maxUnavailable"
          }
        },
        {
          "name": "transform_node_replicas",
          "help": "Number of replicas for elasticsearch transform node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.transform.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.transform.replicas"
          }
        },
        {
          "name": "transform_node_storage_class_info",
          "help": "Elasticsearch transform node storage class information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.transform.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "transform_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.transform.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.transform.maxUnavailable"
          }
        },
        {
          "name": "coordinating_node_replicas",
          "help": "Number of replicas for elasticsearch coordinating node",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.coordinating.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.coordinating.replicas"
          }
        },
        {
          "name": "coordinating_node_storage_class_info",
          "help": "Elasticsearch coordinating node storage class information",
          "type": "gauge",
          "labels": [
            {
              "key": "storage_className",
              "valuePath": ".spec.topology.coordinating.storage.storageClassName"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "coordinating_node_max_unavailable",
          "help": "Maximum number of pods unavailable after an eviction",
          "type": "gauge",
          "field": {
            "path": ".spec.topology.coordinating.maxUnavailable",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.topology.coordinating.maxUnavailable"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "ops-kubedb-com-elasticsearchopsrequest"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "ops.kubedb.com/v1alpha1",
        "kind": "ElasticsearchOpsRequest"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".spec.databaseRef.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        },
        {
          "key": "type",
          "valuePath": ".spec.type"
        }
      ],
      "metrics": [
        {
          "name": "type",
          "help": "Elasticsearch OpsRequest Type",
          "type": "gauge",
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_phase",
          "help": "The current phase of Elasticsearch OpsRequest.",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Progressing",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Progressing')"
                }
              },
              {
                "labelValue": "Failed",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Failed')"
                }
              },
              {
                "labelValue": "Pending",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Pending')"
                }
              },
              {
                "labelValue": "Successful",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Successful')"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "catalog-kubedb-com-mariadbversion"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "catalog.kubedb.com/v1alpha1",
        "kind": "MariaDBVersion"
      },
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "info",
          "help": "MariaDB versions info",
          "type": "gauge",
          "labels": [
            {
              "key": "deprecated",
              "valuePath": ".spec.deprecated"
            },
            {
              "key": "db_image",
              "valuePath": ".spec.db.image"
            },
            {
              "key": "exporter_image",
              "valuePath": ".spec.exporter.image"
            },
            {
              "key": "stash_addon_backup_task",
              "valuePath": ".spec.stash.addon.backupTask.name"
            },
            {
              "key": "stash_addon_restore_task",
              "valuePath": ".spec.stash.addon.restoreTask.name"
            }
          ],
          "metricValue": {
            "value": 1
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "kubedb-com-mariadb"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "kubedb.com/v1alpha2",
        "kind": "MariaDB"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".metadata.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        }
      ],
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation time stamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "replicas",
          "help": "Number of replicas of mariadb instance",
          "type": "gauge",
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            }
          ],
          "metricValue": {
            "valueFromExpression": "resource_replicas(obj)"
          }
        },
        {
          "name": "status_phase",
          "help": "MariaDB instance current phase",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Ready",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Ready')"
                }
              },
              {
                "labelValue": "Halted",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Halted')"
                }
              },
              {
                "labelValue": "Provisioning",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Provisioning')"
                }
              },
              {
                "labelValue": "Critical",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Critical')"
                }
              },
              {
                "labelValue": "NotReady",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'NotReady')"
                }
              },
              {
                "labelValue": "DataRestoring",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'DataRestoring')"
                }
              }
            ]
          }
        },
        {
          "name": "info",
          "help": "MariaDB instance information",
          "type": "gauge",
          "labels": [
            {
              "key": "version",
              "valuePath": ".spec.version"
            },
            {
              "key": "requireSSL",
              "valuePath": ".spec.requireSSL"
            },
            {
              "key": "storageType",
              "valuePath": ".spec.storageType"
            },
            {
              "key": "terminationPolicy",
              "valuePath": ".spec.terminationPolicy"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_conditions",
          "help": "MariaDB instance status condition",
          "type": "gauge",
          "field": {
            "path": ".status.conditions",
            "type": "Array"
          },
          "labels": [
            {
              "key": "type",
              "valuePath": ".status.conditions[*].type"
            },
            {
              "key": "status",
              "valuePath": ".status.conditions[*].status"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "resource_request_cpu",
          "help": "Requested CPU by MariaDB in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_memory",
          "help": "Requested memory by MariaDB in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_storage",
          "help": "Requested storage by MariaDB in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_cpu",
          "help": "CPU limit for MariaDB in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_memory",
          "help": "Memory limit for MariaDB in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_storage",
          "help": "Storage limit for MariaDB in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "ops-kubedb-com-mariadbopsrequest"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "ops.kubedb.com/v1alpha1",
        "kind": "MariaDBOpsRequest"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".spec.databaseRef.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        },
        {
          "key": "type",
          "valuePath": ".spec.type"
        }
      ],
      "metrics": [
        {
          "name": "type",
          "help": "MariaDB OpsRequest type",
          "type": "gauge",
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_phase",
          "help": "MariaDB OpsRequest current phase.",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Progressing",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Progressing')"
                }
              },
              {
                "labelValue": "Failed",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Failed')"
                }
              },
              {
                "labelValue": "Pending",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Pending')"
                }
              },
              {
                "labelValue": "Successful",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Successful')"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "schema-kubedb-com-mariadbdatabase"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "schema.kubedb.com/v1alpha1",
        "kind": "MariaDBDatabase"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".spec.database.serverRef.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".spec.database.serverRef.namespace"
        }
      ],
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "status_phase",
          "help": "MariaDB schema current phase.",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "InProgress",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'InProgress')"
                }
              },
              {
                "labelValue": "Failed",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Failed')"
                }
              },
              {
                "labelValue": "Pending",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Pending')"
                }
              },
              {
                "labelValue": "Current",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Current')"
                }
              },
              {
                "labelValue": "Expired",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Expired')"
                }
              },
              {
                "labelValue": "Terminating",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Terminating')"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "catalog-kubedb-com-mongodbversion"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "catalog.kubedb.com/v1alpha1",
        "kind": "MongoDBVersion"
      },
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "info",
          "help": "MongoDB versions info",
          "type": "gauge",
          "labels": [
            {
              "key": "db_image",
              "valuePath": ".spec.db.image"
            },
            {
              "key": "deprecated",
              "valuePath": ".spec.deprecated"
            },
            {
              "key": "distribution",
              "valuePath": ".spec.distribution"
            },
            {
              "key": "exporter_image",
              "valuePath": ".spec.exporter.image"
            },
            {
              "key": "stash_addon_backup_task",
              "valuePath": ".spec.stash.addon.backupTask.name"
            },
            {
              "key": "stash_addon_restore_task",
              "valuePath": ".spec.stash.addon.restoreTask.name"
            }
          ],
          "metricValue": {
            "value": 1
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "kubedb-com-mongodb"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "kubedb.com/v1alpha2",
        "kind": "MongoDB"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".metadata.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        }
      ],
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "status_phase",
          "help": "MongoDB instance current phase",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Ready",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Ready')"
                }
              },
              {
                "labelValue": "Halted",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Halted')"
                }
              },
              {
                "labelValue": "Provisioning",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Provisioning')"
                }
              },
              {
                "labelValue": "Critical",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Critical')"
                }
              },
              {
                "labelValue": "NotReady",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'NotReady')"
                }
              },
              {
                "labelValue": "DataRestoring",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'DataRestoring')"
                }
              }
            ]
          }
        },
        {
          "name": "info",
          "help": "MongoDB instance information",
          "type": "gauge",
          "labels": [
            {
              "key": "clusterAuthMode",
              "valuePath": ".spec.clusterAuthMode"
            },
            {
              "key": "sslMode",
              "valuePath": ".spec.sslMode"
            },
            {
              "key": "storageType",
              "valuePath": ".spec.storageType"
            },
            {
              "key": "terminationPolicy",
              "valuePath": ".spec.terminationPolicy"
            },
            {
              "key": "version",
              "valuePath": ".spec.version"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_conditions",
          "help": "MongoDB instance status condition",
          "type": "gauge",
          "field": {
            "path": ".status.conditions",
            "type": "Array"
          },
          "labels": [
            {
              "key": "type",
              "valuePath": ".status.conditions[*].type"
            },
            {
              "key": "status",
              "valuePath": ".status.conditions[*].status"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "shard_enabled",
          "help": "MongoDB sharded topology enable info",
          "type": "gauge",
          "params": [
            {
              "key": "topology",
              "valuePath": ".spec.shardTopology"
            }
          ],
          "metricValue": {
            "valueFromExpression": "int(topology != 'nil')"
          }
        },
        {
          "name": "resource_request_cpu",
          "help": "Requested CPU by MongoDB in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_memory",
          "help": "Requested memory by MongoDB in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_storage",
          "help": "Requested storage by MongoDB in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_cpu",
          "help": "CPU limit for MongoDB in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_memory",
          "help": "Memory limit for MongoDB in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_storage",
          "help": "Storage limit for MongoDB in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "shard_shards",
          "help": "Number of shards of the MongoDB database",
          "type": "gauge",
          "field": {
            "path": ".spec.shardTopology.shard.shards",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.shardTopology.shard.shards"
          }
        },
        {
          "name": "shard_replicas",
          "help": "Number of replicas in the MongoDB shards",
          "type": "gauge",
          "field": {
            "path": ".spec.shardTopology.shard.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.shardTopology.shard.replicas"
          }
        },
        {
          "name": "configsvr_replicas",
          "help": "Number of replicas in MongoDB config server in sharded database",
          "type": "gauge",
          "field": {
            "path": ".spec.shardTopology.configServer.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.shardTopology.configServer.replicas"
          }
        },
        {
          "name": "mongos_replicas",
          "help": "Number of replicas in mongodb sharded mongos",
          "type": "gauge",
          "field": {
            "path": ".spec.shardTopology.mongos.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.shardTopology.mongos.replicas"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "ops-kubedb-com-mongodbopsrequest"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "ops.kubedb.com/v1alpha1",
        "kind": "MongoDBOpsRequest"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".spec.databaseRef.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        },
        {
          "key": "type",
          "valuePath": ".spec.type"
        }
      ],
      "metrics": [
        {
          "name": "type",
          "help": "MongoDB OpsRequest Type",
          "type": "gauge",
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_phase",
          "help": "The current phase of MongoDB OpsRequest.",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Progressing",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Progressing')"
                }
              },
              {
                "labelValue": "Failed",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Failed')"
                }
              },
              {
                "labelValue": "Pending",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Pending')"
                }
              },
              {
                "labelValue": "Successful",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Successful')"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "schema-kubedb-com-mongodbdatabase"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "schema.kubedb.com/v1alpha1",
        "kind": "MongoDBDatabase"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".spec.database.serverRef.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".spec.database.serverRef.namespace"
        }
      ],
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "status_phase",
          "help": "MongoDB schema current phase.",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "InProgress",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'InProgress')"
                }
              },
              {
                "labelValue": "Failed",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Failed')"
                }
              },
              {
                "labelValue": "Pending",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Pending')"
                }
              },
              {
                "labelValue": "Current",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Current')"
                }
              },
              {
                "labelValue": "Expired",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Expired')"
                }
              },
              {
                "labelValue": "Terminating",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Terminating')"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "catalog-kubedb-com-mysqlversion"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "catalog.kubedb.com/v1alpha1",
        "kind": "MySQLVersion"
      },
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "info",
          "help": "MySQL versions info",
          "type": "gauge",
          "labels": [
            {
              "key": "deprecated",
              "valuePath": ".spec.deprecated"
            },
            {
              "key": "db_image",
              "valuePath": ".spec.db.image"
            },
            {
              "key": "exporter_image",
              "valuePath": ".spec.exporter.image"
            },
            {
              "key": "distribution",
              "valuePath": ".spec.distribution"
            },
            {
              "key": "stash_addon_backup_task",
              "valuePath": ".spec.stash.addon.backupTask.name"
            },
            {
              "key": "stash_addon_restore_task",
              "valuePath": ".spec.stash.addon.restoreTask.name"
            }
          ],
          "metricValue": {
            "value": 1
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "kubedb-com-mysql"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "kubedb.com/v1alpha2",
        "kind": "MySQL"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".metadata.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        }
      ],
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation time stamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "replicas",
          "help": "Number of replicas of mysql instance",
          "type": "gauge",
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            }
          ],
          "metricValue": {
            "valueFromExpression": "resource_replicas(obj)"
          }
        },
        {
          "name": "status_phase",
          "help": "MySQL instance current phase",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Ready",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Ready')"
                }
              },
              {
                "labelValue": "Halted",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Halted')"
                }
              },
              {
                "labelValue": "Provisioning",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Provisioning')"
                }
              },
              {
                "labelValue": "Critical",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Critical')"
                }
              },
              {
                "labelValue": "NotReady",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'NotReady')"
                }
              },
              {
                "labelValue": "DataRestoring",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'DataRestoring')"
                }
              }
            ]
          }
        },
        {
          "name": "info",
          "help": "MySQL instance information",
          "type": "gauge",
          "labels": [
            {
              "key": "version",
              "valuePath": ".spec.version"
            },
            {
              "key": "useAddressType",
              "valuePath": ".spec.useAddressType"
            },
            {
              "key": "storageType",
              "valuePath": ".spec.storageType"
            },
            {
              "key": "terminationPolicy",
              "valuePath": ".spec.terminationPolicy"
            },
            {
              "key": "requireSSL",
              "valuePath": ".spec.requireSSL"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_conditions",
          "help": "MySQL instance status condition",
          "type": "gauge",
          "field": {
            "path": ".status.conditions",
            "type": "Array"
          },
          "labels": [
            {
              "key": "type",
              "valuePath": ".status.conditions[*].type"
            },
            {
              "key": "status",
              "valuePath": ".status.conditions[*].status"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "resource_request_cpu",
          "help": "Requested CPU by MySQL in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_memory",
          "help": "Requested memory by MySQL in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_storage",
          "help": "Requested storage by MySQL in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_cpu",
          "help": "CPU limit for MySQL in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_memory",
          "help": "Memory limit for MySQL in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_storage",
          "help": "Storage limit for MySQL in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "ops-kubedb-com-mysqlopsrequest"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "ops.kubedb.com/v1alpha1",
        "kind": "MySQLOpsRequest"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".spec.databaseRef.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        },
        {
          "key": "type",
          "valuePath": ".spec.type"
        }
      ],
      "metrics": [
        {
          "name": "type",
          "help": "MySQL Opsrequest type",
          "type": "gauge",
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_phase",
          "help": "The opsrequest current phase.",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Progressing",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Progressing')"
                }
              },
              {
                "labelValue": "Failed",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Failed')"
                }
              },
              {
                "labelValue": "Pending",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Pending')"
                }
              },
              {
                "labelValue": "Successful",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Successful')"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "schema-kubedb-com-mysqldatabase"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "schema.kubedb.com/v1alpha1",
        "kind": "MySQLDatabase"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".spec.database.serverRef.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".spec.database.serverRef.namespace"
        }
      ],
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "status_phase",
          "help": "MySQL schema current phase.",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "InProgress",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'InProgress')"
                }
              },
              {
                "labelValue": "Failed",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Failed')"
                }
              },
              {
                "labelValue": "Pending",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Pending')"
                }
              },
              {
                "labelValue": "Current",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Current')"
                }
              },
              {
                "labelValue": "Expired",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Expired')"
                }
              },
              {
                "labelValue": "Terminating",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Terminating')"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "catalog-kubedb-com-postgresversion"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "catalog.kubedb.com/v1alpha1",
        "kind": "PostgresVersion"
      },
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "info",
          "help": "Postgres versions info",
          "type": "gauge",
          "labels": [
            {
              "key": "coordinator_image",
              "valuePath": ".spec.coordinator.image"
            },
            {
              "key": "db_image",
              "valuePath": ".spec.db.image"
            },
            {
              "key": "deprecated",
              "valuePath": ".spec.deprecated"
            },
            {
              "key": "distribution",
              "valuePath": ".spec.distribution"
            },
            {
              "key": "exporter_image",
              "valuePath": ".spec.exporter.image"
            },
            {
              "key": "stash_addon_backup_task",
              "valuePath": ".spec.stash.addon.backupTask.name"
            },
            {
              "key": "stash_addon_restore_task",
              "valuePath": ".spec.stash.addon.restoreTask.name"
            }
          ],
          "metricValue": {
            "value": 1
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "kubedb-com-postgres"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "kubedb.com/v1alpha2",
        "kind": "Postgres"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".metadata.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        }
      ],
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation time stamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "replicas",
          "help": "Number of replicas of postgres instance",
          "type": "gauge",
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            }
          ],
          "metricValue": {
            "valueFromExpression": "resource_replicas(obj)"
          }
        },
        {
          "name": "status_phase",
          "help": "Postgres instance current phase",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Ready",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Ready')"
                }
              },
              {
                "labelValue": "Halted",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Halted')"
                }
              },
              {
                "labelValue": "Provisioning",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Provisioning')"
                }
              },
              {
                "labelValue": "Critical",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Critical')"
                }
              },
              {
                "labelValue": "NotReady",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'NotReady')"
                }
              },
              {
                "labelValue": "DataRestoring",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'DataRestoring')"
                }
              }
            ]
          }
        },
        {
          "name": "info",
          "help": "Postgres instance information",
          "type": "gauge",
          "labels": [
            {
              "key": "clientAuthMode",
              "valuePath": ".spec.clientAuthMode"
            },
            {
              "key": "sslMode",
              "valuePath": ".spec.sslMode"
            },
            {
              "key": "storageType",
              "valuePath": ".spec.storageType"
            },
            {
              "key": "terminationPolicy",
              "valuePath": ".spec.terminationPolicy"
            },
            {
              "key": "version",
              "valuePath": ".spec.version"
            },
            {
              "key": "standby_mode",
              "valuePath": ".spec.standbyMode"
            },
            {
              "key": "streaming_mode",
              "valuePath": ".spec.streamingMode"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_conditions",
          "help": "Postgres instance status condition",
          "type": "gauge",
          "field": {
            "path": ".status.conditions",
            "type": "Array"
          },
          "labels": [
            {
              "key": "type",
              "valuePath": ".status.conditions[*].type"
            },
            {
              "key": "status",
              "valuePath": ".status.conditions[*].status"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "leader_election_info",
          "help": "Postgres leader election config info",
          "type": "gauge",
          "labels": [
            {
              "key": "election_tick",
              "valuePath": ".spec.leaderElection.electionTick"
            },
            {
              "key": "heart_beat_tick",
              "valuePath": ".spec.leaderElection.heartbeatTick"
            },
            {
              "key": "maximum_lag_before_failover",
              "valuePath": ".spec.leaderElection.maximumLagBeforeFailover"
            },
            {
              "key": "period",
              "valuePath": ".spec.leaderElection.period"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "monitoring_info",
          "help": "Postgres monitoring agent info",
          "type": "gauge",
          "labels": [
            {
              "key": "agent",
              "valuePath": ".spec.monitor.agent"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "tls_info",
          "help": "Postgres database tls info",
          "type": "gauge",
          "labels": [
            {
              "key": "issuers_name",
              "valuePath": ".spec.tls.issuerRef.name"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "resource_request_cpu",
          "help": "Requested CPU by Postgres in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_memory",
          "help": "Requested memory by Postgres in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_storage",
          "help": "Requested storage by Postgres in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_cpu",
          "help": "CPU limit for Postgres in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_memory",
          "help": "Memory limit for Postgres in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_storage",
          "help": "Storage limit for Postgres in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "ops-kubedb-com-postgresopsrequest"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "ops.kubedb.com/v1alpha1",
        "kind": "PostgresOpsRequest"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".spec.databaseRef.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        },
        {
          "key": "type",
          "valuePath": ".spec.type"
        }
      ],
      "metrics": [
        {
          "name": "type",
          "help": "Postgres OpsRequest Type",
          "type": "gauge",
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_phase",
          "help": "The current phase of Postgres OpsRequest.",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Progressing",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Progressing')"
                }
              },
              {
                "labelValue": "Failed",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Failed')"
                }
              },
              {
                "labelValue": "Pending",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Pending')"
                }
              },
              {
                "labelValue": "Successful",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Successful')"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "schema-kubedb-com-postgresdatabase"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "schema.kubedb.com/v1alpha1",
        "kind": "PostgresDatabase"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".spec.database.serverRef.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".spec.database.serverRef.namespace"
        }
      ],
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "status_phase",
          "help": "PostgreSQL schema current phase.",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "InProgress",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'InProgress')"
                }
              },
              {
                "labelValue": "Failed",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Failed')"
                }
              },
              {
                "labelValue": "Pending",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Pending')"
                }
              },
              {
                "labelValue": "Current",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Current')"
                }
              },
              {
                "labelValue": "Expired",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Expired')"
                }
              },
              {
                "labelValue": "Terminating",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Terminating')"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "catalog-kubedb-com-redisversion"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "catalog.kubedb.com/v1alpha1",
        "kind": "RedisVersion"
      },
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation timestamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "info",
          "help": "Redis versions info",
          "type": "gauge",
          "labels": [
            {
              "key": "deprecated",
              "valuePath": ".spec.deprecated"
            },
            {
              "key": "db_image",
              "valuePath": ".spec.db.image"
            },
            {
              "key": "exporter_image",
              "valuePath": ".spec.exporter.image"
            }
          ],
          "metricValue": {
            "value": 1
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "kubedb-com-redis"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "kubedb.com/v1alpha2",
        "kind": "Redis"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".metadata.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        }
      ],
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation time stamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "mode",
          "help": "Redis database instance mode",
          "type": "gauge",
          "labels": [
            {
              "key": "mode",
              "valuePath": ".spec.mode"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "cluster_master_nodes",
          "help": "Number of master nodes in redis cluster",
          "type": "gauge",
          "field": {
            "path": ".spec.cluster.master",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.cluster.master"
          }
        },
        {
          "name": "cluster_replicas",
          "help": "Number of replicas in redis cluster",
          "type": "gauge",
          "field": {
            "path": ".spec.cluster.replicas",
            "type": "Integer"
          },
          "metricValue": {
            "valueFromPath": ".spec.cluster.replicas"
          }
        },
        {
          "name": "replicas",
          "help": "Number of replicas of redis instance",
          "type": "gauge",
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            }
          ],
          "metricValue": {
            "valueFromExpression": "resource_replicas(obj)"
          }
        },
        {
          "name": "status_phase",
          "help": "Redis instance current phase",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Ready",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Ready')"
                }
              },
              {
                "labelValue": "Halted",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Halted')"
                }
              },
              {
                "labelValue": "Provisioning",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Provisioning')"
                }
              },
              {
                "labelValue": "Critical",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Critical')"
                }
              },
              {
                "labelValue": "NotReady",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'NotReady')"
                }
              },
              {
                "labelValue": "DataRestoring",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'DataRestoring')"
                }
              }
            ]
          }
        },
        {
          "name": "info",
          "help": "Redis instance information",
          "type": "gauge",
          "labels": [
            {
              "key": "version",
              "valuePath": ".spec.version"
            },
            {
              "key": "mode",
              "valuePath": ".spec.mode"
            },
            {
              "key": "storageType",
              "valuePath": ".spec.storageType"
            },
            {
              "key": "terminationPolicy",
              "valuePath": ".spec.terminationPolicy"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_conditions",
          "help": "Redis instance status condition",
          "type": "gauge",
          "field": {
            "path": ".status.conditions",
            "type": "Array"
          },
          "labels": [
            {
              "key": "type",
              "valuePath": ".status.conditions[*].type"
            },
            {
              "key": "status",
              "valuePath": ".status.conditions[*].status"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "resource_request_cpu",
          "help": "Requested CPU by Redis in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_memory",
          "help": "Requested memory by Redis in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_storage",
          "help": "Requested storage by Redis in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_cpu",
          "help": "CPU limit for Redis in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_memory",
          "help": "Memory limit for Redis in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_storage",
          "help": "Storage limit for Redis in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "kubedb-com-redissentinel"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "kubedb.com/v1alpha2",
        "kind": "RedisSentinel"
      },
      "metrics": [
        {
          "name": "created",
          "help": "Unix creation time stamp",
          "type": "gauge",
          "field": {
            "path": ".metadata.creationTimestamp",
            "type": "DateTime"
          },
          "metricValue": {
            "valueFromPath": ".metadata.creationTimestamp"
          }
        },
        {
          "name": "replicas",
          "help": "Number of replicas of redis sentinel instance",
          "type": "gauge",
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            }
          ],
          "metricValue": {
            "valueFromExpression": "resource_replicas(obj)"
          }
        },
        {
          "name": "tls_enabled",
          "help": "Redis sentinel tls info",
          "type": "gauge",
          "params": [
            {
              "key": "tls",
              "valuePath": ".spec.tls"
            }
          ],
          "metricValue": {
            "valueFromExpression": "int(tls != 'nil')"
          }
        },
        {
          "name": "status_phase",
          "help": "Redis sentinel instance current phase",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Ready",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Ready')"
                }
              },
              {
                "labelValue": "Halted",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Halted')"
                }
              },
              {
                "labelValue": "Provisioning",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Provisioning')"
                }
              },
              {
                "labelValue": "Critical",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Critical')"
                }
              },
              {
                "labelValue": "NotReady",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'NotReady')"
                }
              },
              {
                "labelValue": "DataRestoring",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'DataRestoring')"
                }
              }
            ]
          }
        },
        {
          "name": "info",
          "help": "Redis senitel instance information",
          "type": "gauge",
          "labels": [
            {
              "key": "version",
              "valuePath": ".spec.version"
            },
            {
              "key": "storageType",
              "valuePath": ".spec.storageType"
            },
            {
              "key": "terminationPolicy",
              "valuePath": ".spec.terminationPolicy"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_conditions",
          "help": "Redis sentinel instance status condition",
          "type": "gauge",
          "field": {
            "path": ".status.conditions",
            "type": "Array"
          },
          "labels": [
            {
              "key": "type",
              "valuePath": ".status.conditions[*].type"
            },
            {
              "key": "status",
              "valuePath": ".status.conditions[*].status"
            }
          ],
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "resource_request_cpu",
          "help": "Requested CPU by Redis sentinel in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_memory",
          "help": "Requested memory by Redis sentinel in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_request_storage",
          "help": "Requested storage by Redis sentinel in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_requests(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_cpu",
          "help": "CPU limit for Redis sentinel in core",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "core"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "cpu"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_memory",
          "help": "Memory limit for Redis sentinel in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "memory"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        },
        {
          "name": "resource_limit_storage",
          "help": "Storage limit for Redis sentinel in byte",
          "type": "gauge",
          "labels": [
            {
              "key": "unit",
              "value": "byte"
            }
          ],
          "params": [
            {
              "key": "obj",
              "valuePath": "."
            },
            {
              "key": "resourceType",
              "value": "storage"
            }
          ],
          "metricValue": {
            "valueFromExpression": "total_resource_limits(obj, resourceType)"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "metrics.appscode.com/v1alpha1",
    "kind": "MetricsConfiguration",
    "metadata": {
      "name": "ops-kubedb-com-redisopsrequest"
    },
    "spec": {
      "targetRef": {
        "apiVersion": "ops.kubedb.com/v1alpha1",
        "kind": "RedisOpsRequest"
      },
      "commonLabels": [
        {
          "key": "app",
          "valuePath": ".spec.databaseRef.name"
        },
        {
          "key": "app_namespace",
          "valuePath": ".metadata.name"
        },
        {
          "key": "type",
          "valuePath": ".spec.type"
        }
      ],
      "metrics": [
        {
          "name": "type",
          "help": "Redis OpsRequest Type",
          "type": "gauge",
          "metricValue": {
            "value": 1
          }
        },
        {
          "name": "status_phase",
          "help": "The current phase of Redis OpsRequest.",
          "type": "gauge",
          "field": {
            "path": ".status.phase",
            "type": "String"
          },
          "params": [
            {
              "key": "phase",
              "valuePath": ".status.phase"
            }
          ],
          "states": {
            "labelKey": "phase",
            "values": [
              {
                "labelValue": "Progressing",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Progressing')"
                }
              },
              {
                "labelValue": "Failed",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Failed')"
                }
              },
              {
                "labelValue": "Pending",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Pending')"
                }
              },
              {
                "labelValue": "Successful",
                "metricValue": {
                  "valueFromExpression": "int(phase == 'Successful')"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "name": "appscode:metrics:edit",
      "labels": {
        "rbac.authorization.k8s.io/aggregate-to-admin": "true",
        "rbac.authorization.k8s.io/aggregate-to-edit": "true"
      },
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "metrics.appscode.com"
        ],
        "resources": [
          "*"
        ],
        "verbs": [
          "*"
        ]
      }
    ]
  },
  {
    "kind": "ClusterRole",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "appscode:metrics:view",
      "labels": {
        "rbac.authorization.k8s.io/aggregate-to-view": "true"
      },
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "metrics.appscode.com"
        ],
        "resources": [
          "*"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      }
    ]
  }
]