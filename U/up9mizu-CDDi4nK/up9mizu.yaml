apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: elasticsearch-master-pdb
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: elasticsearch-master
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mizu-service-account
  namespace: CDDi4nK
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mizu-config
  namespace: CDDi4nK
data:
  NOTE: This config map contains only DEFAULT values, please do not change it. Please consult documentation on how to alter Mizu runtime configuration.
  mizu-default-config.json: |-
    {
        "db": {
            "path": "/app/data/"
        },
        "features": {
            "oas": true,
            "serviceMap": true,
            "demo": false
        },
        "tapper": {
            "ignoredUserAgents": [
                "kube-probe",
                "GoogleStackdriverMonitoring",
                "prometheus"
            ],
            "noRedact": true,
            "imagePullPolicy": "Always",
            "imagePath": "docker.io/up9inc/mizu:33.0",
            "namespace": "default",
            "resources": {
                "CpuLimit": "750m",
                "MemoryLimit": "1Gi",
                "CpuRequests": "50m",
                "MemoryRequests": "50Mi"
            }
        },
        "logLevel": 4,
        "notification": {
            "emailHookUrl": "https: //europe-west1-mimetic-card-241611.cloudfunctions.net/mizu-mail/"
        }
    }
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mizu-db-volume-claim
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    limits:
      storage: 100M
    requests:
      storage: 100M
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mizu-cluster-role
  namespace: default
  labels:
    heritage: Helm
    release: release-name
rules:
  - apiGroups:
      - ""
      - extensions
      - apps
    resources:
      - endpoints
      - pods
      - services
      - namespaces
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mizu-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mizu-cluster-role
subjects:
  - kind: ServiceAccount
    name: mizu-service-account
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mizu-role-daemon
  namespace: CDDi4nK
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mizu-role-binding-daemon
  namespace: CDDi4nK
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mizu-role-daemon
subjects:
  - kind: ServiceAccount
    name: mizu-service-account
    namespace: default
---
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: Helm
    release: release-name
    chart: elasticsearch
    app: elasticsearch-master
  annotations: {}
spec:
  type: ClusterIP
  selector:
    release: release-name
    chart: elasticsearch
    app: elasticsearch-master
  publishNotReadyAddresses: false
  ports:
    - name: http
      protocol: TCP
      port: 9200
    - name: transport
      protocol: TCP
      port: 9300
---
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: Helm
    release: release-name
    chart: elasticsearch
    app: elasticsearch-master
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: elasticsearch-master
  ports:
    - name: http
      port: 9200
    - name: transport
      port: 9300
---
apiVersion: v1
kind: Service
metadata:
  name: mizu-api-server
  namespace: CDDi4nK
spec:
  type: ClusterIP
  ports:
    - name: api
      port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app: mizu-api-server
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: mizu-tapper-daemon-set
  namespace: CDDi4nK
  labels:
    app: mizu-tapper-daemon-set
spec:
  selector:
    matchLabels:
      app: mizu-tapper
  template:
    metadata:
      name: mizu-tapper
      labels:
        app: mizu-tapper
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: mizu-non-existing-label
                    operator: Exists
      containers:
        - name: mizu-tapper
          image: docker.io/up9inc/mizu:33.0
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: Helm
    release: release-name
    chart: elasticsearch
    app: elasticsearch-master
  annotations:
    esMajorVersion: "7"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: elasticsearch-master
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 30Gi
  template:
    metadata:
      name: elasticsearch-master
      labels:
        release: release-name
        chart: elasticsearch
        app: elasticsearch-master
      annotations: null
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - elasticsearch-master
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes: null
      enableServiceLinks: true
      initContainers:
        - name: configure-sysctl
          securityContext:
            runAsUser: 10298
            privileged: true
            capabilities:
              drop:
                "": NET_RAW
          image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
          imagePullPolicy: IfNotPresent
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          resources:
            seccompProfile:
              type: RuntimeDefault
      containers:
        - name: elasticsearch
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 11334
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
          imagePullPolicy: IfNotPresent
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e
                  # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file

                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Elasticsearch Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no

                  http () {
                    local path="${1}"
                    local args="${2}"
                    set -- -XGET -s

                    if [ "$args" != "" ]; then
                      set -- "$@" $args
                    fi

                    if [ -n "${ELASTIC_PASSWORD}" ]; then
                      set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"
                    fi

                    curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                  }

                  if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    HTTP_CODE=$(http "/" "-w %{http_code}")
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                      exit ${RC}
                    fi
                    # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    elif [[ ${HTTP_CODE} == "503" && "7" == "6" ]]; then
                      exit 0
                    else
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                      exit 1
                    fi

                  else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                    if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                      touch ${START_FILE}
                      exit 0
                    else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                      exit 1
                    fi
                  fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: cluster.initial_master_nodes
              value: elasticsearch-master-0,
            - name: discovery.seed_hosts
              value: elasticsearch-master-headless
            - name: cluster.name
              value: elasticsearch
            - name: network.host
              value: 0.0.0.0
            - name: cluster.deprecation_indexing.enabled
              value: "false"
            - name: node.data
              value: "true"
            - name: node.ingest
              value: "true"
            - name: node.master
              value: "true"
            - name: node.ml
              value: "true"
            - name: node.remote_cluster_client
              value: "true"
          volumeMounts:
            - name: elasticsearch-master
              mountPath: /usr/share/elasticsearch/data
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mizu-api-server
  namespace: CDDi4nK
  labels:
    app: mizu-api-server
spec:
  serviceName: mizu-api-server
  replicas: 1
  selector:
    matchLabels:
      app: mizu-api-server
  template:
    metadata:
      name: mizu-api-server
      creationTimestamp: null
      labels:
        app: mizu-api-server
      annotations:
        rollme: whOXTdTNUc
    spec:
      volumes:
        - name: mizu-config
          configMap:
            name: mizu-config
            defaultMode: 420
        - name: mizu-db-volume-claim
          persistentVolumeClaim:
            claimName: mizu-db-volume-claim
      initContainers:
        - name: wait-for-elasticsearch-master
          image: busybox:1.28
          command:
            - sh
            - -c
            - for i in $(seq 1 200); do nc -z -w3 elasticsearch-master.default.svc.cluster.local 9200 && exit 0 || sleep 3; done; exit 1
      containers:
        - name: mizu-api-server
          image: docker.io/up9inc/mizu-enterprise:33.1
          env:
            - name: SYNC_ENTRIES_CONFIG
            - name: LOG_LEVEL
              value: INFO
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AGENT_IMAGE
              value: docker.io/up9inc/mizu-enterprise:33.1
            - name: KRATOS_IMAGE
              value: docker.io/up9inc/mizu-kratos:0.0.1
            - name: KETO_IMAGE
              value: docker.io/up9inc/mizu-keto:0.0.2
            - name: TRAFFIC_DB_SIZE
              value: 30Gi
          resources:
            limits:
              cpu: 750m
              memory: 1Gi
            requests:
              cpu: 50m
              memory: 50Mi
          volumeMounts:
            - name: mizu-config
              mountPath: /app/data/mizu-default-config.json
              subPath: mizu-default-config.json
            - name: mizu-db-volume-claim
              mountPath: /app/data/
          livenessProbe:
            httpGet:
              path: /echo
              port: 8899
              scheme: HTTP
            initialDelaySeconds: 1
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
        - name: kratos
          image: docker.io/up9inc/mizu-kratos:0.0.1
          resources:
            limits:
              cpu: 450m
              memory: 200Mi
            requests:
              cpu: 50m
              memory: 50Mi
          volumeMounts:
            - name: mizu-config
              mountPath: /app/config/
            - name: mizu-db-volume-claim
              mountPath: /app/data/
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 4433
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
        - name: keto
          image: docker.io/up9inc/mizu-keto:0.0.2
          resources:
            limits:
              cpu: 450m
              memory: 200Mi
            requests:
              cpu: 50m
              memory: 50Mi
          volumeMounts:
            - name: mizu-config
              mountPath: /app/config/
            - name: mizu-db-volume-claim
              mountPath: /app/data/
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 4466
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 0
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: mizu-service-account
      serviceAccount: mizu-service-account
      securityContext: {}
      schedulerName: default-scheduler
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-eorfy-test
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  containers:
    - name: release-name-munzm-test
      image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash -e
          curl -XGET --fail 'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'
  restartPolicy: Never
