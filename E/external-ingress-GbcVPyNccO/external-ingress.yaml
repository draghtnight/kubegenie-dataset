apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: external-ingress
    group: com.stakater.platform
    provider: stakater
    version: 0.12.0
    chart: external-ingress-1.0.8
    release: release-name
    heritage: Helm
  name: external-ingress-serviceaccount
  namespace: external-ingress
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: external-ingress
  labels:
    app: external-ingress
    group: com.stakater.platform
    provider: stakater
    version: 0.12.0
    chart: external-ingress-1.0.8
    release: release-name
    heritage: Helm
data:
  enable-vts-status: "true"
  use-proxy-protocol: "false"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: external-ingress
    group: com.stakater.platform
    provider: stakater
    version: 0.12.0
    chart: external-ingress-1.0.8
    release: release-name
    heritage: Helm
  name: external-ingress-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: external-ingress
    group: com.stakater.platform
    provider: stakater
    version: 0.12.0
    chart: external-ingress-1.0.8
    release: release-name
    heritage: Helm
  name: external-ingress-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: external-ingress-serviceaccount
    namespace: external-ingress
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: external-ingress
    group: com.stakater.platform
    provider: stakater
    version: 0.12.0
    chart: external-ingress-1.0.8
    release: release-name
    heritage: Helm
  name: external-ingress-role
  namespace: external-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-external-ingress
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - create
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: external-ingress
    group: com.stakater.platform
    provider: stakater
    version: 0.12.0
    chart: external-ingress-1.0.8
    release: release-name
    heritage: Helm
  name: external-ingress-role-nisa-binding
  namespace: external-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: external-ingress-role
subjects:
  - kind: ServiceAccount
    name: external-ingress-serviceaccount
    namespace: external-ingress
---
apiVersion: v1
kind: Service
metadata:
  name: external-ingress
  labels:
    app: external-ingress
    group: com.stakater.platform
    provider: stakater
    version: 0.12.0
    chart: external-ingress-1.0.8
    release: release-name
    heritage: Helm
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: '*'
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: https
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 80
  selector:
    app: external-ingress
    group: com.stakater.platform
    provider: stakater
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: external-ingress
    group: com.stakater.platform
    provider: stakater
    version: 0.12.0
    chart: external-ingress-1.0.8
    release: release-name
    heritage: Helm
  name: external-ingress
spec:
  replicas: 2
  revisionHistoryLimit: 3
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: "true"
      labels:
        app: external-ingress
        group: com.stakater.platform
        provider: stakater
    spec:
      terminationGracePeriodSeconds: 60
      serviceAccount: external-ingress-serviceaccount
      containers:
        - name: external-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.12.0
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 5
          args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/default-backend
            - --configmap=$(POD_NAMESPACE)/external-ingress
            - --publish-service=$(POD_NAMESPACE)/external-ingress
            - --ingress-class=external-ingress
            - --annotations-prefix=ingress.kubernetes.io
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 80
            - containerPort: 443
