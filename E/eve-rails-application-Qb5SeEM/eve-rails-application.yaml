apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-eve-rails-application
  labels:
    helm.sh/chart: eve-rails-application-1.3.4
    app.kubernetes.io/name: eve-rails-application
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.0.0
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-eve-rails-application-web
  labels:
    helm.sh/chart: eve-rails-application-1.3.4
    app.kubernetes.io/name: eve-rails-application
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.0.0
    app.kubernetes.io/managed-by: Helm
    app: release-name-eve-rails-application-web
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: release-name-eve-rails-application-web
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-eve-rails-application-web
  labels:
    helm.sh/chart: eve-rails-application-1.3.4
    app.kubernetes.io/name: eve-rails-application
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.0.0
    app.kubernetes.io/managed-by: Helm
    app: release-name-eve-rails-application-web
spec:
  replicas: null
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: release-name-eve-rails-application-web
  template:
    metadata:
      labels:
        app: release-name-eve-rails-application-web
    spec:
      serviceAccountName: release-name-eve-rails-application
      securityContext: {}
      containers:
        - name: release-name-eve-rails-application-web
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: :v1.0.0
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - puma
            - -C
            - config/puma.rb
          env:
            - name: RACK_ENV
              value: production
            - name: RAILS_LOG_TO_STDOUT
              value: "true"
            - name: RAILS_ENV
              value: production
            - name: RAILS_MAX_THREADS
              value: "5"
            - name: WEB_CONCURRENCY
              value: "2"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            seccompProfile:
              type: RuntimeDefault
      initContainers:
        - name: release-name-eve-rails-application-web-init
          securityContext: {}
          image: :v1.0.0
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - rails
            - db:abort_if_pending_migrations
          env:
            - name: RAILS_LOG_TO_STDOUT
              value: "true"
            - name: RAILS_ENV
              value: production
          resources: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-eve-rails-application-worker-default
  labels:
    helm.sh/chart: eve-rails-application-1.3.4
    app.kubernetes.io/name: eve-rails-application
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.0.0
    app.kubernetes.io/managed-by: Helm
    app: release-name-eve-rails-application-worker-default
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: release-name-eve-rails-application-worker-default
  template:
    metadata:
      labels:
        app.kubernetes.io/name: eve-rails-application
        app.kubernetes.io/instance: release-name
        app: release-name-eve-rails-application-worker-default
    spec:
      serviceAccountName: release-name-eve-rails-application
      securityContext: {}
      containers:
        - name: release-name-eve-rails-application-worker-default
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: :v1.0.0
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - sidekiq
            - -c
            - "25"
          env:
            - name: RACK_ENV
              value: production
            - name: RAILS_LOG_TO_STDOUT
              value: "true"
            - name: RAILS_ENV
              value: production
            - name: RAILS_MAX_THREADS
              value: "25"
          ports:
            - name: http
              containerPort: 7433
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
          lifecycle:
            preStop:
              exec:
                command:
                  - bin/sidekiq_quiet
          resources:
            seccompProfile:
              type: RuntimeDefault
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
      initContainers:
        - name: release-name-eve-rails-application-worker-default-init
          securityContext: {}
          image: :v1.0.0
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - rails
            - db:abort_if_pending_migrations
          env:
            - name: RAILS_LOG_TO_STDOUT
              value: "true"
            - name: RAILS_ENV
              value: production
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources: {}
      terminationGracePeriodSeconds: 60
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-eve-rails-application-test-connection
  labels:
    helm.sh/chart: eve-rails-application-1.3.4
    app.kubernetes.io/name: eve-rails-application
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.0.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-eve-rails-application:80
  restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-eve-rails-application-migrate
  labels:
    helm.sh/chart: eve-rails-application-1.3.4
    app.kubernetes.io/name: eve-rails-application
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.0.0
    app.kubernetes.io/managed-by: Helm
    app: release-name-eve-rails-application-migrate
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  template:
    metadata:
      labels:
        app: release-name-eve-rails-application-migrate
    spec:
      serviceAccountName: release-name-eve-rails-application
      securityContext: {}
      containers:
        - name: eve-rails-application
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: :v1.0.0
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - rails
            - db:migrate
          env:
            - name: RACK_ENV
              value: production
            - name: RAILS_LOG_TO_STDOUT
              value: "true"
            - name: RAILS_ENV
              value: production
          resources:
            seccompProfile:
              type: RuntimeDefault
      restartPolicy: OnFailure
