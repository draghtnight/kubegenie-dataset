[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-elasticsearch-client",
      "namespace": "GosxAPP0Y"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "create-elasticsearch-templates",
      "namespace": "GosxAPP0Y"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-test",
      "namespace": "GosxAPP0Y"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-elasticsearch-data",
      "namespace": "GosxAPP0Y"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "elasticsearch-master",
      "namespace": "GosxAPP0Y"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "elasticsearch-etc"
    },
    "type": "Opaque",
    "data": {
      "elasticsearch.yml": "Ym9vdHN0cmFwOgogIG1lbW9yeV9sb2NrOiB0cnVlCmNsdXN0ZXI6CiAgbmFtZTogZWxhc3RpY3NlYXJjaAogIHJlbW90ZToKICAgIGNvbm5lY3Q6ICR7Tk9ERV9HQVRFV0FZfQpkaXNjb3Zlcnk6CiAgc2VlZF9ob3N0czogZWxhc3RpY3NlYXJjaC1kaXNjb3ZlcnkuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbApuZXR3b3JrOgogIGhvc3Q6IDAuMC4wLjAKbm9kZToKICBkYXRhOiAke05PREVfREFUQX0KICBpbmdlc3Q6ICR7Tk9ERV9JTkdFU1R9CiAgbWFzdGVyOiAke05PREVfTUFTVEVSfQogIG1heF9sb2NhbF9zdG9yYWdlX25vZGVzOiAzCiAgbmFtZTogJHtOT0RFX05BTUV9CnBhdGg6CiAgZGF0YTogL2RhdGEKICBsb2dzOiAvbG9ncwpzMzoKICBjbGllbnQ6IHt9",
      "httpd.conf": "U2VydmVyUm9vdCAiL3Vzci9sb2NhbC9hcGFjaGUyIgoKTGlzdGVuIDgwCgpMb2FkTW9kdWxlIGFsbG93bWV0aG9kc19tb2R1bGUgbW9kdWxlcy9tb2RfYWxsb3dtZXRob2RzLnNvCkxvYWRNb2R1bGUgbXBtX2V2ZW50X21vZHVsZSBtb2R1bGVzL21vZF9tcG1fZXZlbnQuc28KTG9hZE1vZHVsZSBhdXRobl9maWxlX21vZHVsZSBtb2R1bGVzL21vZF9hdXRobl9maWxlLnNvCkxvYWRNb2R1bGUgYXV0aG5fY29yZV9tb2R1bGUgbW9kdWxlcy9tb2RfYXV0aG5fY29yZS5zbwpMb2FkTW9kdWxlIGF1dGh6X2hvc3RfbW9kdWxlIG1vZHVsZXMvbW9kX2F1dGh6X2hvc3Quc28KTG9hZE1vZHVsZSBhdXRoel9ncm91cGZpbGVfbW9kdWxlIG1vZHVsZXMvbW9kX2F1dGh6X2dyb3VwZmlsZS5zbwpMb2FkTW9kdWxlIGF1dGh6X3VzZXJfbW9kdWxlIG1vZHVsZXMvbW9kX2F1dGh6X3VzZXIuc28KTG9hZE1vZHVsZSBhdXRoel9jb3JlX21vZHVsZSBtb2R1bGVzL21vZF9hdXRoel9jb3JlLnNvCkxvYWRNb2R1bGUgYWNjZXNzX2NvbXBhdF9tb2R1bGUgbW9kdWxlcy9tb2RfYWNjZXNzX2NvbXBhdC5zbwpMb2FkTW9kdWxlIGF1dGhfYmFzaWNfbW9kdWxlIG1vZHVsZXMvbW9kX2F1dGhfYmFzaWMuc28KTG9hZE1vZHVsZSBsZGFwX21vZHVsZSBtb2R1bGVzL21vZF9sZGFwLnNvCkxvYWRNb2R1bGUgYXV0aG56X2xkYXBfbW9kdWxlIG1vZHVsZXMvbW9kX2F1dGhuel9sZGFwLnNvCkxvYWRNb2R1bGUgcmVxdGltZW91dF9tb2R1bGUgbW9kdWxlcy9tb2RfcmVxdGltZW91dC5zbwpMb2FkTW9kdWxlIGZpbHRlcl9tb2R1bGUgbW9kdWxlcy9tb2RfZmlsdGVyLnNvCkxvYWRNb2R1bGUgcHJveHlfaHRtbF9tb2R1bGUgbW9kdWxlcy9tb2RfcHJveHlfaHRtbC5zbwpMb2FkTW9kdWxlIGxvZ19jb25maWdfbW9kdWxlIG1vZHVsZXMvbW9kX2xvZ19jb25maWcuc28KTG9hZE1vZHVsZSBlbnZfbW9kdWxlIG1vZHVsZXMvbW9kX2Vudi5zbwpMb2FkTW9kdWxlIGhlYWRlcnNfbW9kdWxlIG1vZHVsZXMvbW9kX2hlYWRlcnMuc28KTG9hZE1vZHVsZSBzZXRlbnZpZl9tb2R1bGUgbW9kdWxlcy9tb2Rfc2V0ZW52aWYuc28KTG9hZE1vZHVsZSB2ZXJzaW9uX21vZHVsZSBtb2R1bGVzL21vZF92ZXJzaW9uLnNvCkxvYWRNb2R1bGUgcHJveHlfbW9kdWxlIG1vZHVsZXMvbW9kX3Byb3h5LnNvCkxvYWRNb2R1bGUgcHJveHlfY29ubmVjdF9tb2R1bGUgbW9kdWxlcy9tb2RfcHJveHlfY29ubmVjdC5zbwpMb2FkTW9kdWxlIHByb3h5X2h0dHBfbW9kdWxlIG1vZHVsZXMvbW9kX3Byb3h5X2h0dHAuc28KTG9hZE1vZHVsZSBwcm94eV9iYWxhbmNlcl9tb2R1bGUgbW9kdWxlcy9tb2RfcHJveHlfYmFsYW5jZXIuc28KTG9hZE1vZHVsZSBzbG90bWVtX3NobV9tb2R1bGUgbW9kdWxlcy9tb2Rfc2xvdG1lbV9zaG0uc28KTG9hZE1vZHVsZSBzbG90bWVtX3BsYWluX21vZHVsZSBtb2R1bGVzL21vZF9zbG90bWVtX3BsYWluLnNvCkxvYWRNb2R1bGUgdW5peGRfbW9kdWxlIG1vZHVsZXMvbW9kX3VuaXhkLnNvCkxvYWRNb2R1bGUgc3RhdHVzX21vZHVsZSBtb2R1bGVzL21vZF9zdGF0dXMuc28KTG9hZE1vZHVsZSBhdXRvaW5kZXhfbW9kdWxlIG1vZHVsZXMvbW9kX2F1dG9pbmRleC5zbwpMb2FkTW9kdWxlIHJld3JpdGVfbW9kdWxlIG1vZHVsZXMvbW9kX3Jld3JpdGUuc28KCjxJZk1vZHVsZSB1bml4ZF9tb2R1bGU+ClVzZXIgZGFlbW9uCkdyb3VwIGRhZW1vbgo8L0lmTW9kdWxlPgoKPERpcmVjdG9yeSAvPgogICAgQWxsb3dPdmVycmlkZSBub25lCiAgICBSZXF1aXJlIGFsbCBkZW5pZWQKPC9EaXJlY3Rvcnk+Cgo8RmlsZXMgIi5odCoiPgogICAgUmVxdWlyZSBhbGwgZGVuaWVkCjwvRmlsZXM+CgpFcnJvckxvZyAvZGV2L3N0ZGVycgoKTG9nTGV2ZWwgd2FybgoKPElmTW9kdWxlIGxvZ19jb25maWdfbW9kdWxlPgogICAgTG9nRm9ybWF0ICIlYSAlbCAldSAldCBcIiVyXCIgJT5zICViIFwiJXtSZWZlcmVyfWlcIiBcIiV7VXNlci1BZ2VudH1pXCIiIGNvbWJpbmVkCiAgICBMb2dGb3JtYXQgIiV7WC1Gb3J3YXJkZWQtRm9yfWkgJWwgJXUgJXQgXCIlclwiICU+cyAlYiBcIiV7UmVmZXJlcn1pXCIgXCIle1VzZXItQWdlbnR9aVwiIiBwcm94eQogICAgTG9nRm9ybWF0ICIlaCAlbCAldSAldCBcIiVyXCIgJT5zICViIiBjb21tb24KCiAgICA8SWZNb2R1bGUgbG9naW9fbW9kdWxlPgogICAgICBMb2dGb3JtYXQgIiVhICVsICV1ICV0IFwiJXJcIiAlPnMgJWIgXCIle1JlZmVyZXJ9aVwiIFwiJXtVc2VyLUFnZW50fWlcIiAlSSAlTyIgY29tYmluZWRpbwogICAgPC9JZk1vZHVsZT4KCiAgICBTZXRFbnZJZiBYLUZvcndhcmRlZC1Gb3IgIl4uKlwuLipcLi4qXC4uKiIgZm9yd2FyZGVkCiAgICBDdXN0b21Mb2cgL2Rldi9zdGRvdXQgY29tbW9uCiAgICBDdXN0b21Mb2cgL2Rldi9zdGRvdXQgY29tYmluZWQKICAgIEN1c3RvbUxvZyAvZGV2L3N0ZG91dCBwcm94eSBlbnY9Zm9yd2FyZGVkCjwvSWZNb2R1bGU+Cgo8RGlyZWN0b3J5ICIvdXNyL2xvY2FsL2FwYWNoZTIvY2dpLWJpbiI+CiAgICBBbGxvd092ZXJyaWRlIE5vbmUKICAgIE9wdGlvbnMgTm9uZQogICAgUmVxdWlyZSBhbGwgZ3JhbnRlZAo8L0RpcmVjdG9yeT4KCjxJZk1vZHVsZSBoZWFkZXJzX21vZHVsZT4KICAgIFJlcXVlc3RIZWFkZXIgdW5zZXQgUHJveHkgZWFybHkKPC9JZk1vZHVsZT4KCjxJZk1vZHVsZSBwcm94eV9odG1sX21vZHVsZT4KSW5jbHVkZSBjb25mL2V4dHJhL3Byb3h5LWh0bWwuY29uZgo8L0lmTW9kdWxlPgoKPFZpcnR1YWxIb3N0ICo6ODA+CiAgPExvY2F0aW9uIC8+CiAgICAgIFByb3h5UGFzcyBodHRwOi8vbG9jYWxob3N0OjkyMDAvCiAgICAgIFByb3h5UGFzc1JldmVyc2UgaHR0cDovL2xvY2FsaG9zdDo5MjAwLwogICAgICBBdXRoTmFtZSAiRWxhc3RpY3NlYXJjaCIKICAgICAgQXV0aFR5cGUgQmFzaWMKICAgICAgQXV0aEJhc2ljUHJvdmlkZXIgZmlsZSBsZGFwCiAgICAgIEF1dGhVc2VyRmlsZSAvdXNyL2xvY2FsL2FwYWNoZTIvY29uZi8uaHRwYXNzd2QKICAgICAgQXV0aExEQVBCaW5kRE4gY249YWRtaW4sZGM9Y2x1c3RlcixkYz1sb2NhbAogICAgICBBdXRoTERBUEJpbmRQYXNzd29yZCBwYXNzd29yZAogICAgICBBdXRoTERBUFVSTCAibGRhcDovL2xkYXAuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDozODkvb3U9UGVvcGxlLGRjPWNsdXN0ZXIsZGM9bG9jYWwiCiAgICAgIFJlcXVpcmUgdmFsaWQtdXNlcgogIDwvTG9jYXRpb24+CgogICMgUmVzdHJpY3QgYWNjZXNzIHRvIHRoZSBFbGFzdGljc2VhcmNoIFVwZGF0ZSBCeSBRdWVyeSBBUEkgRW5kcG9pbnQgdG8gcHJldmVudCBtb2RpZmljYXRpb24gb2YgaW5kZXhlZCBkb2N1bWVudHMKICA8TG9jYXRpb24gLyovX3VwZGF0ZV9ieV9xdWVyeSo+CiAgICAgIFJlcXVpcmUgYWxsIGRlbmllZAogIDwvTG9jYXRpb24+CiAgIyBSZXN0cmljdCBhY2Nlc3MgdG8gdGhlIEVsYXN0aWNzZWFyY2ggRGVsZXRlIEJ5IFF1ZXJ5IEFQSSBFbmRwb2ludCB0byBwcmV2ZW50IGRlbGV0aW9uIG9mIGluZGV4ZWQgZG9jdW1lbnRzCiAgPExvY2F0aW9uIC8qL19kZWxldGVfYnlfcXVlcnkqPgogICAgICBSZXF1aXJlIGFsbCBkZW5pZWQKICA8L0xvY2F0aW9uPgo8L1ZpcnR1YWxIb3N0Pg==",
      "log4j2.properties": "c3RhdHVzID0gZXJyb3IKYXBwZW5kZXIuY29uc29sZS50eXBlID0gQ29uc29sZQphcHBlbmRlci5jb25zb2xlLm5hbWUgPSBjb25zb2xlCmFwcGVuZGVyLmNvbnNvbGUubGF5b3V0LnR5cGUgPSBQYXR0ZXJuTGF5b3V0CmFwcGVuZGVyLmNvbnNvbGUubGF5b3V0LnBhdHRlcm4gPSBbJWR7SVNPODYwMX1dWyUtNXBdWyUtMjVjezEufV0gWyVub2RlX25hbWVdJW1hcmtlciVtJW4Kcm9vdExvZ2dlci5sZXZlbCA9IGluZm8Kcm9vdExvZ2dlci5hcHBlbmRlclJlZi5jb25zb2xlLnJlZiA9IGNvbnNvbGU=",
      "jvm.options": "LVhtczFnCi1YbXgxZwotRGVzLm5ldHdvcmthZGRyZXNzLmNhY2hlLnR0bD02MAotRGVzLm5ldHdvcmthZGRyZXNzLmNhY2hlLm5lZ2F0aXZlLnR0bD0xMAotWFg6K0Fsd2F5c1ByZVRvdWNoCi1Yc3MxbQotRGphdmEuYXd0LmhlYWRsZXNzPXRydWUKLURmaWxlLmVuY29kaW5nPVVURi04Ci1Eam5hLm5vc3lzPXRydWUKLVhYOi1PbWl0U3RhY2tUcmFjZUluRmFzdFRocm93Ci1EaW8ubmV0dHkubm9VbnNhZmU9dHJ1ZQotRGlvLm5ldHR5Lm5vS2V5U2V0T3B0aW1pemF0aW9uPXRydWUKLURpby5uZXR0eS5yZWN5Y2xlci5tYXhDYXBhY2l0eVBlclRocmVhZD0wCi1EbG9nNGouc2h1dGRvd25Ib29rRW5hYmxlZD1mYWxzZQotRGxvZzRqMi5kaXNhYmxlLmpteD10cnVlCi1EamF2YS5pby50bXBkaXI9JHtFU19UTVBESVJ9Ci1YWDorSGVhcER1bXBPbk91dE9mTWVtb3J5RXJyb3IKLVhYOkhlYXBEdW1wUGF0aD1kYXRhCi1YWDpFcnJvckZpbGU9bG9ncy9oc19lcnJfcGlkJXAubG9nCjg6LVhYOitQcmludEdDRGV0YWlscwo4Oi1YWDorUHJpbnRHQ0RhdGVTdGFtcHMKODotWFg6K1ByaW50VGVudXJpbmdEaXN0cmlidXRpb24KODotWFg6K1ByaW50R0NBcHBsaWNhdGlvblN0b3BwZWRUaW1lCjg6LVhsb2dnYzpsb2dzL2djLmxvZwo4Oi1YWDorVXNlR0NMb2dGaWxlUm90YXRpb24KODotWFg6TnVtYmVyT2ZHQ0xvZ0ZpbGVzPTMyCjg6LVhYOkdDTG9nRmlsZVNpemU9NjRtCjgtMTM6LVhYOitVc2VDb25jTWFya1N3ZWVwR0MKOC0xMzotWFg6Q01TSW5pdGlhdGluZ09jY3VwYW5jeUZyYWN0aW9uPTc1CjgtMTM6LVhYOitVc2VDTVNJbml0aWF0aW5nT2NjdXBhbmN5T25seQo5LTotWGxvZzpnYyosZ2MrYWdlPXRyYWNlLHNhZmVwb2ludDpmaWxlPWxvZ3MvZ2MubG9nOnV0Y3RpbWUscGlkLHRhZ3M6ZmlsZWNvdW50PTMyLGZpbGVzaXplPTY0bQo5LTotRGphdmEubG9jYWxlLnByb3ZpZGVycz1DT01QQVQKMTAtOi1YWDpVc2VBVlg9Mg=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "elasticsearch-user-secrets"
    },
    "type": "Opaque",
    "data": {
      "ELASTICSEARCH_USERNAME": "YWRtaW4=",
      "ELASTICSEARCH_PASSWORD": "Y2hhbmdlbWU=",
      "ELASTICSEARCH_LOGGING_USERNAME": "cmVtb3Rl",
      "ELASTICSEARCH_LOGGING_PASSWORD": "Y2hhbmdlbWU=",
      "ELASTICSEARCH_URI": "aHR0cDovL2FkbWluOmNoYW5nZW1lQGVsYXN0aWNzZWFyY2gtbG9nZ2luZy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjgw",
      "BIND_DN": "Y249YWRtaW4sZGM9Y2x1c3RlcixkYz1sb2NhbA==",
      "BIND_PASSWORD": "cGFzc3dvcmQ="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "elasticsearch-bin"
    },
    "data": {
      "apache.sh": "#!/bin/bash\n\n\n\nset -ev\n\nCOMMAND=\"${@:-start}\"\n\nfunction start () {\n\n  if [ -f /etc/apache2/envvars ]; then\n     # Loading Apache2 ENV variables\n     source /etc/httpd/apache2/envvars\n  fi\n  # Apache gets grumpy about PID files pre-existing\n  rm -f /etc/httpd/logs/httpd.pid\n\n  if [ -f /usr/local/apache2/conf/.htpasswd ]; then\n    htpasswd -b /usr/local/apache2/conf/.htpasswd \"$ELASTICSEARCH_USERNAME\" \"$ELASTICSEARCH_PASSWORD\"\n  else\n    htpasswd -cb /usr/local/apache2/conf/.htpasswd \"$ELASTICSEARCH_USERNAME\" \"$ELASTICSEARCH_PASSWORD\"\n  fi\n\n  if [ ! -z $ELASTICSEARCH_LOGGING_USERNAME ]; then\n    htpasswd -b /usr/local/apache2/conf/.htpasswd \"$ELASTICSEARCH_LOGGING_USERNAME\" \"$ELASTICSEARCH_LOGGING_PASSWORD\"\n  fi\n\n  #Launch Apache on Foreground\n  exec httpd -DFOREGROUND\n}\n\nfunction stop () {\n  apachectl -k graceful-stop\n}\n\n$COMMAND\n",
      "elasticsearch.sh": "#!/bin/bash\n\n\nset -e\nCOMMAND=\"${@:-start}\"\n\nfunction initiate_keystore () {\n  set -ex\n  bin/elasticsearch-keystore create\n}\n\nfunction start () {\n  ulimit -l unlimited\n  initiate_keystore\n  exec /usr/local/bin/docker-entrypoint.sh elasticsearch\n}\n\nfunction stop () {\n  kill -TERM 1\n}\n\nfunction wait_to_join() {\n  # delay 5 seconds before the first check\n  sleep 5\n  joined=$(curl -s -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" \"${ELASTICSEARCH_ENDPOINT}/_cat/nodes\" | grep -w $NODE_NAME || true )\n  i=0\n  while [ -z \"$joined\" ]; do\n    sleep 5\n    joined=$(curl -s -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" \"${ELASTICSEARCH_ENDPOINT}/_cat/nodes\" | grep -w $NODE_NAME || true )\n    i=$((i+1))\n    # Waiting for up to 60 minutes\n    if [ $i -gt 720 ]; then\n      break\n    fi\n  done\n}\n\nfunction allocate_data_node () {\n  echo \"Node ${NODE_NAME} has started. Waiting to rejoin the cluster.\"\n  wait_to_join\n  echo \"Re-enabling Replica Shard Allocation\"\n  curl -s -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" -XPUT -H 'Content-Type: application/json' \\\n    \"${ELASTICSEARCH_ENDPOINT}/_cluster/settings\" -d \"{\n    \\\"persistent\\\": {\n      \\\"cluster.routing.allocation.enable\\\": null\n    }\n  }\"\n}\n\nfunction start_master_node () {\n  ulimit -l unlimited\n  initiate_keystore\n  if [ ! -f /data/cluster-bootstrap.txt ];\n  then\n    echo elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2 >> /data/cluster-bootstrap.txt\n    exec /usr/local/bin/docker-entrypoint.sh elasticsearch -Ecluster.initial_master_nodes=elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2\n  else\n    exec /usr/local/bin/docker-entrypoint.sh elasticsearch\n  fi\n}\n\nfunction start_data_node () {\n  ulimit -l unlimited\n  initiate_keystore\n  allocate_data_node &\n  /usr/local/bin/docker-entrypoint.sh elasticsearch &\n  function drain_data_node () {\n\n    # Implement the Rolling Restart Protocol Described Here:\n    # https://www.elastic.co/guide/en/elasticsearch/reference/7.x/restart-cluster.html#restart-cluster-rolling\n\n    echo \"Disabling Replica Shard Allocation\"\n    curl -s -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" -XPUT -H 'Content-Type: application/json' \\\n      \"${ELASTICSEARCH_ENDPOINT}/_cluster/settings\" -d \"{\n      \\\"persistent\\\": {\n        \\\"cluster.routing.allocation.enable\\\": \\\"primaries\\\"\n      }\n    }\"\n\n    # If version < 7.6 use _flush/synced; otherwise use _flush\n    # https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-synced-flush-api.html#indices-synced-flush-api\n\n    version=$(curl -s -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" \"${ELASTICSEARCH_ENDPOINT}/\" | jq -r .version.number)\n\n    if [[ $version =~ \"7.1\" ]]; then\n      action=\"_flush/synced\"\n    else\n      action=\"_flush\"\n    fi\n\n    curl -s -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" -XPOST \"${ELASTICSEARCH_ENDPOINT}/$action\"\n\n    # TODO: Check the response of synced flush operations to make sure there are no failures.\n    # Synced flush operations that fail due to pending indexing operations are listed in the response body,\n    # although the request itself still returns a 200 OK status. If there are failures, reissue the request.\n    # (The only side effect of not doing so is slower start up times. See flush documentation linked above)\n\n    echo \"Node ${NODE_NAME} is ready to shutdown\"\n    kill -TERM 1\n  }\n  trap drain_data_node TERM EXIT HUP INT\n  wait\n\n}\n\n$COMMAND\n",
      "helm-tests.sh": "#!/bin/bash\n\n\nset -ex\n\nfunction create_test_index () {\n  index_result=$(curl -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" \\\n  -XPUT \"${ELASTICSEARCH_ENDPOINT}/test_index?pretty\" -H 'Content-Type: application/json' -d'\n  {\n    \"settings\" : {\n      \"index\" : {\n        \"number_of_shards\" : 3,\n        \"number_of_replicas\" : 2\n      }\n    }\n  }\n  ' | python -c \"import sys, json; print(json.load(sys.stdin)['acknowledged'])\")\n  if [ \"$index_result\" == \"True\" ];\n  then\n    echo \"PASS: Test index created!\";\n  else\n    echo \"FAIL: Test index not created!\";\n    exit 1;\n  fi\n}\n\n\n\n\n\n\n# Tests whether elasticsearch has successfully generated the elasticsearch index mapping\n# templates defined by values.yaml\nfunction check_templates () {\n  total_hits=$(curl -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" \\\n              -XGET \"${ELASTICSEARCH_ENDPOINT}/_template\" | jq length)\n  if [ \"$total_hits\" -gt 0 ]; then\n    echo \"PASS: Successful hits on templates!\"\n  else\n    echo \"FAIL: No hits on query for templates! Exiting\";\n    exit 1;\n  fi\n}\n\n\nfunction remove_test_index () {\n  echo \"Deleting index created for service testing\"\n  curl -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" \\\n  -XDELETE \"${ELASTICSEARCH_ENDPOINT}/test_index\"\n}\n\nremove_test_index || true\ncreate_test_index\n\ncheck_templates\nremove_test_index\n",
      "ceph-admin-keyring.sh": "#!/bin/bash\n\n\n\nset -ex\nexport HOME=/tmp\n\ncat <<EOF > /etc/ceph/ceph.client.admin.keyring\n[client.admin]\n    key = $(cat /tmp/client-keyring)\nEOF\n\nexit 0\n",
      "create-s3-bucket.sh": "#!/bin/bash\n\nset -e\n\nfunction check_rgw_s3_bucket () {\n  echo \"Checking if bucket exists\"\n  s3cmd $CONNECTION_ARGS $USER_AUTH_ARGS ls s3://$S3_BUCKET\n}\n\nfunction create_rgw_s3_bucket () {\n  echo \"Creating bucket\"\n  s3cmd $CONNECTION_ARGS $S3_BUCKET_OPTS $USER_AUTH_ARGS mb s3://$S3_BUCKET\n}\n\nfunction modify_bucket_acl () {\n  echo \"Updating bucket ACL\"\n  s3cmd $CONNECTION_ARGS $USER_AUTH_ARGS setacl s3://$S3_BUCKET --acl-grant=read:$S3_USERNAME --acl-grant=write:$S3_USERNAME\n}\n\nADMIN_AUTH_ARGS=\" --access_key=$S3_ADMIN_ACCESS_KEY --secret_key=$S3_ADMIN_SECRET_KEY\"\n",
      "create-s3-user.sh": "\n\n#!/bin/bash\n\nset -e\n\nfunction create_s3_user () {\n  echo \"Creating s3 user and key pair\"\n  radosgw-admin user create \\\n    --uid=${S3_USERNAME} \\\n    --display-name=${S3_USERNAME} \\\n    --key-type=s3 \\\n    --access-key ${S3_ACCESS_KEY} \\\n    --secret-key ${S3_SECRET_KEY}\n}\n\nfunction update_s3_user () {\n  # Retrieve old access keys, if they exist\n  old_access_keys=$(radosgw-admin user info --uid=${S3_USERNAME} \\\n    | jq -r '.keys[].access_key' || true)\n  if [[ ! -z ${old_access_keys} ]]; then\n    for access_key in $old_access_keys; do\n      # If current access key is the same as the key supplied, do nothing.\n      if [ \"$access_key\" == \"${S3_ACCESS_KEY}\" ]; then\n        echo \"Current user and key pair exists.\"\n        continue\n      else\n        # If keys differ, remove previous key\n        radosgw-admin key rm --uid=${S3_USERNAME} --key-type=s3 --access-key=$access_key\n      fi\n    done\n  fi\n  # Perform one more additional check to account for scenarios where multiple\n  # key pairs existed previously, but one existing key was the supplied key\n  current_access_key=$(radosgw-admin user info --uid=${S3_USERNAME} \\\n    | jq -r '.keys[].access_key' || true)\n  # If the supplied key does not exist, modify the user\n  if [[ -z ${current_access_key} ]]; then\n    # Modify user with new access and secret keys\n    echo \"Updating existing user's key pair\"\n    radosgw-admin user modify \\\n      --uid=${S3_USERNAME}\\\n      --access-key ${S3_ACCESS_KEY} \\\n      --secret-key ${S3_SECRET_KEY}\n  fi\n}\n",
      "create_template.sh": "#!/bin/bash\n\n\nset -ex\n\n\ncurl -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" \\\n   -XPUT \\\n   \"${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_template/fluent\" \\\n   -H 'Content-Type: application/json' -d '{\"index_patterns\":\"logstash-*\",\"mappings\":{\"properties\":{\"kubernetes\":{\"properties\":{\"container_name\":{\"index\":false,\"type\":\"keyword\"},\"docker_id\":{\"index\":false,\"type\":\"keyword\"},\"host\":{\"index\":false,\"type\":\"keyword\"},\"namespace_name\":{\"index\":false,\"type\":\"keyword\"},\"pod_id\":{\"index\":false,\"type\":\"keyword\"},\"pod_name\":{\"index\":false,\"type\":\"keyword\"}}}}},\"settings\":{\"index\":{\"number_of_shards\":1}}}'\n\ncurl -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" \\\n   -XPUT \\\n   \"${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}/_ilm/policy/delete_all_indexes\" \\\n   -H 'Content-Type: application/json' -d '{\"policy\":{\"phases\":{\"delete\":{\"actions\":{\"delete\":{}},\"min_age\":\"14d\"}}}}'\n",
      "verify-repositories.sh": "#!/bin/bash\n\n\n\n\nset -ex\n\nfunction verify_snapshot_repository() {\n  curl -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" \\\n    -XPOST \"${ELASTICSEARCH_HOST}/_snapshot/$1/_verify\"\n}\n\nrepositories=$(curl -K- <<< \"--user ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\" \\\n                \"${ELASTICSEARCH_HOST}/_snapshot\" | jq -r 'keys | @sh')\n\nrepositories=$(echo $repositories | sed \"s/'//g\") # Strip single quotes from jq output\n\nfor repository in $repositories; do\n  error=$(verify_snapshot_repository $repository | jq -r '.error' )\n  if [ $error == \"null\" ]; then\n    echo \"$repository is verified.\"\n  else\n    echo \"Error for $repository: $(echo $error | jq -r)\"\n    exit 1;\n  fi\ndone\n",
      "image-repo-sync.sh": "#!/bin/sh\nset -ex\n\nIFS=','; for IMAGE in ${IMAGE_SYNC_LIST}; do\n  docker pull ${IMAGE}\n  docker tag ${IMAGE} ${LOCAL_REPO}/${IMAGE}\n  docker push ${LOCAL_REPO}/${IMAGE}\ndone\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-release-name-elasticsearch-client",
      "namespace": "GosxAPP0Y"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-create-elasticsearch-templates",
      "namespace": "GosxAPP0Y"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-release-name-test",
      "namespace": "GosxAPP0Y"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-release-name-elasticsearch-data",
      "namespace": "GosxAPP0Y"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-release-name-elasticsearch-client",
      "namespace": "GosxAPP0Y"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-release-name-elasticsearch-client"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-elasticsearch-client",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-create-elasticsearch-templates",
      "namespace": "GosxAPP0Y"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-create-elasticsearch-templates"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "create-elasticsearch-templates",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-release-name-test",
      "namespace": "GosxAPP0Y"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-release-name-test"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-test",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-release-name-elasticsearch-data",
      "namespace": "GosxAPP0Y"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-release-name-elasticsearch-data"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-elasticsearch-data",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "elasticsearch-data"
    },
    "spec": {
      "ports": [
        {
          "name": "transport",
          "port": 9300
        }
      ],
      "selector": {
        "release_group": "release-name",
        "application": "elasticsearch",
        "component": "data"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "elasticsearch-discovery"
    },
    "spec": {
      "ports": [
        {
          "name": "transport",
          "port": 9300
        }
      ],
      "selector": {
        "release_group": "release-name",
        "application": "elasticsearch",
        "component": "master"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "elasticsearch"
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80
        },
        {
          "name": "https",
          "port": 443
        }
      ],
      "selector": {
        "app": "ingress-api"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "elasticsearch-logging"
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80
        }
      ],
      "selector": {
        "release_group": "release-name",
        "application": "elasticsearch",
        "component": "client"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "elasticsearch-client",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      },
      "labels": {
        "release_group": "release-name",
        "application": "elasticsearch",
        "component": "client"
      }
    },
    "spec": {
      "replicas": 3,
      "selector": {
        "matchLabels": {
          "release_group": "release-name",
          "application": "elasticsearch",
          "component": "client"
        }
      },
      "revisionHistoryLimit": 3,
      "strategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "maxUnavailable": 1,
          "maxSurge": 3
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "elasticsearch",
            "component": "client"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": "",
            "configmap-bin-hash": "1616c61378d64f4d79ec4e29c13a98725d0d4583548a27f4276937f963a28e49",
            "configmap-etc-hash": "e37787cee70ef81ea5eb6cb9fa092650f5bdffaaada5894d7a3adeed0bb9f4cd",
            "container.apparmor.security.beta.kubernetes.io/elasticsearch-client": "runtime/default"
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 0
          },
          "serviceAccountName": "release-name-elasticsearch-client",
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "release_group",
                          "operator": "In",
                          "values": [
                            "release-name"
                          ]
                        },
                        {
                          "key": "application",
                          "operator": "In",
                          "values": [
                            "elasticsearch"
                          ]
                        },
                        {
                          "key": "component",
                          "operator": "In",
                          "values": [
                            "client"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 10
                }
              ]
            }
          },
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "terminationGracePeriodSeconds": 600,
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:elasticsearch-discovery"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            },
            {
              "name": "memory-map-increase",
              "image": "docker.io/openstackhelm/heat:newton-ubuntu_xenial",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "privileged": true,
                "readOnlyRootFilesystem": true
              },
              "command": [
                "sysctl",
                "-w",
                "vm.max_map_count=262144"
              ]
            }
          ],
          "containers": [
            {
              "name": "apache-proxy",
              "image": "docker.io/httpd:2.4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "command": [
                "/tmp/apache.sh",
                "start"
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 80
                }
              ],
              "readinessProbe": {
                "tcpSocket": {
                  "port": 80
                },
                "initialDelaySeconds": 20,
                "periodSeconds": 10
              },
              "env": [
                {
                  "name": "ELASTICSEARCH_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "elasticsearch-user-secrets",
                      "key": "ELASTICSEARCH_USERNAME"
                    }
                  }
                },
                {
                  "name": "ELASTICSEARCH_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "elasticsearch-user-secrets",
                      "key": "ELASTICSEARCH_PASSWORD"
                    }
                  }
                },
                {
                  "name": "ELASTICSEARCH_LOGGING_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "elasticsearch-user-secrets",
                      "key": "ELASTICSEARCH_LOGGING_USERNAME"
                    }
                  }
                },
                {
                  "name": "ELASTICSEARCH_LOGGING_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "elasticsearch-user-secrets",
                      "key": "ELASTICSEARCH_LOGGING_PASSWORD"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "elasticsearch-bin",
                  "mountPath": "/tmp/apache.sh",
                  "subPath": "apache.sh",
                  "readOnly": true
                },
                {
                  "name": "elasticsearch-etc",
                  "mountPath": "/usr/local/apache2/conf/httpd.conf",
                  "subPath": "httpd.conf",
                  "readOnly": true
                }
              ]
            },
            {
              "name": "elasticsearch-client",
              "image": "docker.io/openstackhelm/elasticsearch-s3:latest-7_6_2",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "capabilities": {
                  "add": [
                    "IPC_LOCK",
                    "SYS_RESOURCE"
                  ]
                },
                "privileged": true,
                "readOnlyRootFilesystem": false
              },
              "command": [
                "/tmp/elasticsearch.sh",
                "start"
              ],
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/tmp/elasticsearch.sh",
                      "stop"
                    ]
                  }
                }
              },
              "ports": [
                {
                  "name": "http",
                  "containerPort": 80
                },
                {
                  "name": "transport",
                  "containerPort": 9300
                }
              ],
              "livenessProbe": {
                "tcpSocket": {
                  "port": 9300
                },
                "initialDelaySeconds": 20,
                "periodSeconds": 10
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/_cluster/health",
                  "port": 9200
                }
              },
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "NODE_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NODE_MASTER",
                  "value": "false"
                },
                {
                  "name": "NODE_INGEST",
                  "value": "true"
                },
                {
                  "name": "NODE_DATA",
                  "value": "false"
                },
                {
                  "name": "NODE_GATEWAY",
                  "value": "false"
                },
                {
                  "name": "HTTP_ENABLE",
                  "value": "true"
                },
                {
                  "name": "DISCOVERY_SERVICE",
                  "value": "elasticsearch-discovery"
                },
                {
                  "name": "ES_JAVA_OPTS",
                  "value": "-Xms256m -Xmx256m"
                }
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "elasticsearch-logs",
                  "mountPath": "/logs"
                },
                {
                  "name": "elasticsearch-bin",
                  "mountPath": "/tmp/elasticsearch.sh",
                  "subPath": "elasticsearch.sh",
                  "readOnly": true
                },
                {
                  "name": "elasticsearch-etc",
                  "mountPath": "/usr/share/elasticsearch/config/elasticsearch.yml",
                  "subPath": "elasticsearch.yml",
                  "readOnly": true
                },
                {
                  "name": "elasticsearch-etc",
                  "mountPath": "/usr/share/elasticsearch/config/log4j2.properties",
                  "subPath": "log4j2.properties",
                  "readOnly": true
                },
                {
                  "name": "elasticsearch-etc",
                  "mountPath": "/usr/share/elasticsearch/config/jvm.options",
                  "subPath": "jvm.options",
                  "readOnly": true
                },
                {
                  "name": "storage",
                  "mountPath": "/data"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "elasticsearch-logs",
              "emptyDir": {}
            },
            {
              "name": "elasticsearch-bin",
              "configMap": {
                "name": "elasticsearch-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "elasticsearch-etc",
              "secret": {
                "secretName": "elasticsearch-etc",
                "defaultMode": 292
              }
            },
            {
              "name": "storage",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "elasticsearch-data",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      },
      "labels": {
        "release_group": "release-name",
        "application": "elasticsearch",
        "component": "data"
      }
    },
    "spec": {
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "serviceName": "elasticsearch-data",
      "podManagementPolicy": "Parallel",
      "replicas": 3,
      "selector": {
        "matchLabels": {
          "release_group": "release-name",
          "application": "elasticsearch",
          "component": "data"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "elasticsearch",
            "component": "data"
          },
          "annotations": {
            "container.apparmor.security.beta.kubernetes.io/elasticsearch-data": "runtime/default",
            "openstackhelm.openstack.org/release_uuid": "",
            "configmap-bin-hash": "1616c61378d64f4d79ec4e29c13a98725d0d4583548a27f4276937f963a28e49",
            "configmap-etc-hash": "e37787cee70ef81ea5eb6cb9fa092650f5bdffaaada5894d7a3adeed0bb9f4cd"
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 0
          },
          "serviceAccountName": "release-name-elasticsearch-data",
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "release_group",
                          "operator": "In",
                          "values": [
                            "release-name"
                          ]
                        },
                        {
                          "key": "application",
                          "operator": "In",
                          "values": [
                            "elasticsearch"
                          ]
                        },
                        {
                          "key": "component",
                          "operator": "In",
                          "values": [
                            "data"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 10
                }
              ]
            }
          },
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "terminationGracePeriodSeconds": 1200,
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:elasticsearch-logging,default:elasticsearch-discovery"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            },
            {
              "name": "memory-map-increase",
              "image": "docker.io/openstackhelm/heat:newton-ubuntu_xenial",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "privileged": true,
                "readOnlyRootFilesystem": true
              },
              "command": [
                "sysctl",
                "-w",
                "vm.max_map_count=262144"
              ]
            },
            {
              "name": "elasticsearch-perms",
              "image": "docker.io/openstackhelm/elasticsearch-s3:latest-7_6_2",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "readOnlyRootFilesystem": true
              },
              "command": [
                "chown",
                "-R",
                "elasticsearch:",
                "/data"
              ],
              "volumeMounts": [
                {
                  "name": "storage",
                  "mountPath": "/data"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "elasticsearch-data",
              "image": "docker.io/openstackhelm/elasticsearch-s3:latest-7_6_2",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "privileged": true,
                "readOnlyRootFilesystem": true,
                "allowPrivilegeEscalation": false
              },
              "command": [
                "/tmp/elasticsearch.sh",
                "start_data_node"
              ],
              "ports": [
                {
                  "name": "transport",
                  "containerPort": 9300
                }
              ],
              "readinessProbe": {
                "tcpSocket": {
                  "port": 9300
                },
                "initialDelaySeconds": 20,
                "periodSeconds": 10
              },
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "NODE_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "ELASTICSEARCH_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "elasticsearch-user-secrets",
                      "key": "ELASTICSEARCH_USERNAME"
                    }
                  }
                },
                {
                  "name": "ELASTICSEARCH_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "elasticsearch-user-secrets",
                      "key": "ELASTICSEARCH_PASSWORD"
                    }
                  }
                },
                {
                  "name": "ELASTICSEARCH_ENDPOINT",
                  "value": "elasticsearch-logging.default.svc.cluster.local:80"
                },
                {
                  "name": "NODE_MASTER",
                  "value": "false"
                },
                {
                  "name": "NODE_INGEST",
                  "value": "false"
                },
                {
                  "name": "NODE_DATA",
                  "value": "true"
                },
                {
                  "name": "NODE_GATEWAY",
                  "value": "false"
                },
                {
                  "name": "HTTP_ENABLE",
                  "value": "false"
                },
                {
                  "name": "ES_JAVA_OPTS",
                  "value": "-Xms256m -Xmx256m"
                },
                {
                  "name": "DISCOVERY_SERVICE",
                  "value": "elasticsearch-discovery"
                }
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "elasticsearch-logs",
                  "mountPath": "/logs"
                },
                {
                  "name": "elasticsearch-bin",
                  "mountPath": "/tmp/elasticsearch.sh",
                  "subPath": "elasticsearch.sh",
                  "readOnly": true
                },
                {
                  "name": "elasticsearch-etc",
                  "mountPath": "/usr/share/elasticsearch/config/elasticsearch.yml",
                  "subPath": "elasticsearch.yml",
                  "readOnly": true
                },
                {
                  "name": "elasticsearch-etc",
                  "mountPath": "/usr/share/elasticsearch/config/log4j2.properties",
                  "subPath": "log4j2.properties",
                  "readOnly": true
                },
                {
                  "name": "elasticsearch-etc",
                  "mountPath": "/usr/share/elasticsearch/config/jvm.options",
                  "subPath": "jvm.options",
                  "readOnly": true
                },
                {
                  "name": "storage",
                  "mountPath": "/data"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "elasticsearch-logs",
              "emptyDir": {}
            },
            {
              "name": "elasticsearch-bin",
              "configMap": {
                "name": "elasticsearch-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "elasticsearch-etc",
              "secret": {
                "secretName": "elasticsearch-etc",
                "defaultMode": 292
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "storage"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "5Gi"
              }
            },
            "storageClassName": "general"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "elasticsearch-master",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      },
      "labels": {
        "release_group": "release-name",
        "application": "elasticsearch",
        "component": "master"
      }
    },
    "spec": {
      "serviceName": "elasticsearch-discovery",
      "podManagementPolicy": "Parallel",
      "replicas": 3,
      "selector": {
        "matchLabels": {
          "release_group": "release-name",
          "application": "elasticsearch",
          "component": "master"
        }
      },
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "elasticsearch",
            "component": "master"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": "",
            "configmap-bin-hash": "1616c61378d64f4d79ec4e29c13a98725d0d4583548a27f4276937f963a28e49",
            "configmap-etc-hash": "e37787cee70ef81ea5eb6cb9fa092650f5bdffaaada5894d7a3adeed0bb9f4cd",
            "container.apparmor.security.beta.kubernetes.io/elasticsearch-master": "runtime/default"
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 0
          },
          "serviceAccountName": "elasticsearch-master",
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "release_group",
                          "operator": "In",
                          "values": [
                            "release-name"
                          ]
                        },
                        {
                          "key": "application",
                          "operator": "In",
                          "values": [
                            "elasticsearch"
                          ]
                        },
                        {
                          "key": "component",
                          "operator": "In",
                          "values": [
                            "master"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 10
                }
              ]
            }
          },
          "terminationGracePeriodSeconds": 600,
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            },
            {
              "name": "memory-map-increase",
              "image": "docker.io/openstackhelm/heat:newton-ubuntu_xenial",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "privileged": true,
                "readOnlyRootFilesystem": true
              },
              "command": [
                "sysctl",
                "-w",
                "vm.max_map_count=262144"
              ]
            },
            {
              "name": "elasticsearch-perms",
              "image": "docker.io/openstackhelm/elasticsearch-s3:latest-7_6_2",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "readOnlyRootFilesystem": true
              },
              "command": [
                "chown",
                "-R",
                "elasticsearch:",
                "/data"
              ],
              "volumeMounts": [
                {
                  "name": "storage",
                  "mountPath": "/data"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "elasticsearch-master",
              "securityContext": {
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "privileged": true,
                "readOnlyRootFilesystem": true,
                "allowPrivilegeEscalation": false
              },
              "image": "docker.io/openstackhelm/elasticsearch-s3:latest-7_6_2",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/tmp/elasticsearch.sh",
                "start_master_node"
              ],
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/tmp/elasticsearch.sh",
                      "stop"
                    ]
                  }
                }
              },
              "ports": [
                {
                  "name": "transport",
                  "containerPort": 9300
                }
              ],
              "readinessProbe": {
                "tcpSocket": {
                  "port": 9300
                },
                "initialDelaySeconds": 20,
                "periodSeconds": 10
              },
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "NODE_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NODE_MASTER",
                  "value": "true"
                },
                {
                  "name": "NODE_INGEST",
                  "value": "false"
                },
                {
                  "name": "NODE_DATA",
                  "value": "false"
                },
                {
                  "name": "NODE_GATEWAY",
                  "value": "false"
                },
                {
                  "name": "HTTP_ENABLE",
                  "value": "false"
                },
                {
                  "name": "DISCOVERY_SERVICE",
                  "value": "elasticsearch-discovery"
                },
                {
                  "name": "ES_JAVA_OPTS",
                  "value": "-Xms256m -Xmx256m"
                }
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "elasticsearch-logs",
                  "mountPath": "/logs"
                },
                {
                  "name": "elasticsearch-bin",
                  "mountPath": "/tmp/elasticsearch.sh",
                  "subPath": "elasticsearch.sh",
                  "readOnly": true
                },
                {
                  "name": "elasticsearch-etc",
                  "mountPath": "/usr/share/elasticsearch/config/elasticsearch.yml",
                  "subPath": "elasticsearch.yml",
                  "readOnly": true
                },
                {
                  "name": "elasticsearch-etc",
                  "mountPath": "/usr/share/elasticsearch/config/log4j2.properties",
                  "subPath": "log4j2.properties",
                  "readOnly": true
                },
                {
                  "name": "elasticsearch-etc",
                  "mountPath": "/usr/share/elasticsearch/config/jvm.options",
                  "subPath": "jvm.options",
                  "readOnly": true
                },
                {
                  "name": "storage",
                  "mountPath": "/data"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "elasticsearch-logs",
              "emptyDir": {}
            },
            {
              "name": "elasticsearch-bin",
              "configMap": {
                "name": "elasticsearch-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "elasticsearch-etc",
              "secret": {
                "secretName": "elasticsearch-etc",
                "defaultMode": 292
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "storage"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            },
            "storageClassName": "general"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "create-elasticsearch-templates",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "elasticsearch",
            "component": "create-templates"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": ""
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 0
          },
          "serviceAccountName": "create-elasticsearch-templates",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:elasticsearch-logging"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "elasticsearch-s3-bucket"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "create-elasticsearch-templates",
              "image": "docker.io/openstackhelm/elasticsearch-s3:latest-7_6_2",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "env": [
                {
                  "name": "ELASTICSEARCH_HOST",
                  "value": "elasticsearch-logging"
                },
                {
                  "name": "ELASTICSEARCH_PORT",
                  "value": "80"
                },
                {
                  "name": "ELASTICSEARCH_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "elasticsearch-user-secrets",
                      "key": "ELASTICSEARCH_USERNAME"
                    }
                  }
                },
                {
                  "name": "ELASTICSEARCH_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "elasticsearch-user-secrets",
                      "key": "ELASTICSEARCH_PASSWORD"
                    }
                  }
                }
              ],
              "command": [
                "/tmp/create_template.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "elasticsearch-bin",
                  "mountPath": "/tmp/create_template.sh",
                  "subPath": "create_template.sh",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "elasticsearch-bin",
              "configMap": {
                "name": "elasticsearch-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1beta1",
    "kind": "Ingress",
    "metadata": {
      "name": "elasticsearch",
      "annotations": {
        "kubernetes.io/ingress.class": "nginx",
        "nginx.ingress.kubernetes.io/rewrite-target": "/"
      }
    },
    "spec": {
      "rules": [
        {
          "host": "elasticsearch",
          "http": {
            "paths": [
              {
                "path": "/",
                "backend": {
                  "serviceName": "elasticsearch-logging",
                  "servicePort": "http"
                }
              }
            ]
          }
        },
        {
          "host": "elasticsearch.default",
          "http": {
            "paths": [
              {
                "path": "/",
                "backend": {
                  "serviceName": "elasticsearch-logging",
                  "servicePort": "http"
                }
              }
            ]
          }
        },
        {
          "host": "elasticsearch.default.svc.cluster.local",
          "http": {
            "paths": [
              {
                "path": "/",
                "backend": {
                  "serviceName": "elasticsearch-logging",
                  "servicePort": "http"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-test",
      "labels": {
        "release_group": "release-name",
        "application": "elasticsearch",
        "component": "test"
      },
      "annotations": {
        "helm.sh/hook": "test-success",
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "securityContext": {
        "runAsUser": 0
      },
      "serviceAccountName": "release-name-test",
      "nodeSelector": {
        "openstack-control-plane": "enabled"
      },
      "restartPolicy": "Never",
      "initContainers": [
        {
          "name": "init",
          "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
          "imagePullPolicy": "IfNotPresent",
          "securityContext": {
            "allowPrivilegeEscalation": false,
            "readOnlyRootFilesystem": true,
            "runAsUser": 65534
          },
          "env": [
            {
              "name": "POD_NAME",
              "valueFrom": {
                "fieldRef": {
                  "apiVersion": "v1",
                  "fieldPath": "metadata.name"
                }
              }
            },
            {
              "name": "NAMESPACE",
              "valueFrom": {
                "fieldRef": {
                  "apiVersion": "v1",
                  "fieldPath": "metadata.namespace"
                }
              }
            },
            {
              "name": "INTERFACE_NAME",
              "value": "eth0"
            },
            {
              "name": "PATH",
              "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
            },
            {
              "name": "DEPENDENCY_SERVICE",
              "value": ""
            },
            {
              "name": "DEPENDENCY_JOBS",
              "value": "create-elasticsearch-templates"
            },
            {
              "name": "DEPENDENCY_DAEMONSET",
              "value": ""
            },
            {
              "name": "DEPENDENCY_CONTAINER",
              "value": ""
            },
            {
              "name": "DEPENDENCY_POD_JSON",
              "value": ""
            },
            {
              "name": "DEPENDENCY_CUSTOM_RESOURCE",
              "value": ""
            }
          ],
          "command": [
            "kubernetes-entrypoint"
          ],
          "volumeMounts": []
        }
      ],
      "containers": [
        {
          "name": "elasticsearch-helm-tests",
          "image": "docker.io/openstackhelm/elasticsearch-s3:latest-7_6_2",
          "imagePullPolicy": "IfNotPresent",
          "command": [
            "/tmp/helm-tests.sh"
          ],
          "env": [
            {
              "name": "ELASTICSEARCH_USERNAME",
              "valueFrom": {
                "secretKeyRef": {
                  "name": "elasticsearch-user-secrets",
                  "key": "ELASTICSEARCH_USERNAME"
                }
              }
            },
            {
              "name": "ELASTICSEARCH_PASSWORD",
              "valueFrom": {
                "secretKeyRef": {
                  "name": "elasticsearch-user-secrets",
                  "key": "ELASTICSEARCH_PASSWORD"
                }
              }
            },
            {
              "name": "ELASTICSEARCH_ENDPOINT",
              "value": "elasticsearch-logging.default.svc.cluster.local:80"
            }
          ],
          "volumeMounts": [
            {
              "name": "pod-tmp",
              "mountPath": "/tmp"
            },
            {
              "name": "elasticsearch-bin",
              "mountPath": "/tmp/helm-tests.sh",
              "subPath": "helm-tests.sh",
              "readOnly": true
            }
          ]
        }
      ],
      "volumes": [
        {
          "name": "pod-tmp",
          "emptyDir": {}
        },
        {
          "name": "elasticsearch-bin",
          "configMap": {
            "name": "elasticsearch-bin",
            "defaultMode": 365
          }
        }
      ]
    }
  }
]