[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "app": "release-name-dex",
        "chart": "dex-2.13.23",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "labels": {
        "app": "release-name-dex",
        "chart": "dex-2.13.23",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex"
    },
    "data": {
      "config.yaml": "Cmlzc3VlcjogaHR0cHM6Ly88bm8gdmFsdWU+CnN0b3JhZ2U6CiAgdHlwZToga3ViZXJuZXRlcwogIGNvbmZpZzoKICAgIGluQ2x1c3RlcjogdHJ1ZQpsb2dnZXI6CiAgbGV2ZWw6IGRlYnVnCndlYjoKICBodHRwOiAwLjAuMC4wOjgwODAKZ3JwYzoKICBhZGRyOiAwLjAuMC4wOjUwMDAKICB0bHNDZXJ0OiAvZXRjL2RleC90bHMvZ3JwYy9zZXJ2ZXIvdGxzLmNydAogIHRsc0tleTogL2V0Yy9kZXgvdGxzL2dycGMvc2VydmVyL3Rscy5rZXkKICB0bHNDbGllbnRDQTogL2V0Yy9kZXgvdGxzL2dycGMvY2EvdGxzLmNydApjb25uZWN0b3JzOgpvYXV0aDI6CiAgc2tpcEFwcHJvdmFsU2NyZWVuOiB0cnVlCgplbmFibGVQYXNzd29yZERCOiBmYWxzZQoKZnJvbnRlbmQ6CiAgdGhlbWU6IGNsb3VkYmVlcwo="
    }
  },
  {
    "kind": "ClusterRole",
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "metadata": {
      "labels": {
        "app": "release-name-dex",
        "chart": "dex-2.13.23",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets",
          "configmaps"
        ],
        "verbs": [
          "create",
          "get",
          "delete"
        ]
      },
      {
        "apiGroups": [
          "dex.coreos.com"
        ],
        "resources": [
          "*"
        ],
        "verbs": [
          "*"
        ]
      },
      {
        "apiGroups": [
          "apiextensions.k8s.io"
        ],
        "resources": [
          "customresourcedefinitions"
        ],
        "resourceNames": [],
        "verbs": [
          "create"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "app": "release-name-dex",
        "chart": "dex-2.13.23",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-dex"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-dex",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "dex",
      "labels": {
        "chart": "dex-2.13.23"
      },
      "annotations": {
        "fabric8.io/expose": "true",
        "fabric8.io/ingress.annotations": "kubernetes.io/ingress.class: nginx"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http",
          "port": 80,
          "targetPort": 8080
        },
        {
          "name": "grpc",
          "port": 5000,
          "targetPort": 5000
        }
      ],
      "selector": {
        "app": "release-name-dex"
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-dex",
      "labels": {
        "draft": "draft-app",
        "chart": "dex-2.13.23",
        "heritage": "Helm",
        "release": "release-name"
      }
    },
    "spec": {
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "draft": "draft-app",
            "app": "release-name-dex"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-dex",
          "containers": [
            {
              "name": "dex",
              "image": "gcr.io/jenkinsxio/dex:2.13.23",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/local/bin/dex",
                "serve",
                "/etc/dex/cfg/config.yaml"
              ],
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "256Mi"
                },
                "requests": {
                  "cpu": "80m",
                  "memory": "128Mi"
                }
              },
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                },
                {
                  "name": "grpc",
                  "containerPort": 5000,
                  "protocol": "TCP"
                }
              ],
              "env": [],
              "volumeMounts": [
                {
                  "mountPath": "/etc/dex/cfg",
                  "name": "config"
                },
                {
                  "mountPath": "/etc/dex/tls/grpc/server",
                  "name": "grpc-tls-server"
                },
                {
                  "mountPath": "/etc/dex/tls/grpc/ca",
                  "name": "grpc-tls-ca"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 8080
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 8080
                },
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1
              }
            }
          ],
          "terminationGracePeriodSeconds": 10,
          "volumes": [
            {
              "secret": {
                "defaultMode": 420,
                "items": [
                  {
                    "key": "config.yaml",
                    "path": "config.yaml"
                  }
                ],
                "secretName": "release-name-dex"
              },
              "name": "config"
            },
            {
              "name": "grpc-tls-server",
              "secret": {
                "defaultMode": 420,
                "secretName": "dex-grpc-server-cert"
              }
            },
            {
              "name": "grpc-tls-ca",
              "secret": {
                "defaultMode": 420,
                "secretName": "dex-grpc-ca"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "cert-manager.io/v1alpha2",
    "kind": "Certificate",
    "metadata": {
      "name": "release-name-dex-grpc-server-cert",
      "labels": {
        "app": "release-name-dex",
        "chart": "dex-2.13.23",
        "heritage": "Helm",
        "release": "release-name"
      }
    },
    "spec": {
      "secretName": "dex-grpc-server-cert",
      "issuerRef": {
        "name": "dex-grpc-cert-issuer",
        "kind": "Issuer"
      },
      "commonName": "dex.default",
      "dnsName": [
        "dex.default"
      ]
    }
  },
  {
    "apiVersion": "cert-manager.io/v1alpha2",
    "kind": "Issuer",
    "metadata": {
      "name": "dex-grpc-cert-issuer",
      "labels": {
        "app": "release-name-dex",
        "chart": "dex-2.13.23",
        "heritage": "Helm",
        "release": "release-name"
      }
    },
    "spec": {
      "ca": {
        "secretName": "dex-grpc-ca"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "release-name-dex",
        "chart": "dex-2.13.23",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex-openssl-config",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade"
      }
    },
    "data": {
      "openssl.conf": "# OpenSSL configuration file.\n# Adapted from https://github.com/coreos/matchbox/blob/master/examples/etc/matchbox/openssl.conf\n\n# default environment variable values\nSAN =\n\n[ ca ]\n# `man ca`\ndefault_ca = CA_default\n\n[ CA_default ]\n# Directory and file locations.\ndir               = .\ncerts             = $dir/certs\ncrl_dir           = $dir/crl\nnew_certs_dir     = $dir/newcerts\ndatabase          = $dir/index.txt\nserial            = $dir/serial\n# certificate revocation lists.\ncrlnumber         = $dir/crlnumber\ncrl               = $dir/crl/intermediate-ca.crl\ncrl_extensions    = crl_ext\ndefault_crl_days  = 30\ndefault_md        = sha256\n\nname_opt          = ca_default\ncert_opt          = ca_default\ndefault_days      = 375\npreserve          = no\npolicy            = policy_loose\n\n[ policy_loose ]\n# Allow the CA to sign a range of certificates.\ncountryName             = optional\nstateOrProvinceName     = optional\nlocalityName            = optional\norganizationName        = optional\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[ req ]\n# `man req`\ndefault_bits        = 4096\ndistinguished_name  = req_distinguished_name\nstring_mask         = utf8only\ndefault_md          = sha256\n\n[ req_distinguished_name ]\ncountryName                    = Country Name (2 letter code)\nstateOrProvinceName            = State or Province Name\nlocalityName                   = Locality Name\n0.organizationName             = Organization Name\norganizationalUnitName         = Organizational Unit Name\ncommonName                     = Common Name\n\n# Certificate extensions (`man x509v3_config`)\n\n[ v3_ca ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true, pathlen:0\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[ usr_cert ]\nbasicConstraints = CA:FALSE\nnsCertType = client\nnsComment = \"OpenSSL Generated Client Certificate\"\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth\n\n[ server_cert ]\nbasicConstraints = CA:FALSE\nnsCertType = server\nnsComment = \"OpenSSL Generated Server Certificate\"\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer:always\nkeyUsage = critical, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = $ENV::SAN\n"
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-weight": "2",
        "helm.sh/hook-delete-policy": "hook-succeeded"
      },
      "name": "release-name-dex-grpc-certs",
      "labels": {
        "app": "release-name-dex",
        "chart": "dex-2.13.23",
        "heritage": "Helm",
        "release": "release-name",
        "component": "job"
      }
    },
    "spec": {
      "activeDeadlineSeconds": 300,
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-dex",
            "release": "release-name",
            "component": "job"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-dex",
          "restartPolicy": "OnFailure",
          "containers": [
            {
              "name": "main",
              "image": "gcr.io/jenkinsxio/openssl:2.13.23",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-exc",
                "export CONFIG=/etc/dex/tls/grpc/openssl.conf;\ncat << EOF > san.cnf\nDNS.1:dex\nEOF\nexport SAN=$(cat san.cnf |  paste -sd \",\" -)\n\n# Creating basic files/directories\nmkdir -p {certs,crl,newcerts}\ntouch index.txt\ntouch index.txt.attr\necho 1000 > serial\n# CA private key (unencrypted)\nopenssl genrsa -out ca.key 4096;\n# Certificate Authority (self-signed certificate)\nopenssl req -config $CONFIG -new -x509 -days 3650 -sha256 -key ca.key -extensions v3_ca -out ca.crt -subj \"/CN=dex-grpc-ca\";\n\n# Store the CA certificate and key in a secret\nnotfound=false\ncaNamespace=default\nkubectl get secret dex-grpc-ca --namespace $caNamespace || notfound=true\nif $notfound; then\n  kubectl create secret tls dex-grpc-ca --namespace $caNamespace --cert=ca.crt --key=ca.key;\nfi\nreleaseNamespace=default\nif [ \"$caNamespace\" != \"$releaseNamespace\" ]; then \n  found=true\n  kubectl get secret dex-grpc-ca --namespace $releaseNamespace || found=false\n  if $found; then\n      kubectl delete secret dex-grpc-ca --namespace $releaseNamespace \n  fi\n  kubectl get secret dex-grpc-ca --namespace $caNamespace --export -o yaml | kubectl apply --namespace $releaseNamespace -f -\nfi\n"
              ],
              "volumeMounts": [
                {
                  "name": "openssl-config",
                  "mountPath": "/etc/dex/tls/grpc"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "openssl-config",
              "configMap": {
                "name": "release-name-dex-openssl-config"
              }
            }
          ]
        }
      }
    }
  }
]