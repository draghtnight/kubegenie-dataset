apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: release-name-dex
    chart: dex-2.13.23
    heritage: Helm
    release: release-name
  name: release-name-dex
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: release-name-dex
    chart: dex-2.13.23
    heritage: Helm
    release: release-name
  name: release-name-dex
data:
  config.yaml: Cmlzc3VlcjogaHR0cHM6Ly88bm8gdmFsdWU+CnN0b3JhZ2U6CiAgdHlwZToga3ViZXJuZXRlcwogIGNvbmZpZzoKICAgIGluQ2x1c3RlcjogdHJ1ZQpsb2dnZXI6CiAgbGV2ZWw6IGRlYnVnCndlYjoKICBodHRwOiAwLjAuMC4wOjgwODAKZ3JwYzoKICBhZGRyOiAwLjAuMC4wOjUwMDAKICB0bHNDZXJ0OiAvZXRjL2RleC90bHMvZ3JwYy9zZXJ2ZXIvdGxzLmNydAogIHRsc0tleTogL2V0Yy9kZXgvdGxzL2dycGMvc2VydmVyL3Rscy5rZXkKICB0bHNDbGllbnRDQTogL2V0Yy9kZXgvdGxzL2dycGMvY2EvdGxzLmNydApjb25uZWN0b3JzOgpvYXV0aDI6CiAgc2tpcEFwcHJvdmFsU2NyZWVuOiB0cnVlCgplbmFibGVQYXNzd29yZERCOiBmYWxzZQoKZnJvbnRlbmQ6CiAgdGhlbWU6IGNsb3VkYmVlcwo=
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  labels:
    app: release-name-dex
    chart: dex-2.13.23
    heritage: Helm
    release: release-name
  name: release-name-dex
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
      - configmaps
    verbs:
      - create
      - get
      - delete
  - apiGroups:
      - dex.coreos.com
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    resourceNames: []
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: release-name-dex
    chart: dex-2.13.23
    heritage: Helm
    release: release-name
  name: release-name-dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-dex
subjects:
  - kind: ServiceAccount
    name: release-name-dex
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  labels:
    chart: dex-2.13.23
  annotations:
    fabric8.io/expose: "true"
    fabric8.io/ingress.annotations: 'kubernetes.io/ingress.class: nginx'
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
    - name: grpc
      port: 5000
      targetPort: 5000
  selector:
    app: release-name-dex
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-dex
  labels:
    draft: draft-app
    chart: dex-2.13.23
    heritage: Helm
    release: release-name
spec:
  replicas: 1
  template:
    metadata:
      labels:
        draft: draft-app
        app: release-name-dex
    spec:
      serviceAccountName: release-name-dex
      containers:
        - name: dex
          image: gcr.io/jenkinsxio/dex:2.13.23
          imagePullPolicy: IfNotPresent
          command:
            - /usr/local/bin/dex
            - serve
            - /etc/dex/cfg/config.yaml
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 80m
              memory: 128Mi
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 5000
              protocol: TCP
          env: []
          volumeMounts:
            - mountPath: /etc/dex/cfg
              name: config
            - mountPath: /etc/dex/tls/grpc/server
              name: grpc-tls-server
            - mountPath: /etc/dex/tls/grpc/ca
              name: grpc-tls-ca
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      terminationGracePeriodSeconds: 10
      volumes:
        - secret:
            defaultMode: 420
            items:
              - key: config.yaml
                path: config.yaml
            secretName: release-name-dex
          name: config
        - name: grpc-tls-server
          secret:
            defaultMode: 420
            secretName: dex-grpc-server-cert
        - name: grpc-tls-ca
          secret:
            defaultMode: 420
            secretName: dex-grpc-ca
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: release-name-dex-grpc-server-cert
  labels:
    app: release-name-dex
    chart: dex-2.13.23
    heritage: Helm
    release: release-name
spec:
  secretName: dex-grpc-server-cert
  issuerRef:
    name: dex-grpc-cert-issuer
    kind: Issuer
  commonName: dex.default
  dnsName:
    - dex.default
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: dex-grpc-cert-issuer
  labels:
    app: release-name-dex
    chart: dex-2.13.23
    heritage: Helm
    release: release-name
spec:
  ca:
    secretName: dex-grpc-ca
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: release-name-dex
    chart: dex-2.13.23
    heritage: Helm
    release: release-name
  name: release-name-dex-openssl-config
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
data:
  openssl.conf: |
    # OpenSSL configuration file.
    # Adapted from https://github.com/coreos/matchbox/blob/master/examples/etc/matchbox/openssl.conf

    # default environment variable values
    SAN =

    [ ca ]
    # `man ca`
    default_ca = CA_default

    [ CA_default ]
    # Directory and file locations.
    dir               = .
    certs             = $dir/certs
    crl_dir           = $dir/crl
    new_certs_dir     = $dir/newcerts
    database          = $dir/index.txt
    serial            = $dir/serial
    # certificate revocation lists.
    crlnumber         = $dir/crlnumber
    crl               = $dir/crl/intermediate-ca.crl
    crl_extensions    = crl_ext
    default_crl_days  = 30
    default_md        = sha256

    name_opt          = ca_default
    cert_opt          = ca_default
    default_days      = 375
    preserve          = no
    policy            = policy_loose

    [ policy_loose ]
    # Allow the CA to sign a range of certificates.
    countryName             = optional
    stateOrProvinceName     = optional
    localityName            = optional
    organizationName        = optional
    organizationalUnitName  = optional
    commonName              = supplied
    emailAddress            = optional

    [ req ]
    # `man req`
    default_bits        = 4096
    distinguished_name  = req_distinguished_name
    string_mask         = utf8only
    default_md          = sha256

    [ req_distinguished_name ]
    countryName                    = Country Name (2 letter code)
    stateOrProvinceName            = State or Province Name
    localityName                   = Locality Name
    0.organizationName             = Organization Name
    organizationalUnitName         = Organizational Unit Name
    commonName                     = Common Name

    # Certificate extensions (`man x509v3_config`)

    [ v3_ca ]
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid:always,issuer
    basicConstraints = critical, CA:true, pathlen:0
    keyUsage = critical, digitalSignature, cRLSign, keyCertSign

    [ usr_cert ]
    basicConstraints = CA:FALSE
    nsCertType = client
    nsComment = "OpenSSL Generated Client Certificate"
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid,issuer
    keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
    extendedKeyUsage = clientAuth

    [ server_cert ]
    basicConstraints = CA:FALSE
    nsCertType = server
    nsComment = "OpenSSL Generated Server Certificate"
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid,issuer:always
    keyUsage = critical, digitalSignature, keyEncipherment
    extendedKeyUsage = serverAuth
    subjectAltName = $ENV::SAN
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "2"
    helm.sh/hook-delete-policy: hook-succeeded
  name: release-name-dex-grpc-certs
  labels:
    app: release-name-dex
    chart: dex-2.13.23
    heritage: Helm
    release: release-name
    component: job
spec:
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app: release-name-dex
        release: release-name
        component: job
    spec:
      serviceAccountName: release-name-dex
      restartPolicy: OnFailure
      containers:
        - name: main
          image: gcr.io/jenkinsxio/openssl:2.13.23
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -exc
            - "export CONFIG=/etc/dex/tls/grpc/openssl.conf;\ncat << EOF > san.cnf\nDNS.1:dex\nEOF\nexport SAN=$(cat san.cnf |  paste -sd \",\" -)\n\n# Creating basic files/directories\nmkdir -p {certs,crl,newcerts}\ntouch index.txt\ntouch index.txt.attr\necho 1000 > serial\n# CA private key (unencrypted)\nopenssl genrsa -out ca.key 4096;\n# Certificate Authority (self-signed certificate)\nopenssl req -config $CONFIG -new -x509 -days 3650 -sha256 -key ca.key -extensions v3_ca -out ca.crt -subj \"/CN=dex-grpc-ca\";\n\n# Store the CA certificate and key in a secret\nnotfound=false\ncaNamespace=default\nkubectl get secret dex-grpc-ca --namespace $caNamespace || notfound=true\nif $notfound; then\n  kubectl create secret tls dex-grpc-ca --namespace $caNamespace --cert=ca.crt --key=ca.key;\nfi\nreleaseNamespace=default\nif [ \"$caNamespace\" != \"$releaseNamespace\" ]; then \n  found=true\n  kubectl get secret dex-grpc-ca --namespace $releaseNamespace || found=false\n  if $found; then\n      kubectl delete secret dex-grpc-ca --namespace $releaseNamespace \n  fi\n  kubectl get secret dex-grpc-ca --namespace $caNamespace --export -o yaml | kubectl apply --namespace $releaseNamespace -f -\nfi\n"
          volumeMounts:
            - name: openssl-config
              mountPath: /etc/dex/tls/grpc
      volumes:
        - name: openssl-config
          configMap:
            name: release-name-dex-openssl-config
