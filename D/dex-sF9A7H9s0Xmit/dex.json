[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex"
    },
    "data": {
      "config.yaml": "Y29ubmVjdG9yczogbnVsbAplbmFibGVQYXNzd29yZERCOiB0cnVlCmdycGM6CiAgYWRkcjogMC4wLjAuMDo1MDAwCiAgdGxzQ2VydDogL2V0Yy9kZXgvdGxzL2dycGMvc2VydmVyL3Rscy5jcnQKICB0bHNDbGllbnRDQTogL2V0Yy9kZXgvdGxzL2dycGMvY2EvdGxzLmNydAogIHRsc0tleTogL2V0Yy9kZXgvdGxzL2dycGMvc2VydmVyL3Rscy5rZXkKaXNzdWVyOiBodHRwOi8vZGV4LmlvOjgwODAKbG9nZ2VyOgogIGxldmVsOiBkZWJ1ZwpvYXV0aDI6CiAgc2tpcEFwcHJvdmFsU2NyZWVuOiB0cnVlCnN0b3JhZ2U6CiAgY29uZmlnOgogICAgaW5DbHVzdGVyOiB0cnVlCiAgdHlwZToga3ViZXJuZXRlcwp3ZWI6CiAgaHR0cDogMC4wLjAuMDo4MDgw"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex"
    },
    "rules": [
      {
        "apiGroups": [
          "dex.coreos.com"
        ],
        "resources": [
          "*"
        ],
        "verbs": [
          "*"
        ]
      },
      {
        "apiGroups": [
          "apiextensions.k8s.io"
        ],
        "resources": [
          "customresourcedefinitions"
        ],
        "verbs": [
          "create"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-dex"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-dex",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex",
      "namespace": "sF9A7H9s0Xmit"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps",
          "secrets"
        ],
        "verbs": [
          "create",
          "delete"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex",
      "namespace": "sF9A7H9s0Xmit"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-dex"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-dex",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-dex",
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "sessionAffinity": "None",
      "ports": [
        {
          "name": "http",
          "port": null,
          "targetPort": null
        },
        {
          "name": "http",
          "port": 8080,
          "targetPort": 8080
        },
        {
          "name": "grpc",
          "port": null,
          "targetPort": null
        },
        {
          "name": "grpc",
          "port": 5000,
          "targetPort": 5000
        }
      ],
      "selector": {
        "app": "dex",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-dex",
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "heritage": "Helm",
        "release": "release-name"
      }
    },
    "spec": {
      "replicas": 1,
      "strategy": {
        "rollingUpdate": {
          "maxSurge": 0,
          "maxUnavailable": 1
        },
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app": "dex",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "dex",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "874a75544f35a1f453e24011dd5d0331936e6afafdf19be0ba4993043abba004"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-dex",
          "nodeSelector": {},
          "containers": [
            {
              "name": "main",
              "image": "quay.io/dexidp/dex:v2.16.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/local/bin/dex",
                "serve",
                "/etc/dex/cfg/config.yaml"
              ],
              "resources": null,
              "ports": [
                {
                  "name": "http"
                },
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP"
                },
                {
                  "name": "grpc"
                },
                {
                  "containerPort": 5000,
                  "name": "grpc",
                  "protocol": "TCP"
                }
              ],
              "env": [],
              "volumeMounts": [
                {
                  "mountPath": "/etc/dex/cfg",
                  "name": "config"
                },
                {
                  "mountPath": "/etc/dex/tls/https/server",
                  "name": "https-tls"
                },
                {
                  "mountPath": "/etc/dex/tls/grpc/server",
                  "name": "grpc-tls-server"
                },
                {
                  "mountPath": "/etc/dex/tls/grpc/ca",
                  "name": "grpc-tls-ca"
                }
              ]
            }
          ],
          "volumes": [
            {
              "secret": {
                "defaultMode": 420,
                "items": [
                  {
                    "key": "config.yaml",
                    "path": "config.yaml"
                  }
                ],
                "secretName": "release-name-dex"
              },
              "name": "config"
            },
            {
              "name": "https-tls",
              "secret": {
                "defaultMode": 420,
                "secretName": "dex-web-server-tls"
              }
            },
            {
              "name": "grpc-tls-server",
              "secret": {
                "defaultMode": 420,
                "secretName": "dex-grpc-server-tls"
              }
            },
            {
              "name": "grpc-tls-ca",
              "secret": {
                "defaultMode": 420,
                "secretName": "dex-grpc-ca"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "heritage": "Helm",
        "release": "release-name"
      },
      "name": "release-name-dex-openssl-config",
      "annotations": {
        "helm.sh/hook": "post-install",
        "helm.sh/hook-weight": "1",
        "helm.sh/hook-delete-policy": "hook-succeeded"
      }
    },
    "data": {
      "openssl.conf": "# OpenSSL configuration file.\n# Adapted from https://github.com/coreos/matchbox/blob/master/examples/etc/matchbox/openssl.conf\n\n# default environment variable values\nSAN =\n\n[ ca ]\n# `man ca`\ndefault_ca = CA_default\n\n[ CA_default ]\n# Directory and file locations.\ndir               = .\ncerts             = $dir/certs\ncrl_dir           = $dir/crl\nnew_certs_dir     = $dir/newcerts\ndatabase          = $dir/index.txt\nserial            = $dir/serial\n# certificate revocation lists.\ncrlnumber         = $dir/crlnumber\ncrl               = $dir/crl/intermediate-ca.crl\ncrl_extensions    = crl_ext\ndefault_crl_days  = 30\ndefault_md        = sha256\n\nname_opt          = ca_default\ncert_opt          = ca_default\ndefault_days      = 375\npreserve          = no\npolicy            = policy_loose\n\n[ policy_loose ]\n# Allow the CA to sign a range of certificates.\ncountryName             = optional\nstateOrProvinceName     = optional\nlocalityName            = optional\norganizationName        = optional\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[ req ]\n# `man req`\ndefault_bits        = 4096\ndistinguished_name  = req_distinguished_name\nstring_mask         = utf8only\ndefault_md          = sha256\n\n[ req_distinguished_name ]\ncountryName                    = Country Name (2 letter code)\nstateOrProvinceName            = State or Province Name\nlocalityName                   = Locality Name\n0.organizationName             = Organization Name\norganizationalUnitName         = Organizational Unit Name\ncommonName                     = Common Name\n\n# Certificate extensions (`man x509v3_config`)\n\n[ v3_ca ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true, pathlen:0\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[ usr_cert ]\nbasicConstraints = CA:FALSE\nnsCertType = client\nnsComment = \"OpenSSL Generated Client Certificate\"\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth\n\n[ server_cert ]\nbasicConstraints = CA:FALSE\nnsCertType = server\nnsComment = \"OpenSSL Generated Server Certificate\"\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer:always\nkeyUsage = critical, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = $ENV::SAN\n"
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "post-install",
        "helm.sh/hook-weight": "2",
        "helm.sh/hook-delete-policy": "hook-succeeded"
      },
      "name": "release-name-dex-grpc-certs",
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "heritage": "Helm",
        "release": "release-name",
        "component": "job"
      }
    },
    "spec": {
      "activeDeadlineSeconds": 300,
      "template": {
        "metadata": {
          "labels": {
            "app": "dex",
            "release": "release-name",
            "component": "job"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-dex",
          "restartPolicy": "OnFailure",
          "containers": [
            {
              "name": "main",
              "image": "registry.cn-hangzhou.aliyuncs.com/kubeapps/gcr-kubernetes-dashboard-init-amd64:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-exc",
                "export CONFIG=/etc/dex/tls/grpc/openssl.conf;\ncat << EOF > san.cnf\nDNS.1:dex.io\nDNS.2:dex.io\nEOF\nexport SAN=$(cat san.cnf |  paste -sd \",\" -)\n\n# Creating basic files/directories\nmkdir -p {certs,crl,newcerts}\ntouch index.txt\ntouch index.txt.attr\necho 1000 > serial\n# CA private key (unencrypted)\nopenssl genrsa -out ca.key 4096;\n# Certificate Authority (self-signed certificate)\nopenssl req -config $CONFIG -new -x509 -days 3650 -sha256 -key ca.key -extensions v3_ca -out ca.crt -subj \"/CN=grpc-ca\";\n# Server private key (unencrypted)\nopenssl genrsa -out server.key 2048;\n# Server certificate signing request (CSR)\nopenssl req -config $CONFIG -new -sha256 -key server.key -out server.csr -subj \"/CN=grpc-server\";\n# Certificate Authority signs CSR to grant a certificate\nopenssl ca -batch -config $CONFIG  -extensions server_cert -days 365 -notext -md sha256 -in server.csr -out server.crt -cert ca.crt -keyfile ca.key;\n# Client private key (unencrypted)\nopenssl genrsa -out client.key 2048;\n# Signed client certificate signing request (CSR)\nopenssl req -config $CONFIG -new -sha256 -key client.key -out client.csr -subj \"/CN=grpc-client\";\n# Certificate Authority signs CSR to grant a certificate\nopenssl ca -batch -config $CONFIG -extensions usr_cert -days 365 -notext -md sha256 -in client.csr -out client.crt -cert ca.crt -keyfile ca.key;\n# Remove CSR's\nrm *.csr;\n\n# Cleanup the existing configmap and secrets\nkubectl delete configmap dex-grpc-ca --namespace default || true\nkubectl delete secret dex-grpc-ca dex-grpc-server-tls dex-grpc-client-tls --namespace default || true\nkubectl create configmap dex-grpc-ca --namespace default --from-file=ca.crt;\n# Store all certficates in secrets\nkubectl create secret tls dex-grpc-ca --namespace default --cert=ca.crt --key=ca.key;\nkubectl create secret tls dex-grpc-server-tls --namespace default --cert=server.crt --key=server.key;\nkubectl create secret tls dex-grpc-client-tls --namespace default --cert=client.crt --key=client.key;\n"
              ],
              "volumeMounts": [
                {
                  "name": "openssl-config",
                  "mountPath": "/etc/dex/tls/grpc"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "openssl-config",
              "configMap": {
                "name": "release-name-dex-openssl-config"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "annotations": {
        "helm.sh/hook": "post-install",
        "helm.sh/hook-weight": "1",
        "helm.sh/hook-delete-policy": "hook-succeeded"
      },
      "name": "release-name-dex-web-certs",
      "labels": {
        "app": "dex",
        "chart": "dex-1.2.1",
        "heritage": "Helm",
        "release": "release-name",
        "component": "job"
      }
    },
    "spec": {
      "activeDeadlineSeconds": 300,
      "template": {
        "metadata": {
          "labels": {
            "app": "dex",
            "release": "release-name",
            "component": "job"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-dex",
          "restartPolicy": "OnFailure",
          "containers": [
            {
              "name": "main",
              "image": "registry.cn-hangzhou.aliyuncs.com/kubeapps/gcr-kubernetes-dashboard-init-amd64:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-exc",
                "cat << EOF > req.cnf\n[req]\nreq_extensions = v3_req\ndistinguished_name = req_distinguished_name\n\n[req_distinguished_name]\n\n[ v3_req ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = dex.io\nDNS.2 = dex.io\nEOF\n\nopenssl genrsa -out ca-key.pem 2048;\nopenssl req -x509 -new -nodes -key ca-key.pem -days 10000 -out ca.pem -subj \"/CN=dex-ca\";\n\nopenssl genrsa -out key.pem 2048;\nopenssl req -new -key key.pem -out csr.pem -subj \"/CN=dex\" -config req.cnf;\nopenssl x509 -req -in csr.pem -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -days 10000 -extensions v3_req -extfile req.cnf;\n\nkubectl delete configmap \"dex-web-server-ca\" --namespace default || true\nkubectl delete secret \"dex-web-server-ca\" dex-web-server-tls --namespace default || true\n\nkubectl create configmap \"dex-web-server-ca\" --namespace default --from-file dex-ca.pem=ca.pem;\nkubectl create secret tls \"dex-web-server-ca\" --namespace default --cert=ca.pem --key=ca-key.pem;\nkubectl create secret tls dex-web-server-tls --namespace default --cert=cert.pem --key=key.pem;\n"
              ]
            }
          ]
        }
      }
    }
  }
]