apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-dex
  labels:
    app: release-name-dex
    env: dev
    chart: dex-1.2.0
    release: release-name
    heritage: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-dex
  labels:
    app: release-name-dex
    env: dev
    chart: dex-1.2.0
    release: release-name
    heritage: Helm
data:
  github-client-id: b3ZlcnJpZGUtbWU=
  github-client-secret: b3ZlcnJpZGUtbWU=
  google-client-id: b3ZlcnJpZGUtbWU=
  google-client-secret: b3ZlcnJpZGUtbWU=
  ldap-bindpw: b3ZlcnJpZGUtbWU=
  microsoft-application-id: b3ZlcnJpZGUtbWU=
  microsoft-client-secret: b3ZlcnJpZGUtbWU=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-dex
  labels:
    app: release-name-dex
    env: dev
    chart: dex-1.2.0
    release: release-name
    heritage: Helm
data:
  config.yaml: |-
    issuer: https://dex.example.com

    storage:
      type: kubernetes
      config:
        inCluster: true

    web:
      http: 0.0.0.0:5556

      # If enabled, be sure to configure tls settings above, or use a tool
      # such as let-encrypt to manage the certs.
      # Currently this chart does not support both http and https, and the port
      # is fixed to 5556
      #
      # https: 0.0.0.0:5556
      # tlsCert: /etc/dex/tls/tls.crt
      # tlsKey: /etc/dex/tls/tls.key

    frontend:
      theme: "coreos"
      issuer: "Example Co"
      issuerUrl: "https://example.com"
      logoUrl: https://example.com/images/logo-250x25.png

    expiry:
      signingKeys: "6h"
      idTokens: "24h"

    logger:
      level: debug
      format: json

    oauth2:
      responseTypes: ["code", "token", "id_token"]
      skipApprovalScreen: true

    # Remember you can have multiple connectors of the same 'type' (with different 'id's)
    # If you need e.g. logins with groups for two different Microsoft 'tenants'
    connectors:

    # GitHub configure 'OAuth Apps' -> 'New OAuth App', add callback URL
    # https://github.com/settings/developers
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $GITHUB_CLIENT_ID
        clientSecret: $GITHUB_CLIENT_SECRET
        redirectURI: https://dex.example.com/callback
        # 'orgs' can be used to map groups from Github
        # https://github.com/coreos/dex/blob/master/Documentation/connectors/github.md
        #orgs:
        #- name: foo
        #  teams:
        #  - team-red
        #  - team-blue
        #- name: bar

    # Google APIs account, 'Create Credentials' -> 'OAuth Client ID', add callback URL
    # https://console.developers.google.com/apis/credentials
    - type: oidc
      id: google
      name: Google
      config:
        issuer: https://accounts.google.com
        clientID: $GOOGLE_CLIENT_ID
        clientSecret: $GOOGLE_CLIENT_SECRET
        redirectURI: https://dex.example.com/callback
        # Google supports whitelisting allowed domains when using G Suite
        # (Google Apps). The following field can be set to a list of domains
        # that can log in:
        # hostedDomains:
        #  - example.com
        #  - other.example.com

    # Microsoft App Dev account, 'Add an app'
    # 'Application Secrets' -> 'Generate new password'
    # 'Platforms' -> 'Add Platform' -> 'Web', add the callback URL
    # https://apps.dev.microsoft.com/
    - type: microsoft
      id: microsoft
      name: Microsoft
      config:
        clientID: $MICROSOFT_APPLICATION_ID
        clientSecret: $MICROSOFT_CLIENT_SECRET
        redirectURI: https://dex.example.com/callback
        # Restrict access to one tenant
        # tenant: <tenant name> or <tenant uuid>
        # Restrict access to certain groups
        # groups:
        # - group-red
        # - group-blue

    # These may not match the schema used by your LDAP server
    # https://github.com/coreos/dex/blob/master/Documentation/connectors/ldap.md
    - type: ldap
      id: ldap
      name: "LDAP"
      config:
        host: ldap.example.com:389
        startTLS: true
        bindDN: "cn=serviceAccount,dc=example,dc=com"
        bindPW: $LDAP_BINDPW
        usernamePrompt: "Username"
        userSearch:
          # Query should be "(&(objectClass=inetorgperson)(cn=<username>))"
          baseDN: "ou=Users,dc=example,dc=com"
          filter: "(objectClass=inetorgperson)"
          username: cn
          # DN must be in capitals
          idAttr: DN
          emailAttr: mail
          nameAttr: displayName
        groupSearch:
          # Query should be "(&(objectClass=groupOfUniqueNames)(uniqueMember=<userAttr>))"
          baseDN: "ou=Groups,dc=example,dc=com"
          filter: "(objectClass=groupOfUniqueNames)"
          # DN must be in capitals
          userAttr: DN
          groupAttr: uniqueMember
          nameAttr: cn

    # The 'name' must match the k8s API server's 'oidc-client-id'
    staticClients:
    - id: my-cluster
      name: "my-cluster"
      secret: "pUBnBOY80SnXgjibTYM9ZWNzY2xreNGQok"
      redirectURIs:
      - https://login.example.com/callback/my-cluster

    enablePasswordDB: True
    staticPasswords:
    - email: "admin@example.com"
      # bcrypt hash of the string "password"
      hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
      username: "admin"
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: release-name-dex
rules:
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: release-name-dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-dex
subjects:
  - kind: ServiceAccount
    name: release-name-dex
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: release-name-dex
  namespace: xw4kX8E9IX
rules:
  - apiGroups:
      - dex.coreos.com
    resources:
      - authcodes
      - authrequests
      - connectors
      - oauth2clients
      - offlinesessionses
      - passwords
      - refreshtokens
      - signingkeies
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: release-name-dex
  namespace: xw4kX8E9IX
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-dex
subjects:
  - kind: ServiceAccount
    name: release-name-dex
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-dex
  labels:
    app: dex
    env: dev
    chart: dex-1.2.0
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5556
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: dex
    release: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-dex
  labels:
    app: dex
    env: dev
    chart: dex-1.2.0
    release: release-name
    heritage: Helm
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
spec:
  replicas: 1
  minReadySeconds: 30
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  selector:
    matchLabels:
      app: dex
      env: dev
      release: release-name
  template:
    metadata:
      labels:
        app: dex
        env: dev
        release: release-name
      annotations:
        checksum/config: 19738f3d3e76c0bbe013a58feac0939a974eaca0d21a51dab69236d6f5b21c8c
    spec:
      volumes:
        - name: config
          configMap:
            name: release-name-dex
            items:
              - key: config.yaml
                path: config.yaml
      serviceAccountName: release-name-dex
      containers:
        - name: dex
          image: quay.io/dexidp/dex:v2.20.0
          imagePullPolicy: IfNotPresent
          command:
            - /usr/local/bin/dex
            - serve
            - /etc/dex/config.yaml
          env:
            - name: GITHUB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: release-name-dex
                  key: github-client-id
            - name: GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-dex
                  key: github-client-secret
            - name: GOOGLE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: release-name-dex
                  key: google-client-id
            - name: GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-dex
                  key: google-client-secret
            - name: LDAP_BINDPW
              valueFrom:
                secretKeyRef:
                  name: release-name-dex
                  key: ldap-bindpw
            - name: MICROSOFT_APPLICATION_ID
              valueFrom:
                secretKeyRef:
                  name: release-name-dex
                  key: microsoft-application-id
            - name: MICROSOFT_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-dex
                  key: microsoft-client-secret
          ports:
            - name: http
              containerPort: 5556
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5556
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5556
            initialDelaySeconds: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/dex
          resources:
            seccompProfile:
              type: RuntimeDefault
