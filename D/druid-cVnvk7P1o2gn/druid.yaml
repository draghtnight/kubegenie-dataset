apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: release-name-zookeeper
  namespace: default
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-6.4.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: zookeeper
  maxUnavailable: 1
---
kind: Secret
apiVersion: v1
metadata:
  name: release-name-druid-broker-config
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: broker
stringData: {}
---
kind: Secret
apiVersion: v1
metadata:
  name: release-name-druid-coordinator-config
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
stringData: {}
---
kind: Secret
apiVersion: v1
metadata:
  name: release-name-druid-router-config
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: router
stringData: {}
---
kind: Secret
apiVersion: v1
metadata:
  name: release-name-druid-config
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
stringData: {}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: release-name-druid-broker-config
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: broker
data: {}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: release-name-druid-config
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data: {}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: release-name-druid-coordinator-config
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
data: {}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: release-name-druid-router-config
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: router
data:
  druid_router_managementProxy_enabled: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-zookeeper-headless
  namespace: cVnvk7P1o2gn
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-6.4.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: zookeeper
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-zookeeper
  namespace: cVnvk7P1o2gn
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-6.4.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: zookeeper
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-druid-broker
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: broker
spec:
  type: ClusterIP
  ports:
    - port: 8082
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: broker
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-druid-coordinator
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
spec:
  type: ClusterIP
  ports:
    - port: 8081
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: coordinator
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-druid-router
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: router
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: router
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-druid-broker
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: broker
  annotations:
    checksum/configmap: c41154fa8d9bd61c953a66ff28f98833dcffe4db509b977ddf27a605f277ee07
    checksum/secret: 9fe0d6961e5ab3b105315102ea953fd2b0d0e63056ac28fdc7bed1c47c9c06bd
    checksum/configmap-broker: 43fab9df62971baee8e3922afaff4dca150e2af363b4aecc19bb572bad689064
    checksum/secret-broker: c160169781433b320fda1d3b5c062308913915e1fbee379a658ae33dc4df876e
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: druid
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: broker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: druid
        helm.sh/chart: druid-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: broker
    spec:
      containers:
        - name: release-name-druid-broker
          image: apache/druid:0.21.1
          imagePullPolicy: IfNotPresent
          args:
            - broker
          env:
            - name: druid_extensions_loadList
              value: '["druid-basic-security","druid-bloom-filter","druid-datasketches","druid-histogram","druid-kinesis-indexing-service","druid-lookups-cached-global","druid-lookups-cached-single","druid-pac4j","druid-parquet-extensions","druid-s3-extensions","druid-stats","postgresql-metadata-storage"]'
          envFrom:
            - configMapRef:
                name: release-name-druid-config
            - configMapRef:
                name: release-name-druid-broker-config
            - secretRef:
                name: release-name-druid-config
            - secretRef:
                name: release-name-druid-broker-config
          ports:
            - name: http
              containerPort: 8082
              protocol: TCP
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-druid-coordinator
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
  annotations:
    checksum/configmap: c41154fa8d9bd61c953a66ff28f98833dcffe4db509b977ddf27a605f277ee07
    checksum/secret: 9fe0d6961e5ab3b105315102ea953fd2b0d0e63056ac28fdc7bed1c47c9c06bd
    checksum/configmap-coordinator: 4120226697dd171b6160414483e6adcd27390f051cc50638db9463dbedc616e1
    checksum/secret-coordinator: 3c00d417800650a2e8bdbbdbcdd86cd4b815f657c59eaa0a1a5c88148255679b
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: druid
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: coordinator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: druid
        helm.sh/chart: druid-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: coordinator
    spec:
      containers:
        - name: release-name-druid-coordinator
          image: apache/druid:0.21.1
          imagePullPolicy: IfNotPresent
          args:
            - coordinator
          env:
            - name: druid_extensions_loadList
              value: '["druid-basic-security","druid-bloom-filter","druid-datasketches","druid-histogram","druid-kinesis-indexing-service","druid-lookups-cached-global","druid-lookups-cached-single","druid-pac4j","druid-parquet-extensions","druid-s3-extensions","druid-stats","postgresql-metadata-storage"]'
          envFrom:
            - configMapRef:
                name: release-name-druid-config
            - configMapRef:
                name: release-name-druid-coordinator-config
            - secretRef:
                name: release-name-druid-config
            - secretRef:
                name: release-name-druid-coordinator-config
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /status/health
              port: 8081
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 15
            successThreshold: 1
            failureThreshold: 15
          readinessProbe:
            httpGet:
              path: /status/selfDiscovered
              port: 8081
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 15
            successThreshold: 1
            failureThreshold: 5
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-druid-router
  labels:
    app.kubernetes.io/name: druid
    helm.sh/chart: druid-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: router
  annotations:
    checksum/configmap: c41154fa8d9bd61c953a66ff28f98833dcffe4db509b977ddf27a605f277ee07
    checksum/secret: 9fe0d6961e5ab3b105315102ea953fd2b0d0e63056ac28fdc7bed1c47c9c06bd
    checksum/configmap-router: 0588de5296c11074c41fac1961d85125ff4d031c8555ee3fea150b4afc816f25
    checksum/secret-router: ad0b7b040f6eb524a00efa5794fbe624cb13641191267822911f16421e768854
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: druid
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: router
  template:
    metadata:
      labels:
        app.kubernetes.io/name: druid
        helm.sh/chart: druid-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: router
    spec:
      containers:
        - name: release-name-druid-router
          image: apache/druid:0.21.1
          imagePullPolicy: IfNotPresent
          args:
            - router
          env:
            - name: druid_extensions_loadList
              value: '["druid-basic-security","druid-bloom-filter","druid-datasketches","druid-histogram","druid-kinesis-indexing-service","druid-lookups-cached-global","druid-lookups-cached-single","druid-pac4j","druid-parquet-extensions","druid-s3-extensions","druid-stats","postgresql-metadata-storage"]'
            - name: druid_router_tierToBrokerMap
              value: '{}'
          envFrom:
            - configMapRef:
                name: release-name-druid-config
            - configMapRef:
                name: release-name-druid-router-config
            - secretRef:
                name: release-name-druid-config
            - secretRef:
                name: release-name-druid-router-config
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-zookeeper
  namespace: cVnvk7P1o2gn
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-6.4.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  serviceName: release-name-zookeeper-headless
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: zookeeper
  template:
    metadata:
      name: release-name-zookeeper
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-6.4.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1001
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: zookeeper
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: zookeeper
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.6.2-debian-10-r124
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11481
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - bash
            - -ec
            - |
              # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
              # check ZOO_SERVER_ID in persistent volume via myid
              # if not present, set based on POD hostname
              if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
                export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
              else
                HOSTNAME=`hostname -s`
                if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
                  ORD=${BASH_REMATCH[2]}
                  export ZOO_SERVER_ID=$((ORD + 1 ))
                else
                  echo "Failed to get index from hostname $HOST"
                  exit 1
                fi
              fi
              exec /entrypoint.sh /run.sh
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: srvr, mntr, ruok
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "yes"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: release-name-zookeeper-0.release-name-zookeeper-headless.default.svc.cluster.local:2888:3888::1 release-name-zookeeper-1.release-name-zookeeper-headless.default.svc.cluster.local:2888:3888::2 release-name-zookeeper-2.release-name-zookeeper-headless.default.svc.cluster.local:2888:3888::3
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: ERROR
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
      volumes: null
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
