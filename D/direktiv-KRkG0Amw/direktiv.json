[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx",
      "namespace": "KRkG0Amw"
    },
    "automountServiceAccountToken": true
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "component": "server",
        "app": "prometheus",
        "release": "release-name",
        "chart": "prometheus-14.7.1",
        "heritage": "Helm"
      },
      "name": "release-name-prometheus-server",
      "namespace": "KRkG0Amw",
      "annotations": {}
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-direktiv",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-direktiv-functions-pod",
      "namespace": "direktiv-services-direktiv",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-direktiv-functions",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-direktiv",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "db": "aG9zdD1wb3N0Z3Jlcy1wb3N0Z3Jlc3FsLWhhLXBncG9vbC5wb3N0Z3JlcyBwb3J0PTU0MzIgdXNlcj1kaXJla3RpdiBkYm5hbWU9ZGlyZWt0aXYgcGFzc3dvcmQ9ZGlyZWt0aXZkaXJla3RpdiBzc2xtb2RlPXJlcXVpcmUg",
      "key": "MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MTI="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-direktiv-secrets-functions",
      "namespace": "direktiv-services-direktiv",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "db": "aG9zdD1yZWxlYXNlLW5hbWUtZGlyZWt0aXYtc3VwcG9ydC5kZWZhdWx0IHBvcnQ9NTQzMiB1c2VyPWRpcmVrdGl2IGRibmFtZT1kaXJla3RpdiBwYXNzd29yZD1kaXJla3RpdmRpcmVrdGl2IHNzbG1vZGU9ZGlzYWJsZQ=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx-controller",
      "namespace": "KRkG0Amw"
    },
    "data": {
      "allow-snippet-annotations": "true",
      "proxy-buffer-size": "16k"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "component": "server",
        "app": "prometheus",
        "release": "release-name",
        "chart": "prometheus-14.7.1",
        "heritage": "Helm"
      },
      "name": "release-name-prometheus-server",
      "namespace": "KRkG0Amw"
    },
    "data": {
      "alerting_rules.yml": "{}\n",
      "alerts": "{}\n",
      "prometheus.yml": "global:\n  evaluation_interval: 1m\n  scrape_interval: 1m\n  scrape_timeout: 10s\nrule_files:\n- /etc/config/recording_rules.yml\n- /etc/config/alerting_rules.yml\n- /etc/config/rules\n- /etc/config/alerts\nscrape_configs:\n- job_name: prometheus\n  static_configs:\n  - targets:\n    - localhost:9090\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  job_name: kubernetes-apiservers\n  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - action: keep\n    regex: default;kubernetes;https\n    source_labels:\n    - __meta_kubernetes_namespace\n    - __meta_kubernetes_service_name\n    - __meta_kubernetes_endpoint_port_name\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  job_name: kubernetes-nodes\n  kubernetes_sd_configs:\n  - role: node\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n  - replacement: kubernetes.default.svc:443\n    target_label: __address__\n  - regex: (.+)\n    replacement: /api/v1/nodes/$1/proxy/metrics\n    source_labels:\n    - __meta_kubernetes_node_name\n    target_label: __metrics_path__\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  job_name: kubernetes-nodes-cadvisor\n  kubernetes_sd_configs:\n  - role: node\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n  - replacement: kubernetes.default.svc:443\n    target_label: __address__\n  - regex: (.+)\n    replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\n    source_labels:\n    - __meta_kubernetes_node_name\n    target_label: __metrics_path__\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n- job_name: kubernetes-service-endpoints\n  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scrape\n  - action: replace\n    regex: (https?)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scheme\n    target_label: __scheme__\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n    source_labels:\n    - __address__\n    - __meta_kubernetes_service_annotation_prometheus_io_port\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)\n    replacement: __param_$1\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: kubernetes_namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_service_name\n    target_label: kubernetes_name\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: kubernetes_node\n- job_name: kubernetes-service-endpoints-slow\n  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow\n  - action: replace\n    regex: (https?)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scheme\n    target_label: __scheme__\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n    source_labels:\n    - __address__\n    - __meta_kubernetes_service_annotation_prometheus_io_port\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)\n    replacement: __param_$1\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: kubernetes_namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_service_name\n    target_label: kubernetes_name\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: kubernetes_node\n  scrape_interval: 5m\n  scrape_timeout: 30s\n- honor_labels: true\n  job_name: prometheus-pushgateway\n  kubernetes_sd_configs:\n  - role: service\n  relabel_configs:\n  - action: keep\n    regex: pushgateway\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_probe\n- job_name: kubernetes-services\n  kubernetes_sd_configs:\n  - role: service\n  metrics_path: /probe\n  params:\n    module:\n    - http_2xx\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_probe\n  - source_labels:\n    - __address__\n    target_label: __param_target\n  - replacement: blackbox\n    target_label: __address__\n  - source_labels:\n    - __param_target\n    target_label: instance\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n  - source_labels:\n    - __meta_kubernetes_namespace\n    target_label: kubernetes_namespace\n  - source_labels:\n    - __meta_kubernetes_service_name\n    target_label: kubernetes_name\n- job_name: kubernetes-pods\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scrape\n  - action: replace\n    regex: (https?)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scheme\n    target_label: __scheme__\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n    source_labels:\n    - __address__\n    - __meta_kubernetes_pod_annotation_prometheus_io_port\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)\n    replacement: __param_$1\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: kubernetes_namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: kubernetes_pod_name\n  - action: drop\n    regex: Pending|Succeeded|Failed|Completed\n    source_labels:\n    - __meta_kubernetes_pod_phase\n- job_name: kubernetes-pods-slow\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow\n  - action: replace\n    regex: (https?)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scheme\n    target_label: __scheme__\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n    source_labels:\n    - __address__\n    - __meta_kubernetes_pod_annotation_prometheus_io_port\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)\n    replacement: __param_$1\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: kubernetes_namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: kubernetes_pod_name\n  - action: drop\n    regex: Pending|Succeeded|Failed|Completed\n    source_labels:\n    - __meta_kubernetes_pod_phase\n  scrape_interval: 5m\n  scrape_timeout: 30s\n",
      "recording_rules.yml": "{}\n",
      "rules": "{}\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-direktiv-config-flow",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "flow-config.yaml": "functions-service: release-name-direktiv-functions.default\nfunctions-timeout: 7200\nflow-service: release-name-direktiv-flow.default\nprometheus-backend: release-name-direktiv-prometheus-server\nopentelemetry-backend: \"\"\neventing: false\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-direktiv-config-functions",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "functions-config.yaml": "# logging format json/console\nlogging: json\n\n# ingress class for knative functions\ningress-class: contour.ingress.networking.knative.dev\n\n# address of flow engine\nflow-service: release-name-direktiv-flow.default\n\n# address of opentelemetry backend\nopentelemetry-backend: \"\"\n\n# maximum timeout, needs to be in below knative max\nrequest-timeout: 7200\n\n# name of the service account to run the pods\nservice-account: release-name-direktiv-functions-pod\n\n# name of the namespace to use for the services/functions\nnamespace: direktiv-services-direktiv\n\n# pod sidecar name\nsidecar: docker.io/direktiv/sidecar:v0.6.6\n\n# init pod name\ninit-pod: docker.io/direktiv/direktiv-init-pod:v0.6.6\n\n# max number of revisions to keep per namespace or global\nkeep-revisions: 3\n\n# max number of parallel jobs per namespace\nmax-jobs: 5\n\n# kubernetes 1.20 auto cleans up jobs, for < 1.19, should be enabled\npod-cleaner: true\n\n# max number of pods per service\nmax-scale: 3\n\n# rollout seconds for knative services\nrollout-duration: 10\n\n# shaping network traffic if supported by network plugin\nnet-shape: 10M\n\n# default concurrency level\nconcurrency: 100\n\n# max ephemeral storage in MB\nstorage: 100\n\n# runtime for services, e.g. gvisor\nruntime: default\n\n# max memory/cpu value defined for different service sizes\n# Memory in Megabyte, 0 is no limit\nmemory:\n  small: 512\n  medium: 1024\n  large: 2048\ncpu:\n  small: 0.25\n  medium: 0.5\n  large: 1\n\n# proxy values\nproxy:\n  no: \"\"\n  https: \"\"\n  http: \"\"\n\n# additional volumes\nextraVolumes:\n\n# additional sidecar containers\nextraContainers:\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "name": "release-name-ingress-nginx"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps",
          "endpoints",
          "nodes",
          "pods",
          "secrets",
          "namespaces"
        ],
        "verbs": [
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "nodes"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "services"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "networking.k8s.io"
        ],
        "resources": [
          "ingresses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create",
          "patch"
        ]
      },
      {
        "apiGroups": [
          "networking.k8s.io"
        ],
        "resources": [
          "ingresses/status"
        ],
        "verbs": [
          "update"
        ]
      },
      {
        "apiGroups": [
          "networking.k8s.io"
        ],
        "resources": [
          "ingressclasses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "component": "server",
        "app": "prometheus",
        "release": "release-name",
        "chart": "prometheus-14.7.1",
        "heritage": "Helm"
      },
      "name": "release-name-prometheus-server"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "nodes",
          "nodes/proxy",
          "nodes/metrics",
          "services",
          "endpoints",
          "pods",
          "ingresses",
          "configmaps"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "extensions",
          "networking.k8s.io"
        ],
        "resources": [
          "ingresses/status",
          "ingresses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "nonResourceURLs": [
          "/metrics"
        ],
        "verbs": [
          "get"
        ]
      }
    ]
  },
  {
    "kind": "ClusterRole",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-direktiv-role-cluster",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "serving.knative.dev"
        ],
        "resources": [
          "*"
        ],
        "verbs": [
          "*"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "get",
          "list",
          "update",
          "delete",
          "create",
          "deletecollection"
        ]
      },
      {
        "apiGroups": [
          "batch"
        ],
        "resources": [
          "jobs"
        ],
        "verbs": [
          "get",
          "list",
          "create",
          "delete",
          "deletecollection",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "pods"
        ],
        "verbs": [
          "list",
          "watch",
          "log"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "pods/log"
        ],
        "verbs": [
          "list",
          "watch",
          "get"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "name": "release-name-ingress-nginx"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-ingress-nginx"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-ingress-nginx",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "component": "server",
        "app": "prometheus",
        "release": "release-name",
        "chart": "prometheus-14.7.1",
        "heritage": "Helm"
      },
      "name": "release-name-prometheus-server"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-prometheus-server",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-prometheus-server"
    }
  },
  {
    "kind": "ClusterRoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-direktiv-functions-binding"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-direktiv-functions",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "kind": "ClusterRole",
      "name": "release-name-direktiv-role-cluster",
      "apiGroup": "rbac.authorization.k8s.io"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx",
      "namespace": "KRkG0Amw"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "namespaces"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps",
          "pods",
          "secrets",
          "endpoints"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "services"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "networking.k8s.io"
        ],
        "resources": [
          "ingresses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "networking.k8s.io"
        ],
        "resources": [
          "ingresses/status"
        ],
        "verbs": [
          "update"
        ]
      },
      {
        "apiGroups": [
          "networking.k8s.io"
        ],
        "resources": [
          "ingressclasses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps"
        ],
        "resourceNames": [
          "ingress-controller-leader"
        ],
        "verbs": [
          "get",
          "update"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create",
          "patch"
        ]
      }
    ]
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-direktiv-functions-role",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps"
        ],
        "verbs": [
          "get",
          "list",
          "update"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx",
      "namespace": "KRkG0Amw"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-ingress-nginx"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-ingress-nginx",
        "namespace": "default"
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-direktiv-functions-binding-lock"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-direktiv-functions",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "kind": "Role",
      "name": "release-name-direktiv-functions-role",
      "apiGroup": "rbac.authorization.k8s.io"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx-controller-admission",
      "namespace": "KRkG0Amw"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "https-webhook",
          "port": 443,
          "targetPort": "webhook",
          "appProtocol": "https"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "controller"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": null,
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx-controller",
      "namespace": "KRkG0Amw"
    },
    "spec": {
      "type": "LoadBalancer",
      "ipFamilyPolicy": "SingleStack",
      "ipFamilies": [
        "IPv4"
      ],
      "ports": [
        {
          "name": "http",
          "port": 80,
          "protocol": "TCP",
          "targetPort": "http",
          "appProtocol": "http"
        },
        {
          "name": "https",
          "port": 443,
          "protocol": "TCP",
          "targetPort": "https",
          "appProtocol": "https"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "controller"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "component": "server",
        "app": "prometheus",
        "release": "release-name",
        "chart": "prometheus-14.7.1",
        "heritage": "Helm"
      },
      "name": "release-name-prometheus-server",
      "namespace": "KRkG0Amw"
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80,
          "protocol": "TCP",
          "targetPort": 9090
        }
      ],
      "selector": {
        "component": "server",
        "app": "prometheus",
        "release": "release-name"
      },
      "sessionAffinity": "None",
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-direktiv-api",
      "annotations": {
        "kubernetes.io/ingress.class": "nginx"
      },
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv-api",
        "app.kubernetes.io/instance": "release-name-api",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "name": "api",
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "direktiv-api",
        "app.kubernetes.io/instance": "release-name-api"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-direktiv-flow",
      "annotations": {
        "kubernetes.io/ingress.class": "nginx"
      },
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 6666,
          "name": "flow",
          "protocol": "TCP"
        },
        {
          "port": 7777,
          "name": "internal",
          "protocol": "TCP"
        },
        {
          "port": 9999,
          "name": "vars",
          "protocol": "TCP"
        },
        {
          "port": 9998,
          "name": "metrics",
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-direktiv-functions",
      "annotations": {
        "kubernetes.io/ingress.class": "nginx"
      },
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 5555,
          "name": "grpc",
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "direktiv-functions",
        "app.kubernetes.io/instance": "release-name-functions"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-direktiv-ui",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv-ui",
        "app.kubernetes.io/instance": "release-name-ui",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "kubernetes.io/ingress.class": "nginx"
      }
    },
    "spec": {
      "ports": [
        {
          "port": 8080,
          "targetPort": 8080,
          "protocol": "TCP",
          "name": "ui"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "direktiv-ui",
        "app.kubernetes.io/instance": "release-name-ui"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx-controller",
      "namespace": "KRkG0Amw"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "ingress-nginx",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "controller"
        }
      },
      "replicas": 1,
      "revisionHistoryLimit": 10,
      "minReadySeconds": 0,
      "template": {
        "metadata": {
          "annotations": {
            "linkerd.io/inject": "disabled"
          },
          "labels": {
            "app.kubernetes.io/name": "ingress-nginx",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "controller"
          }
        },
        "spec": {
          "dnsPolicy": "ClusterFirst",
          "containers": [
            {
              "name": "controller",
              "image": "k8s.gcr.io/ingress-nginx/controller:v1.1.0@sha256:f766669fdcf3dc26347ed273a55e754b427eb4411ee075a53f30718b4499076a",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/wait-shutdown"
                    ]
                  }
                }
              },
              "args": [
                "/nginx-ingress-controller",
                "--publish-service=$(POD_NAMESPACE)/release-name-ingress-nginx-controller",
                "--election-id=ingress-controller-leader",
                "--controller-class=k8s.io/ingress-nginx",
                "--configmap=$(POD_NAMESPACE)/release-name-ingress-nginx-controller",
                "--validating-webhook=:8443",
                "--validating-webhook-certificate=/usr/local/certificates/cert",
                "--validating-webhook-key=/usr/local/certificates/key"
              ],
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ],
                  "add": [
                    "NET_BIND_SERVICE"
                  ]
                },
                "runAsUser": 10299,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "LD_PRELOAD",
                  "value": "/usr/local/lib/libmimalloc.so"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 5,
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1
              },
              "readinessProbe": {
                "failureThreshold": 3,
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1
              },
              "ports": [
                {
                  "name": "http",
                  "containerPort": 80,
                  "protocol": "TCP"
                },
                {
                  "name": "https",
                  "containerPort": 443,
                  "protocol": "TCP"
                },
                {
                  "name": "webhook",
                  "containerPort": 8443,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "webhook-cert",
                  "mountPath": "/usr/local/certificates/",
                  "readOnly": true
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "90Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux"
          },
          "serviceAccountName": "release-name-ingress-nginx",
          "terminationGracePeriodSeconds": 300,
          "volumes": [
            {
              "name": "webhook-cert",
              "secret": {
                "secretName": "release-name-ingress-nginx-admission"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "component": "server",
        "app": "prometheus",
        "release": "release-name",
        "chart": "prometheus-14.7.1",
        "heritage": "Helm"
      },
      "name": "release-name-prometheus-server",
      "namespace": "KRkG0Amw"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "component": "server",
          "app": "prometheus",
          "release": "release-name"
        }
      },
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "component": "server",
            "app": "prometheus",
            "release": "release-name",
            "chart": "prometheus-14.7.1",
            "heritage": "Helm"
          }
        },
        "spec": {
          "enableServiceLinks": true,
          "serviceAccountName": "release-name-prometheus-server",
          "containers": [
            {
              "name": "prometheus-server-configmap-reload",
              "image": "jimmidyson/configmap-reload:v0.5.0",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "--volume-dir=/etc/config",
                "--webhook-url=http://127.0.0.1:9090/-/reload"
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/etc/config",
                  "readOnly": true
                }
              ]
            },
            {
              "name": "prometheus-server",
              "image": "quay.io/prometheus/prometheus:v2.26.0",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "--storage.tsdb.retention.time=96h",
                "--config.file=/etc/config/prometheus.yml",
                "--storage.tsdb.path=/data",
                "--web.console.libraries=/etc/prometheus/console_libraries",
                "--web.console.templates=/etc/prometheus/consoles",
                "--web.enable-lifecycle"
              ],
              "ports": [
                {
                  "containerPort": 9090
                }
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/-/ready",
                  "port": 9090
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 5,
                "timeoutSeconds": 4,
                "failureThreshold": 3,
                "successThreshold": 1
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/-/healthy",
                  "port": 9090
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 15,
                "timeoutSeconds": 10,
                "failureThreshold": 3,
                "successThreshold": 1
              },
              "resources": {},
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/etc/config"
                },
                {
                  "name": "storage-volume",
                  "mountPath": "/data",
                  "subPath": ""
                }
              ]
            }
          ],
          "hostNetwork": false,
          "dnsPolicy": "ClusterFirst",
          "securityContext": {
            "fsGroup": 65534,
            "runAsGroup": 65534,
            "runAsNonRoot": true,
            "runAsUser": 65534
          },
          "terminationGracePeriodSeconds": 300,
          "volumes": [
            {
              "name": "config-volume",
              "configMap": {
                "name": "release-name-prometheus-server"
              }
            },
            {
              "name": "storage-volume",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-direktiv-api",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv-api",
        "app.kubernetes.io/instance": "release-name-api",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "direktiv-api",
          "app.kubernetes.io/instance": "release-name-api"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "direktiv-api",
            "app.kubernetes.io/instance": "release-name-api"
          }
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "app.kubernetes.io/name",
                        "operator": "In",
                        "values": [
                          "direktiv-api"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              ]
            }
          },
          "securityContext": {
            "runAsNonRoot": true,
            "runAsUser": 65532,
            "runAsGroup": 65532
          },
          "serviceAccountName": "release-name-direktiv",
          "containers": [
            {
              "name": "api",
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "resources": {
                "requests": {
                  "memory": "128Mi",
                  "cpu": "100m"
                },
                "limits": {
                  "memory": "1048Mi",
                  "cpu": "2"
                }
              },
              "image": "docker.io/direktiv/api:v0.6.6",
              "imagePullPolicy": "Always",
              "volumeMounts": [
                {
                  "name": "flow-config",
                  "mountPath": "/etc/direktiv/flow-config.yaml",
                  "subPath": "flow-config.yaml"
                }
              ],
              "ports": [
                {
                  "name": "api",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "env": [
                {
                  "name": "DIREKTIV_LOG_JSON",
                  "value": "json"
                },
                {
                  "name": "DIREKTIV_DEBUG",
                  "value": "false"
                },
                {
                  "name": "DIREKTIV_SERVICE_NAMESPACE",
                  "value": "direktiv-services-direktiv"
                },
                {
                  "name": "DIREKTIV_DB",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-direktiv",
                      "key": "db"
                    }
                  }
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "flow-config",
              "configMap": {
                "name": "release-name-direktiv-config-flow"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-direktiv-flow",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "direktiv",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "prometheus.io/port": "2112",
            "prometheus.io/path": "/metrics",
            "prometheus.io/scrape": "true",
            "prometheus.io/scheme": "http"
          },
          "labels": {
            "app.kubernetes.io/name": "direktiv",
            "app.kubernetes.io/instance": "release-name"
          }
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "app.kubernetes.io/name",
                        "operator": "In",
                        "values": [
                          "direktiv"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              ]
            }
          },
          "securityContext": {
            "runAsNonRoot": true,
            "runAsUser": 65532,
            "runAsGroup": 65532
          },
          "serviceAccountName": "release-name-direktiv",
          "initContainers": [
            {
              "name": "updatedb",
              "image": "docker.io/direktiv/flow-dbinit:v0.6.6",
              "env": [
                {
                  "name": "DIREKTIV_DB",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-direktiv",
                      "key": "db"
                    }
                  }
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "flow",
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "resources": {
                "requests": {
                  "memory": "512Mi",
                  "cpu": "250m"
                },
                "limits": {
                  "memory": "2048Mi",
                  "cpu": "4"
                }
              },
              "image": "docker.io/direktiv/flow:v0.6.6",
              "imagePullPolicy": "Always",
              "command": [
                "/bin/direktiv",
                "server",
                "/etc/direktiv/flow-config.yaml"
              ],
              "volumeMounts": [
                {
                  "name": "flow-config",
                  "mountPath": "/etc/direktiv/flow-config.yaml",
                  "subPath": "flow-config.yaml"
                }
              ],
              "ports": [
                {
                  "name": "flow",
                  "containerPort": 6666,
                  "protocol": "TCP"
                },
                {
                  "name": "internal",
                  "containerPort": 7777,
                  "protocol": "TCP"
                }
              ],
              "env": [
                {
                  "name": "DIREKTIV_LOG_JSON",
                  "value": "json"
                },
                {
                  "name": "DIREKTIV_DEBUG",
                  "value": "false"
                },
                {
                  "name": "DIREKTIV_SERVICE_NAMESPACE",
                  "value": "direktiv-services-direktiv"
                },
                {
                  "name": "DIREKTIV_DB",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-direktiv",
                      "key": "db"
                    }
                  }
                }
              ]
            },
            {
              "name": "secrets",
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "allowPrivilegeEscalation": false,
                "runAsNonRoot": true,
                "runAsUser": 65532,
                "runAsGroup": 65532
              },
              "resources": {
                "requests": {
                  "memory": "128Mi",
                  "cpu": "100m"
                },
                "limits": {
                  "memory": "512Mi",
                  "cpu": "1"
                }
              },
              "image": "docker.io/direktiv/secrets:v0.6.6",
              "command": [
                "/bin/secrets"
              ],
              "imagePullPolicy": "Always",
              "volumeMounts": null,
              "ports": [
                {
                  "name": "secrets",
                  "containerPort": 2610,
                  "protocol": "TCP"
                }
              ],
              "env": [
                {
                  "name": "DIREKTIV_LOG_JSON",
                  "value": "json"
                },
                {
                  "name": "DIREKTIV_DEBUG",
                  "value": "false"
                },
                {
                  "name": "DIREKTIV_SECRETS_DB",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-direktiv",
                      "key": "db"
                    }
                  }
                },
                {
                  "name": "DIREKTIV_SECRETS_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-direktiv",
                      "key": "key"
                    }
                  }
                },
                {
                  "name": "PGSSLMODE",
                  "value": "require"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "flow-config",
              "configMap": {
                "name": "release-name-direktiv-config-flow"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-direktiv-functions",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm-functions"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "direktiv-functions",
          "app.kubernetes.io/instance": "release-name-functions"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "direktiv-functions",
            "app.kubernetes.io/instance": "release-name-functions"
          }
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "app.kubernetes.io/name",
                        "operator": "In",
                        "values": [
                          "direktiv-functions"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              ]
            }
          },
          "securityContext": {
            "runAsNonRoot": true,
            "runAsUser": 65532,
            "runAsGroup": 65532
          },
          "serviceAccountName": "release-name-direktiv-functions",
          "volumes": [
            {
              "name": "config-file",
              "configMap": {
                "name": "release-name-direktiv-config-functions"
              }
            }
          ],
          "containers": [
            {
              "name": "functions-controller",
              "volumeMounts": [
                {
                  "name": "config-file",
                  "mountPath": "/etc/direktiv/functions-config.yaml",
                  "subPath": "functions-config.yaml"
                }
              ],
              "env": [
                {
                  "name": "DIREKTIV_LOG_JSON",
                  "value": "json"
                },
                {
                  "name": "DIREKTIV_NAMESPACE",
                  "value": "default"
                },
                {
                  "name": "DIREKTIV_DB",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-direktiv",
                      "key": "db"
                    }
                  }
                }
              ],
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "resources": {
                "requests": {
                  "memory": "128Mi",
                  "cpu": "250m"
                },
                "limits": {
                  "memory": "1024Mi",
                  "cpu": "1"
                }
              },
              "image": "docker.io/direktiv/functions:v0.6.6",
              "imagePullPolicy": "Always",
              "ports": [
                {
                  "name": "grpc",
                  "containerPort": 5555,
                  "protocol": "TCP"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-direktiv-ui",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv-ui",
        "app.kubernetes.io/instance": "release-name-ui",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm-ui"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "direktiv-ui",
          "app.kubernetes.io/instance": "release-name-ui"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "direktiv-ui",
            "app.kubernetes.io/instance": "release-name-ui"
          }
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "app.kubernetes.io/name",
                        "operator": "In",
                        "values": [
                          "direktiv-ui"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              ]
            }
          },
          "securityContext": {
            "runAsNonRoot": true,
            "runAsUser": 65532,
            "runAsGroup": 65532
          },
          "serviceAccountName": "release-name-direktiv",
          "containers": [
            {
              "name": "ui",
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "resources": {
                "requests": {
                  "memory": "256Mi",
                  "cpu": "0.25"
                },
                "limits": {
                  "memory": "2048Mi",
                  "cpu": "2"
                }
              },
              "image": "docker.io/direktiv/ui:v0.6.6",
              "env": [
                {
                  "name": "SERVE_PORT",
                  "value": "8080"
                },
                {
                  "name": "SERVE_ADDRESS",
                  "value": "0.0.0.0"
                }
              ],
              "imagePullPolicy": "Always",
              "ports": [
                {
                  "name": "ui",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ]
            }
          ],
          "volumes": null
        }
      }
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "IngressClass",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "nginx"
    },
    "spec": {
      "controller": "k8s.io/ingress-nginx"
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "release-name-direktiv-ingress-api",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "nginx.ingress.kubernetes.io/service-upstream": "true",
        "nginx.ingress.kubernetes.io/proxy-connect-timeout": "7200",
        "nginx.ingress.kubernetes.io/proxy-send-timeout": "7200",
        "nginx.ingress.kubernetes.io/proxy-read-timeout": "7200",
        "nginx.ingress.kubernetes.io/proxy-body-size": "34m"
      }
    },
    "spec": {
      "ingressClassName": "nginx",
      "rules": [
        {
          "host": null,
          "http": {
            "paths": [
              {
                "path": "/api/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "release-name-direktiv-api",
                    "port": {
                      "number": 8080
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "release-name-direktiv-ingress-ui",
      "labels": {
        "helm.sh/chart": "direktiv-0.1.7",
        "app.kubernetes.io/name": "direktiv",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.6.6",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "nginx.ingress.kubernetes.io/service-upstream": "true",
        "nginx.ingress.kubernetes.io/proxy-connect-timeout": "7200",
        "nginx.ingress.kubernetes.io/proxy-send-timeout": "7200",
        "nginx.ingress.kubernetes.io/proxy-read-timeout": "7200"
      }
    },
    "spec": {
      "ingressClassName": "nginx",
      "rules": [
        {
          "host": null,
          "http": {
            "paths": [
              {
                "path": "/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "release-name-direktiv-ui",
                    "port": {
                      "number": 8080
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      },
      "name": "release-name-ingress-nginx-admission"
    },
    "webhooks": [
      {
        "name": "validate.nginx.ingress.kubernetes.io",
        "matchPolicy": "Equivalent",
        "rules": [
          {
            "apiGroups": [
              "networking.k8s.io"
            ],
            "apiVersions": [
              "v1"
            ],
            "operations": [
              "CREATE",
              "UPDATE"
            ],
            "resources": [
              "ingresses"
            ]
          }
        ],
        "failurePolicy": "Fail",
        "sideEffects": "None",
        "admissionReviewVersions": [
          "v1"
        ],
        "clientConfig": {
          "service": {
            "namespace": "default",
            "name": "release-name-ingress-nginx-controller-admission",
            "path": "/networking/v1/ingresses"
          }
        }
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-ingress-nginx-admission",
      "namespace": "KRkG0Amw",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade,post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "name": "release-name-ingress-nginx-admission",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade,post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "admissionregistration.k8s.io"
        ],
        "resources": [
          "validatingwebhookconfigurations"
        ],
        "verbs": [
          "get",
          "update"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "name": "release-name-ingress-nginx-admission",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade,post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-ingress-nginx-admission"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-ingress-nginx-admission",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-ingress-nginx-admission",
      "namespace": "KRkG0Amw",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade,post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "get",
          "create"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-ingress-nginx-admission",
      "namespace": "KRkG0Amw",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade,post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-ingress-nginx-admission"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-ingress-nginx-admission",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-ingress-nginx-admission-create",
      "namespace": "KRkG0Amw",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "name": "release-name-ingress-nginx-admission-create",
          "annotations": {
            "linkerd.io/inject": "disabled"
          },
          "labels": {
            "helm.sh/chart": "ingress-nginx-4.0.13",
            "app.kubernetes.io/name": "ingress-nginx",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/version": "1.1.0",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "admission-webhook"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "create",
              "image": "k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "create",
                "--host=release-name-ingress-nginx-controller-admission,release-name-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc",
                "--namespace=$(POD_NAMESPACE)",
                "--secret-name=release-name-ingress-nginx-admission"
              ],
              "env": [
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                }
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              }
            }
          ],
          "restartPolicy": "OnFailure",
          "serviceAccountName": "release-name-ingress-nginx-admission",
          "nodeSelector": {
            "kubernetes.io/os": "linux"
          },
          "securityContext": {
            "runAsNonRoot": true,
            "runAsUser": 2000
          }
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-ingress-nginx-admission-patch",
      "namespace": "KRkG0Amw",
      "annotations": {
        "helm.sh/hook": "post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-4.0.13",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "name": "release-name-ingress-nginx-admission-patch",
          "annotations": {
            "linkerd.io/inject": "disabled"
          },
          "labels": {
            "helm.sh/chart": "ingress-nginx-4.0.13",
            "app.kubernetes.io/name": "ingress-nginx",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/version": "1.1.0",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "admission-webhook"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "patch",
              "image": "k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "patch",
                "--webhook-name=release-name-ingress-nginx-admission",
                "--namespace=$(POD_NAMESPACE)",
                "--patch-mutating=false",
                "--secret-name=release-name-ingress-nginx-admission",
                "--patch-failure-policy=Fail"
              ],
              "env": [
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                }
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              }
            }
          ],
          "restartPolicy": "OnFailure",
          "serviceAccountName": "release-name-ingress-nginx-admission",
          "nodeSelector": {
            "kubernetes.io/os": "linux"
          },
          "securityContext": {
            "runAsNonRoot": true,
            "runAsUser": 2000
          }
        }
      }
    }
  }
]