kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-docker-compose-docker-certs-ca
  labels:
    helm.sh/chart: docker-compose-2.0.4
    app.kubernetes.io/name: docker-compose
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 20.10.17
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 999Gi
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-docker-compose
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: docker-compose
    app.kubernetes.io/version: 20.10.17
    helm-revision: "1"
    helm.sh/chart: docker-compose-2.0.4
  annotations: null
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  ports:
    - port: 2376
      targetPort: main
      protocol: TCP
      name: main
  selector:
    app.kubernetes.io/name: docker-compose
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-docker-compose
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: docker-compose
    app.kubernetes.io/version: 20.10.17
    helm-revision: "1"
    helm.sh/chart: docker-compose-2.0.4
spec:
  revisionHistoryLimit: 3
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: docker-compose
      app.kubernetes.io/instance: release-name
  serviceName: release-name-docker-compose
  template:
    metadata:
      labels:
        app.kubernetes.io/name: docker-compose
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 0
        supplementalGroups:
          - 568
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: autopermissions
          image: ghcr.io/truecharts/alpine:v3.15.2@sha256:29ed3480a0ee43f7af681fed5d4fc215516abf1c41eade6938b26d8c9c2c7583
          securityContext:
            runAsUser: 0
            privileged: true
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - /bin/sh
            - -c
            - |
              /bin/bash <<'EOF'
              echo "Automatically correcting permissions..."
              echo "increasing inotify limits..."
              ( sysctl -w fs.inotify.max_user_watches=524288 || echo "error setting inotify") && ( sysctl -w fs.inotify.max_user_instances=512 || echo "error setting inotify")
              EOF
          volumeMounts: null
      containers:
        - name: release-name-docker-compose
          image: tccr.io/truecharts/docker-in-docker:v20.10.17@sha256:abcae8652f27784887493cbd7af53374e57660fb094c091e1d0817722c522d1b
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            privileged: true
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            seccompProfile:
              type: RuntimeDefault
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - |
                    if [ "${COMPOSE_FILE}" ]; then
                    counter=0;
                    while ! docker info > /dev/null 2>&1 && [[ ${counter} -lt 10 ]]; do
                    echo "docker not running yet. Waiting..." >> /proc/1/fd/1;
                    sleep 5;
                    counter=$((counter+1));
                    done
                    docker-compose -f "${COMPOSE_FILE}" up -d && echo "Loading COMPOSE_FILE at location ${COMPOSE_FILE}" >> /proc/1/fd/1;
                    else
                    echo "COMPOSE_FILE not set, not auto-loading compose-file" >> /proc/1/fd/1;
                    fi
          env:
            - name: PUID
              value: "568"
            - name: USER_ID
              value: "568"
            - name: UID
              value: "568"
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: PGID
              value: "0"
            - name: GROUP_ID
              value: "0"
            - name: GID
              value: "0"
            - name: NVIDIA_VISIBLE_DEVICES
              value: void
            - name: TZ
              value: UTC
            - name: COMPOSE_FILE
              value: ""
            - name: DOCKER_TLS_CERTDIR
              value: /certs
          envFrom: null
          ports:
            - name: main
              containerPort: 2376
              protocol: TCP
          volumeMounts:
            - mountPath: /cluster
              name: cluster
            - mountPath: /config
              name: docker-certs-ca
            - mountPath: /mnt
              name: mnt
            - mountPath: /root
              name: root
            - mountPath: /shared
              name: shared
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /var/lib/docker
              name: docker
            - mountPath: /certs/client
              name: docker-certs-client
          livenessProbe:
            tcpSocket:
              port: 2376
            initialDelaySeconds: 30
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 2376
            initialDelaySeconds: 30
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 2376
            initialDelaySeconds: 30
            failureThreshold: 60
            timeoutSeconds: 2
            periodSeconds: 5
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: cluster
          hostPath:
            path: /cluster
        - name: docker-certs-ca
          persistentVolumeClaim:
            claimName: release-name-docker-compose-docker-certs-ca
        - name: mnt
          hostPath:
            path: /mnt
        - name: root
          hostPath:
            path: /root
        - name: shared
          emptyDir: {}
        - name: temp
          emptyDir:
            medium: Memory
        - name: varlogs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: docker
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 999Gi
    - metadata:
        name: docker-certs-client
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 999Gi
