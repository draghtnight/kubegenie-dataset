[
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-hlf-peer--peer",
      "labels": {
        "app": "hlf-peer",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "hlf-peer-1.2.6"
      }
    },
    "data": {
      "CORE_PEER_ADDRESSAUTODETECT": "true",
      "CORE_PEER_ID": "release-name",
      "CORE_PEER_NETWORKID": "nid1",
      "CORE_PEER_LISTENADDRESS": "0.0.0.0:7051",
      "CORE_PEER_EVENTS_ADDRESS": "0.0.0.0:7053",
      "CORE_PEER_COMMITTER_ENABLED": "true",
      "CORE_PEER_PROFILE_ENABLED": "true",
      "CORE_PEER_DISCOVERY_PERIOD": "60s",
      "CORE_PEER_DISCOVERY_TOUCHPERIOD": "60s",
      "CORE_PEER_LOCALMSPID": "Org1MSP",
      "CORE_PEER_MSPCONFIGPATH": "/var/hyperledger/msp",
      "CORE_LOGGING_LEVEL": "debug",
      "CORE_LOGGING_PEER": "debug",
      "CORE_LOGGING_CAUTHDSL": "debug",
      "CORE_LOGGING_GOSSIP": "debug",
      "CORE_LOGGING_LEDGER": "debug",
      "CORE_LOGGING_MSP": "info",
      "CORE_LOGGING_POLICIES": "debug",
      "CORE_LOGGING_GRPC": "debug",
      "CORE_PEER_GOSSIP_BOOTSTRAP": "",
      "CORE_PEER_GOSSIP_ENDPOINT": "",
      "CORE_PEER_GOSSIP_EXTERNALENDPOINT": "",
      "CORE_PEER_GOSSIP_ORGLEADER": "false",
      "CORE_PEER_GOSSIP_USELEADERELECTION": "true",
      "CORE_PEER_TLS_ENABLED": "false",
      "CORE_PEER_TLS_CERT_FILE": "/var/hyperledger/tls/server/pair/tls.crt",
      "CORE_PEER_TLS_KEY_FILE": "/var/hyperledger/tls/server/pair/tls.key",
      "CORE_PEER_TLS_ROOTCERT_FILE": "/var/hyperledger/tls/server/cert/cacert.pem",
      "CORE_PEER_TLS_CLIENTAUTHREQUIRED": "false",
      "CORE_PEER_TLS_CLIENTROOTCAS_FILES": "/var/hyperledger/tls/client/cert/*",
      "CORE_PEER_TLS_CLIENTCERT_FILE": "/var/hyperledger/tls/client/pair/tls.crt",
      "CORE_PEER_TLS_CLIENTKEY_FILE": "/var/hyperledger/tls/client/pair/tls.key",
      "CORE_VM_ENDPOINT": "unix:///host/var/run/docker.sock",
      "CORE_LEDGER_STATE_STATEDATABASE": "goleveldb",
      "PEER_CFG_PATH": "/var/hyperledger/config",
      "FABRIC_CFG_PATH": "/var/hyperledger/fabric_cfg",
      "GODEBUG": "netdns=go",
      "ADMIN_MSP_PATH": "/var/hyperledger/admin_msp",
      "ORD_TLS_PATH": "/var/hyperledger/tls/ord/cert"
    }
  },
  {
    "kind": "PersistentVolumeClaim",
    "apiVersion": "v1",
    "metadata": {
      "name": "release-name-hlf-peer",
      "labels": {
        "app": "hlf-peer",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "hlf-peer-1.2.6"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "1Gi"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-hlf-peer",
      "labels": {
        "app": "hlf-peer",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "hlf-peer-1.2.6"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 7051,
          "targetPort": 7051,
          "protocol": "TCP",
          "name": "request"
        },
        {
          "port": 7053,
          "targetPort": 7053,
          "protocol": "TCP",
          "name": "event"
        }
      ],
      "selector": {
        "app": "hlf-peer",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-hlf-peer",
      "labels": {
        "app": "hlf-peer",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "hlf-peer-1.2.6"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "hlf-peer",
          "release": "release-name"
        }
      },
      "strategy": {
        "rollingUpdate": {
          "maxUnavailable": 1
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "hlf-peer",
            "heritage": "Helm",
            "release": "release-name",
            "chart": "hlf-peer-1.2.6"
          }
        },
        "spec": {
          "volumes": [
            {
              "name": "data",
              "persistentVolumeClaim": {
                "claimName": "release-name-hlf-peer"
              }
            },
            {
              "name": "dockersocket",
              "hostPath": {
                "path": "/var/run/docker.sock"
              }
            }
          ],
          "containers": [
            {
              "name": "peer",
              "image": "hyperledger/fabric-peer:1.3.0",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "request",
                  "containerPort": 7051,
                  "protocol": "TCP"
                },
                {
                  "name": "event",
                  "containerPort": 7053,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "ls",
                    "/var/hyperledger"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "ls",
                    "/var/hyperledger"
                  ]
                },
                "initialDelaySeconds": 15
              },
              "command": [
                "bash",
                "-c",
                "# To avoid having separate secrets for CouchDB and HLF\nexport CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=$COUCHDB_USER\nexport CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=$COUCHDB_PASSWORD\n\nwhile [ ! -d /var/hyperledger/admin_msp/admincerts ] || [ -z \"$(ls -A /var/hyperledger/admin_msp/admincerts)\" ];\ndo\n  echo \"\\033[0;31m /var/hyperledger/admin_msp/admincerts must contain Peer admin certificates files \\033[0m\"\n  sleep 60\ndone\n\nwhile [ ! -d ${CORE_PEER_MSPCONFIGPATH}/signcerts ];\ndo\n  echo \"\\033[0;31m ${CORE_PEER_MSPCONFIGPATH}/signcerts directory must exist \\033[0m\"\n  sleep 60\ndone\n\nif [ ! -d ${FABRIC_CFG_PATH} ]\nthen\n  mkdir -p ${FABRIC_CFG_PATH}\n  cp -r /etc/hyperledger/fabric/core.yaml ${FABRIC_CFG_PATH}\n  ls ${FABRIC_CFG_PATH}\nfi\n\nif [ $CORE_PEER_TLS_CLIENTAUTHREQUIRED ]\nthen\n  export CORE_PEER_TLS_CLIENTROOTCAS_FILES=$(ls -d $CORE_PEER_TLS_CLIENTROOTCAS_FILES)\nfi\n\necho \">\\033[0;35m peer node start \\033[0m\"\npeer node start\n"
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-hlf-peer--peer"
                  }
                }
              ],
              "volumeMounts": [
                {
                  "mountPath": "/var/hyperledger",
                  "name": "data"
                },
                {
                  "mountPath": "/host/var/run/docker.sock",
                  "name": "dockersocket"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  }
]