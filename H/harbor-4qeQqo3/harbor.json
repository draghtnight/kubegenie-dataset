[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "automountServiceAccountToken": true,
    "metadata": {
      "name": "release-name-redis",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.12.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.6.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "postgres-password": "bm90LXNlY3VyZS1kYXRhYmFzZS1wYXNzd29yZA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-chartmuseum-secret",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "chartmuseum"
      }
    },
    "type": "Opaque",
    "data": {
      "CACHE_REDIS_PASSWORD": ""
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-core-envvars",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "core"
      }
    },
    "type": "Opaque",
    "data": {
      "_REDIS_URL_CORE": "cmVkaXM6Ly9yZWxlYXNlLW5hbWUtcmVkaXMtbWFzdGVyOjYzNzkvMA==",
      "_REDIS_URL_REG": "cmVkaXM6Ly9yZWxlYXNlLW5hbWUtcmVkaXMtbWFzdGVyOjYzNzkvMg==",
      "REGISTRY_CREDENTIAL_USERNAME": "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI=",
      "REGISTRY_CREDENTIAL_PASSWORD": "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk",
      "CSRF_KEY": "VThzWW9NOERwRjdFMVFhQ2J6dWhzaUhONlZaVU1DRWc=",
      "HARBOR_ADMIN_PASSWORD": "UUswWHZ2ZjBYYg==",
      "POSTGRESQL_PASSWORD": "bm90LXNlY3VyZS1kYXRhYmFzZS1wYXNzd29yZA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-core",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "core"
      }
    },
    "type": "Opaque",
    "data": {
      "secretKey": "RVo3Z0ZqcVJ2b0hJdngzVQ==",
      "secret": "b2FteXdlcTZUdU9nbVAzaQ==",
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZrekNDQTN1Z0F3SUJBZ0lKQUxyK0xWT0VzdytzTUEwR0NTcUdTSWIzRFFFQkN3VUFNR0F4Q3pBSkJnTlYKQkFZVEFrVlRNUkF3RGdZRFZRUUlEQWRUWlhacGJHeGxNUkF3RGdZRFZRUUhEQWRUWlhacGJHeGxNUkF3RGdZRApWUVFLREFkQ2FYUnVZVzFwTVJzd0dRWURWUVFEREJKb1lYSmliM0l1WW1sMGJtRnRhUzVqYjIwd0hoY05NVGt3Ck5USXdNVEF3TVRVeldoY05NakF3TlRFNU1UQXdNVFV6V2pCZ01Rc3dDUVlEVlFRR0V3SkZVekVRTUE0R0ExVUUKQ0F3SFUyVjJhV3hzWlRFUU1BNEdBMVVFQnd3SFUyVjJhV3hzWlRFUU1BNEdBMVVFQ2d3SFFtbDBibUZ0YVRFYgpNQmtHQTFVRUF3d1NhR0Z5WW05eUxtSnBkRzVoYldrdVkyOXRNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFnOEFNSUlDQ2dLQ0FnRUFxb0c4ZnNud0NwZittV1k3b2p4VENxYXNOVnVEUXY4NGtsajFHa003ZEpGTlZwMEoKVzV1WklaUit2dURxNFZJdXZxZWV1Y085RjF4TWFGaEdxZlZpYnVld0VEMm9XSTRZMkttMytUOWEwcjZ0RkthagphSXlwNTdPSFh5c1hjaE9KOHp5dGRsYW5kaWk4elBBYS9sSDBiak9HR3liTk5NWjlFa3NEbk5YTTlZTFA5NURICmpzSFJ1b0l0NWlRb0lKWHFoYW8vREV3YUJjZHhXS08rd1NFRm5lTzBOSWlpeXR2VGh1NGw2aDhETlZEWHhzUDAKc2o3ZHZWZXFZMTBjMUREM0pLK1o1MHJOWWw1Qjk1V0hmVGttTnNISmxiOHYxc3Q5dDk4eTM0K01rRE1HUUpLTwpYZVFQTHdDREtJbUw3bnd5K2NqVWlIbHdFWTM5bEVBYzdBVWw0UUZ3alMzOFIxWjlLNU5Ld1FiQU11TGlVZUltCnk4VkZvMTRjL0FsTEU5cUhaTHEzOGJGaGVKb0J5aThvWTQ2ZTZDV0pUTVRzZnJsZ1ZXR1NDVW9PbXBDM0ZmK2wKdUNVK3B0ZmtGSHoybFF1Vk1qK1U3dlJrZ0tncnF0b21KSVBzcW9LdzF3S1Fwb1g5a2puVUNwdGc0R204c04vUgpMOUllQklCeGRXWGxlL2dsZk1PUi9XbmtVZ2Fqc2o3bVhnZ3QzcjluSVRoNlpSTVlTUjV1dmNEM2V1bCtibVhFCm4xcWY5V1dDUUpHZzYrRHpidWw4VTAwL3NzdGlha29PSERMc3Q4SGFaeTFOZk5SUG03WU5WZ3V5cXI2b1g0Q08Kb25NNG02eWJvRitqUExDdWZYVTZFYXZUM0U0S0FTNFJoVHNvd2pjMHIvcENTZk5kYzdFT0QxYm5wdDBDQXdFQQpBYU5RTUU0d0hRWURWUjBPQkJZRUZJUWd3QU45Vlh5LzFXME5YbDdFREw4RkUzZ0hNQjhHQTFVZEl3UVlNQmFBCkZJUWd3QU45Vlh5LzFXME5YbDdFREw4RkUzZ0hNQXdHQTFVZEV3UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUwKQlFBRGdnSUJBREppMkdockZNSDJoQWNKV2JZRmJKc25GUm5DOVBIRzI0aFJpTTYyYkJDY3V6RWVycjdEM05SRQo5cVhhditLaVptVk4vT2Nxd3VIZFVtcDV0djh2OGxMQTEzWi9YMlZhSG1zVmtCKzAySkFTY3Bqb25FMEw4VUFwCjQrQnJxL3RDMTVzK2w2ZzZwSEI5SjlYUDBJd25zUEJEb1ZkQXpJay91enRERVJmakNBeW9NNFdxcmpYSVhwNHUKeVRXRG9EUWFIcFFTZGZaQUpjdjd0ODJKSmUxSjl2YmUrdEZtRGdNY2ZJb2VDcUN0MWZrWWYvdXNGRk02bUxhKwpndEhuSUFJR0x2R2pEUi9SdFNsYnZHY1JycXZveUszWHg0V29Zek5PZkM2ZTZuRVNsa1RQako2UHlScXFHaGJMCkZHK1Y2RVBZRHovRTYzVkd0eE5hWitNUWNqSGprNHE3YzhwQUwxRkUxOUpwb2VhRUFITEtCUkhBcUpiS3NPWmgKV1NtdkNYMjN1Tk9yeW1hZ2g3TjZwR3lCQzVZSmN0cm9hWGwrclBPZE5qQm5pbVp3OUJseGxaTHZRTFRUaUw0egpsU1dQdXpSZHhibFNMR0VHUGZZNndJOWplR0o2dy94T09EQUhObVBLTGllbkg5VFZVcHBvTC9UY0pEU28xTDJUCnEyK0RQYnJZSko1c0dtUnVFcWpvcERkTE9Dc3Rhbk9BemRHckkvdkVRZEtEL1p6a1JLaktEWS9rRDJuWGdzVE8KZndhUHZ4amhNVFJtU1BSWDEwQTZ6QzIyUXUzT1JFRFc0OEVML0U3Mkl3blFQd0hVM0ZHVXJVZDluZGFYYTB2RQpVcVppV3REKy9TSW1QV013UGhxVnF0L3p3cG1DWkJYTndrdjVmZ0hRY28vZUdqRFhraXhsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBcW9HOGZzbndDcGYrbVdZN29qeFRDcWFzTlZ1RFF2ODRrbGoxR2tNN2RKRk5WcDBKClc1dVpJWlIrdnVEcTRWSXV2cWVldWNPOUYxeE1hRmhHcWZWaWJ1ZXdFRDJvV0k0WTJLbTMrVDlhMHI2dEZLYWoKYUl5cDU3T0hYeXNYY2hPSjh6eXRkbGFuZGlpOHpQQWEvbEgwYmpPR0d5Yk5OTVo5RWtzRG5OWE05WUxQOTVESApqc0hSdW9JdDVpUW9JSlhxaGFvL0RFd2FCY2R4V0tPK3dTRUZuZU8wTklpaXl0dlRodTRsNmg4RE5WRFh4c1AwCnNqN2R2VmVxWTEwYzFERDNKSytaNTByTllsNUI5NVdIZlRrbU5zSEpsYjh2MXN0OXQ5OHkzNCtNa0RNR1FKS08KWGVRUEx3Q0RLSW1MN253eStjalVpSGx3RVkzOWxFQWM3QVVsNFFGd2pTMzhSMVo5SzVOS3dRYkFNdUxpVWVJbQp5OFZGbzE0Yy9BbExFOXFIWkxxMzhiRmhlSm9CeWk4b1k0NmU2Q1dKVE1Uc2ZybGdWV0dTQ1VvT21wQzNGZitsCnVDVStwdGZrRkh6MmxRdVZNaitVN3ZSa2dLZ3JxdG9tSklQc3FvS3cxd0tRcG9YOWtqblVDcHRnNEdtOHNOL1IKTDlJZUJJQnhkV1hsZS9nbGZNT1IvV25rVWdhanNqN21YZ2d0M3I5bklUaDZaUk1ZU1I1dXZjRDNldWwrYm1YRQpuMXFmOVdXQ1FKR2c2K0R6YnVsOFUwMC9zc3RpYWtvT0hETHN0OEhhWnkxTmZOUlBtN1lOVmd1eXFyNm9YNENPCm9uTTRtNnlib0YralBMQ3VmWFU2RWF2VDNFNEtBUzRSaFRzb3dqYzByL3BDU2ZOZGM3RU9EMWJucHQwQ0F3RUEKQVFLQ0FnQVUvalk4RWhibzV2L2syUzU4Y2hyelU4UWVLYTlHbjIvU3JQczRpWkNYY0pCcUdwbWRXdElHeldheApqN1c3bWtmQkY1ZzJYUUE2RVJZalBzTXNoOWJmdXN6MW92SElQVzZYdG9XOVBXeXNSK2U5aENyWVk0RkQwdG5YCkFOSTVMR2l1dHdqUWFpamlKbS9nZDZ1TEpvSUcwM2N1ZnArRFlQRGpRTE1vS3phNS82b2xYQUVGOVowaDdvZEMKTDY5MUc2QXRadUd1WE94VFM5UUx5dFZncC9VdUZHd0tqOHdqVjk5NlhIWDBsbTdwc0pOd21JM1hLR0Jhd0tGcwo3SGp4TXpvcW5TaEF6dmZzcFpoUHFHeHZJWXN2OExvbUlzejhFRC9oVkt6SjA3M0Z2MUtFdnNhaWpzTEQwYmRVClZXTVNNTjZCM0pVMlhHVk05QU9GcmtNaFdCenFuS2ZSM3FubXRoWTk1RG1nNWM1T0pPQW5pWTZDelZyL0xaemUKRnk3WXA2ZGhvK0dGZDJpT28wTGJvaVVWcytxUG9MUkdpYURpc1ZpQ1c3NG1Eait1YXZzeDBGTmFsV09KM29aYgpRUWZjQzJFRVJjSUpGZUlVeG55a3B5dnNxOW1SNm5sSkE1bTBVWEwreVRwK2l4R1NrTXg3aEd4azdXNGlJK1RFCjdTWWtkcE1wckR0TmQ0NkNDcEVqTDRjcDN3S3FPODNESFpiUmlJQlc0TG5tdjgvRmsxMzl4ZmFWS1UxYThPejYKZUl2N1NBakppQ1Zwaml6N1cyWHZGSU02R0lkaXZxSjV0ZURIVUtWZ2JnSFZWWFd6ZTlGTGZVbldlNnhYeGs3UAo3d0FqaFBBOEtNWDAvU2tOTzlzQ284TzBiVkxnbWhRVFpQZWRCbjQvaVZqais2M1BRUUtDQVFFQTJwbXZLakRuCk1kT3FLdzdjdXNXR0IwTHRkeHpnWXQ4RVZYRnFjZHdRSWs4ajJiams5VGZnR3NlQW1BZnd2bCtwbXoyNDlLSGEKOTk1RmpPU01JZ0FCQUE3MWxWQ1ZQZ1MrOVk4NWVnbXlxNmpVcW1kbHJyWlBpQW00RE85UXo2eElGSlRmTEUxawpXajhlZW9PNkVxTWloN21RMGtrK3g0aEJTRS9QRWJxak1ZRE9OcTd3dWtwNG5WLzJ4eUxSVEFrejhkellRNEVxCjVVSEFlSDZXVVJSTTROY1IveHNaeDFXZzBZZU1QY3lGdy96KzlnUzR2cDlZNkdhangvOVByQWhmSmNpcE0vcTgKRDZaQWZpSCtsbW0yb0IzeGQyUUtHN0JZN1pJeHgvZDRSemtsb0FVaTlraG10c21mSTk1LzVPNjVuWTU0QnZJVwpGQ0JWNEg4ekxueEhzUUtDQVFFQXg2MmpWbUtxcXpjUnR5OHloU3ptVHdCK1dRUkN3MVRPU1d3WCs1aUVpMk9sClVQUVgxMm9vU1Y5UXdxb004S203Z0g2dVR1WGw5aUs3eDVjZzBmWEV5WDJ1NmVZZzhjRm1vUC91V2l0UndpVnIKclNjNlJyQzlwNy9ndVRWUElIWmo0MTBPSE15aTNqSGRlL01rT2UzaDJVa3kzcHhNZTNjcEJ6NTJoUTQxem4zWApSa1BLOUJFM2NoeE41VVd0dVk1dlpYSTFEYWlqYjkxWHlac0VZM2RFSklYeTJVOVovS3MvSjJIdDdRV2NwblpuClNyZHFPQitPa25Qb2NPcHo5R1ZtZVRIdThyMkpyWUxXanUrMWhIc1ZRY09YU3hWWWZnV1k3Ulc3OG9CUlBpamgKSk81eHEvNXNWR1Ywa3o4Si8rdmN1VnFwd0dScG5QUWxGOFVxUUFmSTdRS0NBUUVBaDNQTlQyWm9DNzd0WmFyYQo2VHgxdFZBcVZyRms5TDdlTDVlTWJxcitzRk83a2pCNFp0NU5saXBpcTFIWVFnNkN5UGZ4QUZ5K2t2Sit4RFBtCkJUZGRaMHpkcmJ6MkRTemhxc1VweDAzMUVWc1hFOVBuOU45dzNvbXZLd3lyVlZPYWdtNVE3Mkd4T2g1OFkwdjIKWTVBRVdIZUtubExXZk1zWU1KZUxacC93ZVQ4b0NFaFVVQXJQUEN6M2ZDTTk3MUNRaUdEZy9Nc3Y2a2pZMjVFTQowWWF6c0dwejgxQTJwQWFTRk9OWjZmMHVNZWcxai9vVEE4TTNVeUl1Z0VIYWUyM2dqMGdNV0hJWVQ5WWpoa1RJClBTbWFDUk1reVdjS3dHZUFZdzFBblhqaFpiaXFjTUplREorR1RlTVhJaUcvdS9xVXQyVk5TSGgvWjg4MWgxc3EKT3JhMXNRS0NBUUJJd2ZScVhibGllY1p5d1RmZlh1VHNsSGwxWmlBTm5MRXQvNzBkYUEyajNNTTRKRGtydlByQgpBWUlqN0dLYXJyNHJxLzFIc20yQXFsZFIrcmR5eWVMU3FJRTdxU2NIOERpOUlZUndScWliM1piR21TeWE1WHUxCnpDek9UNlp0WmJZditwQlIzaDdhWjhFVWtSdjZIN3ZUdU9CWVRRdHhVWklabWFFR0NvK0Fsa29DeUdFRFhlS2UKS2NJWWNMTkVrYW4xaFEvZjBqcjdYK1BGQ2o4bkh5WXRTTUdjZlZXRXc4RlhVRStwdGduR2ZnNVZJMUFJOHphNApGcFB6MFBvL2ExTlRoZVpUZk16VjlIN0p4bjZWcjJPbmV1Vjk3bUU0U2tIVzRieUNPRTlpSHZNcXlkZVJuRHRNCjVVcjgvRk5nZFVrUUlRRUpvWXo2Szl2NE5WZVh6VDVoQW9JQkFBb0x0eXI0R2ZONE44eTNXRngwcVZXSWVLcm8Kem5USjNEOW5HYkdTS1pERlRQTmI4blBmWTlLTko1R0hhTHJWWkxnQ3Z1TmtSbWh5OERFNXkwNitEZ2xjQS9ERQp0VHgzdTNvb3ZqNHVBdW1OK2dxR0JLRDZWQ0c1amN1SHZlcUliRGZzbDFaWXlTa2s0MCtjZkVseUN0b01MNUpaCkdLVFlTWi9ReTRDeG1LV1FjYkhBMTJvRXAvWWJPc1cwakxTbk1WREY1VDYyRlY2UkdaL2FkYmFQejYvYm9LQ1kKdEx0cTkzUHhtaFVkMWVaempvZHljRU8zMk5wVnk3T0NYWlhocnZBWmV6Zkp5dDcxcVh6UUhZVWxMQ1BVa2YvZQpDN0l3R2FETUlxNGdCKzFVUDd6bHhXVUlFTnFUVlREZzdVNitCdlhvS3cyZTd3eU4xc1lsOS96UXJvST0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-jobservice-config",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "jobservice"
      }
    },
    "stringData": {
      "config.yml": "#Server listening port\nprotocol: \"http\"\nport: 8080\nworker_pool:\n  workers: 10\n  backend: \"redis\"\n  redis_pool:\n    redis_url: \"redis://release-name-redis-master:6379/1\"\n    namespace: \"harbor_job_service_namespace\"\njob_loggers:\n  - name: \"FILE\"\n    level: DEBUG\n    settings: # Customized settings of logger\n      base_dir: \"/var/log/jobs\"\n    sweeper:\n      duration: 14 #days\n      settings: # Customized settings of sweeper\n        work_dir: \"/var/log/jobs\"\n#Loggers for the job service\nloggers:\n  - name: \"STD_OUTPUT\"\n    level: DEBUG\nmetric:\n  enabled: false\n  path: /metrics\n  port: 8001\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-jobservice-envvars",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "jobservice"
      }
    },
    "type": "Opaque",
    "data": {
      "REGISTRY_CREDENTIAL_PASSWORD": "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-jobservice",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "jobservice"
      }
    },
    "type": "Opaque",
    "data": {
      "secret": "RXlMcTBGYW51Y1ZWOTNpaQ=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-nginx",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "nginx"
      }
    },
    "type": "Opaque",
    "data": {
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUl5SVpwTG9WTzVMOC9iOWo0NHZpNFF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl5TURZeE1qRXdNelExTTFvWERUSXpNRFl4TWpFdwpNelExTTFvd0hURWJNQmtHQTFVRUF4TVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUExK0JMRWVFS2IxYVFHL0NPaUNGczJNbmhqZ1ZSYk9HNmZsTzEKeTVPNEdHcHpxNHk5SDlqSDZJLzBmOE84THYvOWQycXo2WjB4Uk9GQmdxL1RWRDV4S0lPbGN2enFXajZTaGkydQpnWnNDeU0zRkVtL0hOcnQ0QWl1aDVhemhXQmxMOHJMOWpyRld6YXBvR1JQcnAxRjIrQ1BrdkpoU1ZrUVQraUJvCkhubzlnRmNYOExCZmZaMCtJMmZEUkpqbDB4cWFSNksyRldIa3plNmh4Rkdub2ZwWHRkYnZzdHJoc2VCWXhnOGQKOHRPTjdCQ2JQaFovVGlWSlFjU2NVNy9VeTRab2pwREsxQ0tYSGQrK1VXcGpHbm9XYVdhcUlKRVVUeW80NjFiLwpTR0N6b1hZVGxucDBXb1JIRzh1T0FKdEgzSWk0c0VMS29SRmNCZkM3Yktwb21yRWptUUlEQVFBQm8zOHdmVEFPCkJnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVUxVkRZRCsvMnp4V0NaOW1zMHV1cjR4MUIrdnN3SFFZRApWUjBSQkJZd0ZJSVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUURmClQwbzJDRUFBQmQvOGMrTHF4Y2EyVktycHBRMjRGeFQ0T2xkdEZXZjR0QkZZSUprMjBUdXY2cFgzUWh5Q1dtbk4KSkJNV2hTRkZYRmczQ1NwTEcvamhHNkdyQkJFTjR0b0l2WlByRzBXWklFVVBXamhRMUgraFEvejlLVWgzNGc3cQoyMUEvWDZZWjJ6WUlENkdRNWN4NkthTVhndlh2cC93Uk0wZm92MmVxWTN6REtncXU1U0dlMWpta0JPeVBwUE5oClZ6TDRXdmwzNTNoSUxvbkRWZGw5RFozUUg5QTllYzhlbUpmZGN2R0I2NGREY0FsOEw5WDR5N3lIUktMT2FkRjIKNXVMaXZMa3Y0cldCaTlJVUt3VGxVUm55QmZuL1phbi9zSy9wcWw0YS9vWllJNHg2VTZ4d3dUK01BVVRZZ1U5VgpOQVliQzNoTkh3dC9xYUFBVW5QaAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMStCTEVlRUtiMWFRRy9DT2lDRnMyTW5oamdWUmJPRzZmbE8xeTVPNEdHcHpxNHk5Ckg5akg2SS8wZjhPOEx2LzlkMnF6NloweFJPRkJncS9UVkQ1eEtJT2xjdnpxV2o2U2hpMnVnWnNDeU0zRkVtL0gKTnJ0NEFpdWg1YXpoV0JsTDhyTDlqckZXemFwb0dSUHJwMUYyK0NQa3ZKaFNWa1FUK2lCb0hubzlnRmNYOExCZgpmWjArSTJmRFJKamwweHFhUjZLMkZXSGt6ZTZoeEZHbm9mcFh0ZGJ2c3RyaHNlQll4ZzhkOHRPTjdCQ2JQaFovClRpVkpRY1NjVTcvVXk0Wm9qcERLMUNLWEhkKytVV3BqR25vV2FXYXFJSkVVVHlvNDYxYi9TR0N6b1hZVGxucDAKV29SSEc4dU9BSnRIM0lpNHNFTEtvUkZjQmZDN2JLcG9tckVqbVFJREFRQUJBb0lCQVFEQVNPbTFFRFZpUE1GNgpFWWh6bXdwQUEzcGtMVHA4K0lkTUZMWWVrZ0p0eFF3bzV1QmlxSTVRQ1VHb09DbTcxNHJtdm1Wb2xmcVh0dWpLClJtQy9iaXNQQWt2eG8zUC9WRExoVDNsYnVqMzlyTU40QzVadm13Wm5NSVF4ZHc3MWtQckVRRWgzdkdCc0t2ZzAKTmprMlBPcnlWYzVkYW5RVW9Pa0daNjAyVUgzTmZLS3ZLS2lQWG8vVjJjQXRwakYzNml5TU5zL0hEc1NnaHJTNgppMFppaUcrODJZRUZCamY0SHh1TW1HdkpnbWoyQTA5T1dyY2VuTXZ0clQ2NDgrSW96d21IdEJnNlRFSURiOGhxCngvbnExVXFPaTNMWUNvM2ZFZEJBa0xZVm5iUHlvWVQvTk9RSktFMTBWVG5Fa0hqRWkyMUE2NUlUbkdDVjYvalAKZU9FTG43cTlBb0dCQVBsNUM5QzVTVzgzS3ZvdmVJTWI3T0t1b2JoNXRiZVRNWmJGZjVhdFRGRHp3d3E0S2NZYwprMHgvYjE4MDdZNmkwYmdXOTZlV1grbU5tMnpJT0EzNFdwK2JkYjBKV2k4ZENMN2NMTkY5c1p4ZDQvQTIvdi9oClNoQ0MxWVVuSmpsMHhHWGdyalErdHByUlR3amFDSHNHSlZsZmZmTVJycXhGWTBtSW4wYk90U1lqQW9HQkFOMkcKTisrY1JTNlVvSUJmNUdqcWhCOFhvdC95RURXOWcrSE1KOVFFUFhmeDdqbGV6bFAwMzF4ZE0wdS9RdTFPNzgvagptUWcweXB5d29sekhySXhPazVDY2JMdWtjWFdOSGlYYjJXcGI5T1pIUDhOa1BRWkw3TWc0Z2Q1dzNuSkRCSzNUClMzaVA2U3JDaFl0L1VPM3M3dEFJYlcrVW5xWFV1MXR5MUpJTWR1VVRBb0dBU0k2NUxnTEY1ZS9nc3hWZGNweUwKb0Q1MFVNZ3RYdkFUcXl0VCtZbjd1VXU4ZllDa3ZiY1A3RjdnRUl1L1VBM3creDdLOXRZWW5VQVBaV3N5U25YaQpQYXVrYWMrdmlDWmtwY1k1enRCRStScWhzZnI4M1lVejJtdURHSkFUWVFDaUlwTmZkMWlLR2FzbzFvVTdsRFJzClpuc01rY2FoeS83K2FxT3UxNVJGUVlzQ2dZRUF1Q0Jjay92M0FPMm1ycTJGdzdMUjJLb2p4aktFU0xiYVRLOE4KbDh0aWNEVVdCbmVIMWY3ZVBQNTJxWW96RGQ2anM4OEFudktLU2swQzEwMWNYVTdlbHI5K0hVVmt6UWxidXFvTwovN21wU0ZLR2JGai81Q0R0a2NwdUg3Ny9Ga2dnTm44KzV0bnZPNHh0eGZJd0NXTDdhTXpvY1dzOXBxYTRpQjFkCkZIdnB3eU1DZ1lFQWpzRkhxYXRTR2htcVJSZnl1SThWQUM3c2ZWZDFUSFNsb0VBUmtNNkxteW5OdDVSdlUrNngKVGVoNko2VEowdjQvMVNhZERRZ2RrUUNYb3RLcmROREs3S016dnBGL1RQWlJCOW5TTHVTcGlsRm1IZHFJcUxNQwp6elNzUTJqd01SaWh0a1M5c1VBNG5CZi9CUHlJZkhhTThsQmt3THBvYUdvbDRJN3ViRW43UGY0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
      "ca.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBuU1pJUm9TOExwWDlVQVFoS0tTNjh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl5TURZeE1qRXdNelExTTFvWERUSXpNRFl4TWpFdwpNelExTTFvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE1cmlsMzF1SXE5ei9EZ2tTVUZuSzYwRjN3OXR1TWZtbitwd3Yxa25OQ0pFYzhLNk8KMHUvQmgzM1BEM3NUN1lSdUtLalIwY1VEUUQzZk03VWthM0ZHUnJIYkhrN28xTzNERk45b0kwYU1kT2Q4WURXWgpXbWpvUGs2MnRobXFZVEVla1ZkeDI3Z0xwc3R0T0lEQWZlZDl6WXl2c3hxYW1IMEhhb0RSQUV3YVVCak1aRG96Cmk0bU43bmxlMXB2TjA2OFI2amd5dUZJWS8waHdoS0NKRzUxTjFrTXhNSTVDWUlJMkdXYmQ2WUh3SUMxK2FjTU0KVTVlbmhWdm5TY1d2M3VQRzJSWlgxcXEvTGZKYVFMSWlmN3F0dzZWL3QyWE9sZ2lZa1FkSUR4K0d2dVNPbVg1OQpSRTB2Mzh1aWkyZytqSVQrbVZIZ1IwbzJ3aS9vdW1oc0dpQ0NHd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTlZRMkEvdjlzOFZnbWZack5McnErTWRRZnI3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRRGdJYjVkNUp0Y1VwSHJ2VGxsa3VxK2t1eWdUemRNVi9RbktqNFBjUGV6SVVJNHhBQ3ZoOUZYCnEvMEZhcXlPdmFKeWtLUnZvZVdJSjFMaVdmZDZFQzUwTjhnZm9RYzBsdS9YMXdGMzdibHRxVlAzc2tUMCtJMHQKSDZwU2FmQnJOb1UwTllTNmQ5aFllRmNkdjFueGV3N3FVc3dYU2RpUmt1ZHcxdmo3T3pyQkFSWGY1V0VZbHlnLwpoSGo2OW9tQkdCVHhQMldYdUZ4Q3Y5SEhURlQ0OHpCZlpIbFppQ2lMRUgzSzBaTU14THNQMFo3TXFaWCtRMmI5CnNDL2RPaU5GTVVrOVZUSEFXdnpPM1pkZ2dQcXpvMnl6WDdSQmxtUFlmMHN6a29DemVsUUdnQ1lwNW9zK2VwQ2wKc0FiVlhwUW1DQ3B2WlhISVM3T25KaTZsbUM0N2FPNmMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-notary-server-envvars",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "notary"
      }
    },
    "type": "Opaque",
    "data": {
      "server_db_url": "cG9zdGdyZXM6Ly9wb3N0Z3Jlczpub3Qtc2VjdXJlLWRhdGFiYXNlLXBhc3N3b3JkQHJlbGVhc2UtbmFtZS1wb3N0Z3Jlc3FsOjU0MzIvbm90YXJ5c2VydmVyP3NzbG1vZGU9ZGlzYWJsZQ==",
      "signer_db_url": "cG9zdGdyZXM6Ly9wb3N0Z3Jlczpub3Qtc2VjdXJlLWRhdGFiYXNlLXBhc3N3b3JkQHJlbGVhc2UtbmFtZS1wb3N0Z3Jlc3FsOjU0MzIvbm90YXJ5c2lnbmVyP3NzbG1vZGU9ZGlzYWJsZQ=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-notary-server",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "notary"
      }
    },
    "type": "Opaque",
    "data": {
      "notary-signer-ca.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lRQkR2LzJFMk1mRG0rVTZTOG1SQjlzVEFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXlNRFl4TWpFd016UTFNbG9YRFRJegpNRFl4TWpFd016UTFNbG93R3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5ac0tNdlNjcDJwUGtyNktwcmZCck1tSmxTY05ZWkEKZFJEc1FKMEZ2QUZVT2E1K21mM09DTXZmUjVoaUJtWVZZS1dPOEw3QjJjckpHeVNKTEFtcjU0dldSdnlIYnFPTwpsTTNvRkxRWWYwV1pEZFhsT3dBd3pxNEZkUUJnU1MrcXlWQVpyUXduMUJPeW9LbXpwc052ZmhkcmhmNzN4eDIrCkwxRWlPcWRYb2dVZ3haRlJjbHlnM1NoNVBiMEVmRDExSk9oaHdIVDFQckE1NXZtTGJ1NzdKd21OcHdoY2lMbVoKNlBGQ3ZQekNTS21zT2F1Y1NWT3gwSmRLbzBWbHZuYkZ4eUZYbkR6NjZLTTMzWm5NOTlBeTlHZDdQeWNROEh3UwpHd0xOdW9IeGFJODBnZURSUStaWlZqa1YrUG51U3MxWWZlMVVlYUxKQVU3eHdEdCtCdG10RVFrQ0F3RUFBYU5oCk1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSSnAvOTIrNGhzTDA4WXc0K3JjOXZXMzgzdApSREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBRlNqZjY1MUt2RzFVSTVHSHp4QjYxQzM3M1J5YW13NHZzY1R2Clh6bmp3TWdVVlJGNHpYcmJLTEl4K3JZQlJzODRhbkxMbm5KUkRvVDFqUFlvcFE5RTNmV1h5Q2xvKzhVeFhuck8Kb2lHekNOUU94UkpuV0NNSWU0YWZCb0wwWkhzQ1pWLzlNSityZnZlQVhFRFhmWU9CQ2JiM3BBVjRmZG9ueGJJMQpRYXY2ZWJ4MExTQVY5Y2FWSVhNRG1JaS9pVXZueXRHbDdLNUF1czFYOE1nRmRETGNkOHlrUllhUWExLy8xVVg2CllNNWdMU1JnNE9aV1BOaHpLRGJPNVpDNzhyYUk0NCtvLzV5aGdvb2hob3pSQVBtd2piNXRiU2dtSUwyZGwwbzUKWXRGSHJNUWNPREg2WmZ6ckVFdmR4SUZGSWQzTElXQm9JWENmbzVVUWxkdGZPREU5MFE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
      "notary-signer.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR3akNDQXFxZ0F3SUJBZ0lRUXBzNkJwd2tjQVFPL0NycXcvRGszakFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXlNRFl4TWpFd016UTFNbG9YRFRJegpNRFl4TWpFd016UTFNbG93TERFcU1DZ0dBMVVFQXhNaGNtVnNaV0Z6WlMxdVlXMWxMV2hoY21KdmNpMXViM1JoCmNua3RjMmxuYm1WeU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMUFWbG8vZ1AKVkFPeUJDU3RWK25aZzJUUkZwdFR0dThUMVBMTEQzY0pMVzJCUXpiYjhCY2pFT0hzczllNkQ3NTI4S0FKN0hMQwo3b0I1NVRGeGlsZk5DNmc4Uys2b250L2lHOG1aOFVwZzN6blg0aWd6NjJsQnVRQ0tpaW4rY250bTdtbUJVNndiCnVRL1pLVnZiTitYVmo1a3huMGZVbHJKSnpuaEliQ0Rpc3lxR05KbldoVExnek1oeUM4YXBRT1VMbkY1WlhhckwKN3NmaEdSK2Q0YTdyZ2crc0ZEVEltcWVYb3dDQ1ZXUHNSOVdlYmo3WUtkcVFjRGdaYWxVWWdjYTdyMXpYS0s3bAo3ck5wUjc4RUdPVm53VTljaHlDcDJqR2J0SjFRMGx4RFhOQXlQb2p0QnQrc3JvMmRMWEIrN1YxUjUrLzlqNllDClMwMFp0ajV0Zi9jVkZRSURBUUFCbzRId01JSHRNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVUKQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSSgpwLzkyKzRoc0wwOFl3NCtyYzl2VzM4M3RSRENCakFZRFZSMFJCSUdFTUlHQmdpOGljbVZzWldGelpTMXVZVzFsCkxXaGhjbUp2Y2kxdWIzUmhjbmt0YzJsbmJtVnlMbVJsWm1GMWJIUXVjM1pqSW9JckluSmxiR1ZoYzJVdGJtRnQKWlMxb1lYSmliM0l0Ym05MFlYSjVMWE5wWjI1bGNpNWtaV1poZFd4MElvSWhjbVZzWldGelpTMXVZVzFsTFdoaApjbUp2Y2kxdWIzUmhjbmt0YzJsbmJtVnlNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUN2OUFYaFRLR05xZ1FUCmVqcVUwWUtpU0V0UlR1ZG1mRWJreTRSZVlEZ1BTbkNSSkduOTBkejB0ZU1HVWdST0F3WUd6b1hIc0NqZUtWSW8KaXZMaUx3QUh0ZVBiSlJRb0xNMm4xTlRlVnQzcUJVNE5uSXYrQ08rUDlHRFkyQnpOTlcwY0lyWi80bzhicHIxegp2My8zZHBNQUw0YU4xV2tmaVA3dDVSQU9HdEt4NUd5K1pBMjN6c0h2Sis5bExDa0RBOHdhRlJFSmZOejhudTA0Cll4R2wzRVpDSmJpRFRGbzRWTno4dnlVSnJaOHpJNEo1bEg4bDFkbnlBWmxuUGVBWDFrVDBXeGJDVE9NZkZKY2oKbEE0OGlHaUs3cXhFajRuaUtIN3doc29nMEVSQjczTU9nSERwRm4rdXhmeFRoZEhhbCtBZzd1WmhQdkhxQTZtdApKajl6aGN0MwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
      "notary-signer.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMUFWbG8vZ1BWQU95QkNTdFYrblpnMlRSRnB0VHR1OFQxUExMRDNjSkxXMkJRemJiCjhCY2pFT0hzczllNkQ3NTI4S0FKN0hMQzdvQjU1VEZ4aWxmTkM2ZzhTKzZvbnQvaUc4bVo4VXBnM3puWDRpZ3oKNjJsQnVRQ0tpaW4rY250bTdtbUJVNndidVEvWktWdmJOK1hWajVreG4wZlVsckpKem5oSWJDRGlzeXFHTkpuVwpoVExnek1oeUM4YXBRT1VMbkY1Wlhhckw3c2ZoR1IrZDRhN3JnZytzRkRUSW1xZVhvd0NDVldQc1I5V2ViajdZCktkcVFjRGdaYWxVWWdjYTdyMXpYS0s3bDdyTnBSNzhFR09WbndVOWNoeUNwMmpHYnRKMVEwbHhEWE5BeVBvanQKQnQrc3JvMmRMWEIrN1YxUjUrLzlqNllDUzAwWnRqNXRmL2NWRlFJREFRQUJBb0lCQUNGbjhFblRqZWE0NWxXTQp5ZHN1TjExaWh5Yyt0Z1AreTJza0RpYVRwTmlKaG5KbXRHU3g0STZLYWxjenlGY3V0V0xZZEhmUzVTL2JBbG5BClhwbGptQ1VjRHRRUCtIVi81UXBueTErZlRvQWRod3hWTlVrRVBweTlueGFCNDF0NllnOXloRFFBekNWdWY5THEKYkRIMGZwK3ZqWWdCTTFmREk2bnFmYzY3cDd4K3oxSUdZdC8wU1diNE42VVd0K0ppL2l5QUlibm5nWHNVN3k0MgpvaFRHdUpSSWMwNUlhN2ZMMXU0RUhUMEI2SWxzbG1uTmZOL3M1VGpGd2hGb0Yya0VpSEljemtRV2NUSkJBUnJGCnU1THpIZzd5cHNmSWlrMUdZOU9ydjlzcStZYkFpKy9rQlZDK3ZJWFMxQVh4TVZrSGJVbXh0S3hLbjVlSWxJM3YKSkU2RU93RUNnWUVBNHpJR1hxbEs5N2NrTU9qRk5nUmpYeEpVamJLMUlJVjNyOWs4ZzdLbFFMU0VuNUIyeGg2UwpGb0hlNWZEVWR4a045MHVFYU5aRzFKZ051Y3RpZE82MjNwZ0FEVmNuVlZxN0lIWkc2bkU1dnVtc0t6OHNDVExUCloyOWJ3RlhCYW1UbzBjMmx6UXUyWktHUGE0dHBkREE5MURobnI0ZEFZUWg2YTJubFhoTEg2S0VDZ1lFQTd1YmQKdU5ySlNLYUl4UmlJMXJralRYTlNSL2tTcEVHOE9uNUVrNGVHU1dWWHNNUk9pN29HWFFsQmRranA5WVdGOVdzZgphM2szZXRrN2FOQ0hCYmp4K21FUDdLZFEvYkczREdHakxnUlRPaDdmR0tDVUNXRDk0clE4RW9XUEZEbytyU0xMClMzOGFFOU5MTTNMTE5sRTF2d0pQK0FGZm9obWRZRmNRd3UxeGsvVUNnWUJDSjQvWlFueFUweHdUcmNPMjdlSXQKamIzWElNRkMvZm9TMXpPYXVZc0s0MFYyM083bzA0QUFVOEtldTloeDhYYXltbWVzeXpBR3VWdk56TjRYWkdjVgpPN2RRS3grRjZBeHk4RjNINkQ1RFMvRlpDbVQ5TExLSC9OSC9tRGpnalErSi85S1dlU0diL2Jzd09vRHpWeFM1CjFjN0RPcVBSWFZHZ00wNlpiT2lPNFFLQmdBSE0vN0xiQTFWbTIvVVFZRWV1RVpRTjRIcm1aN3VSTzBmOWw2cTkKQk1nYzJYSmRxSEhwTHc4WWVNUFpmTm42N2EyUjV5UzZQeTdQNEdERDRhQ3JhamVHNzhYSzVSTmtlWXJBV2FpSgpJODkyV0J3cGFiUkFaT21HamtWZGVGeWdxOFJHVk4zMjBVMkE5RG9wRFZzVmRhQkE5alZhWFV3dGdVQXVwOU93ClVvRFpBb0dCQU43d3VhMVNkaTlpd3BmdnFCZW5uM3BvUXk2MEp2ZjlGbFdCbVVmTmlRT3pOL2d0eFRxd1F5bkYKcXpFTENTanNFSUNlRnFCTzBPSDlRT3VmNFRlSlBaRk5aREd0L2hJb0tHWFRFbHcyTkcwdmN2eGs2Vk9SVUROVApIMVFLaXM1S2RUS09xSkJVcDg5QWYyQmVUWjh5RnlqUGo4eEFuUzVwb09xQ1Back51d3BzCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
      "server-config.postgres.json": "ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogInJlbGVhc2UtbmFtZS1oYXJib3Itbm90YXJ5LXNpZ25lciIsCiAgICAicG9ydCI6ICI3ODk5IiwKICAgICJ0bHNfY2FfZmlsZSI6ICIvZXRjL25vdGFyeS9ub3Rhcnktc2lnbmVyLWNhLmNydCIsCiAgICAia2V5X2FsZ29yaXRobSI6ICJlY2RzYSIKICB9LAogICJsb2dnaW5nIjogewogICAgImxldmVsIjogImRlYnVnIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6bm90LXNlY3VyZS1kYXRhYmFzZS1wYXNzd29yZEByZWxlYXNlLW5hbWUtcG9zdGdyZXNxbDo1NDMyL25vdGFyeXNlcnZlcj9zc2xtb2RlPWRpc2FibGUiCiAgfSwKICAiYXV0aCI6IHsKICAgICAgInR5cGUiOiAidG9rZW4iLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAgICJyZWFsbSI6ICJodHRwczovL2NvcmUuaGFyYm9yLmRvbWFpbi9zZXJ2aWNlL3Rva2VuIiwKICAgICAgICAgICJzZXJ2aWNlIjogImhhcmJvci1ub3RhcnkiLAogICAgICAgICAgImlzc3VlciI6ICJoYXJib3ItdG9rZW4taXNzdWVyIiwKICAgICAgICAgICJyb290Y2VydGJ1bmRsZSI6ICIvcm9vdC5jcnQiCiAgICAgIH0KICB9Cn0K",
      "signer-config.postgres.json": "ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvbm90YXJ5L25vdGFyeS1zaWduZXIuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9ub3Rhcnkvbm90YXJ5LXNpZ25lci5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJkZWJ1ZyIKICB9LAogICJzdG9yYWdlIjogewogICAgImJhY2tlbmQiOiAicG9zdGdyZXMiLAogICAgImRiX3VybCI6ICJwb3N0Z3JlczovL3Bvc3RncmVzOm5vdC1zZWN1cmUtZGF0YWJhc2UtcGFzc3dvcmRAcmVsZWFzZS1uYW1lLXBvc3RncmVzcWw6NTQzMi9ub3RhcnlzaWduZXI/c3NsbW9kZT1kaXNhYmxlIiwKICAgICJkZWZhdWx0X2FsaWFzIjogImRlZmF1bHRhbGlhcyIKICB9Cn0K"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-registry",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "REGISTRY_HTPASSWD": "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt",
      "REGISTRY_HTTP_SECRET": "SDJvMzhHQm9xWUVGVFhJSA==",
      "REGISTRY_REDIS_PASSWORD": ""
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-harbor-trivy-envvars",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "trivy"
      }
    },
    "type": "Opaque",
    "data": {
      "SCANNER_TRIVY_GITHUB_TOKEN": "",
      "SCANNER_REDIS_URL": "cmVkaXM6Ly9yZWxlYXNlLW5hbWUtcmVkaXMtbWFzdGVyOjYzNzkvNQ==",
      "SCANNER_STORE_REDIS_URL": "cmVkaXM6Ly9yZWxlYXNlLW5hbWUtcmVkaXMtbWFzdGVyOjYzNzkvNQ==",
      "SCANNER_JOB_QUEUE_REDIS_URL": "cmVkaXM6Ly9yZWxlYXNlLW5hbWUtcmVkaXMtbWFzdGVyOjYzNzkvNQ=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-postgresql-extended-configuration",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.6.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      }
    },
    "data": {
      "override.conf": "max_connections = 1024"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-postgresql-init-scripts",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.6.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "initial-notaryserver.sql": "CREATE DATABASE notaryserver;\nCREATE USER server;\nalter user server with encrypted password 'password';\nGRANT ALL PRIVILEGES ON DATABASE notaryserver TO server;\n",
      "initial-notarysigner.sql": "CREATE DATABASE notarysigner;\nCREATE USER signer;\nalter user signer with encrypted password 'password';\nGRANT ALL PRIVILEGES ON DATABASE notarysigner TO signer;\n",
      "initial-registry.sql": "CREATE DATABASE registry ENCODING 'UTF8';\n\\c registry;\nCREATE TABLE schema_migrations(version bigint not null primary key, dirty boolean not null);\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-configuration",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.12.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "redis.conf": "# User-supplied common configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"\n# End of common configuration",
      "master.conf": "dir /data\n# User-supplied master configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of master configuration",
      "replica.conf": "dir /data\nslave-read-only yes\n# User-supplied replica configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of replica configuration"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-health",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.12.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "ping_readiness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] && [ \"$responseFirstWord\" != \"LOADING\" ] && [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] && [ \"$responseFirstWord\" != \"LOADING\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
      "ping_liveness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-scripts",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.12.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "start-master.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--protected-mode\" \"no\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-harbor-chartmuseum-envvars",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "chartmuseum"
      }
    },
    "data": {
      "PORT": "9999",
      "CACHE": "redis",
      "CACHE_REDIS_ADDR": "release-name-redis-master:6379",
      "CACHE_REDIS_DB": "3",
      "BASIC_AUTH_USER": "chart_controller",
      "DEPTH": "1",
      "DEBUG": "true",
      "LOG_JSON": "false",
      "DISABLE_METRICS": "false",
      "DISABLE_API": "false",
      "DISABLE_STATEFILES": "false",
      "ALLOW_OVERWRITE": "true",
      "AUTH_ANONYMOUS_GET": "false",
      "STORAGE_TIMESTAMP_TOLERANCE": "1s",
      "STORAGE": "local",
      "STORAGE_LOCAL_ROOTDIR": "/bitnami/data"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-harbor-core-envvars",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "core"
      }
    },
    "data": {
      "PORT": "8080",
      "DATABASE_TYPE": "postgresql",
      "POSTGRESQL_HOST": "release-name-postgresql",
      "POSTGRESQL_PORT": "5432",
      "POSTGRESQL_USERNAME": "postgres",
      "POSTGRESQL_DATABASE": "registry",
      "POSTGRESQL_SSLMODE": "disable",
      "EXT_ENDPOINT": "https://core.harbor.domain",
      "CORE_URL": "http://release-name-harbor-core:80",
      "JOBSERVICE_URL": "http://release-name-harbor-jobservice:80",
      "REGISTRY_URL": "http://release-name-harbor-registry:5000",
      "TOKEN_SERVICE_URL": "http://release-name-harbor-core:80/service/token",
      "WITH_NOTARY": "true",
      "NOTARY_URL": "http://release-name-harbor-notary-server:4443",
      "CORE_LOCAL_URL": "http://127.0.0.1:8080",
      "CFG_EXPIRATION": "5",
      "ADMIRAL_URL": "NA",
      "WITH_TRIVY": "true",
      "TRIVY_ADAPTER_URL": "http://release-name-harbor-trivy:8080",
      "REGISTRY_STORAGE_PROVIDER_NAME": "filesystem",
      "WITH_CHARTMUSEUM": "true",
      "CHART_REPOSITORY_URL": "http://release-name-harbor-chartmuseum:80",
      "LOG_LEVEL": "debug",
      "CONFIG_PATH": "/etc/core/app.conf",
      "SYNC_REGISTRY": "false",
      "CHART_CACHE_DRIVER": "redis",
      "PORTAL_URL": "http://release-name-harbor-portal:80",
      "REGISTRY_CONTROLLER_URL": "http://release-name-harbor-registry:8080",
      "REGISTRY_CREDENTIAL_USERNAME": "harbor_registry_user",
      "PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE": "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry",
      "HTTP_PROXY": "",
      "HTTPS_PROXY": "",
      "NO_PROXY": "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-chartmuseum,release-name-harbor-clair,release-name-harbor-notary-server,release-name-harbor-notary-signer,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,127.0.0.1,localhost,.local,.internal"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-harbor-core",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "core"
      }
    },
    "data": {
      "app.conf": "appname = Harbor\nrunmode = prod\nenablegzip = true\n\n[prod]\nhttpport = \"8080\"\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-harbor-jobservice-envvars",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "jobservice"
      }
    },
    "data": {
      "CORE_URL": "http://release-name-harbor-core:80",
      "TOKEN_SERVICE_URL": "http://release-name-harbor-core:80/service/token",
      "REGISTRY_URL": "http://release-name-harbor-registry:5000",
      "REGISTRY_CONTROLLER_URL": "http://release-name-harbor-registry:8080",
      "REGISTRY_CREDENTIAL_USERNAME": "harbor_registry_user",
      "HTTP_PROXY": "",
      "HTTPS_PROXY": "",
      "NO_PROXY": "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-chartmuseum,release-name-harbor-clair,release-name-harbor-notary-server,release-name-harbor-notary-signer,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,127.0.0.1,localhost,.local,.internal",
      "LOG_LEVEL": "debug"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-harbor-nginx",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "nginx"
      }
    },
    "data": {
      "nginx.conf": "worker_processes auto;\npid /opt/bitnami/nginx/tmp/nginx.pid;\n\nevents {\n  worker_connections 3096;\n  use epoll;\n  multi_accept on;\n}\n\nhttp {\n  client_body_temp_path  \"/opt/bitnami/nginx/tmp/client_body\" 1 2;\n  proxy_temp_path        \"/opt/bitnami/nginx/tmp/proxy\" 1 2;\n  fastcgi_temp_path      \"/opt/bitnami/nginx/tmp/fastcgi\" 1 2;\n  scgi_temp_path         \"/opt/bitnami/nginx/tmp/scgi\" 1 2;\n  uwsgi_temp_path        \"/opt/bitnami/nginx/tmp/uwsgi\" 1 2;\n\n  tcp_nodelay on;\n\n  # this is necessary for us to be able to disable request buffering in all cases\n  proxy_http_version 1.1;\n\n  upstream core {\n    server release-name-harbor-core:80;\n  }\n\n  upstream portal {\n    server release-name-harbor-portal:80;\n  }\n  upstream notary-server {\n    server release-name-harbor-notary-server:4443;\n  }\n\n  log_format timed_combined '[$time_local]:$remote_addr - '\n    '\"$request\" $status $body_bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\" '\n    '$request_time $upstream_response_time $pipe';\n\n  access_log /dev/stdout timed_combined;\n  server {\n    listen 4443 ssl;\n    listen [::]:4443 ssl;\n    server_tokens off;\n    # ssl\n    ssl_certificate /etc/nginx/cert/tls.crt;\n    ssl_certificate_key /etc/nginx/cert/tls.key;\n\n    # recommendations from https://raymii.org/s/tutorials/strong_ssl_security_on_nginx.html\n    ssl_protocols tlsv1.1 tlsv1.2;\n    ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:ssl:10m;\n\n    # disable any limits to avoid http 413 for large image uploads\n    client_max_body_size 0;\n\n    # required to avoid http 411: see issue #1486 (https://github.com/docker/docker/issues/1486)\n    chunked_transfer_encoding on;\n\n    location /v2/ {\n      proxy_pass http://notary-server/v2/;\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n\n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\n  }\n\n  server {\n    listen 8443 ssl;\n    listen [::]:8443 ssl;\n    server_tokens off;\n    # SSL\n    ssl_certificate /etc/nginx/cert/tls.crt;\n    ssl_certificate_key /etc/nginx/cert/tls.key;\n\n    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html\n    ssl_protocols TLSv1.1 TLSv1.2;\n    ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n\n    # disable any limits to avoid HTTP 413 for large image uploads\n    client_max_body_size 0;\n\n    # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)\n    chunked_transfer_encoding on;\n\n    # Add extra headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains; preload\";\n    add_header X-Frame-Options DENY;\n    add_header Content-Security-Policy \"frame-ancestors 'none'\";\n\n    location / {\n      proxy_pass http://portal/;\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n\n      # Add Secure flag when serving HTTPS\n      proxy_cookie_path / \"/; HttpOnly; Secure\";\n\n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\n\n    location /api/ {\n      proxy_pass http://core/api/;\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_cookie_path / \"/; Secure\";\n\n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\n\n    location /chartrepo/ {\n      proxy_pass http://core/chartrepo/;\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_cookie_path / \"/; Secure\";\n\n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\n\n    location /c/ {\n      proxy_pass http://core/c/;\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_cookie_path / \"/; Secure\";\n\n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\n\n    location /v1/ {\n      return 404;\n    }\n\n    location /v2/ {\n      proxy_pass http://core/v2/;\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n\n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\n\n    location /service/ {\n      proxy_pass http://core/service/;\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_cookie_path / \"/; Secure\";\n\n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\n\n  location /service/notifications {\n      return 404;\n    }\n  }\n  server {\n      listen 8080;\n      listen [::]:8080;\n      return 301 https://$host$request_uri;\n  }\n}\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-harbor-portal",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "portal"
      }
    },
    "data": {
      "nginx.conf": "worker_processes auto;\npid /tmp/nginx.pid;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    client_body_temp_path /tmp/client_body_temp;\n    proxy_temp_path /tmp/proxy_temp;\n    fastcgi_temp_path /tmp/fastcgi_temp;\n    uwsgi_temp_path /tmp/uwsgi_temp;\n    scgi_temp_path /tmp/scgi_temp;\n    server {\n        listen 8080;\n        listen [::]:8080;\n        server_name  localhost;\n        root   /opt/bitnami/harbor;\n        index  index.html index.htm;\n        include /opt/bitnami/nginx/conf/mime.types;\n        gzip on;\n        gzip_min_length 1000;\n        gzip_proxied expired no-cache no-store private auth;\n        gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;\n        location / {\n            try_files $uri $uri/ /index.html;\n        }\n        location = /index.html {\n            add_header Cache-Control \"no-store, no-cache, must-revalidate\";\n        }\n    }\n}\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-harbor-registry",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "config.yml": "version: 0.1\nlog:\n  level: debug\n  fields:\n    service: registry\nstorage:\n  filesystem:\n    rootdirectory: /storage\n  cache:\n    layerinfo: redis\n  maintenance:\n    uploadpurging:\n      enabled: false\n  delete:\n    enabled: true\n  redirect:\n    disable: false\nredis:\n  addr: \"release-name-redis-master:6379\"\n  db: 2\nhttp:\n  relativeurls: false\n  addr: :5000\n  # set via environment variable\n  # secret: placeholder\n  debug:\n    addr: localhost:5001\nauth:\n  htpasswd:\n    realm: harbor-registry-basic-realm\n    path: /etc/registry/passwd\nvalidation:\n  disabled: true\n",
      "ctl-config.yml": "---\nprotocol: \"http\"\nport: 8080\nlog_level: debug\nregistry_config: \"/etc/registry/config.yml\"\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-harbor-trivy-envvars",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "trivy"
      }
    },
    "data": {
      "SCANNER_LOG_LEVEL": "debug",
      "SCANNER_TRIVY_CACHE_DIR": "/bitnami/harbor-adapter-trivy/.cache/trivy",
      "SCANNER_TRIVY_REPORTS_DIR": "/bitnami/harbor-adapter-trivy/.cache/reports",
      "SCANNER_TRIVY_DEBUG_MODE": "false",
      "SCANNER_TRIVY_VULN_TYPE": "os,library",
      "SCANNER_TRIVY_SEVERITY": "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL",
      "SCANNER_TRIVY_IGNORE_UNFIXED": "false",
      "SCANNER_TRIVY_SKIP_UPDATE": "false",
      "SCANNER_TRIVY_INSECURE": "false",
      "SCANNER_API_SERVER_ADDR": ":8080",
      "HTTP_PROXY": "",
      "HTTPS_PROXY": "",
      "NO_PROXY": "release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-chartmuseum,release-name-harbor-clair,release-name-harbor-notary-server,release-name-harbor-notary-signer,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,127.0.0.1,localhost,.local,.internal"
    }
  },
  {
    "kind": "PersistentVolumeClaim",
    "apiVersion": "v1",
    "metadata": {
      "name": "release-name-harbor-chartmuseum",
      "namespace": "default",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "chartmuseum"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "5Gi"
        }
      }
    }
  },
  {
    "kind": "PersistentVolumeClaim",
    "apiVersion": "v1",
    "metadata": {
      "name": "release-name-harbor-jobservice",
      "namespace": "default",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "jobservice"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "1Gi"
        }
      }
    }
  },
  {
    "kind": "PersistentVolumeClaim",
    "apiVersion": "v1",
    "metadata": {
      "name": "release-name-harbor-registry",
      "namespace": "default",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "registry"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "5Gi"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-hl",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.6.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.6.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "sessionAffinity": "None",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-headless",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.12.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-master",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.12.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "master"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "internalTrafficPolicy": "Cluster",
      "sessionAffinity": "None",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "master"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-harbor-chartmuseum",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "chartmuseum"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80,
          "targetPort": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "harbor",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "chartmuseum"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-harbor-core",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "core"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80,
          "targetPort": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "harbor",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "core"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-harbor-jobservice",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "jobservice"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80,
          "targetPort": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "harbor",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "jobservice"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-harbor",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "nginx"
      },
      "annotations": null
    },
    "spec": {
      "type": "LoadBalancer",
      "externalTrafficPolicy": "Cluster",
      "sessionAffinity": "None",
      "ports": [
        {
          "name": "http",
          "port": 80,
          "targetPort": "http"
        },
        {
          "name": "https",
          "port": 443,
          "targetPort": "https"
        },
        {
          "name": "notary",
          "port": 4443,
          "targetPort": "notary"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "harbor",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "nginx"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-harbor-notary-server",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "notary-server",
          "port": 4443,
          "targetPort": "notary-server"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "harbor",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "notary-server"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-harbor-notary-signer",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "notary-signer",
          "port": 7899,
          "targetPort": "notary-signer"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "harbor",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "notary-signer"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-harbor-portal",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80,
          "targetPort": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "harbor",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "portal"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-harbor-registry",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "registry",
          "port": 5000
        },
        {
          "name": "controller",
          "port": 8080
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "harbor",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "registry"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-harbor-trivy",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "trivy"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "api-server",
          "protocol": "TCP",
          "port": 8080,
          "targetPort": "api-server"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "harbor",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "trivy"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-harbor-chartmuseum",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "chartmuseum"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "harbor",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "chartmuseum"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "harbor",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "chartmuseum"
          },
          "annotations": {
            "checksum/configmap-envvars": "4499a1fd83868f718a80b43d1cca9dcf56ce93cc2793f46a978fd9510a13c134",
            "checksum/secret": "55ddccf6d3f271f3cbb0317148bae9cd1142da3402d413fa6adde7497ee4815e",
            "checksum/secret-core": "99119cc071c741f8d841072f1a4eab05016d0e78aee207c210976cd043c48f2b"
          }
        },
        "spec": {
          "automountServiceAccountToken": false,
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "harbor",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "chartmuseum"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "containers": [
            {
              "name": "chartmuseum",
              "image": "docker.io/bitnami/chartmuseum:0.14.0-debian-11-r4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 10988,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "DEBUG",
                  "value": "0"
                },
                {
                  "name": "BASIC_AUTH_PASS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-harbor-core",
                      "key": "secret"
                    }
                  }
                }
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-harbor-chartmuseum-envvars"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-harbor-chartmuseum-secret"
                  }
                }
              ],
              "ports": [
                {
                  "containerPort": 9999,
                  "name": "http"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/health",
                  "port": "http",
                  "scheme": "HTTP"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/health",
                  "port": "http",
                  "scheme": "HTTP"
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "chartmuseum-data",
                  "mountPath": "/bitnami/data",
                  "subPath": null
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "chartmuseum-data",
              "persistentVolumeClaim": {
                "claimName": "release-name-harbor-chartmuseum"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-harbor-core",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "core"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "harbor",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "core"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "harbor",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "core"
          },
          "annotations": {
            "checksum/configmap": "228083943594e83a6df900821474567ac7317164346fc058441bfc59ed672725",
            "checksum/configmap-envvars": "c7ce8680c4d77a643de6349493d661b56f14ec661695bbdd7c3faf87f894ea38",
            "checksum/secret": "1fa6ba7cd0489a19e8b5eec4792d736ea6167bd75fb4021c884c0b5bd4fe587c",
            "checksum/secret-envvars": "a3b06ce37f9caa436941a36e26311b5f5ad9847d7d293ced58d5285f55048da7",
            "checksum/secret-jobservice": "2243ac3ca2ae73b1125734c3271e31b69b506310751fff56df633d28946116a5"
          }
        },
        "spec": {
          "automountServiceAccountToken": false,
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "harbor",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "core"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "containers": [
            {
              "name": "core",
              "image": "docker.io/bitnami/harbor-core:2.5.1-debian-11-r4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 11343,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "CORE_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-harbor-core",
                      "key": "secret"
                    }
                  }
                },
                {
                  "name": "JOBSERVICE_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-harbor-jobservice",
                      "key": "secret"
                    }
                  }
                }
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-harbor-core-envvars"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-harbor-core-envvars"
                  }
                }
              ],
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/api/v2.0/ping",
                  "scheme": "HTTP",
                  "port": "http"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/api/v2.0/ping",
                  "scheme": "HTTP",
                  "port": "http"
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/etc/core/app.conf",
                  "subPath": "app.conf"
                },
                {
                  "name": "secret-key",
                  "mountPath": "/etc/core/key",
                  "subPath": "key"
                },
                {
                  "name": "token-service-private-key",
                  "mountPath": "/etc/core/private_key.pem",
                  "subPath": "tls.key"
                },
                {
                  "name": "ca-download",
                  "mountPath": "/etc/core/ca"
                },
                {
                  "name": "psc",
                  "mountPath": "/etc/core/token"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-harbor-core",
                "items": [
                  {
                    "key": "app.conf",
                    "path": "app.conf"
                  }
                ]
              }
            },
            {
              "name": "secret-key",
              "secret": {
                "secretName": "release-name-harbor-core",
                "items": [
                  {
                    "key": "secretKey",
                    "path": "key"
                  }
                ]
              }
            },
            {
              "name": "token-service-private-key",
              "secret": {
                "secretName": "release-name-harbor-core"
              }
            },
            {
              "name": "ca-download",
              "secret": {
                "secretName": "release-name-harbor-nginx"
              }
            },
            {
              "name": "psc",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-harbor-jobservice",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "jobservice"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "harbor",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "jobservice"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "harbor",
            "helm.sh/chart": "harbor-13.2.7",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "jobservice"
          },
          "annotations": {
            "checksum/configmap-env": "c792226302353a249836244f94fdbcc25e8f6c417577dee66ae196253f621a86",
            "checksum/secret-env": "6b963b59f27240d3a412fc55ff11812a6bc2056d6239e4d471538ca2acae3115",
            "checksum/secret-config": "f490fa66dcd9dfeaf8a2d3864230935e7e7064ce2070e7cf58cb3c81b445b17e",
            "checksum/secret": "54a24b34d2d1f96c381d6af3b08ec8136c5604a34ad921238b3e5f64934a6d95",
            "checksum/secret-core": "80cc18335a2579b98ea91d5927094452a44f37d4888ec870e627059b01e52946"
          }
        },
        "spec": {
          "automountServiceAccountToken": false,
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "harbor",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "jobservice"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "initContainers": null,
          "containers": [
            {
              "name": "jobservice",
              "image": "docker.io/bitnami/harbor-jobservice:2.5.1-debian-11-r4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 10432,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "CORE_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-harbor-core",
                      "key": "secret"
                    }
                  }
                },
                {
                  "name": "JOBSERVICE_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-harbor-jobservice",
                      "key": "secret"
                    }
                  }
                }
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-harbor-jobservice-envvars"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-harbor-jobservice-envvars"
                  }
                }
              ],
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/api/v1/stats",
                  "port": "http",
                  "scheme": "HTTP"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/api/v1/stats",
                  "port": "http",
                  "scheme": "HTTP"
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "jobservice-config",
                  "mountPath": "/etc/jobservice/config.yml",
                  "subPath": "config.yml"
                },
                {
                  "name": "job-logs",
                  "mountPath": "/var/log/jobs",
                  "subPath": null
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "jobservice-config",
              "secret": {
                "secretName": "release-name-harbor-jobservice-config"
              }
            },
            {
              "name": "job-logs",
              "persistentVolumeClaim": {
                "claimName": "release-name-harbor-jobservice"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-harbor-nginx",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "nginx"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "harbor",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "nginx"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "harbor",
            "helm.sh/chart": "harbor-13.2.7",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "nginx"
          },
          "annotations": {
            "checksum/configmap": "15fa3dbdacc3b6af9736424b6a90eb8a5f37573d31642e69402b2b8cb1b869f6",
            "checksum/tls-secret": "facd3f7b199db1f060dacb5a62a424882c719191923eef652550f3991be335d7"
          }
        },
        "spec": {
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "harbor",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "nginx"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "containers": [
            {
              "name": "nginx",
              "image": "docker.io/bitnami/nginx:1.21.6-debian-11-r4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 11077,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                }
              ],
              "envFrom": null,
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http"
                },
                {
                  "containerPort": 8443,
                  "name": "https"
                },
                {
                  "containerPort": 4443,
                  "name": "notary"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/",
                  "port": "https",
                  "scheme": "HTTPS"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/",
                  "port": "https",
                  "scheme": "HTTPS"
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/nginx/conf/nginx.conf",
                  "subPath": "nginx.conf"
                },
                {
                  "name": "certificate",
                  "mountPath": "/etc/nginx/cert"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-harbor-nginx"
              }
            },
            {
              "name": "certificate",
              "secret": {
                "secretName": "release-name-harbor-nginx"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-harbor-notary-server",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "notary-server"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "harbor",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "notary-server"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "harbor",
            "helm.sh/chart": "harbor-13.2.7",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "notary-server"
          },
          "annotations": {
            "checksum/secret": "7023f233f13dfa290149bfbdc5fb7b1220e0f11c00db434b69efa05f4e55e178",
            "checksum/secret-core": "8096c91c9ba68b72c35f772bc9cdbb7d5e12c2f181a6abb55376e0a9a2905237"
          }
        },
        "spec": {
          "automountServiceAccountToken": false,
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "harbor",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "notary-server"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "containers": [
            {
              "name": "notary-server",
              "image": "docker.io/bitnami/harbor-notary-server:2.5.1-debian-11-r4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 11365,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MIGRATIONS_PATH",
                  "value": "migrations/server/postgresql"
                },
                {
                  "name": "DB_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-harbor-notary-server-envvars",
                      "key": "server_db_url"
                    }
                  }
                }
              ],
              "envFrom": null,
              "ports": [
                {
                  "containerPort": 4443,
                  "name": "notary-server"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "tcpSocket": {
                  "port": "notary-server"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "tcpSocket": {
                  "port": "notary-server"
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "notary-config",
                  "mountPath": "/etc/notary"
                },
                {
                  "name": "root-certificate",
                  "mountPath": "/root.crt",
                  "subPath": "tls.crt"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "notary-config",
              "secret": {
                "secretName": "release-name-harbor-notary-server"
              }
            },
            {
              "name": "root-certificate",
              "secret": {
                "secretName": "release-name-harbor-core"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-harbor-notary-signer",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "notary-signer"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "harbor",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "notary-signer"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "harbor",
            "helm.sh/chart": "harbor-13.2.7",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "notary-signer"
          },
          "annotations": {
            "checksum/secret": "335bebec159d451c7b25a348caf85b0a6d61094f7adc21bf99966ade149548fd"
          }
        },
        "spec": {
          "automountServiceAccountToken": false,
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "harbor",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "notary-signer"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "containers": [
            {
              "name": "notary-signer",
              "image": "docker.io/bitnami/harbor-notary-signer:2.5.1-debian-11-r4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 11864,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MIGRATIONS_PATH",
                  "value": "migrations/signer/postgresql"
                },
                {
                  "name": "DB_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-harbor-notary-server-envvars",
                      "key": "signer_db_url"
                    }
                  }
                },
                {
                  "name": "NOTARY_SIGNER_DEFAULTALIAS",
                  "value": "defaultalias"
                }
              ],
              "envFrom": null,
              "ports": [
                {
                  "containerPort": 7899,
                  "name": "notary-signer"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "tcpSocket": {
                  "port": "notary-signer"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "tcpSocket": {
                  "port": "notary-signer"
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "notary-config",
                  "mountPath": "/etc/notary"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "notary-config",
              "secret": {
                "secretName": "release-name-harbor-notary-server"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-harbor-portal",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "portal"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "harbor",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "portal"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "harbor",
            "helm.sh/chart": "harbor-13.2.7",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "portal"
          },
          "annotations": null
        },
        "spec": {
          "automountServiceAccountToken": false,
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "harbor",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "portal"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "containers": [
            {
              "name": "portal",
              "image": "docker.io/bitnami/harbor-portal:2.5.1-debian-11-r3",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 11795,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                }
              ],
              "envFrom": null,
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/",
                  "port": "http",
                  "scheme": "HTTP"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/",
                  "port": "http",
                  "scheme": "HTTP"
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "portal-config",
                  "mountPath": "/opt/bitnami/nginx/conf/nginx.conf",
                  "subPath": "nginx.conf"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "portal-config",
              "configMap": {
                "name": "release-name-harbor-portal"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-harbor-registry",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "registry"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "harbor",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "registry"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "harbor",
            "helm.sh/chart": "harbor-13.2.7",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "registry"
          },
          "annotations": {
            "checksum/configmap": "a99f8d5a52833c4bfb4eaf688a0f5b1ddb4d51ee7b6e0b5f91d94fb01ff02b55",
            "checksum/secret": "597d800156098a98465fe87e48d36e2e73e60cd888444b45a6e93e1375f56296",
            "checksum/secret-jobservice": "1a494692d52632f6cf8b1bbdd26fa3625af19a6839775671f36806183e7e54b7",
            "checksum/secret-core": "12032c0646bc1b00890f22a69145749f06512f09482d07a61db46d2befb9947e"
          }
        },
        "spec": {
          "automountServiceAccountToken": false,
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "harbor",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "registry"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "initContainers": null,
          "containers": [
            {
              "name": "registry",
              "image": "docker.io/bitnami/harbor-registry:2.5.1-debian-11-r4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 10667,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                }
              ],
              "envFrom": [
                {
                  "secretRef": {
                    "name": "release-name-harbor-registry"
                  }
                }
              ],
              "ports": [
                {
                  "containerPort": 5000,
                  "name": "registry"
                },
                {
                  "containerPort": 5001,
                  "name": "debug"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/",
                  "scheme": "HTTP",
                  "port": "registry"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/",
                  "scheme": "HTTP",
                  "port": "registry"
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "registry-data",
                  "mountPath": "/storage",
                  "subPath": null
                },
                {
                  "name": "registry-root-certificate",
                  "mountPath": "/etc/registry/root.crt",
                  "subPath": "tls.crt"
                },
                {
                  "name": "registry-htpasswd",
                  "mountPath": "/etc/registry/passwd",
                  "subPath": "passwd"
                },
                {
                  "name": "registry-config",
                  "mountPath": "/etc/registry/config.yml",
                  "subPath": "config.yml"
                }
              ]
            },
            {
              "name": "registryctl",
              "image": "docker.io/bitnami/harbor-registryctl:2.5.1-debian-11-r4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001
              },
              "envFrom": [
                {
                  "secretRef": {
                    "name": "release-name-harbor-registry"
                  }
                }
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "CORE_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-harbor-core",
                      "key": "secret"
                    }
                  }
                },
                {
                  "name": "JOBSERVICE_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-harbor-jobservice",
                      "key": "secret"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "registryctl"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/api/health",
                  "scheme": "HTTP",
                  "port": "registryctl"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "path": "/api/health",
                  "scheme": "HTTP",
                  "port": "registryctl"
                }
              },
              "resources": {
                "limits": {},
                "requests": {}
              },
              "volumeMounts": [
                {
                  "name": "registry-data",
                  "mountPath": "/storage",
                  "subPath": null
                },
                {
                  "name": "registry-config",
                  "mountPath": "/etc/registry/config.yml",
                  "subPath": "config.yml"
                },
                {
                  "name": "registry-config",
                  "mountPath": "/etc/registryctl/config.yml",
                  "subPath": "ctl-config.yml"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "registry-htpasswd",
              "secret": {
                "secretName": "release-name-harbor-registry",
                "items": [
                  {
                    "key": "REGISTRY_HTPASSWD",
                    "path": "passwd"
                  }
                ]
              }
            },
            {
              "name": "registry-root-certificate",
              "secret": {
                "secretName": "release-name-harbor-core"
              }
            },
            {
              "name": "registry-config",
              "configMap": {
                "name": "release-name-harbor-registry"
              }
            },
            {
              "name": "registry-data",
              "persistentVolumeClaim": {
                "claimName": "release-name-harbor-registry"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.6.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "replicas": 1,
      "serviceName": "release-name-postgresql-hl",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-11.6.6",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "primary"
          },
          "annotations": {
            "checksum/extended-configuration": "4aa243691af2a18371a4f840a1add334e0008bd98a2635acf35d14e103d832cf"
          }
        },
        "spec": {
          "serviceAccountName": "default",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "postgresql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "hostNetwork": false,
          "hostIPC": false,
          "initContainers": null,
          "containers": [
            {
              "name": "postgresql",
              "image": "docker.io/bitnami/postgresql:13.7.0-debian-11-r4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 10441,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgres-password"
                    }
                  }
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432"
                  ]
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "custom-init-scripts",
                  "mountPath": "/docker-entrypoint-initdb.d/"
                },
                {
                  "name": "postgresql-extended-config",
                  "mountPath": "/bitnami/postgresql/conf/conf.d/"
                },
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "postgresql-extended-config",
              "configMap": {
                "name": "release-name-postgresql-extended-configuration"
              }
            },
            {
              "name": "custom-init-scripts",
              "configMap": {
                "name": "release-name-postgresql-init-scripts"
              }
            },
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-redis-master",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.12.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "master"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "master"
        }
      },
      "serviceName": "release-name-redis-headless",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.12.1",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "master"
          },
          "annotations": {
            "checksum/configmap": "c2f1f1cd8f4276c095647499eb03f6a3acf97d195bef3f60ce2ee7698973740f",
            "checksum/health": "85b734bf784bee537b16c48bbdf589ea714442d9eb373a8a5746cbac338c015c",
            "checksum/scripts": "4c0732f7ffee0f2423ef09ee6b6a49eda3fa797516c90ab47034f491dc39b598",
            "checksum/secret": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "serviceAccountName": "release-name-redis",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "redis",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "master"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "terminationGracePeriodSeconds": 30,
          "containers": [
            {
              "name": "redis",
              "image": "docker.io/bitnami/redis:6.2.7-debian-11-r3",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 10831,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master"
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "yes"
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379"
                }
              ],
              "ports": [
                {
                  "name": "redis",
                  "containerPort": 6379
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 6,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 2,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "start-scripts",
                  "mountPath": "/opt/bitnami/scripts/start-scripts"
                },
                {
                  "name": "health",
                  "mountPath": "/health"
                },
                {
                  "name": "redis-data",
                  "mountPath": "/data",
                  "subPath": null
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/redis/mounted-etc"
                },
                {
                  "name": "redis-tmp-conf",
                  "mountPath": "/opt/bitnami/redis/etc/"
                },
                {
                  "name": "tmp",
                  "mountPath": "/tmp"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "start-scripts",
              "configMap": {
                "name": "release-name-redis-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "health",
              "configMap": {
                "name": "release-name-redis-health",
                "defaultMode": 493
              }
            },
            {
              "name": "config",
              "configMap": {
                "name": "release-name-redis-configuration"
              }
            },
            {
              "name": "redis-tmp-conf",
              "emptyDir": {}
            },
            {
              "name": "tmp",
              "emptyDir": {}
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "redis-data",
            "labels": {
              "app.kubernetes.io/name": "redis",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/component": "master"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-harbor-trivy",
      "namespace": "4qeQqo3",
      "labels": {
        "app.kubernetes.io/name": "harbor",
        "helm.sh/chart": "harbor-13.2.7",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "trivy"
      }
    },
    "spec": {
      "replicas": 1,
      "serviceName": "release-name-harbor-trivy",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "harbor",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "trivy"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "harbor",
            "helm.sh/chart": "harbor-13.2.7",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "trivy"
          },
          "annotations": {
            "checksum/configmap-env": "4d8732a12551665c5687dbe3ff9469220b267986c545565ca32986c8894d300c",
            "checksum/secret-env": "99295d488cda0bebd6adf75bedd4c249a495296731d8271871752e72f923aaa9"
          }
        },
        "spec": {
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "harbor",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "trivy"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "automountServiceAccountToken": false,
          "initContainers": null,
          "containers": [
            {
              "name": "trivy",
              "image": "docker.io/bitnami/harbor-adapter-trivy:2.5.1-debian-11-r4",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 10508,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                }
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-harbor-trivy-envvars"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-harbor-trivy-envvars"
                  }
                }
              ],
              "ports": [
                {
                  "name": "api-server",
                  "containerPort": 8080
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "scheme": "HTTP",
                  "path": "/probe/healthy",
                  "port": "api-server"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "httpGet": {
                  "scheme": "HTTP",
                  "path": "/probe/ready",
                  "port": "api-server"
                }
              },
              "resources": {
                "limits": {
                  "cpu": 1,
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "512Mi"
                }
              },
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/bitnami/harbor-adapter-trivy/.cache",
                  "readOnly": false
                }
              ]
            }
          ],
          "volumes": null
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "labels": {
              "app.kubernetes.io/name": "harbor",
              "app.kubernetes.io/instance": "release-name"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "5Gi"
              }
            }
          }
        }
      ]
    }
  }
]