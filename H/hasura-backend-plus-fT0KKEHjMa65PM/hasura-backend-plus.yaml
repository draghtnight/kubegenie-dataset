apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-hasura
  labels:
    helm.sh/chart: hasura-1.1.6
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v2.0.9
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-minio
  namespace: fT0KKEHjMa65PM
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: release-name-minio
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-hasura-backend-plus
  labels:
    helm.sh/chart: hasura-backend-plus-0.2.6
    app.kubernetes.io/name: hasura-backend-plus
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.7.1
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-hasura
type: Opaque
data:
  adminSecret: T2YzYXdwNWl1M1NYMVp3UjRqR2phSm0ydDU3SHJWNFVHd1hGcmJIQkhpVXRjY0hKNTBockJDck80SFJ4N3piQg==
  jwt.secret: eyJ0eXBlIjogIkhTMjU2IiwgImtleSI6ICJqREFjVVJKWm5id0lIZUlBUTVscW5PaXFHN1d6ZVJ6SUFscmxBcGRvdXlqaEdEajhNWHJ4c0JCcDRicXhsM1BvIiwgImNsYWltc19uYW1lc3BhY2UiOiAiaHR0cHM6Ly9oYXN1cmEuaW8vand0L2NsYWltcyJ9
  jwt.key: akRBY1VSSlpuYndJSGVJQVE1bHFuT2lxRzdXemVSeklBbHJsQXBkb3V5amhHRGo4TVhyeHNCQnA0YnF4bDNQbw==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
type: Opaque
data:
  postgresql-password: TWRKb1BBZGhpS1VoU0EwS1EyRFZKU3J4ckkxMTBCNWM=
  databaseUrl: cG9zdGdyZXM6Ly9wb3N0Z3JlczpNZEpvUEFkaGlLVWhTQTBLUTJEVkpTcnhySTExMEI1Y0ByZWxlYXNlLW5hbWUtcG9zdGdyZXNxbDo1NDMyL2hhc3VyYQ==
  metadataUrl: cG9zdGdyZXM6Ly9wb3N0Z3JlczpNZEpvUEFkaGlLVWhTQTBLUTJEVkpTcnhySTExMEI1Y0ByZWxlYXNlLW5hbWUtcG9zdGdyZXNxbDo1NDMyL2hhc3VyYQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-minio
  namespace: fT0KKEHjMa65PM
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  access-key: ZDBCaG9PSkU4ZQ==
  secret-key: U2txaGtBaUVscTFRdDlYc0FWWkVYZWFIODNOelp5QVlsTWxVV1BucQ==
  key.json: ""
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-hasura-backend-plus
type: Opaque
data:
  cookies.secret: UHJsSjdHWGtlYk0wSGgwdXBoeDdER2VGVmlBS21JTmF4aER3ekd6VHhzcXVVSnp4emhjT1NTNkt3RzFkbjgwRQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-postgresql-extended-configuration
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: fT0KKEHjMa65PM
data:
  override.conf: |
    search_path = '"$user",public,auth'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-postgresql-init-scripts
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: fT0KKEHjMa65PM
data:
  hasura-init.sql: |
    CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;
    CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;
    CREATE OR REPLACE FUNCTION public.set_current_timestamp_updated_at() RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    declare
      _new record;
    begin
      _new := new;
      _new. "updated_at" = now();
      return _new;
    end;
    $$;
  hbp-init.sql: |
    CREATE SCHEMA IF NOT EXISTS auth;
    CREATE SCHEMA IF NOT EXISTS storage;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-hasura
  namespace: fT0KKEHjMa65PM
data:
  jwt.algorithm: HS256
  jwt.claims.namespace: https://hasura.io/jwt/claims
  endpoint: http://release-name-hasura
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-hasura-backend-plus
  namespace: fT0KKEHjMa65PM
data:
  jwt.expires.in: "15"
  jwt.expires.refresh: "43200"
  jwt.customFields: ""
  s3.bucket: hasura-plus
  s3.endpoint: http://release-name-minio:9000
  s3.ssl: "true"
  emails.enabled: "false"
  limiter.max-requests: "1000"
  limiter.time-frame: "900000"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: fT0KKEHjMa65PM
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
  namespace: fT0KKEHjMa65PM
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-hasura
  labels:
    helm.sh/chart: hasura-1.1.6
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v2.0.9
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-minio
  namespace: fT0KKEHjMa65PM
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-hasura-backend-plus
  labels:
    helm.sh/chart: hasura-backend-plus-0.2.6
    app.kubernetes.io/name: hasura-backend-plus
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.7.1
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hasura-backend-plus
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-hasura
  labels:
    helm.sh/chart: hasura-1.1.6
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v2.0.9
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hasura
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: bc97dc2efef3636619c2775267603973490275c9e2fc32534acfe72e87a2f01e
        checksum/hasura-secrets: edc4f4898e30aa0a76da872410eaf18dc36c7545998101e439f8a50416ca92cc
        checksum/postgresql-secrets: b51c9ece1ecb9fdb087d89898e884df5bbbda11bf3fe9c4fa091292866a78335
      labels:
        app.kubernetes.io/name: hasura
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-hasura
      securityContext: {}
      initContainers:
        - name: wait-postgres
          image: busybox
          command:
            - sh
            - -c
            - |
              until nc -z $DB_HOST $DB_PORT
              do
                echo \"waiting for database\"
                sleep 1
              done
              until nc -z $METADATA_HOST $METADATA_PORT
              do
                echo \"waiting for metadata database\"
                sleep 1
              done
          env:
            - name: DB_HOST
              value: release-name-postgresql
            - name: DB_PORT
              value: "5432"
            - name: METADATA_HOST
              value: release-name-postgresql
            - name: METADATA_PORT
              value: "5432"
      containers:
        - name: hasura
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: hasura/graphql-engine:v2.0.9
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          env:
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: "false"
            - name: HASURA_GRAPHQL_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: databaseUrl
            - name: HASURA_GRAPHQL_METADATA_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: metadataUrl
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-hasura
                  key: adminSecret
            - name: HASURA_GRAPHQL_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-hasura
                  key: jwt.secret
            - name: HASURA_GRAPHQL_UNAUTHORIZED_ROLE
              value: anonymous
            - name: HASURA_GRAPHQL_CORS_DOMAIN
              value: '*'
            - name: HASURA_GRAPHQL_DISABLE_CORS
              value: "false"
            - name: HASURA_GRAPHQL_WS_READ_COOKIE
              value: "false"
            - name: HASURA_GRAPHQL_ENABLE_TELEMETRY
              value: "false"
            - name: HASURA_GRAPHQL_EVENTS_HTTP_POOL_SIZE
              value: "100"
            - name: HASURA_GRAPHQL_EVENTS_FETCH_INTERVAL
              value: "3000000"
            - name: HASURA_GRAPHQL_EVENTS_FETCH_BATCH_SIZE
              value: "100"
            - name: HASURA_GRAPHQL_ASYNC_ACTIONS_FETCH_INTERVAL
              value: "0"
            - name: HASURA_GRAPHQL_PG_CONNECTIONS
              value: "50"
            - name: HASURA_GRAPHQL_PG_TIMEOUT
              value: "180"
            - name: HASURA_GRAPHQL_USE_PREPARED_STATEMENTS
              value: "true"
            - name: HASURA_GRAPHQL_TX_ISOLATION
              value: read-committed
            - name: HASURA_GRAPHQL_PG_CONN_LIFETIME
              value: "600"
            - name: HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES
              value: "false"
            - name: HASURA_GRAPHQL_ENABLED_APIS
              value: metadata,graphql,pgdump,config
            - name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
              value: startup,http-log,webhook-log,websocket-log
            - name: HASURA_GRAPHQL_LOG_LEVEL
              value: info
            - name: HASURA_GRAPHQL_DEV_MODE
              value: "false"
            - name: HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS
              value: "false"
            - name: HASURA_GRAPHQL_INFER_FUNCTION_PERMISSIONS
              value: "true"
            - name: HASURA_GRAPHQL_SCHEMA_SYNC_POLL_INTERVAL
              value: "1000"
            - name: HASURA_GRAPHQL_ADMIN_INTERNAL_ERRORS
              value: "true"
            - name: HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL
              value: "1000"
            - name: HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_BATCH_SIZE
              value: "100"
            - name: HASURA_GRAPHQL_EXPERIMENTAL_FEATURES
              value: inherited_roles
            - name: HASURA_GRAPHQL_GRACEFUL_SHUTDOWN_TIMEOUT
              value: "60"
            - name: HASURA_GRAPHQL_ENABLE_MAINTENANCE_MODE
              value: "false"
            - name: HASURA_GRAPHQL_CONNECTION_COMPRESSION
              value: "false"
            - name: HASURA_GRAPHQL_WEBSOCKET_KEEPALIVE
              value: "5"
            - name: HASURA_GRAPHQL_WEBSOCKET_CONNECTION_INIT_TIMEOUT
              value: "3"
            - name: HASURA_GRAPHQL_ENABLE_ALLOWLIST
              value: "false"
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-minio
  namespace: fT0KKEHjMa65PM
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-8.0.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/credentials-secret: 55e6df105bbfdc2a69be42bf929bd5a0740a2257639a8e8575ebba44f2b3101b
    spec:
      serviceAccountName: release-name-minio
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: minio
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2021.9.9-debian-10-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 11834
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: http
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: release-name-minio
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: release-name-minio
                  key: secret-key
            - name: MINIO_DEFAULT_BUCKETS
              value: hasura-plus
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: public
          envFrom: null
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-console
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-console
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: release-name-minio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-hasura-backend-plus
  labels:
    helm.sh/chart: hasura-backend-plus-0.2.6
    app.kubernetes.io/name: hasura-backend-plus
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.7.1
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hasura-backend-plus
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        rollme: ABGhe
      labels:
        app.kubernetes.io/name: hasura-backend-plus
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-hasura-backend-plus
      securityContext: {}
      volumes: null
      initContainers:
        - name: wait-hasura
          image: busybox
          command:
            - sh
            - -c
            - |
              until wget 2>/dev/null -q --spider $HASURA_ENDPOINT/healthz
              do
                echo \"waiting for hasura\"
                sleep 1
              done
          env:
            - name: HASURA_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura
                  key: endpoint
      containers:
        - name: hasura-backend-plus
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: nhost/hasura-backend-plus:2.7.1
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          volumeMounts: null
          env:
            - name: ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura
                  key: endpoint
            - name: HASURA_ENDPOINT
              value: $(ENDPOINT)/v1/graphql
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: databaseUrl
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-hasura
                  key: adminSecret
            - name: JWT_KEY
              valueFrom:
                secretKeyRef:
                  name: release-name-hasura
                  key: jwt.key
            - name: JWT_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura
                  key: jwt.algorithm
            - name: JWT_CLAIMS_NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura
                  key: jwt.claims.namespace
            - name: JWT_EXPIRES_IN
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura-backend-plus
                  key: jwt.expires.in
            - name: JWT_REFRESH_EXPIRES_IN
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura-backend-plus
                  key: jwt.expires.refresh
            - name: JWT_CUSTOM_FIELDS
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura-backend-plus
                  key: jwt.customFields
            - name: AUTH_ENABLED
              value: "true"
            - name: AUTH_LOCAL_USERS_ENABLE
              value: "true"
            - name: CHANGE_EMAIL_ENABLE
              value: "true"
            - name: NOTIFY_EMAIL_CHANGE
              value: "false"
            - name: ANONYMOUS_USERS_ENABLED
              value: "false"
            - name: ALLOW_USER_SELF_DELETE
              value: "false"
            - name: VERIFY_EMAILS
              value: "false"
            - name: LOST_PASSWORD_ENABLE
              value: "false"
            - name: ALLOWED_EMAIL_DOMAINS
              value: ""
            - name: DEFAULT_USER_ROLE
              value: user
            - name: DEFAULT_ANONYMOUS_ROLE
              value: anonymous
            - name: AUTO_ACTIVATE_NEW_USERS
              value: "true"
            - name: HIBP_ENABLE
              value: "false"
            - name: REGISTRATION_CUSTOM_FIELDS
              value: ""
            - name: MIN_PASSWORD_LENGTH
              value: "3"
            - name: DEFAULT_ALLOWED_USER_ROLES
              value: user,me
            - name: ALLOWED_USER_ROLES
              value: user,me
            - name: COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-hasura-backend-plus
                  key: cookies.secret
            - name: COOKIE_SECURE
              value: "false"
            - name: COOKIE_SAME_SITE
              value: lax
            - name: MFA_ENABLE
              value: "true"
            - name: OTP_ISSUER
              value: HBP
            - name: REDIRECT_URL_SUCCESS
              value: ""
            - name: REDIRECT_URL_ERROR
              value: ""
            - name: STORAGE_ENABLE
              value: "true"
            - name: S3_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura-backend-plus
                  key: s3.endpoint
            - name: S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura-backend-plus
                  key: s3.bucket
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: release-name-minio
                  key: access-key
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: release-name-minio
                  key: secret-key
            - name: S3_SSL_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura-backend-plus
                  key: s3.ssl
            - name: MAX_REQUESTS
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura-backend-plus
                  key: limiter.max-requests
            - name: TIME_FRAME
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura-backend-plus
                  key: limiter.time-frame
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
  namespace: fT0KKEHjMa65PM
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.10.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: release-name-postgresql
          image: docker.io/bitnami/postgresql:14.1.0
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          securityContext:
            runAsUser: 11786
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: hasura
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=hasura" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=hasura" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: postgresql-extended-config
              mountPath: /bitnami/postgresql/conf/conf.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: null
      volumes:
        - name: postgresql-extended-config
          configMap:
            name: release-name-postgresql-extended-configuration
        - name: custom-init-scripts
          configMap:
            name: release-name-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
