apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: release-name-redis
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.11.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: bm90LXNlY3VyZS1kYXRhYmFzZS1wYXNzd29yZA==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-chartmuseum-secret
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartmuseum
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-core-envvars
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
type: Opaque
data:
  _REDIS_URL_CORE: cmVkaXM6Ly9yZWxlYXNlLW5hbWUtcmVkaXMtbWFzdGVyOjYzNzkvMA==
  _REDIS_URL_REG: cmVkaXM6Ly9yZWxlYXNlLW5hbWUtcmVkaXMtbWFzdGVyOjYzNzkvMg==
  REGISTRY_CREDENTIAL_USERNAME: aGFyYm9yX3JlZ2lzdHJ5X3VzZXI=
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
  CSRF_KEY: cjRKMm90eFRmeE5WUmFSVU1idTc4VTM2YXRrQTVxa1k=
  HARBOR_ADMIN_PASSWORD: V1gzdjl4WUY1WA==
  POSTGRESQL_PASSWORD: bm90LXNlY3VyZS1kYXRhYmFzZS1wYXNzd29yZA==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-core
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
type: Opaque
data:
  secretKey: SmdmbXNNYXVRamxTSGVacw==
  secret: R1BiY1Naa09heFhZOFdiVw==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZrekNDQTN1Z0F3SUJBZ0lKQUxyK0xWT0VzdytzTUEwR0NTcUdTSWIzRFFFQkN3VUFNR0F4Q3pBSkJnTlYKQkFZVEFrVlRNUkF3RGdZRFZRUUlEQWRUWlhacGJHeGxNUkF3RGdZRFZRUUhEQWRUWlhacGJHeGxNUkF3RGdZRApWUVFLREFkQ2FYUnVZVzFwTVJzd0dRWURWUVFEREJKb1lYSmliM0l1WW1sMGJtRnRhUzVqYjIwd0hoY05NVGt3Ck5USXdNVEF3TVRVeldoY05NakF3TlRFNU1UQXdNVFV6V2pCZ01Rc3dDUVlEVlFRR0V3SkZVekVRTUE0R0ExVUUKQ0F3SFUyVjJhV3hzWlRFUU1BNEdBMVVFQnd3SFUyVjJhV3hzWlRFUU1BNEdBMVVFQ2d3SFFtbDBibUZ0YVRFYgpNQmtHQTFVRUF3d1NhR0Z5WW05eUxtSnBkRzVoYldrdVkyOXRNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFnOEFNSUlDQ2dLQ0FnRUFxb0c4ZnNud0NwZittV1k3b2p4VENxYXNOVnVEUXY4NGtsajFHa003ZEpGTlZwMEoKVzV1WklaUit2dURxNFZJdXZxZWV1Y085RjF4TWFGaEdxZlZpYnVld0VEMm9XSTRZMkttMytUOWEwcjZ0RkthagphSXlwNTdPSFh5c1hjaE9KOHp5dGRsYW5kaWk4elBBYS9sSDBiak9HR3liTk5NWjlFa3NEbk5YTTlZTFA5NURICmpzSFJ1b0l0NWlRb0lKWHFoYW8vREV3YUJjZHhXS08rd1NFRm5lTzBOSWlpeXR2VGh1NGw2aDhETlZEWHhzUDAKc2o3ZHZWZXFZMTBjMUREM0pLK1o1MHJOWWw1Qjk1V0hmVGttTnNISmxiOHYxc3Q5dDk4eTM0K01rRE1HUUpLTwpYZVFQTHdDREtJbUw3bnd5K2NqVWlIbHdFWTM5bEVBYzdBVWw0UUZ3alMzOFIxWjlLNU5Ld1FiQU11TGlVZUltCnk4VkZvMTRjL0FsTEU5cUhaTHEzOGJGaGVKb0J5aThvWTQ2ZTZDV0pUTVRzZnJsZ1ZXR1NDVW9PbXBDM0ZmK2wKdUNVK3B0ZmtGSHoybFF1Vk1qK1U3dlJrZ0tncnF0b21KSVBzcW9LdzF3S1Fwb1g5a2puVUNwdGc0R204c04vUgpMOUllQklCeGRXWGxlL2dsZk1PUi9XbmtVZ2Fqc2o3bVhnZ3QzcjluSVRoNlpSTVlTUjV1dmNEM2V1bCtibVhFCm4xcWY5V1dDUUpHZzYrRHpidWw4VTAwL3NzdGlha29PSERMc3Q4SGFaeTFOZk5SUG03WU5WZ3V5cXI2b1g0Q08Kb25NNG02eWJvRitqUExDdWZYVTZFYXZUM0U0S0FTNFJoVHNvd2pjMHIvcENTZk5kYzdFT0QxYm5wdDBDQXdFQQpBYU5RTUU0d0hRWURWUjBPQkJZRUZJUWd3QU45Vlh5LzFXME5YbDdFREw4RkUzZ0hNQjhHQTFVZEl3UVlNQmFBCkZJUWd3QU45Vlh5LzFXME5YbDdFREw4RkUzZ0hNQXdHQTFVZEV3UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUwKQlFBRGdnSUJBREppMkdockZNSDJoQWNKV2JZRmJKc25GUm5DOVBIRzI0aFJpTTYyYkJDY3V6RWVycjdEM05SRQo5cVhhditLaVptVk4vT2Nxd3VIZFVtcDV0djh2OGxMQTEzWi9YMlZhSG1zVmtCKzAySkFTY3Bqb25FMEw4VUFwCjQrQnJxL3RDMTVzK2w2ZzZwSEI5SjlYUDBJd25zUEJEb1ZkQXpJay91enRERVJmakNBeW9NNFdxcmpYSVhwNHUKeVRXRG9EUWFIcFFTZGZaQUpjdjd0ODJKSmUxSjl2YmUrdEZtRGdNY2ZJb2VDcUN0MWZrWWYvdXNGRk02bUxhKwpndEhuSUFJR0x2R2pEUi9SdFNsYnZHY1JycXZveUszWHg0V29Zek5PZkM2ZTZuRVNsa1RQako2UHlScXFHaGJMCkZHK1Y2RVBZRHovRTYzVkd0eE5hWitNUWNqSGprNHE3YzhwQUwxRkUxOUpwb2VhRUFITEtCUkhBcUpiS3NPWmgKV1NtdkNYMjN1Tk9yeW1hZ2g3TjZwR3lCQzVZSmN0cm9hWGwrclBPZE5qQm5pbVp3OUJseGxaTHZRTFRUaUw0egpsU1dQdXpSZHhibFNMR0VHUGZZNndJOWplR0o2dy94T09EQUhObVBLTGllbkg5VFZVcHBvTC9UY0pEU28xTDJUCnEyK0RQYnJZSko1c0dtUnVFcWpvcERkTE9Dc3Rhbk9BemRHckkvdkVRZEtEL1p6a1JLaktEWS9rRDJuWGdzVE8KZndhUHZ4amhNVFJtU1BSWDEwQTZ6QzIyUXUzT1JFRFc0OEVML0U3Mkl3blFQd0hVM0ZHVXJVZDluZGFYYTB2RQpVcVppV3REKy9TSW1QV013UGhxVnF0L3p3cG1DWkJYTndrdjVmZ0hRY28vZUdqRFhraXhsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBcW9HOGZzbndDcGYrbVdZN29qeFRDcWFzTlZ1RFF2ODRrbGoxR2tNN2RKRk5WcDBKClc1dVpJWlIrdnVEcTRWSXV2cWVldWNPOUYxeE1hRmhHcWZWaWJ1ZXdFRDJvV0k0WTJLbTMrVDlhMHI2dEZLYWoKYUl5cDU3T0hYeXNYY2hPSjh6eXRkbGFuZGlpOHpQQWEvbEgwYmpPR0d5Yk5OTVo5RWtzRG5OWE05WUxQOTVESApqc0hSdW9JdDVpUW9JSlhxaGFvL0RFd2FCY2R4V0tPK3dTRUZuZU8wTklpaXl0dlRodTRsNmg4RE5WRFh4c1AwCnNqN2R2VmVxWTEwYzFERDNKSytaNTByTllsNUI5NVdIZlRrbU5zSEpsYjh2MXN0OXQ5OHkzNCtNa0RNR1FKS08KWGVRUEx3Q0RLSW1MN253eStjalVpSGx3RVkzOWxFQWM3QVVsNFFGd2pTMzhSMVo5SzVOS3dRYkFNdUxpVWVJbQp5OFZGbzE0Yy9BbExFOXFIWkxxMzhiRmhlSm9CeWk4b1k0NmU2Q1dKVE1Uc2ZybGdWV0dTQ1VvT21wQzNGZitsCnVDVStwdGZrRkh6MmxRdVZNaitVN3ZSa2dLZ3JxdG9tSklQc3FvS3cxd0tRcG9YOWtqblVDcHRnNEdtOHNOL1IKTDlJZUJJQnhkV1hsZS9nbGZNT1IvV25rVWdhanNqN21YZ2d0M3I5bklUaDZaUk1ZU1I1dXZjRDNldWwrYm1YRQpuMXFmOVdXQ1FKR2c2K0R6YnVsOFUwMC9zc3RpYWtvT0hETHN0OEhhWnkxTmZOUlBtN1lOVmd1eXFyNm9YNENPCm9uTTRtNnlib0YralBMQ3VmWFU2RWF2VDNFNEtBUzRSaFRzb3dqYzByL3BDU2ZOZGM3RU9EMWJucHQwQ0F3RUEKQVFLQ0FnQVUvalk4RWhibzV2L2syUzU4Y2hyelU4UWVLYTlHbjIvU3JQczRpWkNYY0pCcUdwbWRXdElHeldheApqN1c3bWtmQkY1ZzJYUUE2RVJZalBzTXNoOWJmdXN6MW92SElQVzZYdG9XOVBXeXNSK2U5aENyWVk0RkQwdG5YCkFOSTVMR2l1dHdqUWFpamlKbS9nZDZ1TEpvSUcwM2N1ZnArRFlQRGpRTE1vS3phNS82b2xYQUVGOVowaDdvZEMKTDY5MUc2QXRadUd1WE94VFM5UUx5dFZncC9VdUZHd0tqOHdqVjk5NlhIWDBsbTdwc0pOd21JM1hLR0Jhd0tGcwo3SGp4TXpvcW5TaEF6dmZzcFpoUHFHeHZJWXN2OExvbUlzejhFRC9oVkt6SjA3M0Z2MUtFdnNhaWpzTEQwYmRVClZXTVNNTjZCM0pVMlhHVk05QU9GcmtNaFdCenFuS2ZSM3FubXRoWTk1RG1nNWM1T0pPQW5pWTZDelZyL0xaemUKRnk3WXA2ZGhvK0dGZDJpT28wTGJvaVVWcytxUG9MUkdpYURpc1ZpQ1c3NG1Eait1YXZzeDBGTmFsV09KM29aYgpRUWZjQzJFRVJjSUpGZUlVeG55a3B5dnNxOW1SNm5sSkE1bTBVWEwreVRwK2l4R1NrTXg3aEd4azdXNGlJK1RFCjdTWWtkcE1wckR0TmQ0NkNDcEVqTDRjcDN3S3FPODNESFpiUmlJQlc0TG5tdjgvRmsxMzl4ZmFWS1UxYThPejYKZUl2N1NBakppQ1Zwaml6N1cyWHZGSU02R0lkaXZxSjV0ZURIVUtWZ2JnSFZWWFd6ZTlGTGZVbldlNnhYeGs3UAo3d0FqaFBBOEtNWDAvU2tOTzlzQ284TzBiVkxnbWhRVFpQZWRCbjQvaVZqais2M1BRUUtDQVFFQTJwbXZLakRuCk1kT3FLdzdjdXNXR0IwTHRkeHpnWXQ4RVZYRnFjZHdRSWs4ajJiams5VGZnR3NlQW1BZnd2bCtwbXoyNDlLSGEKOTk1RmpPU01JZ0FCQUE3MWxWQ1ZQZ1MrOVk4NWVnbXlxNmpVcW1kbHJyWlBpQW00RE85UXo2eElGSlRmTEUxawpXajhlZW9PNkVxTWloN21RMGtrK3g0aEJTRS9QRWJxak1ZRE9OcTd3dWtwNG5WLzJ4eUxSVEFrejhkellRNEVxCjVVSEFlSDZXVVJSTTROY1IveHNaeDFXZzBZZU1QY3lGdy96KzlnUzR2cDlZNkdhangvOVByQWhmSmNpcE0vcTgKRDZaQWZpSCtsbW0yb0IzeGQyUUtHN0JZN1pJeHgvZDRSemtsb0FVaTlraG10c21mSTk1LzVPNjVuWTU0QnZJVwpGQ0JWNEg4ekxueEhzUUtDQVFFQXg2MmpWbUtxcXpjUnR5OHloU3ptVHdCK1dRUkN3MVRPU1d3WCs1aUVpMk9sClVQUVgxMm9vU1Y5UXdxb004S203Z0g2dVR1WGw5aUs3eDVjZzBmWEV5WDJ1NmVZZzhjRm1vUC91V2l0UndpVnIKclNjNlJyQzlwNy9ndVRWUElIWmo0MTBPSE15aTNqSGRlL01rT2UzaDJVa3kzcHhNZTNjcEJ6NTJoUTQxem4zWApSa1BLOUJFM2NoeE41VVd0dVk1dlpYSTFEYWlqYjkxWHlac0VZM2RFSklYeTJVOVovS3MvSjJIdDdRV2NwblpuClNyZHFPQitPa25Qb2NPcHo5R1ZtZVRIdThyMkpyWUxXanUrMWhIc1ZRY09YU3hWWWZnV1k3Ulc3OG9CUlBpamgKSk81eHEvNXNWR1Ywa3o4Si8rdmN1VnFwd0dScG5QUWxGOFVxUUFmSTdRS0NBUUVBaDNQTlQyWm9DNzd0WmFyYQo2VHgxdFZBcVZyRms5TDdlTDVlTWJxcitzRk83a2pCNFp0NU5saXBpcTFIWVFnNkN5UGZ4QUZ5K2t2Sit4RFBtCkJUZGRaMHpkcmJ6MkRTemhxc1VweDAzMUVWc1hFOVBuOU45dzNvbXZLd3lyVlZPYWdtNVE3Mkd4T2g1OFkwdjIKWTVBRVdIZUtubExXZk1zWU1KZUxacC93ZVQ4b0NFaFVVQXJQUEN6M2ZDTTk3MUNRaUdEZy9Nc3Y2a2pZMjVFTQowWWF6c0dwejgxQTJwQWFTRk9OWjZmMHVNZWcxai9vVEE4TTNVeUl1Z0VIYWUyM2dqMGdNV0hJWVQ5WWpoa1RJClBTbWFDUk1reVdjS3dHZUFZdzFBblhqaFpiaXFjTUplREorR1RlTVhJaUcvdS9xVXQyVk5TSGgvWjg4MWgxc3EKT3JhMXNRS0NBUUJJd2ZScVhibGllY1p5d1RmZlh1VHNsSGwxWmlBTm5MRXQvNzBkYUEyajNNTTRKRGtydlByQgpBWUlqN0dLYXJyNHJxLzFIc20yQXFsZFIrcmR5eWVMU3FJRTdxU2NIOERpOUlZUndScWliM1piR21TeWE1WHUxCnpDek9UNlp0WmJZditwQlIzaDdhWjhFVWtSdjZIN3ZUdU9CWVRRdHhVWklabWFFR0NvK0Fsa29DeUdFRFhlS2UKS2NJWWNMTkVrYW4xaFEvZjBqcjdYK1BGQ2o4bkh5WXRTTUdjZlZXRXc4RlhVRStwdGduR2ZnNVZJMUFJOHphNApGcFB6MFBvL2ExTlRoZVpUZk16VjlIN0p4bjZWcjJPbmV1Vjk3bUU0U2tIVzRieUNPRTlpSHZNcXlkZVJuRHRNCjVVcjgvRk5nZFVrUUlRRUpvWXo2Szl2NE5WZVh6VDVoQW9JQkFBb0x0eXI0R2ZONE44eTNXRngwcVZXSWVLcm8Kem5USjNEOW5HYkdTS1pERlRQTmI4blBmWTlLTko1R0hhTHJWWkxnQ3Z1TmtSbWh5OERFNXkwNitEZ2xjQS9ERQp0VHgzdTNvb3ZqNHVBdW1OK2dxR0JLRDZWQ0c1amN1SHZlcUliRGZzbDFaWXlTa2s0MCtjZkVseUN0b01MNUpaCkdLVFlTWi9ReTRDeG1LV1FjYkhBMTJvRXAvWWJPc1cwakxTbk1WREY1VDYyRlY2UkdaL2FkYmFQejYvYm9LQ1kKdEx0cTkzUHhtaFVkMWVaempvZHljRU8zMk5wVnk3T0NYWlhocnZBWmV6Zkp5dDcxcVh6UUhZVWxMQ1BVa2YvZQpDN0l3R2FETUlxNGdCKzFVUDd6bHhXVUlFTnFUVlREZzdVNitCdlhvS3cyZTd3eU4xc1lsOS96UXJvST0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-jobservice-config
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
stringData:
  config.yml: |
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://release-name-redis-master:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
    metric:
      enabled: false
      path: /metrics
      port: 8001
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-jobservice-envvars
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
type: Opaque
data:
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-jobservice
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
type: Opaque
data:
  secret: ODU1ODl4RWIzYW16VGM2Uw==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-nginx
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: nginx
type: Opaque
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRTTdmb3FDaWhWSk5VYVZkNElxY2VNakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05Nakl3TmpFeU1UQXpNelEyV2hjTk1qTXdOakV5TVRBegpNelEyV2pBZE1Sc3dHUVlEVlFRREV4SmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzZ2NGNjTmsvb2tJVTNmTDU5TzhhS0MxMzU4RlBCdkZKVzI0VmIKOE9qTTZPTkNoTytVNXFZTEptNFQ3VlVCcTFha1A0a2JnMjFKcy9hNmhPNE1ZMDZ6RUsyem91SHo1TDJtVXFWTgpLVVAxOFRrcFhkSU9kVDdGeVVXcmJZemdCb1FhZ05kUlpjQWxjMGlIL3NrdWpSNWphZm1MZHZSUG9PWUlaY29ZCk5mQTZVVEszcmRYallKVXRwdFpZaUgxY1BXSXQxWTBnQmExb0w0TG1yRnFwdFpYTVpuSGlsSnBQZnd3Ukd6SWMKS2RqenlRbWZqcXFZVlI0bXF3emxSZE54c2V0UlZ4VVZwcDBiamIvOG9ab3Z4ZlZtN2JsU05nQlovbkczdGJHYQpKZWlhbFBEblB3Q1JQVlJxNlhQZXM3QkpqUmJJVG9UWG0vSmNqYnh6K3oycE9zdFRBZ01CQUFHamZ6QjlNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCU2VtemdPZFVZR0RwOE9JbkxKbzNKR2lRKy9GekFkQmdOVgpIUkVFRmpBVWdoSmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRlIwCk16UWVNOUsyUjh1MVV2cFkrZnNqY01wUGp1RzBSZ09INndIZnltajhQeUZmWmEzNUVKSzZtb1g1V2NqNzZxOFUKY2JPMUVzOXdaUzI3RktPZy8xT1l2dFdKaFFJdXlJcjl5UkMvNk9ZVVFwOTh6Y2dJYjNOQU1ha3FIVElTb2o4TApBZFhPeWNibFBINzhZQTYweURxY1Y1cDM5Yjh2WDA5eW5xTGp0eWtnNDNRYkFQUzlKTmhxUGZ6MHFSV2tybVNKCno1WVhvbzNrbVI3MDlHSGJlOGZYd0ZEeXhZUithWkJmS2kwWXJFSDZtSEVzNGVLWTNsajRxSG9XczBmY2JUOVoKY0lxT0tGSThBWW1senJhRmtlTzN2RHF1cTYzNk42OHRuZ1RXckJmV3drbVVDekxvWlVDVFhLRi8zSTJRZkVJMwozU0R1MURKeWpaQU1RaW5XWkpZPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBdXIrSEhEWlA2SkNGTjN5K2ZUdkdpZ3RkK2ZCVHdieFNWdHVGVy9Eb3pPampRb1R2CmxPYW1DeVp1RSsxVkFhdFdwRCtKRzROdFNiUDJ1b1R1REdOT3N4Q3RzNkxoOCtTOXBsS2xUU2xEOWZFNUtWM1MKRG5VK3hjbEZxMjJNNEFhRUdvRFhVV1hBSlhOSWgvN0pMbzBlWTJuNWkzYjBUNkRtQ0dYS0dEWHdPbEV5dDYzVgo0MkNWTGFiV1dJaDlYRDFpTGRXTklBV3RhQytDNXF4YXFiV1Z6R1p4NHBTYVQzOE1FUnN5SENuWTg4a0puNDZxCm1GVWVKcXNNNVVYVGNiSHJVVmNWRmFhZEc0Mi8vS0dhTDhYMVp1MjVVallBV2Y1eHQ3V3htaVhvbXBUdzV6OEEKa1QxVWF1bHozck93U1kwV3lFNkUxNXZ5WEkyOGMvczlxVHJMVXdJREFRQUJBb0lCQVFDSEdkQnhCSW5Dd2VyZQpQWXpCcE9ENU5VZ0RiVzNxbG9jcTl4ei9hc1hBbUNyeEVLTVNvZG8xN3ROcjd5SzBWblFUMXpNbGlHc2tDdUhRCkJpTUJLMGJnSEl6TmpHVFN3UVRDc3IrTGx2TG5sbCs0SVh1NW9mQ0x2aFI4OUlBYUFoekgzN1hsMlNxczdUM24KeE5kZXFoRDE4dERwcUdFT3ltUWdaeU5SYUpRbVd5R0hEMzU3eUpGdUlZRjhFcUNDdE5LN0YvWEpsczNaQU0reApQT1AyajlWbWJna3prRXNBNDZ1ZVdPOGdZeGZsZVRnRDhQem5NMDNtR01ydS81cEVOUmxsTVFBOEZzbS9Wek5xCnpvcWtZOUtBenVSMUx4T3JXay9pWHpzWWowbWFDYjJ2aHUzRTNqZUNiY1VabkFMa2YzcjJETkZta2FtSEp4bmIKTXRyWXEybUJBb0dCQVBQeHg1Rlp1RlFFTTlnQ21rNWFsL2ZESkhaWUVPS0dRSVdjdjM0ck8vdGZib05WWWRZQwo0VWJNUGJVODdScHMxcVNJa1FIQituYzFFcVduNDZLdmEvdmIydEphak9VSzZNS1Rmdm9Td3V0V2Q0MjdDM3U1CmxMcjdzaDR0eFh2emVLNVdCTG9GVWp5VUxSSVJOMDlnZGlpWExrcGFoZWRPcitsc0l1Tmg4UkdEQW9HQkFNUDYKSTZtSWo1Vks5QXNHMXBoMk9YWXFuaW9hVTlPTFd0THlJR2kxNnY0UThWNDV4M1JiNmk1bGo3b3o5RElDRWd5agozbHdPUlJ6eWQxL2dRdU5sYlYxUXEydzhkS0xqT0E2RzZIOWw5TS93NEwvRitLVFdheW84Z1RQMk01NWl0cDhzCkdsak1RaklJbVRrakhaVW5NVDFYQ0FxeUhURUtYVDhkb2pJV1cwWHhBb0dCQUs2SFJPalE3L2ZzS2N0WjBWeE4KcEh3MnVWZVNHa0ozR3FKOVN1UFJ1dEJWcnBOMytzOUtzREllM2VkVTk2MzRRSGptM0JnTjJFeUJSQjRReCtRVQo3WVQ3L3NxUXprendTU2NzcjZQcTJGblhPeUhEdUt1RVVzeVVWeE1RWEVJYUp6VlRoWDR4WUd6RzlwZitpVHZaCkg3QmF1VnVvK0RSTkw3NHBCNnoyM2FwUkFvR0JBTEYvOTVqdnBReVZES0NJR3dtUDJzK2FIaE1JTVhCaXdXcFoKL3R5WUdEVHhaNHZ1VFNhb3NWeEFoSU1qMTBNTCtRa1Z5cW9hQ3FNRFFQZkhpUTJvcWZ0Z3UwS1hKeFQ1TTZhRQpya1BsTm15NFFQZXcrVmxqRTBEMytCWDJJaDZNVGRldy9GUDgvTitRUmljb0ZQMG91RUpVZDJZb21LUDRQU2lUClVIcUpJVFloQW9HQkFPaUZIWjJKOUFzKzJiR28zejJVUmhQclBFWVlhNTJnWEZzc2Qxd3VFU3JKdk04dUtZWFAKb0FwQXhlTjJoWWMyNjBRVG9JOEhLcExlNEVGR2NuMkUvSVBwSVExQnpLWHo2U0RzWFhPd3c0TmZGUjRYVTVSLwpteUdEZ3BoKzNHck5pd3htb0FSbmxxdFdXak1qdWRLSDVqNHZtVUNUU1oxU3lDbkp0bFhudGNZSAotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUlRRGhFbnNLb2thNU11Mjkvd29GUEV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl5TURZeE1qRXdNek0wTmxvWERUSXpNRFl4TWpFdwpNek0wTmxvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF5SHcvU0Vua0UyT2plNzJyMFkvc0xnUFVxTnRrR0o4WllkWjlZSi9lVm9WYzY2RWkKMlBZUzhNb29vak52RnZuUlhid01wMnpIYzBCZnM2T25XOExwcjh1NU5HdmlLU1RWYWV5QUVmQ0RJNXdWYnFSQQp0ZnJEenBQeVhRMUFDdXZObW83enErT1BxRlZsQ1J4VlJDTWJMYi9oMkpUZkNnRXk0TXhCMzVQdU8zSHNHRlNwCkd5ZHZRMmJqM1pmTjRKWFJ3Q0ZZS3pqcVVpTHFMR1ZzNytOaVlEQzlmSWhNa3cwN2c0dHNkS2IwcGVHb1VtWGsKdUdmdmtIUmZJenJlTGk0eXFySlpsRldXZktNVHA0SXNtUkplN1BPeGxVc2luUGlGVVd2Rys3MVZQdW9UREtjMQpqM1ZoWDFwQ3ozNlVBSWJ6M0RFWmpFaUNsaS9aMXprSHlWN2Ztd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSjZiT0E1MVJnWU9udzRpY3NtamNrYUpENzhYTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQStENjV3SzBzc0t6bjFZNDdoV1FYWnBpaXNrN3h1U3J3aUhKYjh4V2NVcEl6M0RvVmdQOXU3CkYwU1dqU0w4ZjZyTWhIbWFIeFRPQzNZVmFJYXZIaGp6RGJWVk12bTNRQ3pHaGhhdnI0N1hETHhsUitkaklraHkKbDdRbnhma1NXT1JuR2Yvby90Q0FVYVU2ZjMrTUNrRW9sdjB6Y05FWGZOVXRkK1hlS1FkZUdhekNKbmlaeUxaTgpPTVQ4QnR2a0J4dXJIcVlBRXpHQkZma1l3eGZsdmpjd1lVUlhBTXExUU40L2JKWnRTZ1BJeU82RGtLdlB6MWcwCkJPTldZYU4zTXRTQ2FMZXBNQ1MxNTlKN1RvRGJ4cjFvYjRDOFZoMFNHL1Q2RDFGNk1lQVBZSXBQY1hmTlFOREEKbE5DRFU4RTU2WGhBY29DQXBoSlgzak1nZVZtaVBjRUQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-notary-server-envvars
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: notary
type: Opaque
data:
  server_db_url: cG9zdGdyZXM6Ly9wb3N0Z3Jlczpub3Qtc2VjdXJlLWRhdGFiYXNlLXBhc3N3b3JkQHJlbGVhc2UtbmFtZS1wb3N0Z3Jlc3FsOjU0MzIvbm90YXJ5c2VydmVyP3NzbG1vZGU9ZGlzYWJsZQ==
  signer_db_url: cG9zdGdyZXM6Ly9wb3N0Z3Jlczpub3Qtc2VjdXJlLWRhdGFiYXNlLXBhc3N3b3JkQHJlbGVhc2UtbmFtZS1wb3N0Z3Jlc3FsOjU0MzIvbm90YXJ5c2lnbmVyP3NzbG1vZGU9ZGlzYWJsZQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-notary-server
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: notary
type: Opaque
data:
  notary-signer-ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQUprbmdRS0pJQUFxN0s0OXQycm15UGN3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNakEyTVRJeE1ETXpORFZhRncweQpNekEyTVRJeE1ETXpORFZhTUJzeEdUQVhCZ05WQkFNVEVHaGhjbUp2Y2kxdWIzUmhjbmt0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEamU0UURxQUhVZnllZXRtb3JrMnpNVloxNGRTaFAKZkFQYVk1WHFRWUlNenNFUldRUXFaMU5Eb21XNW5WYURLTldkR1hxaXFtMWgxSm90ajJjVE9ldTczV3NoMDZkNQpRWkZnWkp0T0hrTzQveTQyNTV1M3MzVnRYZm12dmZZYkRDOElIeVY1SjRHSFMxUzAra2wxK0MwNlJGQWdyVmZaCmlaODRvNFRpZkprWVdLNXdpUmVYdTE3NjNnMVlmOGNqWis0WVRxWWNzMWFiV2o2QkFBaGs3K1hra1JSaUx4c28KU0RnSnh1QlZvcHMwU2wxWDdsVVp1TG1mMmc5YktKa01jdXZZbm1Nc2dQUVVsNzJDckhnNVdHTHkxdFh6a2h0SApHVmNoZmgzREZSbkp5dXM5UXFUS3IvOUQycGp3SitFVjFuMkViTk5IYVNkUWlNemJHTEZWa1BIbEFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVBWQ3grcnBmZ3lXNDB3WjJhc1FONUFqawpCUGd3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUtiUXlRczFjQXdQM1BaN29CT1F1NEZlUnZ6WmFoSC9DT2ZZCnRCb3pDSkdsMDBHelBieDUrclhUTUVubzZNd2xwZTRTZjloZ3BWaURSR296RWhUT0YwMEFnZmpLODNrSmZZQ08KSTFvQjgvbFYxck05ODkrTm4wem9WMUxPSzNCbTlpdXAySEVGcU0yelNVUy9oUzh1dHM4eGNTNHdjdFU2N1NndApNbXF3eGpMQUNlc2MwRnN1aytTMFRPaU9NQUxqSmJmUUk2Tld3djFFYk8zS0pjbEp4OGRkdGhnbUMwNWx0N1pTClN4ckxkbTIvMDZLVzFZbmw1N252N0RuQ0EvMGtYbWdGV1MxVzFGNFdDOWltcm9jVGxrM0YvOVlNNElHdmxWdHkKeGNoQ1VrdG9MT2M4S0pJbEhnbjBoUTQvcklkZ3lyVTJ6d2xYYklyeldDMWhnYVJtSEtBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  notary-signer.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR3ekNDQXF1Z0F3SUJBZ0lSQUluMVVEQWJZODZlSWlwMDJsaURCajB3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNakEyTVRJeE1ETXpORFphRncweQpNekEyTVRJeE1ETXpORFphTUN3eEtqQW9CZ05WQkFNVElYSmxiR1ZoYzJVdGJtRnRaUzFvWVhKaWIzSXRibTkwCllYSjVMWE5wWjI1bGNqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5uazlkaGkKQVNweFZqVm5LK0JnU0VKZStlVnovOG9HbGhicGIvSHA4Y05kaGE4UlBjRVFTLzQxemcvL3ZBc2JQRENudGoxOQpiWjJKcW8zdjFYS1BhdjF1Ri9TZzdZbVRjeW5KdGVkd2hHT2FjM3FCMFQ1RlY5NE9aMklRMUxLSGJMc0NBUC9sCm9GeDRIdi9hK1JwQWhOQUxaTEF4bzBTS2swaHJ2ek5aTk9QWnhEaDNEOHRnQ2JpM2t1RVNaejNPU0hQU1NmOVEKbWhBRDNiV1c1UXRKRUtRMXRLa0M0Y2xFeUVWbW53UUg5Q1AyS3NibkpZQmdZTGhuQ3ZCSW5ZYTdTb3g4UnlpUAoxV1g1N3lFSko2N25KeXMzUEhlZ0t0SlB4djE5Z0ZtUEZveVQ2dCtRTzRpWlF3UVVVYUlsTHBwMEZVc3hEeUhoCk1pd0hzakFLOGUwSFVSY0NBd0VBQWFPQjhEQ0I3VEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXcKRkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVQpQVkN4K3JwZmd5VzQwd1oyYXNRTjVBamtCUGd3Z1l3R0ExVWRFUVNCaERDQmdZSXZJbkpsYkdWaGMyVXRibUZ0ClpTMW9ZWEppYjNJdGJtOTBZWEo1TFhOcFoyNWxjaTVrWldaaGRXeDBMbk4yWXlLQ0t5SnlaV3hsWVhObExXNWgKYldVdGFHRnlZbTl5TFc1dmRHRnllUzF6YVdkdVpYSXVaR1ZtWVhWc2RDS0NJWEpsYkdWaGMyVXRibUZ0WlMxbwpZWEppYjNJdGJtOTBZWEo1TFhOcFoyNWxjakFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBZHFGU2FvTmI1R2I4CnlGYVFScmpWbmtIVC9samp1bWhiakNXeWpkWUZZSUQwcmwrYkdKMkdoVUVnbGlPU3ZaY3FiVjB3WDBHZzRFUG4KdU9rZ1J6d0h5MkNpS28rUDJBUmw0eFp5aUl6WXR6anBHVDIzNEFYTmkwQTJxNkFLWEIrNFNtZG4zVFN2UUpOagpJQVJ2bVA5czRxS3Jid1FLcE4xV1NlTXNEK2t2eTM3b24wV3J2b0VadEJtVm1HV3dVMkxIMytvbHFjQnpacUovCndoMlNOek95YWdQY3g3cDg5QzNrN1JhUlVJbG1QRWVwVitEL3JHanlReUFld3ptNG1OZktMdlhlam9JWm5rTVQKSnUzN2RURFdEK0lrbGVWRU5UMG5pTnB5L2xYSmd6RmZjaFNHRjB2Q3lHYnFPbm9WSHlweXA3S3JUMXhvYnlxRQptb21jeE1LbVB3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  notary-signer.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMmVUMTJHSUJLbkZXTldjcjRHQklRbDc1NVhQL3lnYVdGdWx2OGVueHcxMkZyeEU5CndSQkwvalhPRC8rOEN4czhNS2UyUFgxdG5ZbXFqZS9WY285cS9XNFg5S0R0aVpOektjbTE1M0NFWTVwemVvSFIKUGtWWDNnNW5ZaERVc29kc3V3SUEvK1dnWEhnZS85cjVHa0NFMEF0a3NER2pSSXFUU0d1L00xazA0OW5FT0hjUAp5MkFKdUxlUzRSSm5QYzVJYzlKSi8xQ2FFQVBkdFpibEMwa1FwRFcwcVFMaHlVVElSV2FmQkFmMEkvWXF4dWNsCmdHQmd1R2NLOEVpZGhydEtqSHhIS0kvVlpmbnZJUWtucnVjbkt6YzhkNkFxMGsvRy9YMkFXWThXakpQcTM1QTcKaUpsREJCUlJvaVV1bW5RVlN6RVBJZUV5TEFleU1Bcng3UWRSRndJREFRQUJBb0lCQVFDOFpvWlR0Rm5Cc3dHUgpaMFcrMmtGZ2NmS3MvU0djTXhtdmNlUkRUYjZtNThSaFhRMENVKzhCUE5DUmNOUE0zcDJxakRpODdpakxZRzlDCkRxK0dRSStIMVp1TS8yQ2o1Z1JiaTNkblNCaVFic21Pa1pTMHZReCtpZ0hGL3p1SnFpTFBoNm9KbVNpUkM2UHkKSWdubE13Z2pRdGFxcWlDN2NQNXNUZzJpZm0yRzIvbXFHbWYxNzNueVdkZEZPVDVwbkxIQnhzZDlna0V5NnJ6TwpEZXp2cXNQb3g1aVNoM24va1gwcWNQaGZFTDdCSW5xRng1ckVGY2lHcjRzUlYwczdtZm02TmYzTUFvcks4WXRUCjVNcG01alNNeWkvMUpBMjBIOG4zNDYwUVJrR1B2VUNGQllBbEpVQ1d5ZFFIN3dTVEl0YzFMR3IvSnJsOWlFRWwKQjRUQmpHVkJBb0dCQU92dktvRkFadFdoK3NNZHc2YmNqWlE5bUZPU1E5ZThQMG9rNlQxRjQydFpoaTdLblBxTApaajJ0SXp5S25xc0ZzRjZFck1rL1JGK0E4NTFsUFBlREtFZ2p3UUh4TkIvd0o3d1VNTWRUdjNZZDYweWtTVzZwCmp3Y2tJc0VEV0xJNjQ1V3B3NFBnU3pROExlSkVzem95N1hsTWVWRUZTT3h5OUxFWFRucXVrYVhIQW9HQkFPeHQKQmxNSXY2OUU2eDZsYk52c3lseHk1OTdKdnNNbk52QlJxWU0rS0JKQ3Z1bkRlT3VnenlzNStCdHBJaXMyTEx3NApQa2QrRFBuakE4ZFFuS2V3eExVSGN0b0MzcnlRZTZnNVNqR3BtMCtqQk5mSkRuVCszZnAvMExXVUtZa0ZXcVBUCmNMSVVaZXZpemtDcGdCb1NnVjRGWjllQXpIVTYzQ0VWemtRNXJMb3hBb0dBZXhFSkFkeWZCMlp6a0IxUmRoTnIKZ2x6U3ZSejVhR25ZTll1bFlnRzNpOEpwM0xSeFI3czQvSWo0YlZiOVJzWXo1a21jZTJrVitCOGlkQUpmMTlmQgpSa2ZvSUdRNXhVTVc1dU05UW12cjNlZmpXZG9FTjhZWVJpaFNQSTNMVVVTb2UrUE9pVmFRdzlGME9hZU9PWmhoCkNMbWNPbWZnVHYzenB3QTZQb0lhbFBjQ2dZQURuSEt4Ui92dGlHYnk4K0hpeGc0ZE5XQVhSZ3VVM1g5NFVqYjkKbXpCdmZ2ZDlpSS9MUVl5SWczMG5wZ1p3bElaQVpiZUZ6Z1lTdHdYeXdHZDBKRDRNNmMwMlNUN3ZzR0ZESTRUZgpsMUNZK2N0MEpFMEZPbk5YaFNaQjc3NW1xbDlGQzFDNFY1bHE3ZTdxaSt3NStiaGlJRUVDeUtQVzBveFVNUW9TCmZyTUZzUUtCZ1FERFhyQzk4QVFhR2p6MWx1ekF2dEdGUTU3TkpMU3FxY1FVb2JzQWpJUFA3Smlqd09hS2VlblMKSm15YkJvZ0lGV0FUc25YdGM2aDBvWEtHeVN3Wks2ZlRDdEhJK0RRSFR4Vy9BcnZsYXJObWhxcURiaXovUTZ6agpMbnRPUVBzVVJBTnFpZ3QzZHJ5RXcxUFJoL0ltMDg0WVp0bXVIR21qRldLYnNzS3luZFVMdlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  server-config.postgres.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogInJlbGVhc2UtbmFtZS1oYXJib3Itbm90YXJ5LXNpZ25lciIsCiAgICAicG9ydCI6ICI3ODk5IiwKICAgICJ0bHNfY2FfZmlsZSI6ICIvZXRjL25vdGFyeS9ub3Rhcnktc2lnbmVyLWNhLmNydCIsCiAgICAia2V5X2FsZ29yaXRobSI6ICJlY2RzYSIKICB9LAogICJsb2dnaW5nIjogewogICAgImxldmVsIjogImRlYnVnIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6bm90LXNlY3VyZS1kYXRhYmFzZS1wYXNzd29yZEByZWxlYXNlLW5hbWUtcG9zdGdyZXNxbDo1NDMyL25vdGFyeXNlcnZlcj9zc2xtb2RlPWRpc2FibGUiCiAgfSwKICAiYXV0aCI6IHsKICAgICAgInR5cGUiOiAidG9rZW4iLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAgICJyZWFsbSI6ICJodHRwczovL2NvcmUuaGFyYm9yLmRvbWFpbi9zZXJ2aWNlL3Rva2VuIiwKICAgICAgICAgICJzZXJ2aWNlIjogImhhcmJvci1ub3RhcnkiLAogICAgICAgICAgImlzc3VlciI6ICJoYXJib3ItdG9rZW4taXNzdWVyIiwKICAgICAgICAgICJyb290Y2VydGJ1bmRsZSI6ICIvcm9vdC5jcnQiCiAgICAgIH0KICB9Cn0K
  signer-config.postgres.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvbm90YXJ5L25vdGFyeS1zaWduZXIuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9ub3Rhcnkvbm90YXJ5LXNpZ25lci5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJkZWJ1ZyIKICB9LAogICJzdG9yYWdlIjogewogICAgImJhY2tlbmQiOiAicG9zdGdyZXMiLAogICAgImRiX3VybCI6ICJwb3N0Z3JlczovL3Bvc3RncmVzOm5vdC1zZWN1cmUtZGF0YWJhc2UtcGFzc3dvcmRAcmVsZWFzZS1uYW1lLXBvc3RncmVzcWw6NTQzMi9ub3RhcnlzaWduZXI/c3NsbW9kZT1kaXNhYmxlIiwKICAgICJkZWZhdWx0X2FsaWFzIjogImRlZmF1bHRhbGlhcyIKICB9Cn0K
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-registry
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  REGISTRY_HTPASSWD: aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt
  REGISTRY_HTTP_SECRET: VGwyODhxTTlldHl6djZmTA==
  REGISTRY_REDIS_PASSWORD: ""
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-harbor-trivy-envvars
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: trivy
type: Opaque
data:
  SCANNER_TRIVY_GITHUB_TOKEN: ""
  SCANNER_REDIS_URL: cmVkaXM6Ly9yZWxlYXNlLW5hbWUtcmVkaXMtbWFzdGVyOjYzNzkvNQ==
  SCANNER_STORE_REDIS_URL: cmVkaXM6Ly9yZWxlYXNlLW5hbWUtcmVkaXMtbWFzdGVyOjYzNzkvNQ==
  SCANNER_JOB_QUEUE_REDIS_URL: cmVkaXM6Ly9yZWxlYXNlLW5hbWUtcmVkaXMtbWFzdGVyOjYzNzkvNQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-postgresql-extended-configuration
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  override.conf: max_connections = 1024
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-postgresql-init-scripts
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  initial-notaryserver.sql: |
    CREATE DATABASE notaryserver;
    CREATE USER server;
    alter user server with encrypted password 'password';
    GRANT ALL PRIVILEGES ON DATABASE notaryserver TO server;
  initial-notarysigner.sql: |
    CREATE DATABASE notarysigner;
    CREATE USER signer;
    alter user signer with encrypted password 'password';
    GRANT ALL PRIVILEGES ON DATABASE notarysigner TO signer;
  initial-registry.sql: |
    CREATE DATABASE registry ENCODING 'UTF8';
    \c registry;
    CREATE TABLE schema_migrations(version bigint not null primary key, dirty boolean not null);
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-configuration
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.11.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.11.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.11.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-chartmuseum-envvars
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartmuseum
data:
  PORT: "9999"
  CACHE: redis
  CACHE_REDIS_ADDR: release-name-redis-master:6379
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: chart_controller
  DEPTH: "1"
  DEBUG: "true"
  LOG_JSON: "false"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  AUTH_ANONYMOUS_GET: "false"
  STORAGE_TIMESTAMP_TOLERANCE: 1s
  STORAGE: local
  STORAGE_LOCAL_ROOTDIR: /bitnami/data
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-core-envvars
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
data:
  PORT: "8080"
  DATABASE_TYPE: postgresql
  POSTGRESQL_HOST: release-name-postgresql
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: postgres
  POSTGRESQL_DATABASE: registry
  POSTGRESQL_SSLMODE: disable
  EXT_ENDPOINT: https://core.harbor.domain
  CORE_URL: http://release-name-harbor-core:80
  JOBSERVICE_URL: http://release-name-harbor-jobservice:80
  REGISTRY_URL: http://release-name-harbor-registry:5000
  TOKEN_SERVICE_URL: http://release-name-harbor-core:80/service/token
  WITH_NOTARY: "true"
  NOTARY_URL: http://release-name-harbor-notary-server:4443
  CORE_LOCAL_URL: http://127.0.0.1:8080
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: NA
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: http://release-name-harbor-trivy:8080
  REGISTRY_STORAGE_PROVIDER_NAME: filesystem
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: http://release-name-harbor-chartmuseum:80
  LOG_LEVEL: debug
  CONFIG_PATH: /etc/core/app.conf
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: redis
  PORTAL_URL: http://release-name-harbor-portal:80
  REGISTRY_CONTROLLER_URL: http://release-name-harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-chartmuseum,release-name-harbor-clair,release-name-harbor-notary-server,release-name-harbor-notary-signer,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,127.0.0.1,localhost,.local,.internal
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-core
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
data:
  app.conf: |
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = "8080"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-jobservice-envvars
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
data:
  CORE_URL: http://release-name-harbor-core:80
  TOKEN_SERVICE_URL: http://release-name-harbor-core:80/service/token
  REGISTRY_URL: http://release-name-harbor-registry:5000
  REGISTRY_CONTROLLER_URL: http://release-name-harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-chartmuseum,release-name-harbor-clair,release-name-harbor-notary-server,release-name-harbor-notary-signer,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,127.0.0.1,localhost,.local,.internal
  LOG_LEVEL: debug
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-nginx
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: nginx
data:
  nginx.conf: |
    worker_processes auto;
    pid /opt/bitnami/nginx/tmp/nginx.pid;

    events {
      worker_connections 3096;
      use epoll;
      multi_accept on;
    }

    http {
      client_body_temp_path  "/opt/bitnami/nginx/tmp/client_body" 1 2;
      proxy_temp_path        "/opt/bitnami/nginx/tmp/proxy" 1 2;
      fastcgi_temp_path      "/opt/bitnami/nginx/tmp/fastcgi" 1 2;
      scgi_temp_path         "/opt/bitnami/nginx/tmp/scgi" 1 2;
      uwsgi_temp_path        "/opt/bitnami/nginx/tmp/uwsgi" 1 2;

      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server release-name-harbor-core:80;
      }

      upstream portal {
        server release-name-harbor-portal:80;
      }
      upstream notary-server {
        server release-name-harbor-notary-server:4443;
      }

      log_format timed_combined '[$time_local]:$remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;
      server {
        listen 4443 ssl;
        listen [::]:4443 ssl;
        server_tokens off;
        # ssl
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;

        # recommendations from https://raymii.org/s/tutorials/strong_ssl_security_on_nginx.html
        ssl_protocols tlsv1.1 tlsv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:ssl:10m;

        # disable any limits to avoid http 413 for large image uploads
        client_max_body_size 0;

        # required to avoid http 411: see issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
          proxy_pass http://notary-server/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }
      }

      server {
        listen 8443 ssl;
        listen [::]:8443 ssl;
        server_tokens off;
        # SSL
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;

        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        # Add extra headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header Content-Security-Policy "frame-ancestors 'none'";

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          # Add Secure flag when serving HTTPS
          proxy_cookie_path / "/; HttpOnly; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /chartrepo/ {
          proxy_pass http://core/chartrepo/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

      location /service/notifications {
          return 404;
        }
      }
      server {
          listen 8080;
          listen [::]:8080;
          return 301 https://$host$request_uri;
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-portal
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: portal
data:
  nginx.conf: |
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /opt/bitnami/harbor;
            index  index.html index.htm;
            include /opt/bitnami/nginx/conf/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-registry
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  config.yml: |
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "release-name-redis-master:6379"
      db: 2
    http:
      relativeurls: false
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
  ctl-config.yml: |
    ---
    protocol: "http"
    port: 8080
    log_level: debug
    registry_config: "/etc/registry/config.yml"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-harbor-trivy-envvars
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: trivy
data:
  SCANNER_LOG_LEVEL: debug
  SCANNER_TRIVY_CACHE_DIR: /bitnami/harbor-adapter-trivy/.cache/trivy
  SCANNER_TRIVY_REPORTS_DIR: /bitnami/harbor-adapter-trivy/.cache/reports
  SCANNER_TRIVY_DEBUG_MODE: "false"
  SCANNER_TRIVY_VULN_TYPE: os,library
  SCANNER_TRIVY_SEVERITY: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
  SCANNER_TRIVY_IGNORE_UNFIXED: "false"
  SCANNER_TRIVY_SKIP_UPDATE: "false"
  SCANNER_TRIVY_INSECURE: "false"
  SCANNER_API_SERVER_ADDR: :8080
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: release-name-harbor-core,release-name-harbor-jobservice,release-name-harbor-database,release-name-harbor-chartmuseum,release-name-harbor-clair,release-name-harbor-notary-server,release-name-harbor-notary-signer,release-name-harbor-registry,release-name-harbor-portal,release-name-harbor-trivy,127.0.0.1,localhost,.local,.internal
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-harbor-chartmuseum
  namespace: default
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartmuseum
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-harbor-jobservice
  namespace: default
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-harbor-registry
  namespace: default
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: registry
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.11.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.11.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-chartmuseum
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartmuseum
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: chartmuseum
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-core
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: core
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-jobservice
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: jobservice
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: nginx
  annotations: null
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
    - name: notary
      port: 4443
      targetPort: notary
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: nginx
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-notary-server
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - name: notary-server
      port: 4443
      targetPort: notary-server
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: notary-server
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-notary-signer
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - name: notary-signer
      port: 7899
      targetPort: notary-signer
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: notary-signer
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-portal
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: portal
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-registry
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: registry
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-harbor-trivy
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: trivy
spec:
  ports:
    - name: api-server
      protocol: TCP
      port: 8080
      targetPort: api-server
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: trivy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-chartmuseum
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartmuseum
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: chartmuseum
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: chartmuseum
      annotations:
        checksum/configmap-envvars: d6e658fd4abdf7f31164525c20bfae94c13dbc61947441722e2ff72f4313a2a3
        checksum/secret: dc1da792eeb14a23d637b4441256a17ce47a3ac6a2a1fbe711029e8910b99d64
        checksum/secret-core: 85bc2102c340f286110ae433a8ca3b17b5eb1224f35a54384fe7a8437c0b6914
    spec:
      automountServiceAccountToken: false
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: chartmuseum
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: chartmuseum
          image: marketplace.azurecr.io/bitnami/chartmuseum:0.14.0-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 11385
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: DEBUG
              value: "0"
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-core
                  key: secret
          envFrom:
            - configMapRef:
                name: release-name-harbor-chartmuseum-envvars
            - secretRef:
                name: release-name-harbor-chartmuseum-secret
          ports:
            - containerPort: 9999
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /health
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /health
              port: http
              scheme: HTTP
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: chartmuseum-data
              mountPath: /bitnami/data
              subPath: null
      volumes:
        - name: chartmuseum-data
          persistentVolumeClaim:
            claimName: release-name-harbor-chartmuseum
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-core
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: core
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: core
      annotations:
        checksum/configmap: 3a4a18adbc146d3b1c9cf4f143bae6b946b4e8b3816570b0e028568e24788d10
        checksum/configmap-envvars: feabe3ea57cf2332030cc312c1df39a797c0a9da50e98069d7a006960ada96f7
        checksum/secret: 0c1f12396d5c2a32b4fff69827839329548be199919a1d8bf652a81026786cc9
        checksum/secret-envvars: 5a0c479708c92482b59c59eb861f2dca9c4cc52cc86f23a04d6303b32ee72d2e
        checksum/secret-jobservice: 37603da75bc4986f15eba5e475cb4211cdc4abe279a7f7a33a0fb8f3f9d747e8
    spec:
      automountServiceAccountToken: false
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: core
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: core
          image: marketplace.azurecr.io/bitnami/harbor-core:2.5.1-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 11461
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-jobservice
                  key: secret
          envFrom:
            - configMapRef:
                name: release-name-harbor-core-envvars
            - secretRef:
                name: release-name-harbor-core-envvars
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: http
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: /etc/core/app.conf
              subPath: app.conf
            - name: secret-key
              mountPath: /etc/core/key
              subPath: key
            - name: token-service-private-key
              mountPath: /etc/core/private_key.pem
              subPath: tls.key
            - name: ca-download
              mountPath: /etc/core/ca
            - name: psc
              mountPath: /etc/core/token
      volumes:
        - name: config
          configMap:
            name: release-name-harbor-core
            items:
              - key: app.conf
                path: app.conf
        - name: secret-key
          secret:
            secretName: release-name-harbor-core
            items:
              - key: secretKey
                path: key
        - name: token-service-private-key
          secret:
            secretName: release-name-harbor-core
        - name: ca-download
          secret:
            secretName: release-name-harbor-nginx
        - name: psc
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-jobservice
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: jobservice
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-13.2.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: jobservice
      annotations:
        checksum/configmap-env: 32112dda264dd9a4c7eca491e2abc860e288144b9b00f416011b2a8166939cb4
        checksum/secret-env: c25c92e8328a5f7f1b062fd6ddb2a9ebb79f3eee9371e6f548ffa0bb9e94e090
        checksum/secret-config: f63f3284db34c558c829f89c74deb192e99458a4527cf4e468254fbc5176ec4f
        checksum/secret: 259ff190f638780c42a5dd1e79ca07e2c6959737e707d006417917d9b6fbf6e3
        checksum/secret-core: 4eb998e40af8e39ebdb38e357bce77ffbe1bf801ac072f1084f422d581802021
    spec:
      automountServiceAccountToken: false
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: jobservice
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      initContainers: null
      containers:
        - name: jobservice
          image: marketplace.azurecr.io/bitnami/harbor-jobservice:2.5.1-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 10372
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-jobservice
                  key: secret
          envFrom:
            - configMapRef:
                name: release-name-harbor-jobservice-envvars
            - secretRef:
                name: release-name-harbor-jobservice-envvars
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v1/stats
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v1/stats
              port: http
              scheme: HTTP
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: jobservice-config
              mountPath: /etc/jobservice/config.yml
              subPath: config.yml
            - name: job-logs
              mountPath: /var/log/jobs
              subPath: null
      volumes:
        - name: jobservice-config
          secret:
            secretName: release-name-harbor-jobservice-config
        - name: job-logs
          persistentVolumeClaim:
            claimName: release-name-harbor-jobservice
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-nginx
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: nginx
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-13.2.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: nginx
      annotations:
        checksum/configmap: 562284ba267a663a92ccd53ec3f0ed1aaa3e60d42cfe1122dc79146a9decf37b
        checksum/tls-secret: c0d24a7cc915b4edfb3b89180cae35603256676cfbc6bf091d347b2ff265b559
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: nginx
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: nginx
          image: marketplace.azurecr.io/bitnami/nginx:1.21.6-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 10219
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom: null
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 8443
              name: https
            - containerPort: 4443
              name: notary
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: https
              scheme: HTTPS
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: https
              scheme: HTTPS
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
            - name: certificate
              mountPath: /etc/nginx/cert
      volumes:
        - name: config
          configMap:
            name: release-name-harbor-nginx
        - name: certificate
          secret:
            secretName: release-name-harbor-nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-notary-server
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: notary-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-13.2.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: notary-server
      annotations:
        checksum/secret: 6b39331146ba598b4d76e81b23d314529a58ab5364ee5acb968b10552b2b2ef7
        checksum/secret-core: 6a3ddd52834c7616971ea19305219e4334eaabdac880d14b58b694649b5c86b7
    spec:
      automountServiceAccountToken: false
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: notary-server
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: notary-server
          image: marketplace.azurecr.io/bitnami/harbor-notary-server:2.5.1-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 11081
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MIGRATIONS_PATH
              value: migrations/server/postgresql
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-notary-server-envvars
                  key: server_db_url
          envFrom: null
          ports:
            - containerPort: 4443
              name: notary-server
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: notary-server
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: notary-server
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: notary-config
              mountPath: /etc/notary
            - name: root-certificate
              mountPath: /root.crt
              subPath: tls.crt
      volumes:
        - name: notary-config
          secret:
            secretName: release-name-harbor-notary-server
        - name: root-certificate
          secret:
            secretName: release-name-harbor-core
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-notary-signer
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: notary-signer
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-13.2.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: notary-signer
      annotations:
        checksum/secret: a147f5b6bca81294a868f781686cbc7e6131f974253034654490f497a9cb85c5
    spec:
      automountServiceAccountToken: false
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: notary-signer
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: notary-signer
          image: marketplace.azurecr.io/bitnami/harbor-notary-signer:2.5.1-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 11134
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MIGRATIONS_PATH
              value: migrations/signer/postgresql
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-notary-server-envvars
                  key: signer_db_url
            - name: NOTARY_SIGNER_DEFAULTALIAS
              value: defaultalias
          envFrom: null
          ports:
            - containerPort: 7899
              name: notary-signer
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: notary-signer
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: notary-signer
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: notary-config
              mountPath: /etc/notary
      volumes:
        - name: notary-config
          secret:
            secretName: release-name-harbor-notary-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-portal
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: portal
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-13.2.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: portal
      annotations: null
    spec:
      automountServiceAccountToken: false
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: portal
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: portal
          image: marketplace.azurecr.io/bitnami/harbor-portal:2.5.1-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 10183
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom: null
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
              scheme: HTTP
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: portal-config
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: portal-config
          configMap:
            name: release-name-harbor-portal
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-harbor-registry
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: registry
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-13.2.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: registry
      annotations:
        checksum/configmap: 3086e8ab496f207bc83b79f13d507a5e4e4d025265f8d5f8262c616d1fc2f49d
        checksum/secret: 45a177808006856ea3ca23774122e224349580ac2d9e8d29ea56809266a14e06
        checksum/secret-jobservice: 92731fe1c77fd84ddcb57d8233b15dac7b06d94a14d5c4df3fc1dc708dac3371
        checksum/secret-core: 88d6074b4a9cf884d09f65109ac3ad8985153df50f5d0151fd655b5b227be6d6
    spec:
      automountServiceAccountToken: false
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: registry
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      initContainers: null
      containers:
        - name: registry
          image: marketplace.azurecr.io/bitnami/harbor-registry:2.5.1-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 10783
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
            - secretRef:
                name: release-name-harbor-registry
          ports:
            - containerPort: 5000
              name: registry
            - containerPort: 5001
              name: debug
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              scheme: HTTP
              port: registry
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              scheme: HTTP
              port: registry
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath: null
            - name: registry-root-certificate
              mountPath: /etc/registry/root.crt
              subPath: tls.crt
            - name: registry-htpasswd
              mountPath: /etc/registry/passwd
              subPath: passwd
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
        - name: registryctl
          image: marketplace.azurecr.io/bitnami/harbor-registryctl:2.5.1-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          envFrom:
            - secretRef:
                name: release-name-harbor-registry
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-harbor-jobservice
                  key: secret
          ports:
            - containerPort: 8080
              name: registryctl
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/health
              scheme: HTTP
              port: registryctl
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/health
              scheme: HTTP
              port: registryctl
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath: null
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
            - name: registry-config
              mountPath: /etc/registryctl/config.yml
              subPath: ctl-config.yml
      volumes:
        - name: registry-htpasswd
          secret:
            secretName: release-name-harbor-registry
            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
        - name: registry-root-certificate
          secret:
            secretName: release-name-harbor-core
        - name: registry-config
          configMap:
            name: release-name-harbor-registry
        - name: registry-data
          persistentVolumeClaim:
            claimName: release-name-harbor-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.6.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
        checksum/extended-configuration: c2885d773b7114142fecf58f606adc43f34a9d0d3fd9c8e0b255d6fb20ab719b
    spec:
      serviceAccountName: default
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers: null
      containers:
        - name: postgresql
          image: marketplace.azurecr.io/bitnami/postgresql:13.7.0-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11345
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: postgresql-extended-config
              mountPath: /bitnami/postgresql/conf/conf.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: postgresql-extended-config
          configMap:
            name: release-name-postgresql-extended-configuration
        - name: custom-init-scripts
          configMap:
            name: release-name-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.11.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: master
  serviceName: release-name-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-16.11.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 5d04c5c92bc38b8e2568385079acc7e58f4409e8d6f63e2fb5cb504aa8ce3ac4
        checksum/health: 4600852b99df1cdb15d8cae7b65a1fc14ea6d1472bb419a0fc81eb4c91b52339
        checksum/scripts: 6742e91a1de7b8e92b44c2f2bf65af0b92ff57fc0c4495086916042b22632561
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: release-name-redis
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: master
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: marketplace.azurecr.io/bitnami/redis:6.2.7-debian-10-r23
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10340
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: null
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 493
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-harbor-trivy
  namespace: JKzrd
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-13.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: trivy
spec:
  replicas: 1
  serviceName: release-name-harbor-trivy
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: trivy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-13.2.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: trivy
      annotations:
        checksum/configmap-env: 3e08913690cf4bce041b77071d2002fce75f8cd2fb2590fc72badfdb936ddf8e
        checksum/secret-env: a4c8293601d320535782d20566e6cfca94aff4b380a201001f796afb25342ca7
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: trivy
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      initContainers: null
      containers:
        - name: trivy
          image: marketplace.azurecr.io/bitnami/harbor-adapter-trivy:2.5.1-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 11099
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
            - configMapRef:
                name: release-name-harbor-trivy-envvars
            - secretRef:
                name: release-name-harbor-trivy-envvars
          ports:
            - name: api-server
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/harbor-adapter-trivy/.cache
              readOnly: false
      volumes: null
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: harbor
          app.kubernetes.io/instance: release-name
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
