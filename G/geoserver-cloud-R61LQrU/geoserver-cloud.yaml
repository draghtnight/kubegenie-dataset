apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-rabbitmq
  namespace: R61LQrU
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: release-name-rabbitmq
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-geoserver-cloud
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: R61LQrU
type: Opaque
data:
  postgresql-postgres-password: cHZ5VmZlV3ozRQ==
  postgresql-password: cGFzc3dvcmQ=
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql-crt
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRVWpoN1BHNUZpL0tGWnM1NmE4c1hyekFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxd2IzTjBaM0psYzNGc0xXTmhNQjRYRFRJeU1EWXhNakV3TXpnd05sb1hEVEl6TURZeApNakV3TXpnd05sb3dHREVXTUJRR0ExVUVBeE1OY0c5emRHZHlaWE54YkMxallUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOOWd5MTN3TW5yWVMrVlk4SVNEcE1LaGRmczdSd01FSHkzdm5pZUcKUVZXZWVtV2didFBuNGlBalovNW1DOWlwUEZvM055T0tyV2pmeUM0MWpNTGRqUUFuKzBHV3FtSjlyME9wS2FVaApHKzZWRFJSZVNFL3RMVlhlSXh1RE0wVlJMWW9XR0dCN2p0V3h2WW9kVHZqcDkzaFdhZ0k1eVNkbjRja3o0WGtPCjRTUE82eE1kQXc3aTdVanF3aFFyWWh6eE9lb3dUdC82ekt0WHdEQmFzY0oyaU92RTdjakEvTzB2NDkzRE1zUE4KQW8vV0hTRmtGbXV6Y2NJaFdIZnRMd3B1QW1oN0kvT1MxQkFEL1IrUzQrNmp2ejdsbUlVUnlJSkZEYVRiNEJKRQo4NzJXUXlJdCtZdURqK2lYSE5nUG5kYVo5aWZmM0kwaG5hVzFtakcrc1k2Znk2Y0NBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUlliOEh1MzcxZGJ1T0lMcVpyTmlqUHhkVjlHREFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQXRyRHBvak9kM3dVT2pJVVdQbFhqbDF5T3lHbFM2RHpMQitMbUlEUXY0am1PCklWM1dCK2NROGQ0SlhDNWJEQkU1OCsxaUs1elJxRk1NbVBiVTQ2RFRXeFZobEttSnJhU1N0eXZFTWdvRTVreUIKcnlpbTBqSWRSUXM5dEZKaXVaTHVvV2xhdFVqMFZCaGN5a3J2NTlxaUM2dmwzS09TaFlwb3VqTzkwUVUvZE9xWQpobUlrV0pnQlNHY2xPN1c5WW9BUmt1c0Nmd2IzMGdBVU5oVHo2MHZ0SE1lTUtlNE82RG5KUnE1NHJoWHlISUxFCmxyY1RTaVlNWFVEOGQ3ZXk5SzNJKzQ3MUViQnhWOWJEcUpiMHJHT1p2QlA5MHMyVGI1VGFHSENSenI3eko4UzUKUlVzT3V0UzN5QWZVK0JhWEZSNGE3aXR5YlczeFBwSDBJTDFYVENkdjBRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVKakNDQXc2Z0F3SUJBZ0lSQUtFZVh5SmlIM0tPWGRDVDNaUyt6Y3N3RFFZSktvWklodmNOQVFFTEJRQXcKR0RFV01CUUdBMVVFQXhNTmNHOXpkR2R5WlhOeGJDMWpZVEFlRncweU1qQTJNVEl4TURNNE1EWmFGdzB5TXpBMgpNVEl4TURNNE1EWmFNQ0l4SURBZUJnTlZCQU1URjNKbGJHVmhjMlV0Ym1GdFpTMXdiM04wWjNKbGMzRnNNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEyOTJxRHZoUThNRFhHUnZ1N3dHaitMcmEKRmdsT1RId1JFOWJjUTdocVhLV3h3ZFduV0hqSUhreFNaalREdkNCRW9QeXNZbUdYTHY1aFJNcU5kVFZ1RnJUVwo5RnhIS0F5UTZHbWZQcFZ3aHcvQ2gxYlZBWnhBVmRFZmljeUplWXdEMjg1cEZJM3JLa213ZGhkdDgvTGQ3SGNVCmdSSnBQT2QrQ0w3Rnc0SDFSM3dyZzc0YVM3RCtFcmY5TCtxNzVxUWJhWjd4ek1tV285N0prM1Vqc003VTJFL2oKelhQWmhSeFVzd3dscXRjMEhpbXVQOXBXYmozdnhZRlo2bVNaY0N3OGhQbGdHSVQvVXpDaFRHclFxQzA3Y3M3LwpndVpsOHQ2U2VLQlZNaHBLelZaUDN5R3BqeTVsSDlUT2dubnlpNnlDeVZQREV2MllBMkJNODRPL1lybkJXUUlECkFRQUJvNElCWHpDQ0FWc3dEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUIKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkZodndlN2Z2VjF1NDRndQpwbXMyS00vRjFYMFlNSUg2QmdOVkhSRUVnZkl3Z2UrQ01Db3VjbVZzWldGelpTMXVZVzFsTFhCdmMzUm5jbVZ6CmNXd3VaR1ZtWVhWc2RDNXpkbU11SlNGektEeHVhV3crS1lJdWNtVnNaV0Z6WlMxdVlXMWxMWEJ2YzNSbmNtVnoKY1d3dVpHVm1ZWFZzZEM1emRtTXVKU0Z6S0R4dWFXdytLWUk1S2k1eVpXeGxZWE5sTFc1aGJXVXRjRzl6ZEdkeQpaWE54YkMxb1pXRmtiR1Z6Y3k1a1pXWmhkV3gwTG5OMll5NGxJWE1vUEc1cGJENHBnamR5Wld4bFlYTmxMVzVoCmJXVXRjRzl6ZEdkeVpYTnhiQzFvWldGa2JHVnpjeTVrWldaaGRXeDBMbk4yWXk0bElYTW9QRzVwYkQ0cGdoZHkKWld4bFlYTmxMVzVoYldVdGNHOXpkR2R5WlhOeGJEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFCRnEvRkJrVgpsbWp3ME5GYXZxYmJMbmorTzU0YlkvTlhEU0hQVDR3djNHT3pLczk5ZTJ3b0RkQ2tiQnRCb3YrQ0YrNHJya3MyCnVwQUJIUGc5Rjdqcm5hNnMrbzdNelJzandZZDF3cmsxV3BSTjR1aW0yRXlvL1dWVWRZNXVyZEQ4QWhYdXFFNW4KdUk4S3RFWGJTOVBCMnZ2MjZUT0o0TTkyclRJM0wvamxua2JMQXJCeG9aWG10aXdUVVNsSGJmb0lDMks5cFMrZgoybUw1NG1NR3lyektqZUQ1a3daM1pZMmtiVXUraXZrdUIwdnBLbjVaTHV4dU41cHNxcnV2cDdkWmZkamhhV1BRClh2NDhnZkt0Y0NXQ3d5ck85NXpPdHBKV1Y3MEVqSTVaZWt5Smp5OWM0NFNPN1hzaUdtMVlvcTU3L0Nla0NTT0YKZ3A5cTMwK2ZtcDVXSkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMjkycUR2aFE4TURYR1J2dTd3R2orTHJhRmdsT1RId1JFOWJjUTdocVhLV3h3ZFduCldIaklIa3hTWmpURHZDQkVvUHlzWW1HWEx2NWhSTXFOZFRWdUZyVFc5RnhIS0F5UTZHbWZQcFZ3aHcvQ2gxYlYKQVp4QVZkRWZpY3lKZVl3RDI4NXBGSTNyS2ttd2RoZHQ4L0xkN0hjVWdSSnBQT2QrQ0w3Rnc0SDFSM3dyZzc0YQpTN0QrRXJmOUwrcTc1cVFiYVo3eHpNbVdvOTdKazNVanNNN1UyRS9qelhQWmhSeFVzd3dscXRjMEhpbXVQOXBXCmJqM3Z4WUZaNm1TWmNDdzhoUGxnR0lUL1V6Q2hUR3JRcUMwN2NzNy9ndVpsOHQ2U2VLQlZNaHBLelZaUDN5R3AKank1bEg5VE9nbm55aTZ5Q3lWUERFdjJZQTJCTTg0Ty9Zcm5CV1FJREFRQUJBb0lCQVFERWpuVkNydEhGZWRDUwpQUHV0SmgxTjl0V1REN3kwK2RGV21DWVFVS1Nkc08rcUp2UlZUcDB4SVBBbE9SU25jWDJKSW5xRjlWTHdDekF3CkRKakw2UGxEU1daRnpOMDhPNGVzandoekxhd013cFVZNHhMSVBzVHhNMlJyajdSek9pNFU2b0hjZzBkeVpiQmcKMG05VXdKR1BuYUZ5Qm1DWXR5ZGdjQlJpeFNMZlJNVkFKMnNEZGt2ME1NcXZsQzVSZWJKSVFpR1hLcW42ZGZaUwo2QnJDdlVOZlh2WEs4OEVIcTRlbTNJNlNJWDJBczJGQVJlU25GTy82Z1RLcDlhR0I2ZDdZTzJSU0Q1TGEwUWxKCkJtZjhjYkY2bEhBMzNlam5OUmh5THNuYTdoS1RvQkE3emdDNXFCWEozKzN6cGVMb0daOHQyM2xaMzN0Yy9VSWcKMGxMZStycGxBb0dCQU9WNlpoVUptSk92b3lYbkZkNHkvWWMxUlZRZFZTQ3NKdGJRcVBGd2pRbUdpL0dQMWhydQo5WUhEb3psbm05UWNzYURpcExhRndFaUJsYis4WG02cTJCZlJ1YzNTRmNCaCt4TjN6TkJSVTh0M21nZ2QyZlgwCmRrVWN5d3dPdWpBUlVkdkNpZmJFekpaazhHOCtpMCtMbEJ6RHhOQ0JzZTcrSk42cFhlbnlpV1BmQW9HQkFQVkcKM2VHaWc1ZGVPNExJVzZabVJjYUV3UnhZUjQwZ0FsMWxzQkpnYzJkMU42cFB5VVhSZVF2YnVZWVNiTnc5bXhZZwpWWVdRcGxoMDNhVkY1dFQ0Y2VRMUE4VGlXRDNCbzhrTGJ0UTU2cDBzU2ZtMnF6YnBRVXhCcEUzb0RWWXVoaVczClUycEc4a05WSklIYkJNcW9SSVB0cFdSd0FYTHZCaWRwdE1XZW5zSEhBb0dBWEdRRlNaOE5jUmliNVJ5Kzd6RTAKWmdXS25pMFpJd2hzc3J4YjZLbFovMlhPWGpsOUNHY0JMWGVvOWVuREVZbGo4dFNOWUhkRlRXdnU4TDFVZjlZRgpIc0h2dnZCQWxhNWRPaDlYdE4rcGp4ZmVTanBLa1A0VnlBbXBybmNYZTFiZDBFN280Uk9uRXo0Y2w0MWs1V2ZiCkFDSEowZkVGeEtWS0R1Tzl6ZjA2VjUwQ2dZRUFwQTFFTnJoMS8zWTlvNW5UQXhjQXNHajJxTGk3RXI5SUZhUUEKQWlxVXhhdjNFV2pRSEd5ZzQ3ZVEvUVd4M2hVdWQ3d2t0M01xYjV1cTYvSTNGRmNnQmgwWGFrWmg4dHhqYWdMRgpuQmtvdlB0MGR4c2dwVmVhSHlFQWZrTXBPRzFodURSSURKdHJTbkhXT3l4OHBmZXA2L3UxVmRvOGZkMDFab01qCkw5S0tLTjBDZ1lBL3lNODNFWHd4NHQxbjhtUEw4c3pGbEhZN09ocy9CMU1QZzljSkd4NTcvY3NETUxFNUZlR28KR0dIWFZ1M0RVZ2NJZ0tRVnFPRlAxYmxtTHdLRHV1aWlXTjNHSWJGS0hDbUdrSFVMRlRaTGpmam9lZ3lzeHpCTgplTG0vQUxDRTlURGV4MW01elJUUjBodmNZeWRkVkp5VXJ0R1pKOUVuOHBYaXZRTzBBaUZFbWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
apiVersion: v1
data:
  DATABASE_NAME: Y29uZmln
  HOST: cmVsZWFzZS1uYW1lLXBvc3RncmVzcWw=
  ROLE: dXNlcm5hbWU=
  PASSWORD: cGFzc3dvcmQ=
kind: Secret
metadata:
  name: jdbcconfig-release-name-geoserver-cloud
type: Opaque
---
apiVersion: v1
data:
  rabbitmq-erlang-cookie: UDQ1UXdPNEJaZFBOZkFLNGhMVnZnQ0tUbVFoZ1pn
  rabbitmq-password: Z2Vvc2VydmVy
kind: Secret
metadata:
  name: geoserver-rabbitmq
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rabbitmq-config
  namespace: R61LQrU
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-
    ## Username and password
    default_user = geoserver
    default_pass = CHANGEME
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    #default_vhost = default-vhost
    #disk_free_limit.absolute = 50MB
    #load_definitions = /app/load_definition.json
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-geoserver-cloud-config-configs
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: config
data:
  application.yml: "server:\n  tomcat:\n    # Maximum number of connections that the server accepts and processes at any given time.\n    # Once the limit has been reached, the operating system may still accept connections based on the \"acceptCount\" property.\n    max-connections: 1000 # default: 8192\n    # Maximum queue length for incoming connection requests when all possible request processing threads are in use.\n    accept-count: 100 # default: 100\n    accesslog:\n      enabled: false\n      directory: logs\n      encoding: UTF-8\n    threads:\n      # Minimum amount of worker threads.\n      min-spare: 2 #default: 10\n      # Maximum amount of worker threads.\n      max: 20 #default: 200\n\n# Common configuration for all services. Override or add service specific config\n# properties on each <service-name>-service.yml file\ngeoserver:\n  security.enabled: true\n  servlet.filter.session-debug.enabled: false # until the NPE is fixed\n  catalog:\n    advertised: true\n    localWorkspace: true\n    secure: true\n    # enable caching if using the catalog-service as backend\n    caching.enabled: ${geoserver.backend.catalog-service.enabled}\n  bus:\n    # whether to send distributed events (i.e. acts as master). All instances receive remote events.\n    send-events: true\n    # whether to send the object (CatalogInfo/config info) as payload with the event. Set to false,\n    # not all possible payload types are properly tested, and full object payload is not needed.\n    send-object: ${geoserver.backend.data-directory.enabled}\n    # whether to send a diff of changes as payload with the event. Set to false, not all possible payload types are properly tested nor needed.\n    send-diff: ${geoserver.backend.data-directory.enabled}\n  backend:\n    # configure catalog backends and decide which backend to use on this service.\n    # All backends are disabled, enable the required one on each service. For example, the catalog microservice\n    # will enable one backend type, and the front services the catalog-service backend.\n    # revisit: Could be split into profiles\n    catalog-service:\n      enabled: ${backend.catalog:false}\n      # Base URI of the catalog service. If not set, will be automatically determined using the discovery service, looking for \"catalog-service\"\n      # This allows to explicitly set a fixed location for the catalog service.\n      # uri: http://catalog:8080\n      cache-directory: ${java.io.tmpdir}/cngs/catalog-client/resource_store\n      fallback-resource-directory: ${java.io.tmpdir}/cngs/catalog-client/fallback_resource_store\n    data-directory:\n      enabled: ${backend.data-directory:false}\n      location: ${GEOSERVER_DATA_DIR:/opt/app/data_directory}\n    jdbcconfig:\n      enabled: ${backend.jdbcconfig:false}\n      initdb: true\n      web.enabled: true\n      cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/cngs/jdbcconfig/cache}\n      datasource:\n        jdbcUrl: \"jdbc:postgresql://${jdbcconfig.host}:5432/${jdbcconfig.database}\"\n        username: ${jdbcconfig.username:geoserver}\n        password: ${jdbcconfig.password:geo5erver}\n        driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}\n        # optional:\n        schema: ${jdbcconfig.schema:public}\n        minimumIdle: ${jdbcconfig.minConnections:2}\n        maximumPoolSize: ${jdbcconfig.maxConnections:8}\n\nmanagement:\n  endpoints:\n    enabled-by-default: true\n    web.exposure.include: \"*\"\n  endpoint:\n    info.enabled: true\n    metrics.enabled: true\n    shutdown.enabled: true\n    health:\n      enabled: true\n      show-details: always\n  metrics:\n    binders:\n      processor.enabled: true\n      uptime.enabled: true\n      jvm.enabled: true\n    enable.all: true\n    enable.jvm: true\n    export:\n      atlas.enabled: false\n\nspring:\n  rabbitmq: \n    host: release-name-rabbitmq\n    port: 5672\n    username: geoserver\n    password: ${RABBITMQ_PASSWORD}\n  cloud:\n    bus:\n      enabled: true\n      id: ${server.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id\n      trace.enabled: false #switch on tracing of acks (default off).\n    stream:\n      bindings:\n        springCloudBusOutput:\n          destination: gscatalog\n        springCloudBusInput:\n          destination: gscatalog\n  jackson:\n    default-property-inclusion: non_empty\n    serialization.indent_output: false #set to true if doing manual testing and want formatted output\n\nreactive.feign.cloud.enabled: true\nreactive.feign.hystrix.enabled: false\n\nlogging:\n  level:\n    root: WARN\n    org.springframework: ERROR\n    org.springframework.cloud.bus: INFO\n    org.springframework.retry: INFO\n    # geoserver roots\n    org.geoserver: INFO\n    org.geoserver.catalog.plugin: INFO\n    org.geoserver.wms: WARN #don't flood the logs with every request details\n    org.geoserver.wfs: WARN\n    org.geoserver.jackson: INFO\n    org.geotools.jackson: INFO\n    org.geoserver.platform: INFO\n    org.geoserver.platform.resource: INFO\n    org.geoserver.jdbcconfig: INFO\n    oshi.hardware.platform.linux: ERROR\n    oshi.software.os: ERROR\n    # gs-cloud roots\n    org.geoserver.cloud: INFO\n    org.geoserver.cloud.autoconfigure: INFO\n    org.geoserver.cloud.config.factory: INFO\n    # bus debugging\n    org.geoserver.cloud.bus: INFO\n    org.springframework.cloud.bus.BusAutoConfiguration: INFO\n    org.springframework.cloud.bus.DefaultBusPathMatcher: INFO\n    # reactivefeign:\n    reactivefeign.client.log: INFO\n    org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN\n\n---\nspring.profiles: local\n# provide environment variables that otherwise would be given by docker-compose.yml\nrabbitmq.host: localhost\n\njdbcconfig.url: jdbc:postgresql://localhost:5432/geoserver_config\njdbcconfig.username: geoserver\njdbcconfig.password: geo5erver\n---\nspring.profiles: datadir\nbackend.jdbcconfig: false\nbackend.catalog: false\nbackend.data-directory: true\n---\nspring.profiles: jdbcconfig\nbackend.jdbcconfig: true\nbackend.catalog: false\nbackend.data-directory: false\n---\nspring.profiles: catalog\nbackend.catalog: true\nbackend.jdbcconfig: false\nbackend.data-directory: false\n---\nspring.profiles: debug\n\nlogging:\n  level:\n    root: WARN\n    org.springframework: INFO\n    # geoserver roots\n    org.geoserver: INFO\n    org.geoserver.catalog.plugin: DEBUG\n    org.geoserver.wms: WARN\n    org.geoserver.wfs: WARN\n    org.geoserver.jackson: DEBUG\n    org.geotools.jackson: DEBUG\n    org.geoserver.platform: ERROR\n    org.geoserver.jdbcconfig: INFO\n    # gs-cloud roots\n    org.geoserver.cloud: DEBUG\n    org.geoserver.cloud.autoconfigure: DEBUG\n    org.geoserver.cloud.config.factory: DEBUG\n    # bus debugging\n    org.geoserver.cloud.bus: TRACE\n    org.springframework.cloud.bus: DEBUG\n    org.springframework.cloud.bus.BusAutoConfiguration: DEBUG\n    org.springframework.cloud.bus.DefaultBusPathMatcher: INFO\n    # reactivefeign:\n    reactivefeign.client.log: DEBUG\n"
  config-service.yml: |
    spring:
      profiles:
        active: native #use native filesystem config by default instead of git. REVISIT.
      config.server.native.searchLocations: ${config.path:file:./config}

    logging:
      level:
        root: WARN
        org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN
  gateway-service.yml: "# Defines the root base path at which the gateway exposes all geoserver request paths\n# We're not setting the spring.webflux.base-path because spring-cloud Gateway doesn't\n# work properly with it. See https://github.com/spring-cloud/spring-cloud-gateway/issues/1759\n# For example, if geoserver.base-path=/geoserver-cloud, then geoserver requests will be served\n# under that path prefix (e.g. http://localhost:9090/geoserver-cloud/web, http://localhost:9090/geoserver-cloud/wfs, etc)\n# Examples:\n#geoserver.base-path:\n#geoserver.base-path: /geoserver-cloud\n#geoserver.base-path: /geoserver/cloud\n# Leave it empty for no additional path, setting it to / won't work currently\n#\n# Please note any other prefix than the empty string will require a trailing slash in the root URL\n# for the redirection to the web-ui to work. This is something we need to fix. For example:\n# http://localhost:9090/geoserver-cloud will return 404, but http://localhost:9090/geoserver-cloud/ will work.\ngeoserver.base-path:  /geoserver-cloud \n\n# Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html\nserver:\n  compression:\n    enabled: true\n\nmanagement:\n  endpoint.gateway.enabled: true # default value\n  endpoints:\n    enabled-by-default: true\n    web.exposure.include: \"*\"\n\nspring:\n  cloud:\n    gateway:\n      default-filters:\n      - StripBasePath=${geoserver.base-path} #remove the base path on downstream requests\n      actuator:\n        verbose:\n          enabled: true\n      routes:\n      - id: catalog\n        uri: lb://catalog-service\n        predicates:\n        - Path=${geoserver.base-path}/api/v1/**\n        filters: # Expose the catalog and configuration API only if the dev profile is active\n        - RouteProfile=dev,403\n# WFS routes\n      - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs\n        uri: lb://wfs-service #load balanced to the wfs-service instances\n        predicates:\n        - Path=${geoserver.base-path}/wfs,${geoserver.base-path}/{workspace}/wfs,${geoserver.base-path}/{workspace}/{layer}/wfs,${geoserver.base-path}/schemas/wfs/**\n# proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.\n      - id: wfs_ows\n        uri: lb://wfs-service\n        predicates:\n        - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows\n        - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively\n# WMS routes\n      - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms\n        uri: lb://wms-service #load balanced to the wms-service instances\n        predicates:\n        - Path=${geoserver.base-path}/wms,${geoserver.base-path}/{workspace}/wms,${geoserver.base-path}/{workspace}/{layer}/wms,${geoserver.base-path}/schemas/wms/**,${geoserver.base-path}/openlayers/**,${geoserver.base-path}/openlayers3/**\n      - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.\n        uri: lb://wms-service\n        predicates:\n        - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows\n        - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively\n# WCS routes\n      - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs\n        uri: lb://wcs-service #load balanced to the wps-service instances\n        predicates:\n        - Path=${geoserver.base-path}/wcs,${geoserver.base-path}/{workspace}/wcs,${geoserver.base-path}/{workspace}/{layer}/wcs,${geoserver.base-path}/schemas/wcs/**\n      - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.\n        uri: lb://wcs-service\n        predicates:\n        - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows\n        - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively\n# WPS routes\n      - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps\n        uri: lb://wps-service #load balanced to the wps-service instances\n        predicates:\n        - Path=${geoserver.base-path}/wps,${geoserver.base-path}/{segment}/wps,${geoserver.base-path}/schemas/wps/**\n      - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.\n        uri: lb://wps-service\n        predicates:\n        - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{segment}/ows\n        - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively\n# REST configuration routes\n      - id: restconfig\n        uri: lb://restconfig-v1 #load balanced to the restconfig-v1 instances\n        predicates:\n        - Path=${geoserver.base-path}/rest/**\n# Web UI configuration routes\n      - id: webui\n        uri: lb://web-ui\n        predicates:\n        - Path=${geoserver.base-path}/**\n        #- Path=${geoserver.base-path},${geoserver.base-path}/,${geoserver.base-path}/index.html,${geoserver.base-path}/web,${geoserver.base-path}/web/**,${geoserver.base-path}/j_spring_security_check,${geoserver.base-path}/j_spring_security_logout\n\nlogging:\n  level:\n    root: WARN\n    com.netflix.discovery: WARN\n    com.netflix.eureka: WARN\n    org.springframework.cloud.gateway: info\n    reactor.netty: INFO\n---\nspring.profiles: local\nserver.port: 9000\n"
  web-ui.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
      web-ui:
        file-browser.hide-file-system: true
        # These are all default values, here just for reference. You can omit them and add only the ones to disable or further configure
        security.enabled: true
        wfs.enabled: true
        wms.enabled: true
        wcs.enabled: true
        wps.enabled: false # not working yet
        gwc.enabled: false # not ready yet
        extensions:
          importer.enabled: true
        demos:
          enabled: true
          wps-request-builder: true
          wcs-request-builder: true
          demo-requests: true
          srs-list: true
          reprojection-console: true
          layer-preview-page:
            enabled: true
            common-formats:
              open-layers: true
              gml: true
              kml: false #kml links are broken
        tools:
          enabled: true
          resource-browser: true
          catalog-bulk-load: true
    ---
    spring.profiles: local
    server.port: 9106
  restconfig-v1.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
    ---
    spring.profiles: local
    server.port: 9105
  wfs-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
    ---
    spring.profiles: local
    server.port: 9101
  wms-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
    ---
    spring.profiles: local
    server.port: 9102
  wcs-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
    ---
    spring.profiles: local
    server.port: 9103
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rabbitmq-endpoint-reader
  namespace: R61LQrU
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rabbitmq-endpoint-reader
  namespace: R61LQrU
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: release-name-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-rabbitmq-endpoint-reader
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: R61LQrU
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
  namespace: R61LQrU
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-rabbitmq-headless
  namespace: R61LQrU
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-rabbitmq
  namespace: R61LQrU
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-geoserver-cloud-config
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: config
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    gs-service: config
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-geoserver-cloud-discovery
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: discovery
spec:
  type: ClusterIP
  ports:
    - port: 8761
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    gs-service: discovery
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-geoserver-cloud-gateway
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: gateway
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    gs-service: gateway
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-geoserver-cloud-rest
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: rest
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    gs-service: rest
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-geoserver-cloud-wcs
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: wcs
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    gs-service: wcs
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-geoserver-cloud-webui
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: webui
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    gs-service: webui
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-geoserver-cloud-wfs
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: wfs
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    gs-service: wfs
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-geoserver-cloud-wms
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: wms
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    gs-service: wms
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-geoserver-cloud-config
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: config
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: release-name
      gs-service: config
  template:
    metadata:
      annotations:
        checksum/config: 18ed8fde60c478ca4bfaa0f702bd73504aec4e14f1605a88beb0e10e7c016de9
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: release-name
        gs-service: config
    spec:
      serviceAccountName: release-name-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-config
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: geoservercloud/geoserver-cloud-config:1.0-RC3
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://release-name-geoserver-cloud-discovery:8761/eureka
            - name: SPRING_PROFILES_ACTIVE
              value: native
            - name: CONFIG_NATIVE_PATH
              value: /opt/app/config
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
          volumeMounts:
            - name: configs
              mountPath: /opt/app/config
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5
          resources:
            limits:
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 300Mi
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: configs
          configMap:
            name: release-name-geoserver-cloud-config-configs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-geoserver-cloud-discovery
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: discovery
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: release-name
      gs-service: discovery
  template:
    metadata:
      annotations:
        checksum/config: 18ed8fde60c478ca4bfaa0f702bd73504aec4e14f1605a88beb0e10e7c016de9
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: release-name
        gs-service: discovery
    spec:
      serviceAccountName: release-name-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-discovery
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          image: geoservercloud/geoserver-cloud-discovery:1.0-RC3
          imagePullPolicy: IfNotPresent
          env:
            - name: EUREKA_INSTANCE_HOSTNAME
              value: release-name-geoserver-cloud-discovery
            - name: SERVER_PORT
              value: "8761"
          ports:
            - name: http
              containerPort: 8761
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5
          resources:
            limits:
              cpu: 300m
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 300Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-geoserver-cloud-gateway
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: gateway
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: release-name
      gs-service: gateway
  template:
    metadata:
      annotations:
        checksum/config: 18ed8fde60c478ca4bfaa0f702bd73504aec4e14f1605a88beb0e10e7c016de9
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: release-name
        gs-service: gateway
    spec:
      serviceAccountName: release-name-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-gateway
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: geoservercloud/geoserver-cloud-gateway:1.0-RC3
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://release-name-geoserver-cloud-discovery:8761/eureka
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5
          resources:
            limits:
              memory: 800Mi
            requests:
              cpu: 100m
              memory: 400Mi
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-geoserver-cloud-rest
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: rest
  annotations:
    argocd.argoproj.io/sync-wave: "9"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: release-name
      gs-service: rest
  template:
    metadata:
      annotations:
        checksum/config: 18ed8fde60c478ca4bfaa0f702bd73504aec4e14f1605a88beb0e10e7c016de9
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: release-name
        gs-service: rest
    spec:
      serviceAccountName: release-name-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-rest
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: geoservercloud/geoserver-cloud-rest:1.0-RC3
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://release-name-geoserver-cloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: jdbcconfig
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: release-name-geoserver-cloud-rabbitmq
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            periodSeconds: 5
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-geoserver-cloud-wcs
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: wcs
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: release-name
      gs-service: wcs
  template:
    metadata:
      annotations:
        checksum/config: 18ed8fde60c478ca4bfaa0f702bd73504aec4e14f1605a88beb0e10e7c016de9
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: release-name
        gs-service: wcs
    spec:
      serviceAccountName: release-name-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-wcs
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: geoservercloud/geoserver-cloud-wcs:1.0-RC3
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://release-name-geoserver-cloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: jdbcconfig
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5
          resources:
            limits:
              memory: 800Mi
            requests:
              cpu: 100m
              memory: 400Mi
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-geoserver-cloud-webui
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: webui
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: release-name
      gs-service: webui
  template:
    metadata:
      annotations:
        checksum/config: 18ed8fde60c478ca4bfaa0f702bd73504aec4e14f1605a88beb0e10e7c016de9
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: release-name
        gs-service: webui
    spec:
      serviceAccountName: release-name-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-webui
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: geoservercloud/geoserver-cloud-webui:1.0-RC3
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://release-name-geoserver-cloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: jdbcconfig
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: release-name-geoserver-cloud-rabbitmq
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            periodSeconds: 5
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 300m
              memory: 512Mi
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-geoserver-cloud-wfs
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: wfs
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: release-name
      gs-service: wfs
  template:
    metadata:
      annotations:
        checksum/config: 18ed8fde60c478ca4bfaa0f702bd73504aec4e14f1605a88beb0e10e7c016de9
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: release-name
        gs-service: wfs
    spec:
      serviceAccountName: release-name-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-wfs
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: geoservercloud/geoserver-cloud-wfs:1.0-RC3
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://release-name-geoserver-cloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: jdbcconfig
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5
          resources:
            limits:
              memory: 800Mi
            requests:
              cpu: 200m
              memory: 400Mi
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-geoserver-cloud-wms
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: master
    app.kubernetes.io/base_environment: dev
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.0-RC3
    app.kubernetes.io/managed-by: Helm
    gs-service: wms
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: release-name
      gs-service: wms
  template:
    metadata:
      annotations:
        checksum/config: 18ed8fde60c478ca4bfaa0f702bd73504aec4e14f1605a88beb0e10e7c016de9
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: release-name
        gs-service: wms
    spec:
      serviceAccountName: release-name-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-wms
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: geoservercloud/geoserver-cloud-wms:1.0-RC3
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://release-name-geoserver-cloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: jdbcconfig
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-release-name-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5
          resources:
            limits:
              memory: 800Mi
            requests:
              cpu: 100m
              memory: 400Mi
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.8
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
  namespace: R61LQrU
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.13.8
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r248
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          command:
            - /bin/sh
            - -cx
            - |
              chmod -R 777 /dev/shm
              cp /tmp/certs/* /opt/bitnami/postgresql/certs/
              chown -R 1001:1001 /opt/bitnami/postgresql/certs/
              chmod 600 /opt/bitnami/postgresql/certs/tls.key
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: raw-certificates
              mountPath: /tmp/certs
            - name: postgresql-certificates
              mountPath: /opt/bitnami/postgresql/certs
      containers:
        - name: release-name-postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r0
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          securityContext:
            runAsUser: 10253
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: config
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "yes"
            - name: POSTGRESQL_TLS_PREFER_SERVER_CIPHERS
              value: "yes"
            - name: POSTGRESQL_TLS_CERT_FILE
              value: /opt/bitnami/postgresql/certs/tls.crt
            - name: POSTGRESQL_TLS_KEY_FILE
              value: /opt/bitnami/postgresql/certs/tls.key
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "username" -d "dbname=config" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "username" -d "dbname=config sslcert=/opt/bitnami/postgresql/certs/tls.crt sslkey=/opt/bitnami/postgresql/certs/tls.key" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: postgresql-certificates
              mountPath: /opt/bitnami/postgresql/certs
              readOnly: true
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: raw-certificates
          secret:
            secretName: release-name-postgresql-crt
        - name: postgresql-certificates
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-rabbitmq
  namespace: R61LQrU
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: release-name-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.0.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations: null
    spec:
      serviceAccountName: release-name-rabbitmq
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 10
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.8.9-debian-10-r37
          imagePullPolicy: IfNotPresent
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: release-name-rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: K8S_HOSTNAME_SUFFIX
              value: .$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: RABBITMQ_MNESIA_DIR
              value: /bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: '-'
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_USERNAME
              value: geoserver
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -ec
                  - rabbitmqctl stop_app
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: release-name-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
        - name: data
          emptyDir: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
    - http:
        paths:
          - path: /geoserver-cloud/
            pathType: Prefix
            backend:
              service:
                name: release-name-geoserver-cloud-gateway
                port:
                  number: 8080
