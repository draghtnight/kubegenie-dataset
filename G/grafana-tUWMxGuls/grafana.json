[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "grafana",
      "namespace": "tUWMxGuls"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "grafana-db-init-session",
      "namespace": "tUWMxGuls"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "grafana-db-init",
      "namespace": "tUWMxGuls"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "grafana-db-session-sync",
      "namespace": "tUWMxGuls"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "grafana-set-admin-user",
      "namespace": "tUWMxGuls"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-test",
      "namespace": "tUWMxGuls"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "grafana-etc"
    },
    "type": "Opaque",
    "data": {
      "dashboards.yaml": "YXBpVmVyc2lvbjogMQpwcm92aWRlcnM6Ci0gZGlzYWJsZURlbGV0aW9uOiBmYWxzZQogIGVkaXRhYmxlOiBmYWxzZQogIGZvbGRlcjogIiIKICBuYW1lOiBvc2gtaW5mcmEtZGFzaGJvYXJkcwogIG9wdGlvbnM6CiAgICBwYXRoOiAvZXRjL2dyYWZhbmEvZGFzaGJvYXJkcwogIG9yZ0lkOiAxCiAgdHlwZTogZmlsZQ==",
      "grafana.ini": "W2FuYWx5dGljc10KY2hlY2tfZm9yX3VwZGF0ZXMgPSBmYWxzZQpyZXBvcnRpbmdfZW5hYmxlZCA9IGZhbHNlClthdXRoLmxkYXBdCmNvbmZpZ19maWxlID0gL2V0Yy9ncmFmYW5hL2xkYXAudG9tbAplbmFibGVkID0gdHJ1ZQpbZGFzaGJvYXJkc10KZGVmYXVsdF9ob21lX2Rhc2hib2FyZF9wYXRoID0gL2V0Yy9ncmFmYW5hL2Rhc2hib2FyZHMvaG9tZV9kYXNoYm9hcmQuanNvbgpbZGF0YWJhc2VdCnR5cGUgPSBteXNxbAp1cmwgPSBteXNxbDovL2dyYWZhbmE6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvZ3JhZmFuYQpbZ3JhZmFuYV9uZXRdCnVybCA9IGh0dHBzOi8vZ3JhZmFuYS5uZXQKW2xvZ10KbGV2ZWwgPSBpbmZvCm1vZGUgPSBjb25zb2xlCltwYXRoc10KZGF0YSA9IC92YXIvbGliL2dyYWZhbmEvZGF0YQpwbHVnaW5zID0gL3Zhci9saWIvZ3JhZmFuYS9wbHVnaW5zCnByb3Zpc2lvbmluZyA9IC9ldGMvZ3JhZmFuYS9wcm92aXNpb25pbmcKW3NlY3VyaXR5XQphZG1pbl9wYXNzd29yZCA9ICR7R0ZfU0VDVVJJVFlfQURNSU5fUEFTU1dPUkR9CmFkbWluX3VzZXIgPSAke0dGX1NFQ1VSSVRZX0FETUlOX1VTRVJ9CmNvb2tpZV9yZW1lbWJlcl9uYW1lID0gZ3JhZmFuYV9yZW1lbWJlcgpjb29raWVfdXNlcm5hbWUgPSBncmFmYW5hX3VzZXIKbG9naW5fcmVtZW1iZXJfZGF5cyA9IDcKW3NlcnZlcl0KaHR0cF9wb3J0ID0gMzAwMApwcm90b2NvbCA9IGh0dHAKW3Nlc3Npb25dCmNvb2tpZV9uYW1lID0gZ3JhZmFuYV9zZXNzCmNvb2tpZV9zZWN1cmUgPSBmYWxzZQpwcm92aWRlciA9IG15c3FsCnByb3ZpZGVyX2NvbmZpZyA9IGdyYWZhbmFfc2Vzc2lvbjpwYXNzd29yZEB0Y3AobWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYpL2dyYWZhbmFfc2Vzc2lvbgpzZXNzaW9uX2xpZmVfdGltZSA9IDg2NDAwClt1c2Vyc10KYWxsb3dfb3JnX2NyZWF0ZSA9IGZhbHNlCmFsbG93X3NpZ25fdXAgPSBmYWxzZQphdXRvX2Fzc2lnbl9vcmcgPSB0cnVlCmRlZmF1bHRfdGhlbWUgPSBkYXJrCg==",
      "datasources.yaml": "YXBpVmVyc2lvbjogMQpkYXRhc291cmNlczoKLSBuYW1lOiBwcm9tZXRoZXVzCiAgdHlwZTogcHJvbWV0aGV1cwogIGFjY2VzczogcHJveHkKICBvcmdJZDogMQogIGVkaXRhYmxlOiB0cnVlCiAgYmFzaWNBdXRoOiB0cnVlCiAgYmFzaWNBdXRoVXNlcjogYWRtaW4KICBzZWN1cmVKc29uRGF0YToKICAgIGJhc2ljQXV0aFBhc3N3b3JkOiBjaGFuZ2VtZQogIHVybDogaHR0cDovL3Byb20tbWV0cmljcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsLw==",
      "ldap.toml": "dmVyYm9zZV9sb2dnaW5nID0gZmFsc2UKW1tzZXJ2ZXJzXV0KaG9zdCA9ICJsZGFwLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiCnBvcnQgPSAzODkKdXNlX3NzbCA9IGZhbHNlCnN0YXJ0X3RscyA9IGZhbHNlCnNzbF9za2lwX3ZlcmlmeSA9IGZhbHNlCmJpbmRfZG4gPSAiY249YWRtaW4sZGM9Y2x1c3RlcixkYz1sb2NhbCIKYmluZF9wYXNzd29yZCA9ICdwYXNzd29yZCcKc2VhcmNoX2ZpbHRlciA9ICIodWlkPSVzKSIKc2VhcmNoX2Jhc2VfZG5zID0gWyJkYz1jbHVzdGVyLGRjPWxvY2FsIl0KZ3JvdXBfc2VhcmNoX2ZpbHRlciA9ICIoJihvYmplY3RjbGFzcz1wb3NpeEdyb3VwKShtZW1iZXJVSUQ9dWlkPSVzLG91PVBlb3BsZSxkYz1jbHVzdGVyLGRjPWxvY2FsKSkiCmdyb3VwX3NlYXJjaF9iYXNlX2RucyA9IFsib3U9R3JvdXBzLGRjPWNsdXN0ZXIsZGM9bG9jYWwiXQpbc2VydmVycy5hdHRyaWJ1dGVzXQp1c2VybmFtZSA9ICJ1aWQiCnN1cm5hbWUgPSAic24iCm1lbWJlcl9vZiA9ICJjbiIKZW1haWwgPSAibWFpbCIKW1tzZXJ2ZXJzLmdyb3VwX21hcHBpbmdzXV0KZ3JvdXBfZG4gPSAiY249YWRtaW4sZGM9Y2x1c3RlcixkYz1sb2NhbCIKb3JnX3JvbGUgPSAiQWRtaW4iCltbc2VydmVycy5ncm91cF9tYXBwaW5nc11dCmdyb3VwX2RuID0gIioiCm9yZ19yb2xlID0gIlZpZXdlciI="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "grafana-admin-creds"
    },
    "type": "Opaque",
    "data": {
      "GRAFANA_ADMIN_PASSWORD": "cGFzc3dvcmQ=",
      "GRAFANA_ADMIN_USERNAME": "YWRtaW4="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "grafana-session-db-admin"
    },
    "type": "Opaque",
    "data": {
      "DB_CONNECTION": "bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvZ3JhZmFuYV9zZXNzaW9u"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "grafana-session-db-user"
    },
    "type": "Opaque",
    "data": {
      "DB_CONNECTION": "bXlzcWwrcHlteXNxbDovL2dyYWZhbmFfc2Vzc2lvbjpwYXNzd29yZEBtYXJpYWRiLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6MzMwNi9ncmFmYW5hX3Nlc3Npb24="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "grafana-db-admin"
    },
    "type": "Opaque",
    "data": {
      "DB_CONNECTION": "bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvZ3JhZmFuYQ=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "grafana-db-user"
    },
    "type": "Opaque",
    "data": {
      "DB_CONNECTION": "bXlzcWwrcHlteXNxbDovL2dyYWZhbmE6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvZ3JhZmFuYQ=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "prometheus-user-creds"
    },
    "type": "Opaque",
    "data": {
      "PROMETHEUS_USERNAME": "YWRtaW4=",
      "PROMETHEUS_PASSWORD": "Y2hhbmdlbWU="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "grafana-bin"
    },
    "data": {
      "db-init.py": "#!/usr/bin/env python\n\n# Creates db and user for an OpenStack Service:\n# Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain\n# SQLAlchemy strings for the root connection to the database and the one you\n# wish the service to use. Alternatively, you can use an ini formatted config\n# at the location specified by OPENSTACK_CONFIG_FILE, and extract the string\n# from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by\n# OPENSTACK_CONFIG_DB_SECTION.\n\nimport os\nimport sys\ntry:\n    import ConfigParser\n    PARSER_OPTS = {}\nexcept ImportError:\n    import configparser as ConfigParser\n    PARSER_OPTS = {\"strict\": False}\nimport logging\nfrom sqlalchemy import create_engine\n\n# Create logger, console handler and formatter\nlogger = logging.getLogger('OpenStack-Helm DB Init')\nlogger.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n# Set the formatter and add the handler\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\n\n# Get the connection string for the service db root user\nif \"ROOT_DB_CONNECTION\" in os.environ:\n    db_connection = os.environ['ROOT_DB_CONNECTION']\n    logger.info('Got DB root connection')\nelse:\n    logger.critical('environment variable ROOT_DB_CONNECTION not set')\n    sys.exit(1)\n\nmysql_x509 = os.getenv('MARIADB_X509', \"\")\nssl_args = {}\nif mysql_x509:\n    ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',\n                'key': '/etc/mysql/certs/tls.key',\n                'cert': '/etc/mysql/certs/tls.crt'}}\n\n# Get the connection string for the service db\nif \"OPENSTACK_CONFIG_FILE\" in os.environ:\n    os_conf = os.environ['OPENSTACK_CONFIG_FILE']\n    if \"OPENSTACK_CONFIG_DB_SECTION\" in os.environ:\n        os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']\n    else:\n        logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')\n        sys.exit(1)\n    if \"OPENSTACK_CONFIG_DB_KEY\" in os.environ:\n        os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']\n    else:\n        logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')\n        sys.exit(1)\n    try:\n        config = ConfigParser.RawConfigParser(**PARSER_OPTS)\n        logger.info(\"Using {0} as db config source\".format(os_conf))\n        config.read(os_conf)\n        logger.info(\"Trying to load db config from {0}:{1}\".format(\n            os_conf_section, os_conf_key))\n        user_db_conn = config.get(os_conf_section, os_conf_key)\n        logger.info(\"Got config from {0}\".format(os_conf))\n    except:\n        logger.critical(\"Tried to load config from {0} but failed.\".format(os_conf))\n        raise\nelif \"DB_CONNECTION\" in os.environ:\n    user_db_conn = os.environ['DB_CONNECTION']\n    logger.info('Got config from DB_CONNECTION env var')\nelse:\n    logger.critical('Could not get db config, either from config file or env var')\n    sys.exit(1)\n\n# Root DB engine\ntry:\n    root_engine_full = create_engine(db_connection)\n    root_user = root_engine_full.url.username\n    root_password = root_engine_full.url.password\n    drivername = root_engine_full.url.drivername\n    host = root_engine_full.url.host\n    port = root_engine_full.url.port\n    root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])\n    root_engine = create_engine(root_engine_url, connect_args=ssl_args)\n    connection = root_engine.connect()\n    connection.close()\n    logger.info(\"Tested connection to DB @ {0}:{1} as {2}\".format(\n        host, port, root_user))\nexcept:\n    logger.critical('Could not connect to database as root user')\n    raise\n\n# User DB engine\ntry:\n    user_engine = create_engine(user_db_conn, connect_args=ssl_args)\n    # Get our user data out of the user_engine\n    database = user_engine.url.database\n    user = user_engine.url.username\n    password = user_engine.url.password\n    logger.info('Got user db config')\nexcept:\n    logger.critical('Could not get user database config')\n    raise\n\n# Create DB\ntry:\n    root_engine.execute(\"CREATE DATABASE IF NOT EXISTS {0}\".format(database))\n    logger.info(\"Created database {0}\".format(database))\nexcept:\n    logger.critical(\"Could not create database {0}\".format(database))\n    raise\n\n# Create DB User\ntry:\n    root_engine.execute(\n        \"GRANT ALL ON `{0}`.* TO \\'{1}\\'@\\'%%\\' IDENTIFIED BY \\'{2}\\' {3}\".format(\n            database, user, password, mysql_x509))\n    logger.info(\"Created user {0} for {1}\".format(user, database))\nexcept:\n    logger.critical(\"Could not create user {0} for {1}\".format(user, database))\n    raise\n\n# Test connection\ntry:\n    connection = user_engine.connect()\n    connection.close()\n    logger.info(\"Tested connection to DB @ {0}:{1}/{2} as {3}\".format(\n        host, port, database, user))\nexcept:\n    logger.critical('Could not connect to database as user')\n    raise\n\nlogger.info('Finished DB Management')\n",
      "db-session-sync.py": "#!/usr/bin/env python\n\n# Creates db and user for an OpenStack Service:\n# Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain\n# SQLAlchemy strings for the root connection to the database and the one you\n# wish the service to use. Alternatively, you can use an ini formatted config\n# at the location specified by OPENSTACK_CONFIG_FILE, and extract the string\n# from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by\n# OPENSTACK_CONFIG_DB_SECTION.\n\nimport os\nimport sys\nimport logging\nfrom sqlalchemy import create_engine\n\n# Create logger, console handler and formatter\nlogger = logging.getLogger('OpenStack-Helm DB Init')\nlogger.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(filename)s - %(lineno)d - %(funcName)s - %(message)s')\n\n# Set the formatter and add the handler\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\n# Get the connection string for the service db\nif \"DB_CONNECTION\" in os.environ:\n    user_db_conn = os.environ['DB_CONNECTION']\n    logger.info('Got config from DB_CONNECTION env var')\nelse:\n    logger.critical('Could not get db config, either from config file or env var')\n    sys.exit(1)\n\n# User DB engine\ntry:\n    user_engine = create_engine(user_db_conn)\n    # Get our user data out of the user_engine\n    database = user_engine.url.database\n    user = user_engine.url.username\n    password = user_engine.url.password\n    host = user_engine.url.host\n    port = user_engine.url.port\n    logger.info('Got user db config')\nexcept:\n    logger.critical('Could not get user database config')\n    raise\n\n# Test connection\ntry:\n    connection = user_engine.connect()\n    connection.close()\n    logger.info(\"Tested connection to DB @ {0}:{1}/{2} as {3}\".format(\n        host, port, database, user))\nexcept:\n    logger.critical('Could not connect to database as user')\n    raise\n\n# Create Table\ntry:\n    user_engine.execute('''CREATE TABLE IF NOT EXISTS `session` (\n                        `key`CHAR(16) NOT NULL,\n                        `data` BLOB,\n                        `expiry` INT(11) UNSIGNED NOT NULL,\n                        PRIMARY KEY (`key`)\n                        ) ENGINE=MyISAM DEFAULT CHARSET=utf8;''')\n    logger.info('Created table for session cache')\nexcept:\n    logger.critical('Could not create table for session cache')\n    raise\n",
      "image-repo-sync.sh": "#!/bin/sh\nset -ex\n\nIFS=','; for IMAGE in ${IMAGE_SYNC_LIST}; do\n  docker pull ${IMAGE}\n  docker tag ${IMAGE} ${LOCAL_REPO}/${IMAGE}\n  docker push ${LOCAL_REPO}/${IMAGE}\ndone\n",
      "grafana.sh": "#!/bin/bash\n\n\nset -ex\nCOMMAND=\"${@:-start}\"\n\nfunction start () {\n  exec /usr/share/grafana/bin/grafana-server -homepath=/usr/share/grafana -config=/etc/grafana/grafana.ini\n}\n\nfunction stop () {\n  kill -TERM 1\n}\n\n$COMMAND\n",
      "selenium-tests.py": "#!/usr/bin/env python3\n\n\n\nimport logging\nimport os\nimport sys\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.common.exceptions import TimeoutException\nfrom selenium.common.exceptions import NoSuchElementException\n\n# Create logger, console handler and formatter\nlogger = logging.getLogger('Grafana Selenium Tests')\nlogger.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nformatter = logging.Formatter(\n    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n# Set the formatter and add the handler\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\ndef get_variable(env_var):\n    if env_var in os.environ:\n        logger.info('Found \"{}\"'.format(env_var))\n        return os.environ[env_var]\n    else:\n        logger.critical('Variable \"{}\" is not defined!'.format(env_var))\n        sys.exit(1)\n\nusername = get_variable('GRAFANA_USER')\npassword = get_variable('GRAFANA_PASSWORD')\ngrafana_uri = get_variable('GRAFANA_URI')\n\nchrome_driver = '/etc/selenium/chromedriver'\noptions = Options()\noptions.add_argument('--headless')\noptions.add_argument('--no-sandbox')\noptions.add_argument('--window-size=1920x1080')\nbrowser = webdriver.Chrome(chrome_driver, chrome_options=options)\n\nlogger.info(\"Attempting to open Grafana dashboard\")\ntry:\n    browser.get(grafana_uri)\n    el = WebDriverWait(browser, 15).until(\n    EC.title_contains('Grafana')\n    )\n    logger.info('Connected to Grafana')\nexcept TimeoutException:\n    logger.critical('Timed out waiting for Grafana')\n    browser.quit()\n    sys.exit(1)\n\nlogger.info(\"Attempting to log into Grafana dashboard\")\ntry:\n    browser.find_element_by_name('user').send_keys(username)\n    browser.find_element_by_name('password').send_keys(password)\n    browser.find_element_by_class_name('css-6ntnx5-button').click()\n    logger.info(\"Successfully logged in to Grafana\")\nexcept NoSuchElementException:\n    logger.error(\"Failed to log in to Grafana\")\n    browser.quit()\n    sys.exit(1)\n\nbrowser.quit()\n",
      "set-admin-password.sh": "#!/bin/bash\n\n\necho \"Attempting to update Grafana admin user password\"\ngrafana-cli admin reset-admin-password --homepath \"/usr/share/grafana\" --config /etc/grafana/grafana.ini ${GF_SECURITY_ADMIN_PASSWORD}\n\nif [ \"$?\" == 1 ]; then\n  echo \"The Grafana admin user does not exist yet, so no need to update password\"\n  exit 0;\nelse\n  exit 0;\nfi\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "grafana-dashboards"
    },
    "data": null
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-grafana",
      "namespace": "tUWMxGuls"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-grafana-db-init-session",
      "namespace": "tUWMxGuls"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-grafana-db-init",
      "namespace": "tUWMxGuls"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-grafana-db-session-sync",
      "namespace": "tUWMxGuls"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-grafana-set-admin-user",
      "namespace": "tUWMxGuls"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-release-name-test",
      "namespace": "tUWMxGuls"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-grafana",
      "namespace": "tUWMxGuls"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-grafana"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "grafana",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-grafana-db-init-session",
      "namespace": "tUWMxGuls"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-grafana-db-init-session"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "grafana-db-init-session",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-grafana-db-init",
      "namespace": "tUWMxGuls"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-grafana-db-init"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "grafana-db-init",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-grafana-db-session-sync",
      "namespace": "tUWMxGuls"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-grafana-db-session-sync"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "grafana-db-session-sync",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-grafana-set-admin-user",
      "namespace": "tUWMxGuls"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-grafana-set-admin-user"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "grafana-set-admin-user",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-release-name-test",
      "namespace": "tUWMxGuls"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-release-name-test"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-test",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "grafana"
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80
        },
        {
          "name": "https",
          "port": 443
        }
      ],
      "selector": {
        "app": "ingress-api"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "grafana-dashboard"
    },
    "spec": {
      "ports": [
        {
          "name": "dashboard",
          "port": 3000
        }
      ],
      "selector": {
        "release_group": "release-name",
        "application": "grafana",
        "component": "dashboard"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "grafana",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      },
      "labels": {
        "release_group": "release-name",
        "application": "grafana",
        "component": "dashboard"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "release_group": "release-name",
          "application": "grafana",
          "component": "dashboard"
        }
      },
      "revisionHistoryLimit": 3,
      "strategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "maxUnavailable": 1,
          "maxSurge": 3
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "grafana",
            "component": "dashboard"
          },
          "annotations": {
            "configmap-bin-hash": "5c7b344f8cd1d442f85b6582c94628445727fb5308f54e4c5795a1958ecb041e",
            "configmap-etc-hash": "33969309e60ea89186dbf6b864caf1aec04cd9f14a7aa79d970c34a4abfa8c73"
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 104
          },
          "serviceAccountName": "grafana",
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "release_group",
                          "operator": "In",
                          "values": [
                            "release-name"
                          ]
                        },
                        {
                          "key": "application",
                          "operator": "In",
                          "values": [
                            "grafana"
                          ]
                        },
                        {
                          "key": "component",
                          "operator": "In",
                          "values": [
                            "dashboard"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 10
                }
              ]
            }
          },
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "grafana-db-init,grafana-db-session-sync,grafana-set-admin-user"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "grafana",
              "image": "docker.io/grafana/grafana:7.3.6",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "command": [
                "/tmp/grafana.sh",
                "start"
              ],
              "ports": [
                {
                  "name": "dashboard",
                  "containerPort": 3000
                }
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/login",
                  "port": 3000
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 30
              },
              "env": [
                {
                  "name": "GF_SECURITY_ADMIN_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "grafana-admin-creds",
                      "key": "GRAFANA_ADMIN_USERNAME"
                    }
                  }
                },
                {
                  "name": "GF_SECURITY_ADMIN_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "grafana-admin-creds",
                      "key": "GRAFANA_ADMIN_PASSWORD"
                    }
                  }
                },
                {
                  "name": "PROMETHEUS_URL",
                  "value": "http://prom-metrics.default.svc.cluster.local/"
                }
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "pod-etc-grafana",
                  "mountPath": "/etc/grafana"
                },
                {
                  "name": "pod-screenshots-grafana",
                  "mountPath": "/var/lib/grafana/png"
                },
                {
                  "name": "pod-dashboards-grafana",
                  "mountPath": "/etc/grafana/dashboards"
                },
                {
                  "name": "pod-provisioning-grafana",
                  "mountPath": "/etc/grafana/provisioning"
                },
                {
                  "name": "grafana-bin",
                  "mountPath": "/tmp/grafana.sh",
                  "subPath": "grafana.sh",
                  "readOnly": true
                },
                {
                  "name": "grafana-etc",
                  "mountPath": "/etc/grafana/provisioning/dashboards/dashboards.yaml",
                  "subPath": "dashboards.yaml"
                },
                {
                  "name": "grafana-etc",
                  "mountPath": "/etc/grafana/provisioning/datasources/datasources.yaml",
                  "subPath": "datasources.yaml"
                },
                {
                  "name": "grafana-etc",
                  "mountPath": "/etc/grafana/grafana.ini",
                  "subPath": "grafana.ini"
                },
                {
                  "name": "grafana-etc",
                  "mountPath": "/etc/grafana/ldap.toml",
                  "subPath": "ldap.toml"
                },
                {
                  "name": "data",
                  "mountPath": "/var/lib/grafana/data"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "pod-etc-grafana",
              "emptyDir": {}
            },
            {
              "name": "pod-screenshots-grafana",
              "emptyDir": {}
            },
            {
              "name": "pod-dashboards-grafana",
              "emptyDir": {}
            },
            {
              "name": "pod-provisioning-grafana",
              "emptyDir": {}
            },
            {
              "name": "grafana-bin",
              "configMap": {
                "name": "grafana-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "grafana-etc",
              "secret": {
                "secretName": "grafana-etc",
                "defaultMode": 292
              }
            },
            {
              "name": "grafana-dashboards",
              "configMap": {
                "name": "grafana-dashboards",
                "defaultMode": 365
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "grafana-db-init-session",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "grafana",
            "component": "db-init"
          },
          "annotations": {
            "configmap-bin-hash": "5c7b344f8cd1d442f85b6582c94628445727fb5308f54e4c5795a1958ecb041e",
            "configmap-etc-hash": "33969309e60ea89186dbf6b864caf1aec04cd9f14a7aa79d970c34a4abfa8c73"
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 104
          },
          "serviceAccountName": "grafana-db-init-session",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "grafana-db-init-session",
              "image": "docker.io/openstackhelm/heat:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "env": [
                {
                  "name": "ROOT_DB_CONNECTION",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "grafana-session-db-admin",
                      "key": "DB_CONNECTION"
                    }
                  }
                },
                {
                  "name": "DB_CONNECTION",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "grafana-session-db-user",
                      "key": "DB_CONNECTION"
                    }
                  }
                }
              ],
              "command": [
                "/tmp/db-init.py"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "grafana-bin",
                  "mountPath": "/tmp/db-init.py",
                  "subPath": "db-init.py",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "grafana-bin",
              "configMap": {
                "name": "grafana-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "grafana-db-init",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "grafana",
            "component": "db-init"
          },
          "annotations": {
            "configmap-bin-hash": "5c7b344f8cd1d442f85b6582c94628445727fb5308f54e4c5795a1958ecb041e",
            "configmap-etc-hash": "33969309e60ea89186dbf6b864caf1aec04cd9f14a7aa79d970c34a4abfa8c73"
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 104
          },
          "serviceAccountName": "grafana-db-init",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "grafana-db-init",
              "image": "docker.io/openstackhelm/heat:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "env": [
                {
                  "name": "ROOT_DB_CONNECTION",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "grafana-db-admin",
                      "key": "DB_CONNECTION"
                    }
                  }
                },
                {
                  "name": "DB_CONNECTION",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "grafana-db-user",
                      "key": "DB_CONNECTION"
                    }
                  }
                }
              ],
              "command": [
                "/tmp/db-init.py"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "grafana-bin",
                  "mountPath": "/tmp/db-init.py",
                  "subPath": "db-init.py",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "grafana-bin",
              "configMap": {
                "name": "grafana-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "grafana-db-session-sync",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "grafana",
            "component": "db-session-sync"
          },
          "annotations": {
            "configmap-bin-hash": "5c7b344f8cd1d442f85b6582c94628445727fb5308f54e4c5795a1958ecb041e",
            "configmap-etc-hash": "33969309e60ea89186dbf6b864caf1aec04cd9f14a7aa79d970c34a4abfa8c73"
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 104
          },
          "serviceAccountName": "grafana-db-session-sync",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "grafana-db-init-session"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "grafana-db-session-sync",
              "image": "docker.io/openstackhelm/heat:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "env": [
                {
                  "name": "DB_CONNECTION",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "grafana-session-db-user",
                      "key": "DB_CONNECTION"
                    }
                  }
                }
              ],
              "command": [
                "/tmp/db-session-sync.py"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "grafana-bin",
                  "mountPath": "/tmp/db-session-sync.py",
                  "subPath": "db-session-sync.py",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "grafana-bin",
              "configMap": {
                "name": "grafana-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "grafana-set-admin-user",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "grafana",
            "component": "set-admin-user"
          },
          "annotations": {
            "configmap-bin-hash": "5c7b344f8cd1d442f85b6582c94628445727fb5308f54e4c5795a1958ecb041e",
            "configmap-etc-hash": "33969309e60ea89186dbf6b864caf1aec04cd9f14a7aa79d970c34a4abfa8c73"
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 104
          },
          "serviceAccountName": "grafana-set-admin-user",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "grafana-db-init"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "grafana-set-admin-password",
              "image": "docker.io/grafana/grafana:7.3.6",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "command": [
                "/tmp/set-admin-password.sh"
              ],
              "env": [
                {
                  "name": "GF_SECURITY_ADMIN_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "grafana-admin-creds",
                      "key": "GRAFANA_ADMIN_USERNAME"
                    }
                  }
                },
                {
                  "name": "GF_SECURITY_ADMIN_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "grafana-admin-creds",
                      "key": "GRAFANA_ADMIN_PASSWORD"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "grafana-etc",
                  "mountPath": "/etc/grafana/grafana.ini",
                  "subPath": "grafana.ini"
                },
                {
                  "name": "grafana-bin",
                  "mountPath": "/tmp/set-admin-password.sh",
                  "subPath": "set-admin-password.sh",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "pod-etc-grafana",
              "emptyDir": {}
            },
            {
              "name": "grafana-bin",
              "configMap": {
                "name": "grafana-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "grafana-etc",
              "secret": {
                "secretName": "grafana-etc",
                "defaultMode": 292
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1beta1",
    "kind": "Ingress",
    "metadata": {
      "name": "grafana",
      "annotations": {
        "kubernetes.io/ingress.class": "nginx",
        "nginx.ingress.kubernetes.io/rewrite-target": "/"
      }
    },
    "spec": {
      "rules": [
        {
          "host": "grafana",
          "http": {
            "paths": [
              {
                "path": "/",
                "backend": {
                  "serviceName": "grafana-dashboard",
                  "servicePort": "dashboard"
                }
              }
            ]
          }
        },
        {
          "host": "grafana.default",
          "http": {
            "paths": [
              {
                "path": "/",
                "backend": {
                  "serviceName": "grafana-dashboard",
                  "servicePort": "dashboard"
                }
              }
            ]
          }
        },
        {
          "host": "grafana.default.svc.cluster.local",
          "http": {
            "paths": [
              {
                "path": "/",
                "backend": {
                  "serviceName": "grafana-dashboard",
                  "servicePort": "dashboard"
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-test",
      "labels": {
        "release_group": "release-name",
        "application": "grafana",
        "component": "test"
      },
      "annotations": {
        "helm.sh/hook": "test-success",
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "securityContext": {
        "runAsUser": 104
      },
      "serviceAccountName": "release-name-test",
      "nodeSelector": {
        "openstack-control-plane": "enabled"
      },
      "restartPolicy": "Never",
      "initContainers": [
        {
          "name": "init",
          "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
          "imagePullPolicy": "IfNotPresent",
          "securityContext": {
            "allowPrivilegeEscalation": false,
            "readOnlyRootFilesystem": true,
            "runAsUser": 65534
          },
          "env": [
            {
              "name": "POD_NAME",
              "valueFrom": {
                "fieldRef": {
                  "apiVersion": "v1",
                  "fieldPath": "metadata.name"
                }
              }
            },
            {
              "name": "NAMESPACE",
              "valueFrom": {
                "fieldRef": {
                  "apiVersion": "v1",
                  "fieldPath": "metadata.namespace"
                }
              }
            },
            {
              "name": "INTERFACE_NAME",
              "value": "eth0"
            },
            {
              "name": "PATH",
              "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
            },
            {
              "name": "DEPENDENCY_SERVICE",
              "value": "default:grafana-dashboard"
            },
            {
              "name": "DEPENDENCY_DAEMONSET",
              "value": ""
            },
            {
              "name": "DEPENDENCY_CONTAINER",
              "value": ""
            },
            {
              "name": "DEPENDENCY_POD_JSON",
              "value": ""
            },
            {
              "name": "DEPENDENCY_CUSTOM_RESOURCE",
              "value": ""
            }
          ],
          "command": [
            "kubernetes-entrypoint"
          ],
          "volumeMounts": []
        }
      ],
      "containers": [
        {
          "name": "grafana-selenium-tests",
          "image": "docker.io/openstackhelm/osh-selenium:latest-ubuntu_bionic",
          "imagePullPolicy": "IfNotPresent",
          "securityContext": {
            "allowPrivilegeEscalation": false,
            "readOnlyRootFilesystem": true
          },
          "command": [
            "/tmp/selenium-tests.py"
          ],
          "env": [
            {
              "name": "GRAFANA_USER",
              "valueFrom": {
                "secretKeyRef": {
                  "name": "grafana-admin-creds",
                  "key": "GRAFANA_ADMIN_USERNAME"
                }
              }
            },
            {
              "name": "GRAFANA_PASSWORD",
              "valueFrom": {
                "secretKeyRef": {
                  "name": "grafana-admin-creds",
                  "key": "GRAFANA_ADMIN_PASSWORD"
                }
              }
            },
            {
              "name": "GRAFANA_URI",
              "value": "http://grafana-dashboard.default.svc.cluster.local:3000/"
            }
          ],
          "volumeMounts": [
            {
              "name": "pod-tmp",
              "mountPath": "/tmp"
            },
            {
              "name": "grafana-bin",
              "mountPath": "/tmp/selenium-tests.py",
              "subPath": "selenium-tests.py",
              "readOnly": true
            }
          ]
        }
      ],
      "volumes": [
        {
          "name": "pod-tmp",
          "emptyDir": {}
        },
        {
          "name": "grafana-bin",
          "configMap": {
            "name": "grafana-bin",
            "defaultMode": 365
          }
        }
      ]
    }
  }
]