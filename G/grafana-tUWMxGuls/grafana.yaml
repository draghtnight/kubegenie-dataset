apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: tUWMxGuls
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-db-init-session
  namespace: tUWMxGuls
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-db-init
  namespace: tUWMxGuls
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-db-session-sync
  namespace: tUWMxGuls
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-set-admin-user
  namespace: tUWMxGuls
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-test
  namespace: tUWMxGuls
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-etc
type: Opaque
data:
  dashboards.yaml: YXBpVmVyc2lvbjogMQpwcm92aWRlcnM6Ci0gZGlzYWJsZURlbGV0aW9uOiBmYWxzZQogIGVkaXRhYmxlOiBmYWxzZQogIGZvbGRlcjogIiIKICBuYW1lOiBvc2gtaW5mcmEtZGFzaGJvYXJkcwogIG9wdGlvbnM6CiAgICBwYXRoOiAvZXRjL2dyYWZhbmEvZGFzaGJvYXJkcwogIG9yZ0lkOiAxCiAgdHlwZTogZmlsZQ==
  grafana.ini: W2FuYWx5dGljc10KY2hlY2tfZm9yX3VwZGF0ZXMgPSBmYWxzZQpyZXBvcnRpbmdfZW5hYmxlZCA9IGZhbHNlClthdXRoLmxkYXBdCmNvbmZpZ19maWxlID0gL2V0Yy9ncmFmYW5hL2xkYXAudG9tbAplbmFibGVkID0gdHJ1ZQpbZGFzaGJvYXJkc10KZGVmYXVsdF9ob21lX2Rhc2hib2FyZF9wYXRoID0gL2V0Yy9ncmFmYW5hL2Rhc2hib2FyZHMvaG9tZV9kYXNoYm9hcmQuanNvbgpbZGF0YWJhc2VdCnR5cGUgPSBteXNxbAp1cmwgPSBteXNxbDovL2dyYWZhbmE6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvZ3JhZmFuYQpbZ3JhZmFuYV9uZXRdCnVybCA9IGh0dHBzOi8vZ3JhZmFuYS5uZXQKW2xvZ10KbGV2ZWwgPSBpbmZvCm1vZGUgPSBjb25zb2xlCltwYXRoc10KZGF0YSA9IC92YXIvbGliL2dyYWZhbmEvZGF0YQpwbHVnaW5zID0gL3Zhci9saWIvZ3JhZmFuYS9wbHVnaW5zCnByb3Zpc2lvbmluZyA9IC9ldGMvZ3JhZmFuYS9wcm92aXNpb25pbmcKW3NlY3VyaXR5XQphZG1pbl9wYXNzd29yZCA9ICR7R0ZfU0VDVVJJVFlfQURNSU5fUEFTU1dPUkR9CmFkbWluX3VzZXIgPSAke0dGX1NFQ1VSSVRZX0FETUlOX1VTRVJ9CmNvb2tpZV9yZW1lbWJlcl9uYW1lID0gZ3JhZmFuYV9yZW1lbWJlcgpjb29raWVfdXNlcm5hbWUgPSBncmFmYW5hX3VzZXIKbG9naW5fcmVtZW1iZXJfZGF5cyA9IDcKW3NlcnZlcl0KaHR0cF9wb3J0ID0gMzAwMApwcm90b2NvbCA9IGh0dHAKW3Nlc3Npb25dCmNvb2tpZV9uYW1lID0gZ3JhZmFuYV9zZXNzCmNvb2tpZV9zZWN1cmUgPSBmYWxzZQpwcm92aWRlciA9IG15c3FsCnByb3ZpZGVyX2NvbmZpZyA9IGdyYWZhbmFfc2Vzc2lvbjpwYXNzd29yZEB0Y3AobWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYpL2dyYWZhbmFfc2Vzc2lvbgpzZXNzaW9uX2xpZmVfdGltZSA9IDg2NDAwClt1c2Vyc10KYWxsb3dfb3JnX2NyZWF0ZSA9IGZhbHNlCmFsbG93X3NpZ25fdXAgPSBmYWxzZQphdXRvX2Fzc2lnbl9vcmcgPSB0cnVlCmRlZmF1bHRfdGhlbWUgPSBkYXJrCg==
  datasources.yaml: YXBpVmVyc2lvbjogMQpkYXRhc291cmNlczoKLSBuYW1lOiBwcm9tZXRoZXVzCiAgdHlwZTogcHJvbWV0aGV1cwogIGFjY2VzczogcHJveHkKICBvcmdJZDogMQogIGVkaXRhYmxlOiB0cnVlCiAgYmFzaWNBdXRoOiB0cnVlCiAgYmFzaWNBdXRoVXNlcjogYWRtaW4KICBzZWN1cmVKc29uRGF0YToKICAgIGJhc2ljQXV0aFBhc3N3b3JkOiBjaGFuZ2VtZQogIHVybDogaHR0cDovL3Byb20tbWV0cmljcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsLw==
  ldap.toml: dmVyYm9zZV9sb2dnaW5nID0gZmFsc2UKW1tzZXJ2ZXJzXV0KaG9zdCA9ICJsZGFwLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiCnBvcnQgPSAzODkKdXNlX3NzbCA9IGZhbHNlCnN0YXJ0X3RscyA9IGZhbHNlCnNzbF9za2lwX3ZlcmlmeSA9IGZhbHNlCmJpbmRfZG4gPSAiY249YWRtaW4sZGM9Y2x1c3RlcixkYz1sb2NhbCIKYmluZF9wYXNzd29yZCA9ICdwYXNzd29yZCcKc2VhcmNoX2ZpbHRlciA9ICIodWlkPSVzKSIKc2VhcmNoX2Jhc2VfZG5zID0gWyJkYz1jbHVzdGVyLGRjPWxvY2FsIl0KZ3JvdXBfc2VhcmNoX2ZpbHRlciA9ICIoJihvYmplY3RjbGFzcz1wb3NpeEdyb3VwKShtZW1iZXJVSUQ9dWlkPSVzLG91PVBlb3BsZSxkYz1jbHVzdGVyLGRjPWxvY2FsKSkiCmdyb3VwX3NlYXJjaF9iYXNlX2RucyA9IFsib3U9R3JvdXBzLGRjPWNsdXN0ZXIsZGM9bG9jYWwiXQpbc2VydmVycy5hdHRyaWJ1dGVzXQp1c2VybmFtZSA9ICJ1aWQiCnN1cm5hbWUgPSAic24iCm1lbWJlcl9vZiA9ICJjbiIKZW1haWwgPSAibWFpbCIKW1tzZXJ2ZXJzLmdyb3VwX21hcHBpbmdzXV0KZ3JvdXBfZG4gPSAiY249YWRtaW4sZGM9Y2x1c3RlcixkYz1sb2NhbCIKb3JnX3JvbGUgPSAiQWRtaW4iCltbc2VydmVycy5ncm91cF9tYXBwaW5nc11dCmdyb3VwX2RuID0gIioiCm9yZ19yb2xlID0gIlZpZXdlciI=
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin-creds
type: Opaque
data:
  GRAFANA_ADMIN_PASSWORD: cGFzc3dvcmQ=
  GRAFANA_ADMIN_USERNAME: YWRtaW4=
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-session-db-admin
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvZ3JhZmFuYV9zZXNzaW9u
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-session-db-user
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL2dyYWZhbmFfc2Vzc2lvbjpwYXNzd29yZEBtYXJpYWRiLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6MzMwNi9ncmFmYW5hX3Nlc3Npb24=
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-db-admin
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvZ3JhZmFuYQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-db-user
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL2dyYWZhbmE6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvZ3JhZmFuYQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-user-creds
type: Opaque
data:
  PROMETHEUS_USERNAME: YWRtaW4=
  PROMETHEUS_PASSWORD: Y2hhbmdlbWU=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-bin
data:
  db-init.py: |
    #!/usr/bin/env python

    # Creates db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.

    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine

    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Init')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)


    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)

    mysql_x509 = os.getenv('MARIADB_X509', "")
    ssl_args = {}
    if mysql_x509:
        ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',
                    'key': '/etc/mysql/certs/tls.key',
                    'cert': '/etc/mysql/certs/tls.crt'}}

    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)

    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url, connect_args=ssl_args)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise

    # User DB engine
    try:
        user_engine = create_engine(user_db_conn, connect_args=ssl_args)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise

    # Create DB
    try:
        root_engine.execute("CREATE DATABASE IF NOT EXISTS {0}".format(database))
        logger.info("Created database {0}".format(database))
    except:
        logger.critical("Could not create database {0}".format(database))
        raise

    # Create DB User
    try:
        root_engine.execute(
            "GRANT ALL ON `{0}`.* TO \'{1}\'@\'%%\' IDENTIFIED BY \'{2}\' {3}".format(
                database, user, password, mysql_x509))
        logger.info("Created user {0} for {1}".format(user, database))
    except:
        logger.critical("Could not create user {0} for {1}".format(user, database))
        raise

    # Test connection
    try:
        connection = user_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1}/{2} as {3}".format(
            host, port, database, user))
    except:
        logger.critical('Could not connect to database as user')
        raise

    logger.info('Finished DB Management')
  db-session-sync.py: |
    #!/usr/bin/env python

    # Creates db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.

    import os
    import sys
    import logging
    from sqlalchemy import create_engine

    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Init')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(filename)s - %(lineno)d - %(funcName)s - %(message)s')

    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    # Get the connection string for the service db
    if "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)

    # User DB engine
    try:
        user_engine = create_engine(user_db_conn)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        host = user_engine.url.host
        port = user_engine.url.port
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise

    # Test connection
    try:
        connection = user_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1}/{2} as {3}".format(
            host, port, database, user))
    except:
        logger.critical('Could not connect to database as user')
        raise

    # Create Table
    try:
        user_engine.execute('''CREATE TABLE IF NOT EXISTS `session` (
                            `key`CHAR(16) NOT NULL,
                            `data` BLOB,
                            `expiry` INT(11) UNSIGNED NOT NULL,
                            PRIMARY KEY (`key`)
                            ) ENGINE=MyISAM DEFAULT CHARSET=utf8;''')
        logger.info('Created table for session cache')
    except:
        logger.critical('Could not create table for session cache')
        raise
  image-repo-sync.sh: |
    #!/bin/sh
    set -ex

    IFS=','; for IMAGE in ${IMAGE_SYNC_LIST}; do
      docker pull ${IMAGE}
      docker tag ${IMAGE} ${LOCAL_REPO}/${IMAGE}
      docker push ${LOCAL_REPO}/${IMAGE}
    done
  grafana.sh: |
    #!/bin/bash


    set -ex
    COMMAND="${@:-start}"

    function start () {
      exec /usr/share/grafana/bin/grafana-server -homepath=/usr/share/grafana -config=/etc/grafana/grafana.ini
    }

    function stop () {
      kill -TERM 1
    }

    $COMMAND
  selenium-tests.py: |
    #!/usr/bin/env python3



    import logging
    import os
    import sys
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import TimeoutException
    from selenium.common.exceptions import NoSuchElementException

    # Create logger, console handler and formatter
    logger = logging.getLogger('Grafana Selenium Tests')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    def get_variable(env_var):
        if env_var in os.environ:
            logger.info('Found "{}"'.format(env_var))
            return os.environ[env_var]
        else:
            logger.critical('Variable "{}" is not defined!'.format(env_var))
            sys.exit(1)

    username = get_variable('GRAFANA_USER')
    password = get_variable('GRAFANA_PASSWORD')
    grafana_uri = get_variable('GRAFANA_URI')

    chrome_driver = '/etc/selenium/chromedriver'
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--window-size=1920x1080')
    browser = webdriver.Chrome(chrome_driver, chrome_options=options)

    logger.info("Attempting to open Grafana dashboard")
    try:
        browser.get(grafana_uri)
        el = WebDriverWait(browser, 15).until(
        EC.title_contains('Grafana')
        )
        logger.info('Connected to Grafana')
    except TimeoutException:
        logger.critical('Timed out waiting for Grafana')
        browser.quit()
        sys.exit(1)

    logger.info("Attempting to log into Grafana dashboard")
    try:
        browser.find_element_by_name('user').send_keys(username)
        browser.find_element_by_name('password').send_keys(password)
        browser.find_element_by_class_name('css-6ntnx5-button').click()
        logger.info("Successfully logged in to Grafana")
    except NoSuchElementException:
        logger.error("Failed to log in to Grafana")
        browser.quit()
        sys.exit(1)

    browser.quit()
  set-admin-password.sh: |
    #!/bin/bash


    echo "Attempting to update Grafana admin user password"
    grafana-cli admin reset-admin-password --homepath "/usr/share/grafana" --config /etc/grafana/grafana.ini ${GF_SECURITY_ADMIN_PASSWORD}

    if [ "$?" == 1 ]; then
      echo "The Grafana admin user does not exist yet, so no need to update password"
      exit 0;
    else
      exit 0;
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
data: null
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-grafana
  namespace: tUWMxGuls
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-grafana-db-init-session
  namespace: tUWMxGuls
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-grafana-db-init
  namespace: tUWMxGuls
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-grafana-db-session-sync
  namespace: tUWMxGuls
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-grafana-set-admin-user
  namespace: tUWMxGuls
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-release-name-test
  namespace: tUWMxGuls
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-grafana
  namespace: tUWMxGuls
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-grafana
subjects:
  - kind: ServiceAccount
    name: grafana
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-grafana-db-init-session
  namespace: tUWMxGuls
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-grafana-db-init-session
subjects:
  - kind: ServiceAccount
    name: grafana-db-init-session
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-grafana-db-init
  namespace: tUWMxGuls
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-grafana-db-init
subjects:
  - kind: ServiceAccount
    name: grafana-db-init
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-grafana-db-session-sync
  namespace: tUWMxGuls
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-grafana-db-session-sync
subjects:
  - kind: ServiceAccount
    name: grafana-db-session-sync
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-grafana-set-admin-user
  namespace: tUWMxGuls
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-grafana-set-admin-user
subjects:
  - kind: ServiceAccount
    name: grafana-set-admin-user
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-release-name-test
  namespace: tUWMxGuls
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-release-name-test
subjects:
  - kind: ServiceAccount
    name: release-name-test
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
    - name: http
      port: 80
    - name: https
      port: 443
  selector:
    app: ingress-api
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-dashboard
spec:
  ports:
    - name: dashboard
      port: 3000
  selector:
    release_group: release-name
    application: grafana
    component: dashboard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
  labels:
    release_group: release-name
    application: grafana
    component: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      release_group: release-name
      application: grafana
      component: dashboard
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 3
  template:
    metadata:
      labels:
        release_group: release-name
        application: grafana
        component: dashboard
      annotations:
        configmap-bin-hash: 5c7b344f8cd1d442f85b6582c94628445727fb5308f54e4c5795a1958ecb041e
        configmap-etc-hash: 33969309e60ea89186dbf6b864caf1aec04cd9f14a7aa79d970c34a4abfa8c73
    spec:
      securityContext:
        runAsUser: 104
      serviceAccountName: grafana
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: release_group
                      operator: In
                      values:
                        - release-name
                    - key: application
                      operator: In
                      values:
                        - grafana
                    - key: component
                      operator: In
                      values:
                        - dashboard
                topologyKey: kubernetes.io/hostname
              weight: 10
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_JOBS
              value: grafana-db-init,grafana-db-session-sync,grafana-set-admin-user
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: grafana
          image: docker.io/grafana/grafana:7.3.6
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
          command:
            - /tmp/grafana.sh
            - start
          ports:
            - name: dashboard
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /login
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-creds
                  key: GRAFANA_ADMIN_USERNAME
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-creds
                  key: GRAFANA_ADMIN_PASSWORD
            - name: PROMETHEUS_URL
              value: http://prom-metrics.default.svc.cluster.local/
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: pod-etc-grafana
              mountPath: /etc/grafana
            - name: pod-screenshots-grafana
              mountPath: /var/lib/grafana/png
            - name: pod-dashboards-grafana
              mountPath: /etc/grafana/dashboards
            - name: pod-provisioning-grafana
              mountPath: /etc/grafana/provisioning
            - name: grafana-bin
              mountPath: /tmp/grafana.sh
              subPath: grafana.sh
              readOnly: true
            - name: grafana-etc
              mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
              subPath: dashboards.yaml
            - name: grafana-etc
              mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
              subPath: datasources.yaml
            - name: grafana-etc
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: grafana-etc
              mountPath: /etc/grafana/ldap.toml
              subPath: ldap.toml
            - name: data
              mountPath: /var/lib/grafana/data
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: pod-etc-grafana
          emptyDir: {}
        - name: pod-screenshots-grafana
          emptyDir: {}
        - name: pod-dashboards-grafana
          emptyDir: {}
        - name: pod-provisioning-grafana
          emptyDir: {}
        - name: grafana-bin
          configMap:
            name: grafana-bin
            defaultMode: 365
        - name: grafana-etc
          secret:
            secretName: grafana-etc
            defaultMode: 292
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
            defaultMode: 365
        - name: data
          emptyDir: {}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-db-init-session
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
spec:
  template:
    metadata:
      labels:
        release_group: release-name
        application: grafana
        component: db-init
      annotations:
        configmap-bin-hash: 5c7b344f8cd1d442f85b6582c94628445727fb5308f54e4c5795a1958ecb041e
        configmap-etc-hash: 33969309e60ea89186dbf6b864caf1aec04cd9f14a7aa79d970c34a4abfa8c73
    spec:
      securityContext:
        runAsUser: 104
      serviceAccountName: grafana-db-init-session
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: grafana-db-init-session
          image: docker.io/openstackhelm/heat:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
          env:
            - name: ROOT_DB_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: grafana-session-db-admin
                  key: DB_CONNECTION
            - name: DB_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: grafana-session-db-user
                  key: DB_CONNECTION
          command:
            - /tmp/db-init.py
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: grafana-bin
              mountPath: /tmp/db-init.py
              subPath: db-init.py
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: grafana-bin
          configMap:
            name: grafana-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-db-init
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
spec:
  template:
    metadata:
      labels:
        release_group: release-name
        application: grafana
        component: db-init
      annotations:
        configmap-bin-hash: 5c7b344f8cd1d442f85b6582c94628445727fb5308f54e4c5795a1958ecb041e
        configmap-etc-hash: 33969309e60ea89186dbf6b864caf1aec04cd9f14a7aa79d970c34a4abfa8c73
    spec:
      securityContext:
        runAsUser: 104
      serviceAccountName: grafana-db-init
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: grafana-db-init
          image: docker.io/openstackhelm/heat:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
          env:
            - name: ROOT_DB_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: grafana-db-admin
                  key: DB_CONNECTION
            - name: DB_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: grafana-db-user
                  key: DB_CONNECTION
          command:
            - /tmp/db-init.py
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: grafana-bin
              mountPath: /tmp/db-init.py
              subPath: db-init.py
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: grafana-bin
          configMap:
            name: grafana-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-db-session-sync
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
spec:
  template:
    metadata:
      labels:
        release_group: release-name
        application: grafana
        component: db-session-sync
      annotations:
        configmap-bin-hash: 5c7b344f8cd1d442f85b6582c94628445727fb5308f54e4c5795a1958ecb041e
        configmap-etc-hash: 33969309e60ea89186dbf6b864caf1aec04cd9f14a7aa79d970c34a4abfa8c73
    spec:
      securityContext:
        runAsUser: 104
      serviceAccountName: grafana-db-session-sync
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_JOBS
              value: grafana-db-init-session
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: grafana-db-session-sync
          image: docker.io/openstackhelm/heat:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
          env:
            - name: DB_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: grafana-session-db-user
                  key: DB_CONNECTION
          command:
            - /tmp/db-session-sync.py
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: grafana-bin
              mountPath: /tmp/db-session-sync.py
              subPath: db-session-sync.py
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: grafana-bin
          configMap:
            name: grafana-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-set-admin-user
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
spec:
  template:
    metadata:
      labels:
        release_group: release-name
        application: grafana
        component: set-admin-user
      annotations:
        configmap-bin-hash: 5c7b344f8cd1d442f85b6582c94628445727fb5308f54e4c5795a1958ecb041e
        configmap-etc-hash: 33969309e60ea89186dbf6b864caf1aec04cd9f14a7aa79d970c34a4abfa8c73
    spec:
      securityContext:
        runAsUser: 104
      serviceAccountName: grafana-set-admin-user
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_JOBS
              value: grafana-db-init
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: grafana-set-admin-password
          image: docker.io/grafana/grafana:7.3.6
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
          command:
            - /tmp/set-admin-password.sh
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-creds
                  key: GRAFANA_ADMIN_USERNAME
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-creds
                  key: GRAFANA_ADMIN_PASSWORD
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: grafana-etc
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: grafana-bin
              mountPath: /tmp/set-admin-password.sh
              subPath: set-admin-password.sh
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: pod-etc-grafana
          emptyDir: {}
        - name: grafana-bin
          configMap:
            name: grafana-bin
            defaultMode: 365
        - name: grafana-etc
          secret:
            secretName: grafana-etc
            defaultMode: 292
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: grafana
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: grafana
      http:
        paths:
          - path: /
            backend:
              serviceName: grafana-dashboard
              servicePort: dashboard
    - host: grafana.default
      http:
        paths:
          - path: /
            backend:
              serviceName: grafana-dashboard
              servicePort: dashboard
    - host: grafana.default.svc.cluster.local
      http:
        paths:
          - path: /
            backend:
              serviceName: grafana-dashboard
              servicePort: dashboard
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-test
  labels:
    release_group: release-name
    application: grafana
    component: test
  annotations:
    helm.sh/hook: test-success
    openstackhelm.openstack.org/release_uuid: ""
spec:
  securityContext:
    runAsUser: 104
  serviceAccountName: release-name-test
  nodeSelector:
    openstack-control-plane: enabled
  restartPolicy: Never
  initContainers:
    - name: init
      image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
      imagePullPolicy: IfNotPresent
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsUser: 65534
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INTERFACE_NAME
          value: eth0
        - name: PATH
          value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
        - name: DEPENDENCY_SERVICE
          value: default:grafana-dashboard
        - name: DEPENDENCY_DAEMONSET
          value: ""
        - name: DEPENDENCY_CONTAINER
          value: ""
        - name: DEPENDENCY_POD_JSON
          value: ""
        - name: DEPENDENCY_CUSTOM_RESOURCE
          value: ""
      command:
        - kubernetes-entrypoint
      volumeMounts: []
  containers:
    - name: grafana-selenium-tests
      image: docker.io/openstackhelm/osh-selenium:latest-ubuntu_bionic
      imagePullPolicy: IfNotPresent
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      command:
        - /tmp/selenium-tests.py
      env:
        - name: GRAFANA_USER
          valueFrom:
            secretKeyRef:
              name: grafana-admin-creds
              key: GRAFANA_ADMIN_USERNAME
        - name: GRAFANA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin-creds
              key: GRAFANA_ADMIN_PASSWORD
        - name: GRAFANA_URI
          value: http://grafana-dashboard.default.svc.cluster.local:3000/
      volumeMounts:
        - name: pod-tmp
          mountPath: /tmp
        - name: grafana-bin
          mountPath: /tmp/selenium-tests.py
          subPath: selenium-tests.py
          readOnly: true
  volumes:
    - name: pod-tmp
      emptyDir: {}
    - name: grafana-bin
      configMap:
        name: grafana-bin
        defaultMode: 365
