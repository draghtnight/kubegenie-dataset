[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "MgZeD6YKZkh",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "secrets": [
      {
        "name": "release-name-rabbitmq"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-geoserverCloud",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.13.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "MgZeD6YKZkh"
    },
    "type": "Opaque",
    "data": {
      "postgresql-postgres-password": "QnJLTEJacVZySA==",
      "postgresql-password": "cGFzc3dvcmQ="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql-crt",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.13.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "kubernetes.io/tls",
    "data": {
      "ca.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIRENDQWdTZ0F3SUJBZ0lSQUt3b25jRVFqY0FlRHpsb2dvNUlZanN3RFFZSktvWklodmNOQVFFTEJRQXcKR0RFV01CUUdBMVVFQXhNTmNHOXpkR2R5WlhOeGJDMWpZVEFlRncweU1qQTJNVEl4TURNNE1UVmFGdzB5TXpBMgpNVEl4TURNNE1UVmFNQmd4RmpBVUJnTlZCQU1URFhCdmMzUm5jbVZ6Y1d3dFkyRXdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREd4TjlxZXQ2dFNSMU1ZSmthaFlpM2pPbC8yd1RHekZvZjZVaUsKR1pxUkhhZUxQY3hKbDJzNEhXNXd2UVBUUkd3Q3JrOXlEUGVjTisvT2J6TVdqbEcrbzJpYW0zeUxsSVI2VWJuVQpOcFIweGxyenY5Nkxzc1lsZU93ZCsvNldwTEVUaTF5dStMRDlyOUVqdzZTMTRoR2dQSVV1cno1MExjWkgrV1ZtCldTb3ByWjBhdk8zZFZCbjRkN0FXRUZiMFZrSjVZNG5rM2xRY01OTXB0cTdWUkE1dlpwNXUraFdJajVFSWdGYjkKbE9MdFpndm9kNW5rcTBCTWc0R09SNVVSWlNDNjhtSkxPc3kyWTJEcjNGRWYzZ0NDK0w5L1FqMGtZWWlQUTJLMApZNkU3ZnI4ckx0bnFaZTB3dUFtNzRpTzZOM0hhbmFhemxFdjZ0S1NKZ3BteFlrdFJBZ01CQUFHallUQmZNQTRHCkExVWREd0VCL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVkYnFWc3hZNUpJUlZhYXNJOWdDUThSejYyaGt3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDQS9SN1QzdktPWXlDcVVsRy8rMnpGNDJtc3FxZlFDZmlVYjlTNjJuSXczCmhJT09lNDNHUXdpc045MzYzeDEwQUdYcmU2dFRhdWtKZGhHRi9qR1RpcmhaMENZeDhhV2w4RGpJT0g5d0JkZ00KdEx5UUdYdEFObG5xTDFjWDM5MEd1clhJSllkemYvL2tETERzMXFTUWUvM1QzSmJiT2d1TkM0a0xkUmZ2WDhiWQpzamY2QThpT0NTVHhUNDEyV1piU3M3ZkRZZCtIMGcrR3ptRFZyMjRsWHNxZDF2WmVUaUltQWtUaGNiR1gvdEZ0CjhpZWQ3bVA4RFVYNEFtMDJ0NUd5amxqZHpUbm1mNHN3K2cvK3pSQm9oNDJnK1pMSGI2MjlqWklDaENQQTJod2oKSUYzNUtXenc5ZzhLNlJLMDlmTURJOTRncVRLbGNlWEJWYlI1ZXVIdjRCVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVKVENDQXcyZ0F3SUJBZ0lRUk5zZE1IVkJHYVpLZm93UUxIa3B3ekFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxd2IzTjBaM0psYzNGc0xXTmhNQjRYRFRJeU1EWXhNakV3TXpneE5sb1hEVEl6TURZeApNakV3TXpneE5sb3dJakVnTUI0R0ExVUVBeE1YY21Wc1pXRnpaUzF1WVcxbExYQnZjM1JuY21WemNXd3dnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFh2NmtwMS9jaFpzRzBtTnozN3F2dGNxTTEKSHIzMDZPQ2NRVUNkelg0OGUvZ253TmMvZlNiOGVOWkhiMUhSOGFtdEhWSWp0anF6OC9hZVAxSklJM0czdXI1RwpaeUJiV3dwYU9oajlBVWFWTWNaWFhwOHJOTDdaU2FmN0xsQmRBdkU5dzJrdm5CTHFLTklFWHd5RFRGaGpIVm03Ci9pdzc3UmlENXNwdEhjVEFxYVRUdUE2eW1pZnlmdTJRa1FzS1hiU2pTU2tPa3VqVnFoRnJjWkthMUlCb0NkZVIKVmZOcGFjSjVka0R2cDBtTExlMWRmL0Zsa2FsSDFMU2ZxNXN3K3dPZjVJVWE2NXI1YXFrd2VvZmloSStIRE1Ecgp2cTBQbkZQOUs1eXFQS1pFd1d3UVJBczNob1ptbEs1S2pUQzNYK281VWcwc2xray9pTzhya2NEZENOSjVBZ01CCkFBR2pnZ0ZmTUlJQld6QU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUcKQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVZGJxVnN4WTVKSVJWYWFzSQo5Z0NROFJ6NjJoa3dnZm9HQTFVZEVRU0I4akNCNzRJd0tpNXlaV3hsWVhObExXNWhiV1V0Y0c5emRHZHlaWE54CmJDNWtaV1poZFd4MExuTjJZeTRsSVhNb1BHNXBiRDRwZ2k1eVpXeGxZWE5sTFc1aGJXVXRjRzl6ZEdkeVpYTngKYkM1a1pXWmhkV3gwTG5OMll5NGxJWE1vUEc1cGJENHBnamtxTG5KbGJHVmhjMlV0Ym1GdFpTMXdiM04wWjNKbApjM0ZzTFdobFlXUnNaWE56TG1SbFptRjFiSFF1YzNaakxpVWhjeWc4Ym1sc1BpbUNOM0psYkdWaGMyVXRibUZ0ClpTMXdiM04wWjNKbGMzRnNMV2hsWVdSc1pYTnpMbVJsWm1GMWJIUXVjM1pqTGlVaGN5ZzhibWxzUGltQ0YzSmwKYkdWaGMyVXRibUZ0WlMxd2IzTjBaM0psYzNGc01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQkdWN1VxdFgvbgpLVzJ2Uzc0dE9qV1dNWDVTOE9oS3YwT09VMEVubkZSVGtuNXFBUEpscXJCNS9wL1M1WDFtZmwySjBqNEM5VzNGClNhSzZUdkVpWitFTnk4WThpWVc1cmZ6TFY1eHorTVhOTyt0c3A0OVpxa042cW5EdnQrRkdCS2hkTmdIdm54YmMKZHFUMUM4TW9FNjFpNnBNSncxMlpkdG5DSFVwYUNieFp6QVFDblB5T0RLUURnYldGUFkxY281SHZpRHBrVVZOUwpRTEhpbTRzdm1GemhNcHdVUktiUWJGL2ZSd1dIci9OSnA2T2VGNDN3MGowZWVkb3daWUlWTUk3WS9uVHRpWlRWCk1pOERaZ0dtVEJjVzByZ0xwdDRvVHVVanRjNGtUV0xIWHA5ckJsbnJaUFMraWhJZTBuRENuSHNHM3dXVHB5U3UKK1lGL0FnZU10b1kvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMTcrcEtkZjNJV2JCdEpqYzkrNnI3WEtqTlI2OTlPamduRUZBbmMxK1BIdjRKOERYClAzMG0vSGpXUjI5UjBmR3ByUjFTSTdZNnMvUDJuajlTU0NOeHQ3cStSbWNnVzFzS1dqb1kvUUZHbFRIR1YxNmYKS3pTKzJVbW4reTVRWFFMeFBjTnBMNXdTNmlqU0JGOE1nMHhZWXgxWnUvNHNPKzBZZytiS2JSM0V3S21rMDdnTwpzcG9uOG43dGtKRUxDbDIwbzBrcERwTG8xYW9SYTNHU210U0FhQW5Ya1ZYemFXbkNlWFpBNzZkSml5M3RYWC94ClpaR3BSOVMwbjZ1Yk1Qc0RuK1NGR3V1YStXcXBNSHFING9TUGh3ekE2NzZ0RDV4VC9TdWNxanltUk1Gc0VFUUwKTjRhR1pwU3VTbzB3dDEvcU9WSU5MSlpKUDRqdks1SEEzUWpTZVFJREFRQUJBb0lCQUVPNUtnUzBnaUs5K3JnUgo4K3J2eEpBNGwvcW90OEFWQ2N5Q3Z5SEp5NEo0OTZDaTYrNUYvdUxwbTNtNCs5b0hIZGYxaUQ4bGlLL01PUEhiCnRweG1ZOS9rZ3EzZTJVMVQrcC92OU1BV2ttMXF2blBXZytnd0dtaGlzcFFxS1pmSXdLayttZG9VQit2dy9GdmEKNmphYzFISG9XSzZtVG9SUkhJenErVWZmUEUrdFhSa2ljYjhISDc1WHZPeUd1ZWswTjJEazZ4d0kwZ2V6M0syVQo0ZXJZa3FrTFhLNEF6b0dYMFZjd09mZFZyN1dZS282S2phUE1QOHowNDdPUDU1elVLTWFVSzVDUXNZdk1mcWwzClRaakxuVE9wT2htQlBJazhxY29ydHpjQVBKM2ZORVNZUlduOFVtSUxKU1RDVjJBR0pzU2hsR1c3aStIVmdvcVAKRmFVSGQ3RUNnWUVBNEhzMGh3UlFRSUVSc2dzdVhzWndteEgrcWNQTW8zTmI4dDh0dHRLNTB4b0NHUE1SN0JhbApMZ0EvQnhSVUxBVnVMUW9QdlZQVkMwOTcxYVE0bVp1eFA1MWk1TzE5T3RxYTV5MURSN295WFBWbzBUS3N2RUFsClhpcThGeFJpb2JQcjNPTHB5a05JbGlnQU5MR3MxT2RiS1h1bEhlTlVKQWN5MDBPU3g3d0k3Z2NDZ1lFQTlncVIKMUdydUxuU3JLZGpkWkNQa3V1M0ZtQjVmOUhEcWRsWGp5OXRKY3JLbktDMU4ra0NGVTlPS1ZwVkxLYm9FQ3VnMAp4S1AwMGRKMWJ6cUZWWXY3bU1VU0ROU0cvUThvQjlNT3ZvbmVKTmJ5M0NCMnd5SjZEdmsrRTUwR3VNZWo1OVRYCjZnUXkxVzl3L3BuVUhLcXEwbTA3aUFJNmFQTFV5UWNXQkdDQUczOENnWUJyWndkT3dpV1RkeTE4UGhWRml6UTkKUFhMV3pyT09VSmRoc0o0eXBzZjUxS3ZFUENnTENScW0wNzlVSjhuTjloc3N1VyttYWdHNGs2THdLTTViMEQ0Ugo3Yjl2UUtGMkV6bWgrZW9DMjNkVk9xV1gwZU1MZnJWaVJKZ1JndE5lQXJPS3o1YUVDNFVqTXFoR2pldmZRWUpBCmFzUXBkS2JCUmlCdkxCbUNMdGttNlFLQmdRQ3hqWU1iWldjb3d5elo4QlFrTmZyVUlzNWJMbUJVaUQvSzBjU24KMGtHNHNkQUxJRmFMWjVCUG8vTEs5TVhmQU12MkN3ZzVkNUF1OHMrb1N2VDVmU0U5WjhuVTFISHRvTWhralJ5dwp4OUUxaUtDTjFpZWVQZjBUWFM0OC9TNWluajljQjY4Z3c1TGpqNTVkUFNsaTNvNlRlQnhqMUNmT29KNkp5OEZKCnUxSDNoUUtCZ1FESDZmdlpjU1d2WVpWQlB0a09WWmQ1akVFYnVabVdLazcwWHJTT3l5ZDdFNjVhTUNZUWYzcHYKenl5VnN2QzZDRjc2aDFhQ05Rb2JmU3JkQUpkY2dqc2RxRGlsbUhwcGlJRzBUQzdTc3JYU0lTRmtyOTFXVmtYYQpqWXkvL2txdXVYdmVNNDNTbG1rRlNrQ1pzMTgyN25wRmdQS1F2KzlBTWxjZDFRTjRYem15TWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
    }
  },
  {
    "apiVersion": "v1",
    "data": {
      "DATABASE_NAME": "Y29uZmln",
      "HOST": "cmVsZWFzZS1uYW1lLXBvc3RncmVzcWw=",
      "ROLE": "dXNlcm5hbWU=",
      "PASSWORD": "cGFzc3dvcmQ="
    },
    "kind": "Secret",
    "metadata": {
      "name": "jdbcconfig-release-name-geoserverCloud"
    },
    "type": "Opaque"
  },
  {
    "apiVersion": "v1",
    "data": {
      "rabbitmq-erlang-cookie": "UDQ1UXdPNEJaZFBOZkFLNGhMVnZnQ0tUbVFoZ1pn",
      "rabbitmq-password": "Z2Vvc2VydmVy"
    },
    "kind": "Secret",
    "metadata": {
      "name": "geoserver-rabbitmq"
    },
    "type": "Opaque"
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-rabbitmq-config",
      "namespace": "MgZeD6YKZkh",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "rabbitmq.conf": "## Username and password\ndefault_user = geoserver\ndefault_pass = CHANGEME\n## Clustering\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator = min-masters\n# enable guest user\nloopback_users.guest = false\n#default_vhost = default-vhost\n#disk_free_limit.absolute = 50MB\n#load_definitions = /app/load_definition.json"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-geoserverCloud-config-configs",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "config"
      }
    },
    "data": {
      "application.yml": "server:\n  tomcat:\n    # Maximum number of connections that the server accepts and processes at any given time.\n    # Once the limit has been reached, the operating system may still accept connections based on the \"acceptCount\" property.\n    max-connections: 1000 # default: 8192\n    # Maximum queue length for incoming connection requests when all possible request processing threads are in use.\n    accept-count: 100 # default: 100\n    accesslog:\n      enabled: false\n      directory: logs\n      encoding: UTF-8\n    threads:\n      # Minimum amount of worker threads.\n      min-spare: 2 #default: 10\n      # Maximum amount of worker threads.\n      max: 20 #default: 200\n\n# Common configuration for all services. Override or add service specific config\n# properties on each <service-name>-service.yml file\ngeoserver:\n  security.enabled: true\n  servlet.filter.session-debug.enabled: false # until the NPE is fixed\n  catalog:\n    advertised: true\n    localWorkspace: true\n    secure: true\n    # enable caching if using the catalog-service as backend\n    caching.enabled: ${geoserver.backend.catalog-service.enabled}\n  bus:\n    # whether to send distributed events (i.e. acts as master). All instances receive remote events.\n    send-events: true\n    # whether to send the object (CatalogInfo/config info) as payload with the event. Set to false,\n    # not all possible payload types are properly tested, and full object payload is not needed.\n    send-object: ${geoserver.backend.data-directory.enabled}\n    # whether to send a diff of changes as payload with the event. Set to false, not all possible payload types are properly tested nor needed.\n    send-diff: ${geoserver.backend.data-directory.enabled}\n  backend:\n    # configure catalog backends and decide which backend to use on this service.\n    # All backends are disabled, enable the required one on each service. For example, the catalog microservice\n    # will enable one backend type, and the front services the catalog-service backend.\n    # revisit: Could be split into profiles\n    catalog-service:\n      enabled: ${backend.catalog:false}\n      # Base URI of the catalog service. If not set, will be automatically determined using the discovery service, looking for \"catalog-service\"\n      # This allows to explicitly set a fixed location for the catalog service.\n      # uri: http://catalog:8080\n      cache-directory: ${java.io.tmpdir}/cngs/catalog-client/resource_store\n      fallback-resource-directory: ${java.io.tmpdir}/cngs/catalog-client/fallback_resource_store\n    data-directory:\n      enabled: ${backend.data-directory:false}\n      location: ${GEOSERVER_DATA_DIR:/opt/app/data_directory}\n    jdbcconfig:\n      enabled: ${backend.jdbcconfig:false}\n      initdb: true\n      web.enabled: true\n      cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/cngs/jdbcconfig/cache}\n      datasource:\n        jdbcUrl: \"jdbc:postgresql://${jdbcconfig.host}:5432/${jdbcconfig.database}\"\n        username: ${jdbcconfig.username:geoserver}\n        password: ${jdbcconfig.password:geo5erver}\n        driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}\n        # optional:\n        schema: ${jdbcconfig.schema:public}\n        minimumIdle: ${jdbcconfig.minConnections:2}\n        maximumPoolSize: ${jdbcconfig.maxConnections:8}\n\nmanagement:\n  endpoints:\n    enabled-by-default: true\n    web.exposure.include: \"*\"\n  endpoint:\n    info.enabled: true\n    metrics.enabled: true\n    shutdown.enabled: true\n    health:\n      enabled: true\n      show-details: always\n  metrics:\n    binders:\n      processor.enabled: true\n      uptime.enabled: true\n      jvm.enabled: true\n    enable.all: true\n    enable.jvm: true\n    export:\n      atlas.enabled: false\n\nspring:\n  rabbitmq: \n    host: release-name-rabbitmq\n    port: 5672\n    username: geoserver\n    password: ${RABBITMQ_PASSWORD}\n  cloud:\n    bus:\n      enabled: true\n      id: ${server.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id\n      trace.enabled: false #switch on tracing of acks (default off).\n    stream:\n      bindings:\n        springCloudBusOutput:\n          destination: gscatalog\n        springCloudBusInput:\n          destination: gscatalog\n  jackson:\n    default-property-inclusion: non_empty\n    serialization.indent_output: false #set to true if doing manual testing and want formatted output\n\nreactive.feign.cloud.enabled: true\nreactive.feign.hystrix.enabled: false\n\nlogging:\n  level:\n    root: WARN\n    org.springframework: ERROR\n    org.springframework.cloud.bus: INFO\n    org.springframework.retry: INFO\n    # geoserver roots\n    org.geoserver: INFO\n    org.geoserver.catalog.plugin: INFO\n    org.geoserver.wms: WARN #don't flood the logs with every request details\n    org.geoserver.wfs: WARN\n    org.geoserver.jackson: INFO\n    org.geotools.jackson: INFO\n    org.geoserver.platform: INFO\n    org.geoserver.platform.resource: INFO\n    org.geoserver.jdbcconfig: INFO\n    oshi.hardware.platform.linux: ERROR\n    oshi.software.os: ERROR\n    # gs-cloud roots\n    org.geoserver.cloud: INFO\n    org.geoserver.cloud.autoconfigure: INFO\n    org.geoserver.cloud.config.factory: INFO\n    # bus debugging\n    org.geoserver.cloud.bus: INFO\n    org.springframework.cloud.bus.BusAutoConfiguration: INFO\n    org.springframework.cloud.bus.DefaultBusPathMatcher: INFO\n    # reactivefeign:\n    reactivefeign.client.log: INFO\n    org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN\n\n---\nspring.profiles: local\n# provide environment variables that otherwise would be given by docker-compose.yml\nrabbitmq.host: localhost\n\njdbcconfig.url: jdbc:postgresql://localhost:5432/geoserver_config\njdbcconfig.username: geoserver\njdbcconfig.password: geo5erver\n---\nspring.profiles: datadir\nbackend.jdbcconfig: false\nbackend.catalog: false\nbackend.data-directory: true\n---\nspring.profiles: jdbcconfig\nbackend.jdbcconfig: true\nbackend.catalog: false\nbackend.data-directory: false\n---\nspring.profiles: catalog\nbackend.catalog: true\nbackend.jdbcconfig: false\nbackend.data-directory: false\n---\nspring.profiles: debug\n\nlogging:\n  level:\n    root: WARN\n    org.springframework: INFO\n    # geoserver roots\n    org.geoserver: INFO\n    org.geoserver.catalog.plugin: DEBUG\n    org.geoserver.wms: WARN\n    org.geoserver.wfs: WARN\n    org.geoserver.jackson: DEBUG\n    org.geotools.jackson: DEBUG\n    org.geoserver.platform: ERROR\n    org.geoserver.jdbcconfig: INFO\n    # gs-cloud roots\n    org.geoserver.cloud: DEBUG\n    org.geoserver.cloud.autoconfigure: DEBUG\n    org.geoserver.cloud.config.factory: DEBUG\n    # bus debugging\n    org.geoserver.cloud.bus: TRACE\n    org.springframework.cloud.bus: DEBUG\n    org.springframework.cloud.bus.BusAutoConfiguration: DEBUG\n    org.springframework.cloud.bus.DefaultBusPathMatcher: INFO\n    # reactivefeign:\n    reactivefeign.client.log: DEBUG\n",
      "config-service.yml": "spring:\n  profiles:\n    active: native #use native filesystem config by default instead of git. REVISIT.\n  config.server.native.searchLocations: ${config.path:file:./config}\n\nlogging:\n  level:\n    root: WARN\n    org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN\n",
      "gateway-service.yml": "# Defines the root base path at which the gateway exposes all geoserver request paths\n# We're not setting the spring.webflux.base-path because spring-cloud Gateway doesn't\n# work properly with it. See https://github.com/spring-cloud/spring-cloud-gateway/issues/1759\n# For example, if geoserver.base-path=/geoserver-cloud, then geoserver requests will be served\n# under that path prefix (e.g. http://localhost:9090/geoserver-cloud/web, http://localhost:9090/geoserver-cloud/wfs, etc)\n# Examples:\n#geoserver.base-path:\n#geoserver.base-path: /geoserver-cloud\n#geoserver.base-path: /geoserver/cloud\n# Leave it empty for no additional path, setting it to / won't work currently\n#\n# Please note any other prefix than the empty string will require a trailing slash in the root URL\n# for the redirection to the web-ui to work. This is something we need to fix. For example:\n# http://localhost:9090/geoserver-cloud will return 404, but http://localhost:9090/geoserver-cloud/ will work.\ngeoserver.base-path:  /geoserver-cloud \n\n# Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html\nserver:\n  compression:\n    enabled: true\n\nmanagement:\n  endpoint.gateway.enabled: true # default value\n  endpoints:\n    enabled-by-default: true\n    web.exposure.include: \"*\"\n\nspring:\n  cloud:\n    gateway:\n      default-filters:\n      - StripBasePath=${geoserver.base-path} #remove the base path on downstream requests\n      actuator:\n        verbose:\n          enabled: true\n      routes:\n      - id: catalog\n        uri: lb://catalog-service\n        predicates:\n        - Path=${geoserver.base-path}/api/v1/**\n        filters: # Expose the catalog and configuration API only if the dev profile is active\n        - RouteProfile=dev,403\n# WFS routes\n      - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs\n        uri: lb://wfs-service #load balanced to the wfs-service instances\n        predicates:\n        - Path=${geoserver.base-path}/wfs,${geoserver.base-path}/{workspace}/wfs,${geoserver.base-path}/{workspace}/{layer}/wfs,${geoserver.base-path}/schemas/wfs/**\n# proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.\n      - id: wfs_ows\n        uri: lb://wfs-service\n        predicates:\n        - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows\n        - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively\n# WMS routes\n      - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms\n        uri: lb://wms-service #load balanced to the wms-service instances\n        predicates:\n        - Path=${geoserver.base-path}/wms,${geoserver.base-path}/{workspace}/wms,${geoserver.base-path}/{workspace}/{layer}/wms,${geoserver.base-path}/schemas/wms/**,${geoserver.base-path}/openlayers/**,${geoserver.base-path}/openlayers3/**\n      - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.\n        uri: lb://wms-service\n        predicates:\n        - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows\n        - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively\n# WCS routes\n      - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs\n        uri: lb://wcs-service #load balanced to the wps-service instances\n        predicates:\n        - Path=${geoserver.base-path}/wcs,${geoserver.base-path}/{workspace}/wcs,${geoserver.base-path}/{workspace}/{layer}/wcs,${geoserver.base-path}/schemas/wcs/**\n      - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.\n        uri: lb://wcs-service\n        predicates:\n        - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows\n        - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively\n# WPS routes\n      - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps\n        uri: lb://wps-service #load balanced to the wps-service instances\n        predicates:\n        - Path=${geoserver.base-path}/wps,${geoserver.base-path}/{segment}/wps,${geoserver.base-path}/schemas/wps/**\n      - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.\n        uri: lb://wps-service\n        predicates:\n        - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{segment}/ows\n        - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively\n# REST configuration routes\n      - id: restconfig\n        uri: lb://restconfig-v1 #load balanced to the restconfig-v1 instances\n        predicates:\n        - Path=${geoserver.base-path}/rest/**\n# Web UI configuration routes\n      - id: webui\n        uri: lb://web-ui\n        predicates:\n        - Path=${geoserver.base-path}/**\n        #- Path=${geoserver.base-path},${geoserver.base-path}/,${geoserver.base-path}/index.html,${geoserver.base-path}/web,${geoserver.base-path}/web/**,${geoserver.base-path}/j_spring_security_check,${geoserver.base-path}/j_spring_security_logout\n\nlogging:\n  level:\n    root: WARN\n    com.netflix.discovery: WARN\n    com.netflix.eureka: WARN\n    org.springframework.cloud.gateway: info\n    reactor.netty: INFO\n---\nspring.profiles: local\nserver.port: 9000\n",
      "web-ui.yml": "geoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n  web-ui:\n    file-browser.hide-file-system: true\n    # These are all default values, here just for reference. You can omit them and add only the ones to disable or further configure\n    security.enabled: true\n    wfs.enabled: true\n    wms.enabled: true\n    wcs.enabled: true\n    wps.enabled: false # not working yet\n    gwc.enabled: false # not ready yet\n    extensions:\n      importer.enabled: true\n    demos:\n      enabled: true\n      wps-request-builder: true\n      wcs-request-builder: true\n      demo-requests: true\n      srs-list: true\n      reprojection-console: true\n      layer-preview-page:\n        enabled: true\n        common-formats:\n          open-layers: true\n          gml: true\n          kml: false #kml links are broken\n    tools:\n      enabled: true\n      resource-browser: true\n      catalog-bulk-load: true\n---\nspring.profiles: local\nserver.port: 9106\n",
      "restconfig-v1.yml": "geoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n---\nspring.profiles: local\nserver.port: 9105\n",
      "wfs-service.yml": "geoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n---\nspring.profiles: local\nserver.port: 9101\n",
      "wms-service.yml": "geoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n---\nspring.profiles: local\nserver.port: 9102\n",
      "wcs-service.yml": "geoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n---\nspring.profiles: local\nserver.port: 9103\n"
    }
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "namespace": "MgZeD6YKZkh",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "namespace": "MgZeD6YKZkh",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-rabbitmq"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-rabbitmq-endpoint-reader"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.13.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      },
      "namespace": "MgZeD6YKZkh"
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.13.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null,
      "namespace": "MgZeD6YKZkh"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "role": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq-headless",
      "namespace": "MgZeD6YKZkh",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd"
        },
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp"
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist"
        },
        {
          "name": "http-stats",
          "port": 15672,
          "targetPort": "stats"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "rabbitmq",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "MgZeD6YKZkh",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp",
          "nodePort": null
        },
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd",
          "nodePort": null
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist",
          "nodePort": null
        },
        {
          "name": "http-stats",
          "port": 15672,
          "targetPort": "stats",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "rabbitmq",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserverCloud-config",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "config"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "config"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserverCloud-discovery",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "discovery"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8761,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "discovery"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserverCloud-gateway",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "gateway"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "gateway"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserverCloud-rest",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "rest"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "rest"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserverCloud-wcs",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wcs"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "wcs"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserverCloud-webui",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "webui"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "webui"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserverCloud-wfs",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wfs"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "wfs"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserverCloud-wms",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wms"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "wms"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserverCloud-config",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "config"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "2"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserverCloud",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "config"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c27b75ff73538f1f65c1f19449dbc03fbc9c84edcd9f4245e2dd3c7183457a4e"
          },
          "labels": {
            "app.kubernetes.io/name": "geoserverCloud",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "config"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserverCloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserverCloud-config",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-config:1.0-RC3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserverCloud-discovery:8761/eureka"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "native"
                },
                {
                  "name": "CONFIG_NATIVE_PATH",
                  "value": "/opt/app/config"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "configs",
                  "mountPath": "/opt/app/config"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "600Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "300Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "configs",
              "configMap": {
                "name": "release-name-geoserverCloud-config-configs"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserverCloud-discovery",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "discovery"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "1"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserverCloud",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "discovery"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c27b75ff73538f1f65c1f19449dbc03fbc9c84edcd9f4245e2dd3c7183457a4e"
          },
          "labels": {
            "app.kubernetes.io/name": "geoserverCloud",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "discovery"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserverCloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserverCloud-discovery",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "image": "geoservercloud/geoserver-cloud-discovery:1.0-RC3",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "EUREKA_INSTANCE_HOSTNAME",
                  "value": "release-name-geoserverCloud-discovery"
                },
                {
                  "name": "SERVER_PORT",
                  "value": "8761"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8761,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "cpu": "300m",
                  "memory": "600Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "300Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserverCloud-gateway",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "gateway"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "3"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserverCloud",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "gateway"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c27b75ff73538f1f65c1f19449dbc03fbc9c84edcd9f4245e2dd3c7183457a4e"
          },
          "labels": {
            "app.kubernetes.io/name": "geoserverCloud",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "gateway"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserverCloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserverCloud-gateway",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-gateway:1.0-RC3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserverCloud-discovery:8761/eureka"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "800Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "400Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserverCloud-rest",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "rest"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "9"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserverCloud",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "rest"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c27b75ff73538f1f65c1f19449dbc03fbc9c84edcd9f4245e2dd3c7183457a4e"
          },
          "labels": {
            "app.kubernetes.io/name": "geoserverCloud",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "rest"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserverCloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserverCloud-rest",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-rest:1.0-RC3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserverCloud-discovery:8761/eureka"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "jdbcconfig"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-geoserverCloud-rabbitmq"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health/readiness",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "512Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserverCloud-wcs",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wcs"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "10"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserverCloud",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "wcs"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c27b75ff73538f1f65c1f19449dbc03fbc9c84edcd9f4245e2dd3c7183457a4e"
          },
          "labels": {
            "app.kubernetes.io/name": "geoserverCloud",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "wcs"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserverCloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserverCloud-wcs",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-wcs:1.0-RC3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserverCloud-discovery:8761/eureka"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "jdbcconfig"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "800Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "400Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserverCloud-webui",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "webui"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "10"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserverCloud",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "webui"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c27b75ff73538f1f65c1f19449dbc03fbc9c84edcd9f4245e2dd3c7183457a4e"
          },
          "labels": {
            "app.kubernetes.io/name": "geoserverCloud",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "webui"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserverCloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserverCloud-webui",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-webui:1.0-RC3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserverCloud-discovery:8761/eureka"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "jdbcconfig"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-geoserverCloud-rabbitmq"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health/readiness",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": "300m",
                  "memory": "512Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserverCloud-wfs",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wfs"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "10"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserverCloud",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "wfs"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c27b75ff73538f1f65c1f19449dbc03fbc9c84edcd9f4245e2dd3c7183457a4e"
          },
          "labels": {
            "app.kubernetes.io/name": "geoserverCloud",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "wfs"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserverCloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserverCloud-wfs",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-wfs:1.0-RC3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserverCloud-discovery:8761/eureka"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "jdbcconfig"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "800Mi"
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "400Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserverCloud-wms",
      "labels": {
        "helm.sh/chart": "geoserverCloud-0.0.6",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserverCloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC3",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wms"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "10"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserverCloud",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "wms"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c27b75ff73538f1f65c1f19449dbc03fbc9c84edcd9f4245e2dd3c7183457a4e"
          },
          "labels": {
            "app.kubernetes.io/name": "geoserverCloud",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "wms"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserverCloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserverCloud-wms",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-wms:1.0-RC3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserverCloud-discovery:8761/eureka"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "jdbcconfig"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserverCloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "800Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "400Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.13.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null,
      "namespace": "MgZeD6YKZkh"
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "role": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-10.13.8",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "role": "primary",
            "app.kubernetes.io/component": "primary"
          }
        },
        "spec": {
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "postgresql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "automountServiceAccountToken": false,
          "initContainers": [
            {
              "name": "init-chmod-data",
              "image": "docker.io/bitnami/bitnami-shell:10-debian-10-r248",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                }
              },
              "command": [
                "/bin/sh",
                "-cx",
                "chmod -R 777 /dev/shm\ncp /tmp/certs/* /opt/bitnami/postgresql/certs/\nchown -R 1001:1001 /opt/bitnami/postgresql/certs/\nchmod 600 /opt/bitnami/postgresql/certs/tls.key\n"
              ],
              "securityContext": {
                "runAsUser": 0
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "raw-certificates",
                  "mountPath": "/tmp/certs"
                },
                {
                  "name": "postgresql-certificates",
                  "mountPath": "/opt/bitnami/postgresql/certs"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/bitnami/postgresql:11.14.0-debian-10-r0",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "securityContext": {
                "runAsUser": 11662,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-postgres-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "username"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "config"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "yes"
                },
                {
                  "name": "POSTGRESQL_TLS_PREFER_SERVER_CIPHERS",
                  "value": "yes"
                },
                {
                  "name": "POSTGRESQL_TLS_CERT_FILE",
                  "value": "/opt/bitnami/postgresql/certs/tls.crt"
                },
                {
                  "name": "POSTGRESQL_TLS_KEY_FILE",
                  "value": "/opt/bitnami/postgresql/certs/tls.key"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"username\" -d \"dbname=config\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"username\" -d \"dbname=config sslcert=/opt/bitnami/postgresql/certs/tls.crt sslkey=/opt/bitnami/postgresql/certs/tls.key\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "postgresql-certificates",
                  "mountPath": "/opt/bitnami/postgresql/certs",
                  "readOnly": true
                },
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "raw-certificates",
              "secret": {
                "secretName": "release-name-postgresql-crt"
              }
            },
            {
              "name": "postgresql-certificates",
              "emptyDir": {}
            },
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory"
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "MgZeD6YKZkh",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-rabbitmq-headless",
      "podManagementPolicy": "OrderedReady",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "rabbitmq",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "rabbitmq",
            "helm.sh/chart": "rabbitmq-8.0.1",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm"
          },
          "annotations": null
        },
        "spec": {
          "serviceAccountName": "release-name-rabbitmq",
          "securityContext": {
            "fsGroup": 1001,
            "runAsUser": 1001
          },
          "terminationGracePeriodSeconds": 10,
          "containers": [
            {
              "name": "rabbitmq",
              "image": "docker.io/bitnami/rabbitmq:3.8.9-debian-10-r37",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MY_POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "K8S_SERVICE_NAME",
                  "value": "release-name-rabbitmq-headless"
                },
                {
                  "name": "K8S_ADDRESS_TYPE",
                  "value": "hostname"
                },
                {
                  "name": "RABBITMQ_FORCE_BOOT",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_NODE_NAME",
                  "value": "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "K8S_HOSTNAME_SUFFIX",
                  "value": ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "RABBITMQ_MNESIA_DIR",
                  "value": "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
                },
                {
                  "name": "RABBITMQ_LDAP_ENABLE",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_LOGS",
                  "value": "-"
                },
                {
                  "name": "RABBITMQ_ULIMIT_NOFILES",
                  "value": "65536"
                },
                {
                  "name": "RABBITMQ_USE_LONGNAME",
                  "value": "true"
                },
                {
                  "name": "RABBITMQ_ERL_COOKIE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-erlang-cookie"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_USERNAME",
                  "value": "geoserver"
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PLUGINS",
                  "value": "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
                }
              ],
              "ports": [
                {
                  "name": "amqp",
                  "containerPort": 5672
                },
                {
                  "name": "dist",
                  "containerPort": 25672
                },
                {
                  "name": "stats",
                  "containerPort": 15672
                },
                {
                  "name": "epmd",
                  "containerPort": 4369
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "rabbitmq-diagnostics -q check_running"
                  ]
                },
                "initialDelaySeconds": 120,
                "periodSeconds": 30,
                "timeoutSeconds": 20,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "rabbitmq-diagnostics -q check_running"
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 30,
                "timeoutSeconds": 20,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "bash",
                      "-ec",
                      "rabbitmqctl stop_app"
                    ]
                  }
                }
              },
              "volumeMounts": [
                {
                  "name": "configuration",
                  "mountPath": "/bitnami/rabbitmq/conf"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/rabbitmq/mnesia"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "configuration",
              "configMap": {
                "name": "release-name-rabbitmq-config",
                "items": [
                  {
                    "key": "rabbitmq.conf",
                    "path": "rabbitmq.conf"
                  }
                ]
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "nginx",
      "annotations": {
        "ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true"
      }
    },
    "spec": {
      "rules": [
        {
          "http": {
            "paths": [
              {
                "path": "/geoserver-cloud/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "release-name-geoserverCloud-gateway",
                    "port": {
                      "number": 8080
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  }
]