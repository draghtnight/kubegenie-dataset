[
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-db",
      "labels": {
        "app": "postgres",
        "chart": "release-name-gitea",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "dbPassword": "RUpUeGZ6RnhYdA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-gitea",
      "labels": {
        "app": "release-name-gitea",
        "chart": "gitea-0.2.10",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "app.ini": "; This file lists the default values used by Gitea\n; Copy required sections to your own app.ini (default is custom/conf/app.ini)\n; and modify as needed.\n\n; see https://docs.gitea.io/en-us/config-cheat-sheet/ for additional documentation.\n\n; App name that shows in every page title\nAPP_NAME = Gitea: Git with a cup of tea\n; Change it if you run locally\nRUN_USER = git\n; Either \"dev\", \"prod\" or \"test\", default is \"dev\"\nRUN_MODE = dev\n\n[repository]\nROOT =\nSCRIPT_TYPE = bash\n; Default ANSI charset\nANSI_CHARSET =\n; Force every new repository to be private\nFORCE_PRIVATE = false\n; Default privacy setting when creating a new repository, allowed values: last, private, public. Default is last which means the last setting used.\nDEFAULT_PRIVATE = last\n; Global limit of repositories per user, applied at creation time. -1 means no limit\nMAX_CREATION_LIMIT = -1\n; Mirror sync queue length, increase if mirror syncing starts hanging\nMIRROR_QUEUE_LENGTH = 1000\n; Patch test queue length, increase if pull request patch testing starts hanging\nPULL_REQUEST_QUEUE_LENGTH = 1000\n; Preferred Licenses to place at the top of the List\n; The name here must match the filename in conf/license or custom/conf/license\nPREFERRED_LICENSES = Apache License 2.0,MIT License\n; Disable the ability to interact with repositories using the HTTP protocol\nDISABLE_HTTP_GIT = false\n; Value for Access-Control-Allow-Origin header, default is not to present\n; WARNING: This maybe harmful to you website if you do not give it a right value.\nACCESS_CONTROL_ALLOW_ORIGIN =\n; Force ssh:// clone url instead of scp-style uri when default SSH port is used\nUSE_COMPAT_SSH_URI = false\n; Close issues as long as a commit on any branch marks it as fixed\nDEFAULT_CLOSE_ISSUES_VIA_COMMITS_IN_ANY_BRANCH = false\n; Allow users to push local repositories to Gitea and have them automatically created for a user or an org\nENABLE_PUSH_CREATE_USER = false\nENABLE_PUSH_CREATE_ORG = false\n; Comma separated list of globally disabled repo units. Allowed values: repo.issues, repo.ext_issues, repo.pulls, repo.wiki, repo.ext_wiki\nDISABLED_REPO_UNITS =\n; Comma separated list of default repo units. Allowed values: repo.code, repo.releases, repo.issues, repo.pulls, repo.wiki.\n; Note: Code and Releases can currently not be deactivated. If you specify default repo units you should still list them for future compatibility.\n; External wiki and issue tracker can't be enabled by default as it requires additional settings.\n; Disabled repo units will not be added to new repositories regardless if it is in the default list.\nDEFAULT_REPO_UNITS = repo.code,repo.releases,repo.issues,repo.pulls,repo.wiki\n; Prefix archive files by placing them in a directory named after the repository\nPREFIX_ARCHIVE_FILES = true\n\n[repository.editor]\n; List of file extensions for which lines should be wrapped in the Monaco editor\n; Separate extensions with a comma. To line wrap files without an extension, just put a comma\nLINE_WRAP_EXTENSIONS = .txt,.md,.markdown,.mdown,.mkd,\n; Valid file modes that have a preview API associated with them, such as api/v1/markdown\n; Separate the values by commas. The preview tab in edit mode won't be displayed if the file extension doesn't match\nPREVIEWABLE_FILE_MODES = markdown\n\n[repository.local]\n; Path for local repository copy. Defaults to `tmp/local-repo`\nLOCAL_COPY_PATH = tmp/local-repo\n; Path for local wiki copy. Defaults to `tmp/local-wiki`\nLOCAL_WIKI_PATH = tmp/local-wiki\n\n[repository.upload]\n; Whether repository file uploads are enabled. Defaults to `true`\nENABLED = true\n; Path for uploads. Defaults to `data/tmp/uploads` (tmp gets deleted on gitea restart)\nTEMP_PATH = /data/tmp/uploads\n; One or more allowed types, e.g. image/jpeg|image/png. Nothing means any file type\nALLOWED_TYPES =\n; Max size of each file in megabytes. Defaults to 3MB\nFILE_MAX_SIZE = 3\n; Max number of files per upload. Defaults to 5\nMAX_FILES = 5\n\n[repository.pull-request]\n; List of prefixes used in Pull Request title to mark them as Work In Progress\nWORK_IN_PROGRESS_PREFIXES=WIP:,[WIP]\n; List of keywords used in Pull Request comments to automatically close a related issue\nCLOSE_KEYWORDS=close,closes,closed,fix,fixes,fixed,resolve,resolves,resolved\n; List of keywords used in Pull Request comments to automatically reopen a related issue\nREOPEN_KEYWORDS=reopen,reopens,reopened\n; In the default merge message for squash commits include at most this many commits\nDEFAULT_MERGE_MESSAGE_COMMITS_LIMIT=50\n; In the default merge message for squash commits limit the size of the commit messages to this\nDEFAULT_MERGE_MESSAGE_SIZE=5120\n; In the default merge message for squash commits walk all commits to include all authors in the Co-authored-by otherwise just use those in the limited list\nDEFAULT_MERGE_MESSAGE_ALL_AUTHORS=false\n; In default merge messages limit the number of approvers listed as Reviewed-by: to this many\nDEFAULT_MERGE_MESSAGE_MAX_APPROVERS=10\n; In default merge messages only include approvers who are official\nDEFAULT_MERGE_MESSAGE_OFFICIAL_APPROVERS_ONLY=true\n\n[repository.issue]\n; List of reasons why a Pull Request or Issue can be locked\nLOCK_REASONS=Too heated,Off-topic,Resolved,Spam\n\n[repository.signing]\n; GPG key to use to sign commits, Defaults to the default - that is the value of git config --get user.signingkey\n; run in the context of the RUN_USER\n; Switch to none to stop signing completely\nSIGNING_KEY = default\n; If a SIGNING_KEY ID is provided and is not set to default, use the provided Name and Email address as the signer.\n; These should match a publicized name and email address for the key. (When SIGNING_KEY is default these are set to\n; the results of git config --get user.name and git config --get user.email respectively and can only be overrided\n; by setting the SIGNING_KEY ID to the correct ID.)\nSIGNING_NAME =\nSIGNING_EMAIL =\n; Determines when gitea should sign the initial commit when creating a repository\n; Either:\n; - never\n; - pubkey: only sign if the user has a pubkey\n; - twofa: only sign if the user has logged in with twofa\n; - always\n; options other than none and always can be combined as comma separated list\nINITIAL_COMMIT = always\n; Determines when to sign for CRUD actions\n; - as above\n; - parentsigned: requires that the parent commit is signed.\nCRUD_ACTIONS = pubkey, twofa, parentsigned\n; Determines when to sign Wiki commits\n; - as above\nWIKI = never\n; Determines when to sign on merges\n; - basesigned: require that the parent of commit on the base repo is signed.\n; - commitssigned: require that all the commits in the head branch are signed.\n; - approved: only sign when merging an approved pr to a protected branch\nMERGES = pubkey, twofa, basesigned, commitssigned\n\n[cors]\n; More information about CORS can be found here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers\n; enable cors headers (disabled by default)\nENABLED=false\n; scheme of allowed requests\nSCHEME=http\n; list of requesting domains that are allowed\nALLOW_DOMAIN=*\n; allow subdomains of headers listed above to request\nALLOW_SUBDOMAIN=false\n; list of methods allowed to request\nMETHODS=GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS\n; max time to cache response\nMAX_AGE=10m\n; allow request with credentials\nALLOW_CREDENTIALS=false\n\n[ui]\n; Number of repositories that are displayed on one explore page\nEXPLORE_PAGING_NUM = 20\n; Number of issues that are displayed on one page\nISSUE_PAGING_NUM = 10\n; Number of maximum commits displayed in one activity feed\nFEED_MAX_COMMIT_NUM = 5\n; Number of maximum commits displayed in commit graph.\nGRAPH_MAX_COMMIT_NUM = 100\n; Number of line of codes shown for a code comment\nCODE_COMMENT_LINES = 4\n; Value of `theme-color` meta tag, used by Android >= 5.0\n; An invalid color like \"none\" or \"disable\" will have the default style\n; More info: https://developers.google.com/web/updates/2014/11/Support-for-theme-color-in-Chrome-39-for-Android\nTHEME_COLOR_META_TAG = `#6cc644`\n; Max size of files to be displayed (default is 8MiB)\nMAX_DISPLAY_FILE_SIZE = 8388608\n; Whether the email of the user should be shown in the Explore Users page\nSHOW_USER_EMAIL = true\n; Set the default theme for the Gitea install\nDEFAULT_THEME = gitea\n; All available themes. Allow users select personalized themes regardless of the value of `DEFAULT_THEME`.\nTHEMES = gitea,arc-green\n;All available reactions users can choose on issues/prs and comments.\n;Values can be emoji alias (:smile:) or a unicode emoji.\n;For custom reactions, add a tightly cropped square image to public/emoji/img/reaction_name.png\nREACTIONS = +1, -1, laugh, hooray, confused, heart, rocket, eyes\n; Whether the full name of the users should be shown where possible. If the full name isn't set, the username will be used.\nDEFAULT_SHOW_FULL_NAME = false\n; Whether to search within description at repository search on explore page.\nSEARCH_REPO_DESCRIPTION = true\n; Whether to enable a Service Worker to cache frontend assets\nUSE_SERVICE_WORKER = true\n\n[ui.admin]\n; Number of users that are displayed on one page\nUSER_PAGING_NUM = 50\n; Number of repos that are displayed on one page\nREPO_PAGING_NUM = 50\n; Number of notices that are displayed on one page\nNOTICE_PAGING_NUM = 25\n; Number of organizations that are displayed on one page\nORG_PAGING_NUM = 50\n\n[ui.user]\n; Number of repos that are displayed on one page\nREPO_PAGING_NUM = 15\n\n[ui.meta]\nAUTHOR = Gitea - Git with a cup of tea\nDESCRIPTION = Gitea (Git with a cup of tea) is a painless self-hosted Git service written in Go\nKEYWORDS = go,git,self-hosted,gitea\n\n[ui.notification]\n; Control how often the notification endpoint is polled to update the notification\n; The timeout will increase to MAX_TIMEOUT in TIMEOUT_STEPs if the notification count is unchanged\n; Set MIN_TIMEOUT to 0 to turn off\nMIN_TIMEOUT = 10s\nMAX_TIMEOUT = 60s\nTIMEOUT_STEP = 10s\n; This setting determines how often the db is queried to get the latest notification counts.\n; If the browser client supports EventSource, it will be used in preference to polling notification.\nEVENT_SOURCE_UPDATE_TIME = 10s\n\n[markdown]\n; Render soft line breaks as hard line breaks, which means a single newline character between\n; paragraphs will cause a line break and adding trailing whitespace to paragraphs is not\n; necessary to force a line break.\nENABLE_HARD_LINE_BREAK = true\n; Comma separated list of custom URL-Schemes that are allowed as links when rendering Markdown\n; for example git,magnet,ftp (more at https://en.wikipedia.org/wiki/List_of_URI_schemes)\n; URLs starting with http and https are always displayed, whatever is put in this entry.\nCUSTOM_URL_SCHEMES =\n; List of file extensions that should be rendered/edited as Markdown\n; Separate the extensions with a comma. To render files without any extension as markdown, just put a comma\nFILE_EXTENSIONS = .md,.markdown,.mdown,.mkd\n\n[server]\n; The protocol the server listens on. One of 'http', 'https', 'unix' or 'fcgi'.\nPROTOCOL = http\nDOMAIN = release-name-gitea-http.default.svc.cluster.local\nDOMAIN = localhost\nROOT_URL = %(PROTOCOL)s://%(DOMAIN)s:%(HTTP_PORT)s/; when STATIC_URL_PREFIX is empty it will follow ROOT_URL\nSTATIC_URL_PREFIX =\n; The address to listen on. Either a IPv4/IPv6 address or the path to a unix socket.\nHTTP_ADDR = 0.0.0.0\nHTTP_PORT = 3000\n; If REDIRECT_OTHER_PORT is true, and PROTOCOL is set to https an http server\n; will be started on PORT_TO_REDIRECT and it will redirect plain, non-secure http requests to the main\n; ROOT_URL.  Defaults are false for REDIRECT_OTHER_PORT and 80 for\n; PORT_TO_REDIRECT.\nREDIRECT_OTHER_PORT = false\nPORT_TO_REDIRECT = 3000\n; Permission for unix socket\nUNIX_SOCKET_PERMISSION = 666\n; Local (DMZ) URL for Gitea workers (such as SSH update) accessing web service.\n; In most cases you do not need to change the default value.\n; Alter it only if your SSH server node is not the same as HTTP node.\n; Do not set this variable if PROTOCOL is set to 'unix'.\nLOCAL_ROOT_URL = %(PROTOCOL)s://%(HTTP_ADDR)s:%(HTTP_PORT)s/\n; Disable SSH feature when not available\nDISABLE_SSH = false\n; Whether to use the builtin SSH server or not.\nSTART_SSH_SERVER = false\n; Username to use for the builtin SSH server. If blank, then it is the value of RUN_USER.\nBUILTIN_SSH_SERVER_USER =\n; Domain name to be exposed in clone URL\nSSH_DOMAIN = release-name-gitea-ssh.default.svc.cluster.local\n; The network interface the builtin SSH server should listen on\nSSH_LISTEN_HOST = release-name-gitea-ssh.default.svc.cluster.local\n; Port number to be exposed in clone URL\nSSH_PORT = 22\n; The port number the builtin SSH server should listen on\nSSH_LISTEN_PORT = 22\n; Root path of SSH directory, default is '~/.ssh', but you have to use '/home/git/.ssh'.\nSSH_ROOT_PATH =\n; Gitea will create a authorized_keys file by default when it is not using the internal ssh server\n; If you intend to use the AuthorizedKeysCommand functionality then you should turn this off.\nSSH_CREATE_AUTHORIZED_KEYS_FILE = true\n; For the built-in SSH server, choose the ciphers to support for SSH connections,\n; for system SSH this setting has no effect\nSSH_SERVER_CIPHERS = aes128-ctr, aes192-ctr, aes256-ctr, aes128-gcm@openssh.com, arcfour256, arcfour128\n; For the built-in SSH server, choose the key exchange algorithms to support for SSH connections,\n; for system SSH this setting has no effect\nSSH_SERVER_KEY_EXCHANGES = diffie-hellman-group1-sha1, diffie-hellman-group14-sha1, ecdh-sha2-nistp256, ecdh-sha2-nistp384, ecdh-sha2-nistp521, curve25519-sha256@libssh.org\n; For the built-in SSH server, choose the MACs to support for SSH connections,\n; for system SSH this setting has no effect\nSSH_SERVER_MACS = hmac-sha2-256-etm@openssh.com, hmac-sha2-256, hmac-sha1, hmac-sha1-96\n; Directory to create temporary files in when testing public keys using ssh-keygen,\n; default is the system temporary directory.\nSSH_KEY_TEST_PATH =\n; Path to ssh-keygen, default is 'ssh-keygen' which means the shell is responsible for finding out which one to call.\nSSH_KEYGEN_PATH = ssh-keygen\n; Enable SSH Authorized Key Backup when rewriting all keys, default is true\nSSH_BACKUP_AUTHORIZED_KEYS = true\n; Enable exposure of SSH clone URL to anonymous visitors, default is false\nSSH_EXPOSE_ANONYMOUS = false\n; Indicate whether to check minimum key size with corresponding type\nMINIMUM_KEY_SIZE_CHECK = false\n; Disable CDN even in \"prod\" mode\nOFFLINE_MODE = false\nDISABLE_ROUTER_LOG = false\n; Generate steps:\n; $ ./gitea cert -ca=true -duration=8760h0m0s -host=myhost.example.com\n;\n; Or from a .pfx file exported from the Windows certificate store (do\n; not forget to export the private key):\n; $ openssl pkcs12 -in cert.pfx -out cert.pem -nokeys\n; $ openssl pkcs12 -in cert.pfx -out key.pem -nocerts -nodes\n; Paths are relative to CUSTOM_PATH\n; CERT_FILE = https/cert.pem\n; KEY_FILE = https/key.pem\n; Root directory containing templates and static files.\n; default is the path where Gitea is executed\nSTATIC_ROOT_PATH = /data/static\n; Default path for App data\nAPP_DATA_PATH = /data\n; Application level GZIP support\nENABLE_GZIP = false\n; Application profiling (memory and cpu)\n; For \"web\" command it listens on localhost:6060\n; For \"serve\" command it dumps to disk at PPROF_DATA_PATH as (cpuprofile|memprofile)_<username>_<temporary id>\nENABLE_PPROF = false\n; PPROF_DATA_PATH, use an absolute path when you start gitea as service\nPPROF_DATA_PATH = /data/tmp/pprof\n; Landing page, can be \"home\", \"explore\", \"organizations\" or \"login\"\n; The \"login\" choice is not a security measure but just a UI flow change, use REQUIRE_SIGNIN_VIEW to force users to log in.\nLANDING_PAGE = home\n; Enables git-lfs support. true or false, default is false.\nLFS_START_SERVER = false\n; Where your lfs files reside, default is data/lfs.\nLFS_CONTENT_PATH = /data/lfs\n; LFS authentication secret, change this yourself\nLFS_JWT_SECRET =\n; LFS authentication validity period (in time.Duration), pushes taking longer than this may fail.\nLFS_HTTP_AUTH_EXPIRY = 20m\n; Maximum allowed LFS file size in bytes (Set to 0 for no limit).\nLFS_MAX_FILE_SIZE = 0\n; Maximum number of locks returned per page\nLFS_LOCKS_PAGING_NUM = 50\n; Allow graceful restarts using SIGHUP to fork\nALLOW_GRACEFUL_RESTARTS = true\n; After a restart the parent will finish ongoing requests before\n; shutting down. Force shutdown if this process takes longer than this delay.\n; set to a negative value to disable\nGRACEFUL_HAMMER_TIME = 60s\n; Allows the setting of a startup timeout and waithint for Windows as SVC service\n; 0 disables this.\nSTARTUP_TIMEOUT = 0\n; Static resources, includes resources on custom/, public/ and all uploaded avatars web browser cache time, default is 6h\nSTATIC_CACHE_TIME = 6h\n\n; Define allowed algorithms and their minimum key length (use -1 to disable a type)\n[ssh.minimum_key_sizes]\nED25519 = 256\nECDSA = 256\nRSA = 2048\nDSA = 1024\n\n[database]\n\n; Either \"mysql\", \"postgres\", \"mssql\" or \"sqlite3\", it's your choice\nDB_TYPE = postgres\nHOST = 127.0.0.1:5432\nNAME = gitea\nUSER = postgres\n; Use PASSWD = `your password` for quoting if you use special characters in the password.\nPASSWD = POSTGRES_PASSWORD\n\n; For \"postgres\" only, either \"disable\", \"require\" or \"verify-full\"\nSSL_MODE = disable\n; For MySQL only, either \"utf8\" or \"utf8mb4\", default is \"utf8\".\n; NOTICE: for \"utf8mb4\" you must use MySQL InnoDB > 5.6. Gitea is unable to check this.\nCHARSET = utf8\n; For \"sqlite3\" and \"tidb\", use an absolute path when you start gitea as service\nPATH = /data/gitea.db\n; For \"sqlite3\" only. Query timeout\nSQLITE_TIMEOUT = 500\n; For iterate buffer, default is 50\nITERATE_BUFFER_SIZE = 50\n; Show the database generated SQL\nLOG_SQL = true\n; Maximum number of DB Connect retries\nDB_RETRIES = 10\n; Backoff time per DB retry (time.Duration)\nDB_RETRY_BACKOFF = 3s\n; Max idle database connections on connnection pool, default is 2\nMAX_IDLE_CONNS = 2\n; Database connection max life time, default is 0 or 3s mysql (See #6804 & #7071 for reasoning)\nCONN_MAX_LIFETIME = 3s\n; Database maximum number of open connections, default is 0 meaning no maximum\nMAX_OPEN_CONNS = 0\n\n[indexer]\n; Issue indexer type, currently support: bleve, db or elasticsearch, default is bleve\nISSUE_INDEXER_TYPE = bleve\n; Issue indexer connection string, available when ISSUE_INDEXER_TYPE is elasticsearch\nISSUE_INDEXER_CONN_STR = http://elastic:changeme@localhost:9200\n; Issue indexer name, available when ISSUE_INDEXER_TYPE is elasticsearch\nISSUE_INDEXER_NAME = gitea_issues\n; Issue indexer storage path, available when ISSUE_INDEXER_TYPE is bleve\nISSUE_INDEXER_PATH = indexers/issues.bleve\n; Issue indexer queue, currently support: channel, levelqueue or redis, default is levelqueue\nISSUE_INDEXER_QUEUE_TYPE = levelqueue\n; When ISSUE_INDEXER_QUEUE_TYPE is levelqueue, this will be the queue will be saved path,\n; default is indexers/issues.queue\nISSUE_INDEXER_QUEUE_DIR = indexers/issues.queue\n; When `ISSUE_INDEXER_QUEUE_TYPE` is `redis`, this will store the redis connection string.\nISSUE_INDEXER_QUEUE_CONN_STR = \"addrs=127.0.0.1:6379 db=0\"\n; Batch queue number, default is 20\nISSUE_INDEXER_QUEUE_BATCH_NUMBER = 20\n; Timeout the indexer if it takes longer than this to start.\n; Set to zero to disable timeout.\nSTARTUP_TIMEOUT=30s\n\n; repo indexer by default disabled, since it uses a lot of disk space\nREPO_INDEXER_ENABLED = false\nREPO_INDEXER_PATH = indexers/repos.bleve\nUPDATE_BUFFER_LEN = 20\nMAX_FILE_SIZE = 1048576\n; A comma separated list of glob patterns (see https://github.com/gobwas/glob) to include\n; in the index; default is empty\nREPO_INDEXER_INCLUDE =\n; A comma separated list of glob patterns to exclude from the index; ; default is empty\nREPO_INDEXER_EXCLUDE =\n\n[queue]\n; Specific queues can be individually configured with [queue.name]. [queue] provides defaults\n;\n; General queue queue type, currently support: persistable-channel, channel, level, redis, dummy\n; default to persistable-channel\nTYPE = persistable-channel\n; data-dir for storing persistable queues and level queues, individual queues will be named by their type\nDATADIR = queues/\n; Default queue length before a channel queue will block\nLENGTH = 20\n; Batch size to send for batched queues\nBATCH_LENGTH = 20\n; Connection string for redis queues this will store the redis connection string.\nCONN_STR = \"addrs=127.0.0.1:6379 db=0\"\n; Provide the suffix of the default redis queue name - specific queues can be overriden within in their [queue.name] sections.\nQUEUE_NAME = \"_queue\"\n; If the queue cannot be created at startup - level queues may need a timeout at startup - wrap the queue:\nWRAP_IF_NECESSARY = true\n; Attempt to create the wrapped queue at max\nMAX_ATTEMPTS = 10\n; Timeout queue creation\nTIMEOUT = 15m30s\n; Create a pool with this many workers\nWORKERS = 1\n; Dynamically scale the worker pool to at this many workers\nMAX_WORKERS = 10\n; Add boost workers when the queue blocks for BLOCK_TIMEOUT\nBLOCK_TIMEOUT = 1s\n; Remove the boost workers after BOOST_TIMEOUT\nBOOST_TIMEOUT = 5m\n; During a boost add BOOST_WORKERS\nBOOST_WORKERS = 5\n\n[admin]\n; Disallow regular (non-admin) users from creating organizations.\nDISABLE_REGULAR_ORG_CREATION = false\n; Default configuration for email notifications for users (user configurable). Options: enabled, onmention, disabled\nDEFAULT_EMAIL_NOTIFICATIONS = enabled\n\n[security]\n; Whether the installer is disabled\nINSTALL_LOCK = false\n; !!CHANGE THIS TO KEEP YOUR USER DATA SAFE!!\n\nSECRET_KEY = \"DOXVBVncO4T4NaeTWh3xrwRsE4zoIRxqDA4OPCKF4uLF6Bqx6ANnh6moCjS8b8MP\"\n\n\n\n; How long to remember that an user is logged in before requiring relogin (in days)\nLOGIN_REMEMBER_DAYS = 7\nCOOKIE_USERNAME = gitea_awesome\nCOOKIE_REMEMBER_NAME = gitea_incredible\n; Reverse proxy authentication header name of user name\nREVERSE_PROXY_AUTHENTICATION_USER = X-WEBAUTH-USER\nREVERSE_PROXY_AUTHENTICATION_EMAIL = X-WEBAUTH-EMAIL\n; The minimum password length for new Users\nMIN_PASSWORD_LENGTH = 6\n; Set to true to allow users to import local server paths\nIMPORT_LOCAL_PATHS = false\n; Set to true to prevent all users (including admin) from creating custom git hooks\nDISABLE_GIT_HOOKS = false\n; Set to false to allow pushes to gitea repositories despite having an incomplete environment - NOT RECOMMENDED\nONLY_ALLOW_PUSH_IF_GITEA_ENVIRONMENT_SET = true\n;Comma separated list of character classes required to pass minimum complexity.\n;If left empty or no valid values are specified, the default values (\"lower,upper,digit,spec\") will be used.\n;Use \"off\" to disable checking.\nPASSWORD_COMPLEXITY = lower,upper,digit,spec\n; Password Hash algorithm, either \"pbkdf2\", \"argon2\", \"scrypt\" or \"bcrypt\"\nPASSWORD_HASH_ALGO = pbkdf2\n; Set false to allow JavaScript to read CSRF cookie\nCSRF_COOKIE_HTTP_ONLY = true\n\n[openid]\n;\n; OpenID is an open, standard and decentralized authentication protocol.\n; Your identity is the address of a webpage you provide, which describes\n; how to prove you are in control of that page.\n;\n; For more info: https://en.wikipedia.org/wiki/OpenID\n;\n; Current implementation supports OpenID-2.0\n;\n; Tested to work providers at the time of writing:\n;  - Any GNUSocial node (your.hostname.tld/username)\n;  - Any SimpleID provider (http://simpleid.koinic.net)\n;  - http://openid.org.cn/\n;  - openid.stackexchange.com\n;  - login.launchpad.net\n;  - <username>.livejournal.com\n;\n; Whether to allow signin in via OpenID\nENABLE_OPENID_SIGNIN = true\n; Whether to allow registering via OpenID\n; Do not include to rely on rhw DISABLE_REGISTRATION setting\n;ENABLE_OPENID_SIGNUP = true\n; Allowed URI patterns (POSIX regexp).\n; Space separated.\n; Only these would be allowed if non-blank.\n; Example value: trusted.domain.org trusted.domain.net\nWHITELISTED_URIS =\n; Forbidden URI patterns (POSIX regexp).\n; Space separated.\n; Only used if WHITELISTED_URIS is blank.\n; Example value: loadaverage.org/badguy stackexchange.com/.*spammer\nBLACKLISTED_URIS =\n\n[service]\n; Time limit to confirm account/email registration\nACTIVE_CODE_LIVE_MINUTES = 180\n; Time limit to perform the reset of a forgotten password\nRESET_PASSWD_CODE_LIVE_MINUTES = 180\n; Whether a new user needs to confirm their email when registering.\nREGISTER_EMAIL_CONFIRM = false\n; List of domain names that are allowed to be used to register on a Gitea instance\n; gitea.io,example.com\nEMAIL_DOMAIN_WHITELIST=\n; Disallow registration, only allow admins to create accounts.\nDISABLE_REGISTRATION = false\n; Allow registration only using third-party services, it works only when DISABLE_REGISTRATION is false\nALLOW_ONLY_EXTERNAL_REGISTRATION = false\n; User must sign in to view anything.\nREQUIRE_SIGNIN_VIEW = false\n; Mail notification\nENABLE_NOTIFY_MAIL = false\n; More detail: https://github.com/gogits/gogs/issues/165\nENABLE_REVERSE_PROXY_AUTHENTICATION = false\nENABLE_REVERSE_PROXY_AUTO_REGISTRATION = false\nENABLE_REVERSE_PROXY_EMAIL = false\n; Enable captcha validation for registration\nENABLE_CAPTCHA = false\n; Type of captcha you want to use. Options: image, recaptcha\nCAPTCHA_TYPE = image\n; Enable recaptcha to use Google's recaptcha service\n; Go to https://www.google.com/recaptcha/admin to sign up for a key\nRECAPTCHA_SECRET  =\nRECAPTCHA_SITEKEY =\n; Change this to use recaptcha.net or other recaptcha service\nRECAPTCHA_URL = https://www.google.com/recaptcha/\n; Default value for KeepEmailPrivate\n; Each new user will get the value of this setting copied into their profile\nDEFAULT_KEEP_EMAIL_PRIVATE = false\n; Default value for AllowCreateOrganization\n; Every new user will have rights set to create organizations depending on this setting\nDEFAULT_ALLOW_CREATE_ORGANIZATION = true\n; Either \"public\", \"limited\" or \"private\", default is \"public\"\n; Limited is for signed user only\n; Private is only for member of the organization\n; Public is for everyone\nDEFAULT_ORG_VISIBILITY = public\n; Default value for DefaultOrgMemberVisible\n; True will make the membership of the users visible when added to the organisation\nDEFAULT_ORG_MEMBER_VISIBLE = false\n; Default value for EnableDependencies\n; Repositories will use dependencies by default depending on this setting\nDEFAULT_ENABLE_DEPENDENCIES = true\n; Dependencies can be added from any repository where the user is granted access or only from the current repository depending on this setting.\nALLOW_CROSS_REPOSITORY_DEPENDENCIES = true\n; Enable heatmap on users profiles.\nENABLE_USER_HEATMAP = true\n; Enable Timetracking\nENABLE_TIMETRACKING = true\n; Default value for EnableTimetracking\n; Repositories will use timetracking by default depending on this setting\nDEFAULT_ENABLE_TIMETRACKING = true\n; Default value for AllowOnlyContributorsToTrackTime\n; Only users with write permissions can track time if this is true\nDEFAULT_ALLOW_ONLY_CONTRIBUTORS_TO_TRACK_TIME = true\n; Default value for the domain part of the user's email address in the git log\n; if he has set KeepEmailPrivate to true. The user's email will be replaced with a\n; concatenation of the user name in lower case, \"@\" and NO_REPLY_ADDRESS.\nNO_REPLY_ADDRESS = noreply.%(DOMAIN)s\n; Show Registration button\nSHOW_REGISTRATION_BUTTON = true\n; Show milestones dashboard page - a view of all the user's milestones\nSHOW_MILESTONES_DASHBOARD_PAGE = true\n; Default value for AutoWatchNewRepos\n; When adding a repo to a team or creating a new repo all team members will watch the\n; repo automatically if enabled\nAUTO_WATCH_NEW_REPOS = true\n; Default value for AutoWatchOnChanges\n; Make the user watch a repository When they commit for the first time\nAUTO_WATCH_ON_CHANGES = false\n\n[webhook]\n; Hook task queue length, increase if webhook shooting starts hanging\nQUEUE_LENGTH = 1000\n; Deliver timeout in seconds\nDELIVER_TIMEOUT = 5\n; Allow insecure certification\nSKIP_TLS_VERIFY = false\n; Number of history information in each page\nPAGING_NUM = 10\n; Proxy server URL, support http://, https//, socks://, blank will follow environment http_proxy/https_proxy\nPROXY_URL =\n; Comma separated list of host names requiring proxy. Glob patterns (*) are accepted; use ** to match all hosts.\nPROXY_HOSTS =\n\n[mailer]\nENABLED = false\n; Buffer length of channel, keep it as it is if you don't know what it is.\nSEND_BUFFER_LEN = 100\n; Prefix displayed before subject in mail\nSUBJECT_PREFIX =\n; Mail server\n; Gmail: smtp.gmail.com:587\n; QQ: smtp.qq.com:465\n; Note, if the port ends with \"465\", SMTPS will be used. Using STARTTLS on port 587 is recommended per RFC 6409. If the server supports STARTTLS it will always be used.\nHOST = smtp.gmail.com:587\n; Disable HELO operation when hostnames are different.\nDISABLE_HELO =\n; Custom hostname for HELO operation, if no value is provided, one is retrieved from system.\nHELO_HOSTNAME =\n; Do not verify the certificate of the server. Only use this for self-signed certificates\nSKIP_VERIFY =\n; Use client certificate\nUSE_CERTIFICATE = false\nCERT_FILE = custom/mailer/cert.pem\nKEY_FILE = custom/mailer/key.pem\n; Should SMTP connection use TLS\nIS_TLS_ENABLED = false\n; Mail from address, RFC 5322. This can be just an email address, or the `\"Name\" <email@example.com>` format\nFROM = \n; Mailer user name and password\nUSER = \n; Use PASSWD = `your password` for quoting if you use special characters in the password.\nPASSWD = \n; Send mails as plain text\nSEND_AS_PLAIN_TEXT = false\n; Set Mailer Type (either SMTP, sendmail or dummy to just send to the log)\nMAILER_TYPE = smtp\n; Specify an alternative sendmail binary\nSENDMAIL_PATH = sendmail\n; Specify any extra sendmail arguments\nSENDMAIL_ARGS =\n; Timeout for Sendmail\nSENDMAIL_TIMEOUT = 5m\n\n[cache]\n; if the cache enabled\nENABLED = true\n; Either \"memory\", \"redis\", or \"memcache\", default is \"memory\"\nADAPTER = memcache\n; For \"memory\" only, GC interval in seconds, default is 60\nINTERVAL = 60\n; For \"redis\" and \"memcache\", connection host address\n;redis: network=tcp,addr=:6379,password=macaron,db=0,pool_size=100,idle_timeout=180\nHOST = 127.0.0.1:11211\n; Time to keep items in cache if not used, default is 16 hours.\n; Setting it to 0 disables caching\nITEM_TTL = 16h\n\n; Last commit cache\n[cache.last_commit]\n; if the cache enabled\nENABLED = true\n; Time to keep items in cache if not used, default is 8760 hours.\n; Setting it to 0 disables caching\nITEM_TTL = 8760h\n; Only enable the cache when repository's commits count great than\nCOMMITS_COUNT = 1000\n\n[session]\n; Either \"memory\", \"file\", or \"redis\", default is \"memory\"\nPROVIDER = memory\n; Provider config options\n; memory: doesn't have any config yet\n; file: session file path, e.g. `data/sessions`\n; redis: network=tcp,addr=:6379,password=macaron,db=0,pool_size=100,idle_timeout=180\n; mysql: go-sql-driver/mysql dsn config string, e.g. `root:password@/session_table`\nPROVIDER_CONFIG = /data/sessions\n; Session cookie name\nCOOKIE_NAME = i_like_gitea\n; If you use session in https only, default is false\nCOOKIE_SECURE = false\n; Enable set cookie, default is true\nENABLE_SET_COOKIE = true\n; Session GC time interval in seconds, default is 86400 (1 day)\nGC_INTERVAL_TIME = 86400\n; Session life time in seconds, default is 86400 (1 day)\nSESSION_LIFE_TIME = 86400\n\n[picture]\nAVATAR_UPLOAD_PATH = /data/avatars\nREPOSITORY_AVATAR_UPLOAD_PATH = /data/repo-avatars\n; How Gitea deals with missing repository avatars\n; none = no avatar will be displayed; random = random avatar will be displayed; image = default image will be used\nREPOSITORY_AVATAR_FALLBACK = none\nREPOSITORY_AVATAR_FALLBACK_IMAGE = /img/repo_default.png\n; Max Width and Height of uploaded avatars.\n; This is to limit the amount of RAM used when resizing the image.\nAVATAR_MAX_WIDTH = 4096\nAVATAR_MAX_HEIGHT = 3072\n; Maximum alloved file size for uploaded avatars.\n; This is to limit the amount of RAM used when resizing the image.\nAVATAR_MAX_FILE_SIZE = 1048576\n; Chinese users can choose \"duoshuo\"\n; or a custom avatar source, like: http://cn.gravatar.com/avatar/\nGRAVATAR_SOURCE = gravatar\n; This value will always be true in offline mode.\nDISABLE_GRAVATAR = false\n; Federated avatar lookup uses DNS to discover avatar associated\n; with emails, see https://www.libravatar.org\n; This value will always be false in offline mode or when Gravatar is disabled.\nENABLE_FEDERATED_AVATAR = false\n\n[attachment]\n; Whether attachments are enabled. Defaults to `true`\nENABLED = true\n; Path for attachments. Defaults to `/data/attachments`\nPATH = /data/attachments\n; One or more allowed types, e.g. \"image/jpeg|image/png\". Use \"*/*\" for all types.\nALLOWED_TYPES = image/jpeg|image/png|application/zip|application/gzip\n; Max size of each file. Defaults to 4MB\nMAX_SIZE = 4\n; Max number of files per upload. Defaults to 5\nMAX_FILES = 5\n\n[time]\n; Specifies the format for fully outputted dates. Defaults to RFC1123\n; Special supported values are ANSIC, UnixDate, RubyDate, RFC822, RFC822Z, RFC850, RFC1123, RFC1123Z, RFC3339, RFC3339Nano, Kitchen, Stamp, StampMilli, StampMicro and StampNano\n; For more information about the format see http://golang.org/pkg/time/#pkg-constants\nFORMAT =\n; Location the UI time display i.e. Asia/Shanghai\n; Empty means server's location setting\nDEFAULT_UI_LOCATION =\n\n[log]\nROOT_PATH =\n; Either \"console\", \"file\", \"conn\", \"smtp\" or \"database\", default is \"console\"\n; Use comma to separate multiple modes, e.g. \"console, file\"\nMODE = console\n; Buffer length of the channel, keep it as it is if you don't know what it is.\nBUFFER_LEN = 10000\nREDIRECT_MACARON_LOG = false\nMACARON = file\n; Either \"Trace\", \"Debug\", \"Info\", \"Warn\", \"Error\", \"Critical\", default is \"Info\"\nROUTER_LOG_LEVEL = Info\nROUTER = console\nENABLE_ACCESS_LOG = false\nACCESS_LOG_TEMPLATE = \\{\\{.Ctx.RemoteAddr\\}\\} - \\{\\{.Identity\\}\\} \\{\\{.Start.Format \"[02/Jan/2006:15:04:05 -0700]\" \\}\\} \"\\{\\{.Ctx.Req.Method\\}\\} \\{\\{.Ctx.Req.RequestURI\\}\\} \\{\\{.Ctx.Req.Proto\\}\\}\" \\{\\{.ResponseWriter.Status\\}\\} \\{\\{.ResponseWriter.Size\\}\\} \"\\{\\{.Ctx.Req.Referer\\}\\}\\\" \\\"\\{\\{.Ctx.Req.UserAgent\\}\\}\"\nACCESS = file\n; Either \"Trace\", \"Debug\", \"Info\", \"Warn\", \"Error\", \"Critical\", default is \"Trace\"\nLEVEL = Info\n; Either \"Trace\", \"Debug\", \"Info\", \"Warn\", \"Error\", \"Critical\", default is \"None\"\nSTACKTRACE_LEVEL = None\n\n; Generic log modes\n[log.x]\nFLAGS = stdflags\nEXPRESSION =\nPREFIX =\nCOLORIZE = false\n\n; For \"console\" mode only\n[log.console]\nLEVEL =\nSTDERR = false\n\n; For \"file\" mode only\n[log.file]\nLEVEL =\n; Set the file_name for the logger. If this is a relative path this\n; will be relative to ROOT_PATH\nFILE_NAME =\n; This enables automated log rotate(switch of following options), default is true\nLOG_ROTATE = true\n; Max number of lines in a single file, default is 1000000\nMAX_LINES = 1000000\n; Max size shift of a single file, default is 28 means 1 << 28, 256MB\nMAX_SIZE_SHIFT = 28\n; Segment log daily, default is true\nDAILY_ROTATE = true\n; delete the log file after n days, default is 7\nMAX_DAYS = 7\n; compress logs with gzip\nCOMPRESS = true\n; compression level see godoc for compress/gzip\nCOMPRESSION_LEVEL = -1\n\n; For \"conn\" mode only\n[log.conn]\nLEVEL =\n; Reconnect host for every single message, default is false\nRECONNECT_ON_MSG = false\n; Try to reconnect when connection is lost, default is false\nRECONNECT = false\n; Either \"tcp\", \"unix\" or \"udp\", default is \"tcp\"\nPROTOCOL = tcp\n; Host address\nADDR =\n\n; For \"smtp\" mode only\n[log.smtp]\nLEVEL =\n; Name displayed in mail title, default is \"Diagnostic message from server\"\nSUBJECT = Diagnostic message from server\n; Mail server\nHOST =\n; Mailer user name and password\nUSER =\n; Use PASSWD = `your password` for quoting if you use special characters in the password.\nPASSWD =\n; Receivers, can be one or more, e.g. 1@example.com,2@example.com\nRECEIVERS =\n\n[cron]\n; Enable running cron tasks periodically.\nENABLED = true\n; Run cron tasks when Gitea starts.\nRUN_AT_START = false\n\n; Update mirrors\n[cron.update_mirrors]\nSCHEDULE = @every 10m\n\n; Repository health check\n[cron.repo_health_check]\nSCHEDULE = @every 24h\nTIMEOUT = 60s\n; Arguments for command 'git fsck', e.g. \"--unreachable --tags\"\n; see more on http://git-scm.com/docs/git-fsck\nARGS =\n\n; Check repository statistics\n[cron.check_repo_stats]\nRUN_AT_START = true\nSCHEDULE = @every 24h\n\n; Clean up old repository archives\n[cron.archive_cleanup]\n; Whether to enable the job\nENABLED = true\n; Whether to always run at least once at start up time (if ENABLED)\nRUN_AT_START = true\n; Time interval for job to run\nSCHEDULE = @every 24h\n; Archives created more than OLDER_THAN ago are subject to deletion\nOLDER_THAN = 24h\n\n; Synchronize external user data (only LDAP user synchronization is supported)\n[cron.sync_external_users]\n; Synchronize external user data when starting server (default false)\nRUN_AT_START = false\n; Interval as a duration between each synchronization (default every 24h)\nSCHEDULE = @every 24h\n; Create new users, update existing user data and disable users that are not in external source anymore (default)\n;   or only create new users if UPDATE_EXISTING is set to false\nUPDATE_EXISTING = true\n\n; Update migrated repositories' issues and comments' posterid, it will always attempt synchronization when the instance starts.\n[cron.update_migration_poster_id]\n; Interval as a duration between each synchronization. (default every 24h)\nSCHEDULE = @every 24h\n\n[git]\n; The path of git executable. If empty, Gitea searches through the PATH environment.\nPATH =\n; Disables highlight of added and removed changes\nDISABLE_DIFF_HIGHLIGHT = false\n; Max number of lines allowed in a single file in diff view\nMAX_GIT_DIFF_LINES = 1000\n; Max number of allowed characters in a line in diff view\nMAX_GIT_DIFF_LINE_CHARACTERS = 5000\n; Max number of files shown in diff view\nMAX_GIT_DIFF_FILES = 100\n; Arguments for command 'git gc', e.g. \"--aggressive --auto\"\n; see more on http://git-scm.com/docs/git-gc/\nGC_ARGS =\n; If use git wire protocol version 2 when git version >= 2.18, default is true, set to false when you always want git wire protocol version 1\nENABLE_AUTO_GIT_WIRE_PROTOCOL = true\n; Respond to pushes to a non-default branch with a URL for creating a Pull Request (if the repository has them enabled)\nPULL_REQUEST_PUSH_MESSAGE = true\n\n; Operation timeout in seconds\n[git.timeout]\nDEFAULT = 360\nMIGRATE = 600\nMIRROR = 300\nCLONE = 300\nPULL = 300\nGC = 60\n\n[mirror]\n; Default interval as a duration between each check\nDEFAULT_INTERVAL = 8h\n; Min interval as a duration must be > 1m\nMIN_INTERVAL = 10m\n\n[api]\n; Enables Swagger. True or false; default is true.\nENABLE_SWAGGER = true\n; Max number of items in a page\nMAX_RESPONSE_ITEMS = 50\n; Default paging number of api\nDEFAULT_PAGING_NUM = 30\n; Default and maximum number of items per page for git trees api\nDEFAULT_GIT_TREES_PER_PAGE = 1000\n; Default size of a blob returned by the blobs API (default is 10MiB)\nDEFAULT_MAX_BLOB_SIZE = 10485760\n\n[oauth2]\n; Enables OAuth2 provider\nENABLE = true\n; Lifetime of an OAuth2 access token in seconds\nACCESS_TOKEN_EXPIRATION_TIME=3600\n; Lifetime of an OAuth2 access token in hours\nREFRESH_TOKEN_EXPIRATION_TIME=730\n; Check if refresh token got already used\nINVALIDATE_REFRESH_TOKENS=false\n; OAuth2 authentication secret for access and refresh tokens, change this to a unique string.\nJWT_SECRET=Bk0yK7Y9g_p56v86KaHqjSbxvNvu3SbKoOdOt2ZcXvU\n; Maximum length of oauth2 token/cookie stored on server\nMAX_TOKEN_LENGTH=32767\n\n[i18n]\nLANGS = en-US,zh-CN,zh-HK,zh-TW,de-DE,fr-FR,nl-NL,lv-LV,ru-RU,uk-UA,ja-JP,es-ES,pt-BR,pl-PL,bg-BG,it-IT,fi-FI,tr-TR,cs-CZ,sr-SP,sv-SE,ko-KR\nNAMES = English,简体中文,繁體中文（香港）,繁體中文（台灣）,Deutsch,français,Nederlands,latviešu,русский,Українська,日本語,español,português do Brasil,polski,български,italiano,suomi,Türkçe,čeština,српски,svenska,한국어\n\n; Used for datetimepicker\n[i18n.datelang]\nen-US = en\nzh-CN = zh\nzh-HK = zh-HK\nzh-TW = zh-TW\nde-DE = de\nfr-FR = fr\nnl-NL = nl\nlv-LV = lv\nru-RU = ru\nuk-UA = uk\nja-JP = ja\nes-ES = es\npt-BR = pt-BR\npl-PL = pl\nbg-BG = bg\nit-IT = it\nfi-FI = fi\ntr-TR = tr\ncs-CZ = cs-CZ\nsr-SP = sr\nsv-SE = sv\nko-KR = ko\n\n[U2F]\n; NOTE: THE DEFAULT VALUES HERE WILL NEED TO BE CHANGED\n; Two Factor authentication with security keys\n; https://developers.yubico.com/U2F/App_ID.html\n;APP_ID = %(PROTOCOL)s://%(DOMAIN)s:%(HTTP_PORT)s/\n; Comma seperated list of truisted facets\n;TRUSTED_FACETS = %(PROTOCOL)s://%(DOMAIN)s:%(HTTP_PORT)s/\n\n; Extension mapping to highlight class\n; e.g. .toml=ini\n[highlight.mapping]\n\n[other]\nSHOW_FOOTER_BRANDING = false\n; Show version information about Gitea and Go in the footer\nSHOW_FOOTER_VERSION = true\n; Show template execution time in the footer\nSHOW_FOOTER_TEMPLATE_LOAD_TIME = true\n\n[markup.sanitizer.1]\n; The following keys can appear once to define a sanitation policy rule.\n; This section can appear multiple times by adding a unique alphanumeric suffix to define multiple rules.\n; e.g., [markup.sanitizer.1] -> [markup.sanitizer.2] -> [markup.sanitizer.TeX]\n;ELEMENT = span\n;ALLOW_ATTR = class\n;REGEXP = ^(info|warning|error)$\n\n[markup.asciidoc]\nENABLED = false\n; List of file extensions that should be rendered by an external command\nFILE_EXTENSIONS = .adoc,.asciidoc\n; External command to render all matching extensions\nRENDER_COMMAND = \"asciidoc --out-file=- -\"\n; Don't pass the file on STDIN, pass the filename as argument instead.\nIS_INPUT_FILE = false\n\n[metrics]\n; Enables metrics endpoint. True or false; default is false.\nENABLED = false\n; If you want to add authorization, specify a token here\nTOKEN = TOKEN = \n\n[task]\n; Task queue type, could be `channel` or `redis`.\nQUEUE_TYPE = channel\n; Task queue length, available only when `QUEUE_TYPE` is `channel`.\nQUEUE_LENGTH = 1000\n; Task queue connection string, available only when `QUEUE_TYPE` is `redis`.\n; If there is a password of redis, use `addrs=127.0.0.1:6379 password=123 db=0`.\nQUEUE_CONN_STR = \"addrs=127.0.0.1:6379 db=0\"\n\n[migrations]\n; Max attempts per http/https request on migrations.\nMAX_ATTEMPTS = 3\n; Backoff time per http/https request retry (seconds)\nRETRY_BACKOFF = 3"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-gitea-http",
      "labels": {
        "app": "release-name-gitea",
        "chart": "gitea-0.2.10",
        "release": "release-name",
        "heritage": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http",
          "port": 3000,
          "targetPort": 3000
        }
      ],
      "selector": {
        "app": "release-name-gitea"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-gitea-ssh",
      "labels": {
        "app": "release-name-gitea",
        "chart": "gitea-0.2.10",
        "release": "release-name",
        "heritage": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "ssh",
          "port": 22,
          "targetPort": "ssh",
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app": "release-name-gitea"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-gitea",
      "labels": {
        "app": "release-name-gitea",
        "chart": "gitea-0.2.10",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "release-name-gitea"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-gitea"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "postgres",
              "image": "postgres:11",
              "imagePullPolicy": "Always",
              "args": null,
              "env": [
                {
                  "name": "POSTGRES_USER",
                  "value": "postgres"
                },
                {
                  "name": "PGUSER",
                  "value": "postgres"
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "gitea"
                },
                {
                  "name": "POSTGRES_INITDB_ARGS",
                  "value": ""
                },
                {
                  "name": "PGDATA",
                  "value": "/var/lib/postgresql/data/pgdata"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-db",
                      "key": "dbPassword"
                    }
                  }
                },
                {
                  "name": "POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "exec pg_isready --host $POD_IP"
                  ]
                },
                "initialDelaySeconds": 120,
                "timeoutSeconds": 5,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "exec pg_isready --host $POD_IP"
                  ]
                },
                "initialDelaySeconds": 5,
                "timeoutSeconds": 3,
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "cpu": 1,
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "200Mi"
                }
              },
              "volumeMounts": [
                {
                  "name": "postgres-data",
                  "mountPath": "/var/lib/postgresql/data/pgdata",
                  "subPath": "postgresql-db"
                }
              ]
            },
            {
              "name": "gitea",
              "image": "gitea/gitea:1.12.4",
              "imagePullPolicy": "Always",
              "env": [
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-db",
                      "key": "dbPassword"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "ssh",
                  "containerPort": 22
                },
                {
                  "name": "http",
                  "containerPort": 3000
                }
              ],
              "livenessProbe": {
                "tcpSocket": {
                  "port": "http"
                },
                "initialDelaySeconds": 200,
                "timeoutSeconds": 1,
                "periodSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 10
              },
              "readinessProbe": {
                "tcpSocket": {
                  "port": "http"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "resources": {
                "limits": {
                  "cpu": 1,
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": "1000m",
                  "memory": "500Mi"
                }
              },
              "volumeMounts": [
                {
                  "name": "gitea-data",
                  "mountPath": "/data"
                },
                {
                  "name": "gitea-config",
                  "mountPath": "/etc/gitea"
                }
              ]
            },
            {
              "name": "memcached",
              "image": "memcached:1.5.19-alpine",
              "imagePullPolicy": "Always",
              "command": [
                "memcached",
                "-m 64",
                "-o",
                "modern",
                "-v"
              ],
              "ports": [
                {
                  "name": "memcache",
                  "containerPort": 11211
                }
              ],
              "livenessProbe": {
                "tcpSocket": {
                  "port": "memcache"
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 5
              },
              "readinessProbe": {
                "tcpSocket": {
                  "port": "memcache"
                },
                "initialDelaySeconds": 5,
                "timeoutSeconds": 1
              },
              "securityContext": {
                "runAsUser": 1000
              },
              "resources": {
                "requests": {
                  "cpu": "50m",
                  "memory": "64Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "initContainers": [
            {
              "name": "init",
              "image": "gitea/gitea:1.12.4",
              "imagePullPolicy": "Always",
              "env": [
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-db",
                      "key": "dbPassword"
                    }
                  }
                },
                {
                  "name": "SCRIPT",
                  "value": "mkdir -p /datatmp/gitea/conf\nif [ ! -f /datatmp/gitea/conf/app.ini ]; then\n  sed \"s/POSTGRES_PASSWORD/${POSTGRES_PASSWORD}/g\" < /etc/gitea/app.ini > /datatmp/gitea/conf/app.ini\nfi"
                }
              ],
              "command": [
                "/bin/sh",
                "-c",
                "mkdir -p /datatmp/gitea/conf\nif [ ! -f /datatmp/gitea/conf/app.ini ]; then\n  sed \"s/POSTGRES_PASSWORD/${POSTGRES_PASSWORD}/g\" < /etc/gitea/app.ini > /datatmp/gitea/conf/app.ini\nfi"
              ],
              "volumeMounts": [
                {
                  "name": "gitea-data",
                  "mountPath": "/datatmp"
                },
                {
                  "name": "gitea-config",
                  "mountPath": "/etc/gitea"
                }
              ]
            },
            {
              "name": "create-subpath",
              "image": "busybox:1.32.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh"
              ],
              "args": [
                "-c",
                "mkdir -p /var/lib/postgresql/data/pgdata/postgresql-db;"
              ],
              "volumeMounts": [
                {
                  "name": "postgres-data",
                  "mountPath": "/var/lib/postgresql/data/pgdata"
                }
              ]
            },
            {
              "name": "change-permission-of-directory",
              "image": "busybox:1.32.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh"
              ],
              "args": [
                "-c",
                "chown -R 999:999 /var/lib/postgresql/data/pgdata"
              ],
              "volumeMounts": [
                {
                  "name": "postgres-data",
                  "mountPath": "/var/lib/postgresql/data/pgdata",
                  "subPath": "postgresql-db"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "gitea-data",
              "emptyDir": {}
            },
            {
              "name": "postgres-data",
              "emptyDir": {}
            },
            {
              "name": "gitea-config",
              "configMap": {
                "name": "release-name-gitea"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-gitea-test-ssh",
      "labels": {
        "app": "release-name-gitea",
        "chart": "gitea-0.2.10",
        "release": "release-name",
        "heritage": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "wget",
          "image": "busybox",
          "command": [
            "nc"
          ],
          "args": [
            "-vz",
            "release-name-gitea-ssh",
            "22"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-gitea-test-http",
      "labels": {
        "app": "release-name-gitea",
        "chart": "gitea-0.2.10",
        "release": "release-name",
        "heritage": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "wget",
          "image": "busybox",
          "command": [
            "wget"
          ],
          "args": [
            "release-name-gitea-http:3000"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]