[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-kafka",
      "namespace": "fox90Zec",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-16.3.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "kafka"
      },
      "annotations": null
    },
    "automountServiceAccountToken": true
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-zookeeper-scripts",
      "namespace": "fox90Zec",
      "labels": {
        "app.kubernetes.io/name": "zookeeper",
        "helm.sh/chart": "zookeeper-9.1.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "zookeeper"
      }
    },
    "data": {
      "init-certs.sh": "#!/bin/bash",
      "setup.sh": "#!/bin/bash\n\n# Execute entrypoint as usual after obtaining ZOO_SERVER_ID\n# check ZOO_SERVER_ID in persistent volume via myid\n# if not present, set based on POD hostname\nif [[ -f \"/bitnami/zookeeper/data/myid\" ]]; then\n    export ZOO_SERVER_ID=\"$(cat /bitnami/zookeeper/data/myid)\"\nelse\n    HOSTNAME=\"$(hostname -s)\"\n    if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then\n        ORD=${BASH_REMATCH[2]}\n        export ZOO_SERVER_ID=\"$((ORD + 1 ))\"\n    else\n        echo \"Failed to get index from hostname $HOST\"\n        exit 1\n    fi\nfi\nexec /entrypoint.sh /run.sh"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-kafka-scripts",
      "namespace": "fox90Zec",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-16.3.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "setup.sh": "#!/bin/bash\n\nID=\"${MY_POD_NAME#\"release-name-kafka-\"}\"\nif [[ -f \"/bitnami/kafka/data/meta.properties\" ]]; then\n    export KAFKA_CFG_BROKER_ID=\"$(grep \"broker.id\" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')\"\nelse\n    export KAFKA_CFG_BROKER_ID=\"$((ID + 0))\"\nfi\n\n# Configure zookeeper client\n\nexec /entrypoint.sh /run.sh"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-graphscope-store",
      "namespace": "fox90Zec",
      "labels": {
        "helm.sh/chart": "graphscope-store-0.14.0",
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.14.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "configmap"
      }
    },
    "data": {
      "my.cnf": "## Common Config\ngraph.name=maxgraph\nrole.name=ROLE\nnode.idx=INDEX\nrpc.port=55555\nrpc.max.bytes.mb=4\nstore.node.count=2\nfrontend.node.count=1\ningestor.node.count=2\ncoordinator.node.count=1\ningestor.queue.count=2\npartition.count=16\nengine.type=maxgraph\ndiscovery.mode=file\n\n## Frontend Config\nfrontend.service.port=55556\n\n## Ingestor Config\ningestor.queue.buffer.size=128\ningestor.sender.buffer.size=128\n\n## Coordinator Config\nsnapshot.increase.interval.ms=1000\noffsets.persist.interval.ms=3000\nfile.meta.store.path=/etc/graphscope-store/my.meta\n\n## Store Config\nstore.data.path=/var/lib/graphscope-store\nstore.write.thread.count=1\n\n## Kafka Config\nkafka.servers=KAFKA_SERVERS\nkafka.topic=graph_test\n\n## Frontend Config\ngraph.store.type=maxgraph\ngremlin.server.port=12312\n\nexecutor.worker.per.process=2\nexecutor.query.thread.count=2\nexecutor.query.manager.thread.count=2\nexecutor.query.store.thread.count=2\nlog4rs.config=LOG4RS_CONFIG\n\ndns.name.prefix.frontend=FRONTEND\ndns.name.prefix.ingestor=INGESTOR\ndns.name.prefix.coordinator=COORDINATOR\ndns.name.prefix.store=STORE\n\nexecutor.graph.port=55556\nexecutor.query.port=55557\nexecutor.engine.port=55558\n\n## GAIA Config\ngaia.rpc.port=60000\ngaia.engine.port=60001\n\n## Extra Config"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-zookeeper-headless",
      "namespace": "fox90Zec",
      "labels": {
        "app.kubernetes.io/name": "zookeeper",
        "helm.sh/chart": "zookeeper-9.1.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "zookeeper"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-client",
          "port": 2181,
          "targetPort": "client"
        },
        {
          "name": "tcp-follower",
          "port": 2888,
          "targetPort": "follower"
        },
        {
          "name": "tcp-election",
          "port": 3888,
          "targetPort": "election"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "zookeeper",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "zookeeper"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-zookeeper",
      "namespace": "fox90Zec",
      "labels": {
        "app.kubernetes.io/name": "zookeeper",
        "helm.sh/chart": "zookeeper-9.1.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "zookeeper"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "sessionAffinity": "None",
      "ports": [
        {
          "name": "tcp-client",
          "port": 2181,
          "targetPort": "client",
          "nodePort": null
        },
        {
          "name": "tcp-follower",
          "port": 2888,
          "targetPort": "follower"
        },
        {
          "name": "tcp-election",
          "port": 3888,
          "targetPort": "election"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "zookeeper",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "zookeeper"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-kafka-headless",
      "namespace": "fox90Zec",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-16.3.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "kafka"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-client",
          "port": 9092,
          "protocol": "TCP",
          "targetPort": "kafka-client"
        },
        {
          "name": "tcp-internal",
          "port": 9093,
          "protocol": "TCP",
          "targetPort": "kafka-internal"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "kafka",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "kafka"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-kafka",
      "namespace": "fox90Zec",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-16.3.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "kafka"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "sessionAffinity": "None",
      "ports": [
        {
          "name": "tcp-client",
          "port": 9092,
          "protocol": "TCP",
          "targetPort": "kafka-client",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "kafka",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "kafka"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-graphscope-store-coordinator-headless",
      "namespace": "fox90Zec",
      "labels": {
        "helm.sh/chart": "graphscope-store-0.14.0",
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.14.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "coordinator"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "port",
          "port": 55555,
          "targetPort": "port"
        },
        {
          "name": "gaia-rpc",
          "port": 60000,
          "targetPort": "gaia-rpc"
        },
        {
          "name": "gaia-engine",
          "port": 60001,
          "targetPort": "gaia-engine"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "coordinator"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-graphscope-store-frontend-headless",
      "namespace": "fox90Zec",
      "labels": {
        "helm.sh/chart": "graphscope-store-0.14.0",
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.14.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "frontend"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "service-port",
          "port": 55556,
          "targetPort": "service-port"
        },
        {
          "name": "port",
          "port": 55555,
          "targetPort": "port"
        },
        {
          "name": "gaia-rpc",
          "port": 60000,
          "targetPort": "gaia-rpc"
        },
        {
          "name": "gaia-engine",
          "port": 60001,
          "targetPort": "gaia-engine"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "frontend"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-graphscope-store-frontend",
      "namespace": "fox90Zec",
      "labels": {
        "helm.sh/chart": "graphscope-store-0.14.0",
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.14.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "frontend"
      },
      "annotations": null
    },
    "spec": {
      "type": "NodePort",
      "ports": [
        {
          "name": "grpc",
          "port": 55556,
          "protocol": "TCP",
          "targetPort": "service-port"
        },
        {
          "name": "gremlin",
          "port": 12312,
          "protocol": "TCP",
          "targetPort": "gremlin"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "frontend"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-graphscope-store-ingestor-headless",
      "namespace": "fox90Zec",
      "labels": {
        "helm.sh/chart": "graphscope-store-0.14.0",
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.14.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "ingestor"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "port",
          "port": 55555,
          "targetPort": "port"
        },
        {
          "name": "gaia-rpc",
          "port": 60000,
          "targetPort": "gaia-rpc"
        },
        {
          "name": "gaia-engine",
          "port": 60001,
          "targetPort": "gaia-engine"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "ingestor"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-graphscope-store-store-headless",
      "namespace": "fox90Zec",
      "labels": {
        "helm.sh/chart": "graphscope-store-0.14.0",
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.14.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "store"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "port",
          "port": 55555,
          "targetPort": "port"
        },
        {
          "name": "graph",
          "port": 55556,
          "targetPort": "graph"
        },
        {
          "name": "query",
          "port": 55557,
          "targetPort": "query"
        },
        {
          "name": "engine",
          "port": 55558,
          "targetPort": "engine"
        },
        {
          "name": "gaia-rpc",
          "port": 60000,
          "targetPort": "gaia-rpc"
        },
        {
          "name": "gaia-engine",
          "port": 60001,
          "targetPort": "gaia-engine"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "store"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-zookeeper",
      "namespace": "fox90Zec",
      "labels": {
        "app.kubernetes.io/name": "zookeeper",
        "helm.sh/chart": "zookeeper-9.1.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "zookeeper",
        "role": "zookeeper"
      }
    },
    "spec": {
      "replicas": 1,
      "podManagementPolicy": "Parallel",
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "zookeeper",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "zookeeper"
        }
      },
      "serviceName": "release-name-zookeeper-headless",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": null,
          "labels": {
            "app.kubernetes.io/name": "zookeeper",
            "helm.sh/chart": "zookeeper-9.1.5",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "zookeeper"
          }
        },
        "spec": {
          "serviceAccountName": "default",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "zookeeper",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "zookeeper"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "initContainers": null,
          "containers": [
            {
              "name": "zookeeper",
              "image": "docker.io/bitnami/zookeeper:3.8.0-debian-10-r63",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 11183,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/scripts/setup.sh"
              ],
              "resources": {
                "limits": {},
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "ZOO_DATA_LOG_DIR",
                  "value": ""
                },
                {
                  "name": "ZOO_PORT_NUMBER",
                  "value": "2181"
                },
                {
                  "name": "ZOO_TICK_TIME",
                  "value": "2000"
                },
                {
                  "name": "ZOO_INIT_LIMIT",
                  "value": "10"
                },
                {
                  "name": "ZOO_SYNC_LIMIT",
                  "value": "5"
                },
                {
                  "name": "ZOO_PRE_ALLOC_SIZE",
                  "value": "65536"
                },
                {
                  "name": "ZOO_SNAPCOUNT",
                  "value": "100000"
                },
                {
                  "name": "ZOO_MAX_CLIENT_CNXNS",
                  "value": "60"
                },
                {
                  "name": "ZOO_4LW_COMMANDS_WHITELIST",
                  "value": "srvr, mntr, ruok"
                },
                {
                  "name": "ZOO_LISTEN_ALLIPS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "ZOO_AUTOPURGE_INTERVAL",
                  "value": "0"
                },
                {
                  "name": "ZOO_AUTOPURGE_RETAIN_COUNT",
                  "value": "3"
                },
                {
                  "name": "ZOO_MAX_SESSION_TIMEOUT",
                  "value": "40000"
                },
                {
                  "name": "ZOO_SERVERS",
                  "value": "release-name-zookeeper-0.release-name-zookeeper-headless.default.svc.cluster.local:2888:3888::1"
                },
                {
                  "name": "ZOO_ENABLE_AUTH",
                  "value": "no"
                },
                {
                  "name": "ZOO_HEAP_SIZE",
                  "value": "1024"
                },
                {
                  "name": "ZOO_LOG_LEVEL",
                  "value": "ERROR"
                },
                {
                  "name": "ALLOW_ANONYMOUS_LOGIN",
                  "value": "yes"
                },
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "client",
                  "containerPort": 2181
                },
                {
                  "name": "follower",
                  "containerPort": 2888
                },
                {
                  "name": "election",
                  "containerPort": 3888
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-c",
                    "echo \"ruok\" | timeout 2 nc -w 2 localhost 2181 | grep imok"
                  ]
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-c",
                    "echo \"ruok\" | timeout 2 nc -w 2 localhost 2181 | grep imok"
                  ]
                }
              },
              "volumeMounts": [
                {
                  "name": "scripts",
                  "mountPath": "/scripts/setup.sh",
                  "subPath": "setup.sh"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/zookeeper"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "scripts",
              "configMap": {
                "name": "release-name-zookeeper-scripts",
                "defaultMode": 493
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "annotations": null
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-kafka",
      "namespace": "fox90Zec",
      "labels": {
        "app.kubernetes.io/name": "kafka",
        "helm.sh/chart": "kafka-16.3.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "kafka"
      }
    },
    "spec": {
      "podManagementPolicy": "Parallel",
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "kafka",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "kafka"
        }
      },
      "serviceName": "release-name-kafka-headless",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kafka",
            "helm.sh/chart": "kafka-16.3.2",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "kafka"
          },
          "annotations": null
        },
        "spec": {
          "hostNetwork": false,
          "hostIPC": false,
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "kafka",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "kafka"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "serviceAccountName": "release-name-kafka",
          "containers": [
            {
              "name": "kafka",
              "image": "docker.io/bitnami/kafka:3.1.1-debian-10-r6",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 10871,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/scripts/setup.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MY_POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "KAFKA_CFG_ZOOKEEPER_CONNECT",
                  "value": "release-name-zookeeper"
                },
                {
                  "name": "KAFKA_INTER_BROKER_LISTENER_NAME",
                  "value": "INTERNAL"
                },
                {
                  "name": "KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP",
                  "value": "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
                },
                {
                  "name": "KAFKA_CFG_LISTENERS",
                  "value": "INTERNAL://:9093,CLIENT://:9092"
                },
                {
                  "name": "KAFKA_CFG_ADVERTISED_LISTENERS",
                  "value": "INTERNAL://$(MY_POD_NAME).release-name-kafka-headless.default.svc.cluster.local:9093,CLIENT://$(MY_POD_NAME).release-name-kafka-headless.default.svc.cluster.local:9092"
                },
                {
                  "name": "ALLOW_PLAINTEXT_LISTENER",
                  "value": "yes"
                },
                {
                  "name": "KAFKA_ZOOKEEPER_PROTOCOL",
                  "value": "PLAINTEXT"
                },
                {
                  "name": "KAFKA_VOLUME_DIR",
                  "value": "/bitnami/kafka"
                },
                {
                  "name": "KAFKA_LOG_DIR",
                  "value": "/opt/bitnami/kafka/logs"
                },
                {
                  "name": "KAFKA_CFG_DELETE_TOPIC_ENABLE",
                  "value": "false"
                },
                {
                  "name": "KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE",
                  "value": "true"
                },
                {
                  "name": "KAFKA_HEAP_OPTS",
                  "value": "-Xmx1024m -Xms1024m"
                },
                {
                  "name": "KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES",
                  "value": "10000"
                },
                {
                  "name": "KAFKA_CFG_LOG_FLUSH_INTERVAL_MS",
                  "value": "1000"
                },
                {
                  "name": "KAFKA_CFG_LOG_RETENTION_BYTES",
                  "value": "1073741824"
                },
                {
                  "name": "KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS",
                  "value": "300000"
                },
                {
                  "name": "KAFKA_CFG_LOG_RETENTION_HOURS",
                  "value": "168"
                },
                {
                  "name": "KAFKA_CFG_MESSAGE_MAX_BYTES",
                  "value": "1000012"
                },
                {
                  "name": "KAFKA_CFG_LOG_SEGMENT_BYTES",
                  "value": "1073741824"
                },
                {
                  "name": "KAFKA_CFG_LOG_DIRS",
                  "value": "/bitnami/kafka/data"
                },
                {
                  "name": "KAFKA_CFG_DEFAULT_REPLICATION_FACTOR",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_NUM_IO_THREADS",
                  "value": "8"
                },
                {
                  "name": "KAFKA_CFG_NUM_NETWORK_THREADS",
                  "value": "3"
                },
                {
                  "name": "KAFKA_CFG_NUM_PARTITIONS",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR",
                  "value": "1"
                },
                {
                  "name": "KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES",
                  "value": "102400"
                },
                {
                  "name": "KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES",
                  "value": "104857600"
                },
                {
                  "name": "KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES",
                  "value": "102400"
                },
                {
                  "name": "KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS",
                  "value": "6000"
                },
                {
                  "name": "KAFKA_CFG_AUTHORIZER_CLASS_NAME",
                  "value": ""
                },
                {
                  "name": "KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND",
                  "value": "true"
                },
                {
                  "name": "KAFKA_CFG_SUPER_USERS",
                  "value": "User:admin"
                }
              ],
              "ports": [
                {
                  "name": "kafka-client",
                  "containerPort": 9092
                },
                {
                  "name": "kafka-internal",
                  "containerPort": 9093
                }
              ],
              "livenessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "tcpSocket": {
                  "port": "kafka-client"
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "tcpSocket": {
                  "port": "kafka-client"
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/bitnami/kafka"
                },
                {
                  "name": "logs",
                  "mountPath": "/opt/bitnami/kafka/logs"
                },
                {
                  "name": "scripts",
                  "mountPath": "/scripts/setup.sh",
                  "subPath": "setup.sh"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "scripts",
              "configMap": {
                "name": "release-name-kafka-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "logs",
              "emptyDir": {}
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-graphscope-store-coordinator",
      "namespace": "fox90Zec",
      "labels": {
        "helm.sh/chart": "graphscope-store-0.14.0",
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.14.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "coordinator"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "graphscope-store",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "coordinator"
        }
      },
      "serviceName": "release-name-graphscope-store-coordinator-headless",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configuration": "84c410848e8aca04543c21f34151651f7671cbd51ffe0a951e73c684d1d5dbf6"
          },
          "labels": {
            "helm.sh/chart": "graphscope-store-0.14.0",
            "app.kubernetes.io/name": "graphscope-store",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/version": "0.14.0",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "coordinator"
          }
        },
        "spec": {
          "serviceAccountName": "default",
          "initContainers": null,
          "containers": [
            {
              "name": "coordinator",
              "image": "registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-store:0.14.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/ready_probe.sh\n\n[[ `hostname` =~ -([0-9]+)$ ]] || exit 1\nordinal=${BASH_REMATCH[1]}\nsudo sed -e \"s/ROLE/$(ROLE)/g\" \\\n         -e \"s/INDEX/${ordinal}/g\" \\\n         -e \"s/KAFKA_SERVERS/$(KAFKA_SERVERS)/g\" \\\n         -e \"s/FRONTEND/$(DNS_NAME_PREFIX_FRONTEND)/g\" \\\n         -e \"s/INGESTOR/$(DNS_NAME_PREFIX_INGESTOR)/g\" \\\n         -e \"s/COORDINATOR/$(DNS_NAME_PREFIX_COORDINATOR)/g\" \\\n         -e \"s/STORE/$(DNS_NAME_PREFIX_STORE)/g\" \\\n         -e \"s@LOG4RS_CONFIG@${GRAPHSCOPE_HOME}/maxgraph/conf/log4rs.yml@g\" \\\n/etc/graphscope-store/my.cnf.tpl | sudo tee /etc/graphscope-store/my.cnf\n\nLOG_NAME=graphscope-store MAXGRAPH_CONF_FILE=/etc/graphscope-store/my.cnf \\\n  ${GRAPHSCOPE_HOME}/maxgraph/bin/store_ctl.sh maxgraph coordinator\n"
              ],
              "env": [
                {
                  "name": "DEBUG",
                  "value": "false"
                },
                {
                  "name": "GRAPH_NAME",
                  "value": "maxgraph"
                },
                {
                  "name": "MAXGRAPH_JAVA_OPTS",
                  "value": ""
                },
                {
                  "name": "ROLE",
                  "value": "coordinator"
                },
                {
                  "name": "FRONTEND_COUNT",
                  "value": "1"
                },
                {
                  "name": "INGESTOR_COUNT",
                  "value": "2"
                },
                {
                  "name": "COORDINATOR_COUNT",
                  "value": "1"
                },
                {
                  "name": "STORE_COUNT",
                  "value": "2"
                },
                {
                  "name": "DNS_NAME_PREFIX_FRONTEND",
                  "value": "release-name-graphscope-store-frontend-{}.release-name-graphscope-store-frontend-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_INGESTOR",
                  "value": "release-name-graphscope-store-ingestor-{}.release-name-graphscope-store-ingestor-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_COORDINATOR",
                  "value": "release-name-graphscope-store-coordinator-{}.release-name-graphscope-store-coordinator-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_STORE",
                  "value": "release-name-graphscope-store-store-{}.release-name-graphscope-store-store-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_SERVICE_KAFKA",
                  "value": "release-name-kafka-headless.default.svc.cluster.local"
                },
                {
                  "name": "KAFKA_SERVERS",
                  "value": "release-name-kafka-0.release-name-kafka-headless.default.svc.cluster.local:9092"
                }
              ],
              "ports": [
                {
                  "name": "port",
                  "containerPort": 55555
                },
                {
                  "name": "gaia-rpc",
                  "containerPort": 60000
                },
                {
                  "name": "gaia-engine",
                  "containerPort": 60001
                }
              ],
              "volumeMounts": [
                {
                  "name": "meta",
                  "mountPath": "/etc/graphscope-store/my.meta"
                },
                {
                  "name": "config",
                  "mountPath": "/etc/graphscope-store/my.cnf.tpl",
                  "subPath": "my.cnf"
                }
              ]
            }
          ],
          "securityContext": {
            "runAsUser": 1001,
            "runAsGroup": 1001,
            "fsGroup": 1001
          },
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-graphscope-store"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "meta",
            "labels": {
              "app.kubernetes.io/name": "graphscope-store",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/component": "coordinator"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "100Mi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-graphscope-store-frontend",
      "namespace": "fox90Zec",
      "labels": {
        "helm.sh/chart": "graphscope-store-0.14.0",
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.14.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "frontend"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "graphscope-store",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "frontend"
        }
      },
      "serviceName": "release-name-graphscope-store-frontend-headless",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configuration": "84c410848e8aca04543c21f34151651f7671cbd51ffe0a951e73c684d1d5dbf6"
          },
          "labels": {
            "helm.sh/chart": "graphscope-store-0.14.0",
            "app.kubernetes.io/name": "graphscope-store",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/version": "0.14.0",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "frontend"
          }
        },
        "spec": {
          "serviceAccountName": "default",
          "initContainers": null,
          "containers": [
            {
              "name": "frontend",
              "image": "registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-store:0.14.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/ready_probe.sh\n\n[[ `hostname` =~ -([0-9]+)$ ]] || exit 1\nordinal=${BASH_REMATCH[1]}\nsudo sed -e \"s/GRAPH_NAME/$(GRAPH_NAME)/g\" \\\n         -e \"s/ROLE/$(ROLE)/g\" \\\n         -e \"s/INDEX/${ordinal}/g\" \\\n         -e \"s/KAFKA_SERVERS/$(KAFKA_SERVERS)/g\" \\\n         -e \"s/FRONTEND/$(DNS_NAME_PREFIX_FRONTEND)/g\" \\\n         -e \"s/INGESTOR/$(DNS_NAME_PREFIX_INGESTOR)/g\" \\\n         -e \"s/COORDINATOR/$(DNS_NAME_PREFIX_COORDINATOR)/g\" \\\n         -e \"s/STORE/$(DNS_NAME_PREFIX_STORE)/g\" \\\n         -e \"s@LOG4RS_CONFIG@${GRAPHSCOPE_HOME}/maxgraph/conf/log4rs.yml@g\" \\\n/etc/graphscope-store/my.cnf.tpl | sudo tee /etc/graphscope-store/my.cnf\n\nLOG_NAME=graphscope-store MAXGRAPH_CONF_FILE=/etc/graphscope-store/my.cnf \\\n  ${GRAPHSCOPE_HOME}/maxgraph/bin/store_ctl.sh maxgraph $(EXECUTOR)\n"
              ],
              "env": [
                {
                  "name": "DEBUG",
                  "value": "false"
                },
                {
                  "name": "GRAPH_NAME",
                  "value": "maxgraph"
                },
                {
                  "name": "MAXGRAPH_JAVA_OPTS",
                  "value": ""
                },
                {
                  "name": "ROLE",
                  "value": "frontend"
                },
                {
                  "name": "EXECUTOR",
                  "value": "frontend"
                },
                {
                  "name": "FRONTEND_COUNT",
                  "value": "1"
                },
                {
                  "name": "INGESTOR_COUNT",
                  "value": "2"
                },
                {
                  "name": "COORDINATOR_COUNT",
                  "value": "1"
                },
                {
                  "name": "STORE_COUNT",
                  "value": "2"
                },
                {
                  "name": "DNS_NAME_PREFIX_FRONTEND",
                  "value": "release-name-graphscope-store-frontend-{}.release-name-graphscope-store-frontend-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_INGESTOR",
                  "value": "release-name-graphscope-store-ingestor-{}.release-name-graphscope-store-ingestor-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_COORDINATOR",
                  "value": "release-name-graphscope-store-coordinator-{}.release-name-graphscope-store-coordinator-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_STORE",
                  "value": "release-name-graphscope-store-store-{}.release-name-graphscope-store-store-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_SERVICE_KAFKA",
                  "value": "release-name-kafka-headless.default.svc.cluster.local"
                },
                {
                  "name": "KAFKA_SERVERS",
                  "value": "release-name-kafka-0.release-name-kafka-headless.default.svc.cluster.local:9092"
                }
              ],
              "ports": [
                {
                  "name": "port",
                  "containerPort": 55555
                },
                {
                  "name": "service-port",
                  "containerPort": 55556
                },
                {
                  "name": "gremlin",
                  "containerPort": 12312
                },
                {
                  "name": "gaia-rpc",
                  "containerPort": 60000
                },
                {
                  "name": "gaia-engine",
                  "containerPort": 60001
                }
              ],
              "readinessProbe": {
                "tcpSocket": {
                  "port": "port"
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 1,
                "failureThreshold": 10,
                "periodSeconds": 30,
                "successThreshold": 1
              },
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/etc/graphscope-store/my.cnf.tpl",
                  "subPath": "my.cnf"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-graphscope-store"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-graphscope-store-ingestor",
      "namespace": "fox90Zec",
      "labels": {
        "helm.sh/chart": "graphscope-store-0.14.0",
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.14.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "ingestor"
      }
    },
    "spec": {
      "replicas": 2,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "graphscope-store",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "ingestor"
        }
      },
      "serviceName": "release-name-graphscope-store-ingestor-headless",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configuration": "84c410848e8aca04543c21f34151651f7671cbd51ffe0a951e73c684d1d5dbf6"
          },
          "labels": {
            "helm.sh/chart": "graphscope-store-0.14.0",
            "app.kubernetes.io/name": "graphscope-store",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/version": "0.14.0",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "ingestor"
          }
        },
        "spec": {
          "serviceAccountName": "default",
          "initContainers": null,
          "containers": [
            {
              "name": "ingestor",
              "image": "registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-store:0.14.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/ready_probe.sh\n\n[[ `hostname` =~ -([0-9]+)$ ]] || exit 1\nordinal=${BASH_REMATCH[1]}\nsudo sed -e \"s/GRAPH_NAME/$(GRAPH_NAME)/g\" \\\n         -e \"s/ROLE/$(ROLE)/g\" \\\n         -e \"s/INDEX/${ordinal}/g\" \\\n         -e \"s/KAFKA_SERVERS/$(KAFKA_SERVERS)/g\" \\\n         -e \"s/FRONTEND/$(DNS_NAME_PREFIX_FRONTEND)/g\" \\\n         -e \"s/INGESTOR/$(DNS_NAME_PREFIX_INGESTOR)/g\" \\\n         -e \"s/COORDINATOR/$(DNS_NAME_PREFIX_COORDINATOR)/g\" \\\n         -e \"s/STORE/$(DNS_NAME_PREFIX_STORE)/g\" \\\n         -e \"s@LOG4RS_CONFIG@${GRAPHSCOPE_HOME}/maxgraph/conf/log4rs.yml@g\" \\\n/etc/graphscope-store/my.cnf.tpl | sudo tee /etc/graphscope-store/my.cnf\n\nLOG_NAME=graphscope-store MAXGRAPH_CONF_FILE=/etc/graphscope-store/my.cnf \\\n  ${GRAPHSCOPE_HOME}/maxgraph/bin/store_ctl.sh maxgraph ingestor\n"
              ],
              "env": [
                {
                  "name": "DEBUG",
                  "value": "false"
                },
                {
                  "name": "GRAPH_NAME",
                  "value": "maxgraph"
                },
                {
                  "name": "MAXGRAPH_JAVA_OPTS",
                  "value": ""
                },
                {
                  "name": "ROLE",
                  "value": "ingestor"
                },
                {
                  "name": "FRONTEND_COUNT",
                  "value": "1"
                },
                {
                  "name": "INGESTOR_COUNT",
                  "value": "2"
                },
                {
                  "name": "COORDINATOR_COUNT",
                  "value": "1"
                },
                {
                  "name": "STORE_COUNT",
                  "value": "2"
                },
                {
                  "name": "DNS_NAME_PREFIX_FRONTEND",
                  "value": "release-name-graphscope-store-frontend-{}.release-name-graphscope-store-frontend-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_INGESTOR",
                  "value": "release-name-graphscope-store-ingestor-{}.release-name-graphscope-store-ingestor-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_COORDINATOR",
                  "value": "release-name-graphscope-store-coordinator-{}.release-name-graphscope-store-coordinator-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_STORE",
                  "value": "release-name-graphscope-store-store-{}.release-name-graphscope-store-store-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_SERVICE_KAFKA",
                  "value": "release-name-kafka-headless.default.svc.cluster.local"
                },
                {
                  "name": "KAFKA_SERVERS",
                  "value": "release-name-kafka-0.release-name-kafka-headless.default.svc.cluster.local:9092"
                }
              ],
              "ports": [
                {
                  "name": "port",
                  "containerPort": 55555
                },
                {
                  "name": "gaia-rpc",
                  "containerPort": 60000
                },
                {
                  "name": "gaia-engine",
                  "containerPort": 60001
                }
              ],
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/etc/graphscope-store/my.cnf.tpl",
                  "subPath": "my.cnf"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-graphscope-store"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-graphscope-store-store",
      "namespace": "fox90Zec",
      "labels": {
        "helm.sh/chart": "graphscope-store-0.14.0",
        "app.kubernetes.io/name": "graphscope-store",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.14.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "store"
      }
    },
    "spec": {
      "replicas": 2,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "graphscope-store",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "store"
        }
      },
      "serviceName": "release-name-graphscope-store-store-headless",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configuration": "84c410848e8aca04543c21f34151651f7671cbd51ffe0a951e73c684d1d5dbf6"
          },
          "labels": {
            "helm.sh/chart": "graphscope-store-0.14.0",
            "app.kubernetes.io/name": "graphscope-store",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/version": "0.14.0",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "store"
          }
        },
        "spec": {
          "serviceAccountName": "default",
          "initContainers": null,
          "containers": [
            {
              "name": "store",
              "image": "registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-store:0.14.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/ready_probe.sh\n\n[[ `hostname` =~ -([0-9]+)$ ]] || exit 1\nordinal=${BASH_REMATCH[1]}\nsudo sed -e \"s/GRAPH_NAME/$(GRAPH_NAME)/g\" \\\n         -e \"s/ROLE/$(ROLE)/g\" \\\n         -e \"s/INDEX/${ordinal}/g\" \\\n         -e \"s/KAFKA_SERVERS/$(KAFKA_SERVERS)/g\" \\\n         -e \"s/FRONTEND/$(DNS_NAME_PREFIX_FRONTEND)/g\" \\\n         -e \"s/INGESTOR/$(DNS_NAME_PREFIX_INGESTOR)/g\" \\\n         -e \"s/COORDINATOR/$(DNS_NAME_PREFIX_COORDINATOR)/g\" \\\n         -e \"s/STORE/$(DNS_NAME_PREFIX_STORE)/g\" \\\n         -e \"s@LOG4RS_CONFIG@${GRAPHSCOPE_HOME}/maxgraph/conf/log4rs.yml@g\" \\\n/etc/graphscope-store/my.cnf.tpl | sudo tee /etc/graphscope-store/my.cnf\n\nLOG_NAME=graphscope-store MAXGRAPH_CONF_FILE=/etc/graphscope-store/my.cnf \\\n  ${GRAPHSCOPE_HOME}/maxgraph/bin/store_ctl.sh maxgraph $(EXECUTOR)\n"
              ],
              "env": [
                {
                  "name": "DEBUG",
                  "value": "false"
                },
                {
                  "name": "GRAPH_NAME",
                  "value": "maxgraph"
                },
                {
                  "name": "MAXGRAPH_JAVA_OPTS",
                  "value": ""
                },
                {
                  "name": "EXECUTOR",
                  "value": "store"
                },
                {
                  "name": "ROLE",
                  "value": "store"
                },
                {
                  "name": "FRONTEND_COUNT",
                  "value": "1"
                },
                {
                  "name": "INGESTOR_COUNT",
                  "value": "2"
                },
                {
                  "name": "COORDINATOR_COUNT",
                  "value": "1"
                },
                {
                  "name": "STORE_COUNT",
                  "value": "2"
                },
                {
                  "name": "DNS_NAME_PREFIX_FRONTEND",
                  "value": "release-name-graphscope-store-frontend-{}.release-name-graphscope-store-frontend-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_INGESTOR",
                  "value": "release-name-graphscope-store-ingestor-{}.release-name-graphscope-store-ingestor-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_COORDINATOR",
                  "value": "release-name-graphscope-store-coordinator-{}.release-name-graphscope-store-coordinator-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_PREFIX_STORE",
                  "value": "release-name-graphscope-store-store-{}.release-name-graphscope-store-store-headless.default.svc.cluster.local"
                },
                {
                  "name": "DNS_NAME_SERVICE_KAFKA",
                  "value": "release-name-kafka-headless.default.svc.cluster.local"
                },
                {
                  "name": "KAFKA_SERVERS",
                  "value": "release-name-kafka-0.release-name-kafka-headless.default.svc.cluster.local:9092"
                }
              ],
              "ports": [
                {
                  "name": "port",
                  "containerPort": 55555
                },
                {
                  "name": "graph",
                  "containerPort": 55556
                },
                {
                  "name": "query",
                  "containerPort": 55557
                },
                {
                  "name": "engine",
                  "containerPort": 55558
                },
                {
                  "name": "gaia-rpc",
                  "containerPort": 60000
                },
                {
                  "name": "gaia-engine",
                  "containerPort": 60001
                }
              ],
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/var/lib/graphscope-store"
                },
                {
                  "name": "config",
                  "mountPath": "/etc/graphscope-store/my.cnf.tpl",
                  "subPath": "my.cnf"
                }
              ]
            }
          ],
          "securityContext": {
            "runAsUser": 1001,
            "runAsGroup": 1001,
            "fsGroup": 1001
          },
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-graphscope-store"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "labels": {
              "app.kubernetes.io/name": "graphscope-store",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/component": "store"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-graphscope-store-frontend-test-grpc-service",
      "annotations": {
        "helm.sh/hook": "test"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "python",
          "image": "python:3.9.9-alpine3.14",
          "env": [
            {
              "name": "frontend",
              "value": "release-name-graphscope-store-frontend.default"
            }
          ],
          "command": [
            "/bin/sh",
            "-c",
            "while sleep 3 && ! python3 -c 'import socket; import os; socket.create_connection((os.getenv(\"frontend\"), 55556))'; do echo -n .; done"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-graphscope-store-frontend-test-gremlin-service",
      "annotations": {
        "helm.sh/hook": "test"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "python",
          "image": "python:3.9.9-alpine3.14",
          "env": [
            {
              "name": "frontend",
              "value": "release-name-graphscope-store-frontend.default"
            }
          ],
          "command": [
            "/bin/sh",
            "-c",
            "while sleep 3 && ! python3 -c 'import socket; import os; socket.create_connection((os.getenv(\"frontend\"), 12312))'; do echo -n .; done"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]