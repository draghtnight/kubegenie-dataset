[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "hXkNLo8R0ku",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.28.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "automountServiceAccountToken": true,
    "secrets": [
      {
        "name": "release-name-rabbitmq"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-geoservercloud",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "hXkNLo8R0ku"
    },
    "type": "Opaque",
    "data": {
      "postgresql-postgres-password": "TWFWcTdoaHNubg==",
      "postgresql-password": "cGFzc3dvcmQ="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql-crt",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "kubernetes.io/tls",
    "data": {
      "ca.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIRENDQWdTZ0F3SUJBZ0lSQUk4UnlRK3RwbFN3WnNXYng4N0N0Q013RFFZSktvWklodmNOQVFFTEJRQXcKR0RFV01CUUdBMVVFQXhNTmNHOXpkR2R5WlhOeGJDMWpZVEFlRncweU1qQTJNVEl4TURNNE1qVmFGdzB5TXpBMgpNVEl4TURNNE1qVmFNQmd4RmpBVUJnTlZCQU1URFhCdmMzUm5jbVZ6Y1d3dFkyRXdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRGNCR3VPU3Y0OEVaQnoxaXZpdlVYRXlJenhrVE5xMUpheDRpWnMKZTE4dG9lWXdobTNZK29UVmFFYTN1SHZncWZDaTlnOTVqUDh6cFdkRmJYOXUzejVPLzZiN1FpYnVuem5FemtuVgp5TkkxSWdxL0NDZWlqWHEwNUh2RXZKZ1YzUzNTcVRQUnkxcERrTWhSS2diWkVCblVLaktJZUVXRjQxMkZ0K01NCm1QNzhERUdBSnd4T1lndStuYW1wYzA2WVNkTFNpcCtlRlJ0dWJtVXpNUElxbzh2VlFGQTVnbGhaUmNLdWVKWTIKRFZKZnpiY3dDSFpzbktwcFl5eWI3MmMzU3lzNVVXU1RnUHMxcWxnN2lxMTRBOWozVWJHUlFLeWt2a1pKYlVIagpQN3NpZWwxVjduYlh1N2dGc3VHaXVocUYvMElFamdud01sK1QvdGVQRmhtR0RYYmpBZ01CQUFHallUQmZNQTRHCkExVWREd0VCL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVSWFVPZ3RCVU1VYWJ6UWIxOEtuNnJtajVBaEF3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLcERXQ0VCdHFlaWdhek1mZytDa2dsS3NHRHJ2TklhMnBYMnZrRVp6UDdRCnhTM3BMTUcyMU05WlVSZ3d6cjBXU0pnNjF4OE5lUk9QZTRHZjh0YWRxQm9QbzdycCtKTE9uMmlTNjdqRXRYbnYKak13RlBkWjdHQlpOTStQNWd4RzBRTjJ0MVhBSEpZdUpsT01ja2VsVlMvb1d3RElGTTNDcTZBZWhKei9UWXgzcQo3YUNscHZJdUsyZG9YM3Q0TVdHaGgxd3VacmptVDkwVUtQMFl5MG1aU05ic3l2aHB3SjhsWGxON25GWGRZcktDCjM1UHRVOVQwcFVWeGdMenZzanZIcGozTHp2eWorcGJ1a29KWFFnRHNSMU9ZZFlPNmFCWVVBSmk0bytVUnV3TW8KZ2JLNEx2STBtRGRJclk4RlJ4Nk9OWHJqdDZXdUFOaDFpOUlDV0p5ZVVKOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVKakNDQXc2Z0F3SUJBZ0lSQUpxbWZQZG93Snh6QTJ1RFhpc1E2NlF3RFFZSktvWklodmNOQVFFTEJRQXcKR0RFV01CUUdBMVVFQXhNTmNHOXpkR2R5WlhOeGJDMWpZVEFlRncweU1qQTJNVEl4TURNNE1qZGFGdzB5TXpBMgpNVEl4TURNNE1qZGFNQ0l4SURBZUJnTlZCQU1URjNKbGJHVmhjMlV0Ym1GdFpTMXdiM04wWjNKbGMzRnNNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEyVkFrbFRFb1k4eUNjMVVzUnprYW54OVYKYUlram42NWVwdG9RZWpoK3hrWWx4T01WdVVHZ04yVmQ4MmdDdzdJSmRJcUUvTFhYeVd5cUJxRlBrQzluQ01XagpRcUh3d3Y4dFkwZnZmS1BXa21DbndPdmZxZ2hNRlowYUNwSml1MVdBZFNYZFdZRzJCYlpuMGZZV1YyU0d2SGNKCm13allpVDFrOVFFbStpempHVUhxNzcxSWorWmpUMFQ0L2ZwQk5BaGZkWE1iUXhoOVdxWXJ4cTdTTGxhd0NHVUwKdEFzcXZqSkhYcmI2Tm1MVVVQVzFHVkNSdDZ0M1M2dXZMZkMzbHlJR01obTlDekJJbzdDRTlWdzRvSUNuekdzbQpVMnFvNDcvZlBpUmlmYU40R2E0KzJkZWNQSm1paCtVY2VuOFI5OEFCM3ZMVlRscXJmckJ4SzNOZ01HNkFlUUlECkFRQUJvNElCWHpDQ0FWc3dEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUIKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkVWMURvTFFWREZHbTgwRwo5ZkNwK3E1bytRSVFNSUg2QmdOVkhSRUVnZkl3Z2UrQ01Db3VjbVZzWldGelpTMXVZVzFsTFhCdmMzUm5jbVZ6CmNXd3VaR1ZtWVhWc2RDNXpkbU11SlNGektEeHVhV3crS1lJdWNtVnNaV0Z6WlMxdVlXMWxMWEJ2YzNSbmNtVnoKY1d3dVpHVm1ZWFZzZEM1emRtTXVKU0Z6S0R4dWFXdytLWUk1S2k1eVpXeGxZWE5sTFc1aGJXVXRjRzl6ZEdkeQpaWE54YkMxb1pXRmtiR1Z6Y3k1a1pXWmhkV3gwTG5OMll5NGxJWE1vUEc1cGJENHBnamR5Wld4bFlYTmxMVzVoCmJXVXRjRzl6ZEdkeVpYTnhiQzFvWldGa2JHVnpjeTVrWldaaGRXeDBMbk4yWXk0bElYTW9QRzVwYkQ0cGdoZHkKWld4bFlYTmxMVzVoYldVdGNHOXpkR2R5WlhOeGJEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFFSkpveWZTRwpHQTRaZ1JUTGx5ZGszemh3VnI3NWo5dkxYRXoyM2FpcUtwQ2YvaUsrSEdWMXR2bnN6NUQ1OWtFc21NN1gzTXJrCk4zTGkxZXVMeVEzdC9PR3ZUOGFlekt3M3NBTEJWRFU2Rko0cjZkWHJFN0hIVFBLM3ZPQjRUeTdicllPLzVCeVQKQzZqeHVqZzcwNjVYd1ppcXVGWi96U3lnR1hld2xWZjNpNElqdDBSRkJEUUdtaWZ1L01rQW9BRzZLb0ZCSXlINAp1MldVSlRwVnB0YVZvY1ZSNmh2dWUzNzVwazROUnlOVVZxUktHTlQrOHdqYlIyVzJ1cW1RakVXTjZTVzhZTENlCnZNQ21keXNPUTJEdmVvempya0QwZTU5UmRyL1NWeFVmejdNeWtTSjN3UmsxODZORWFRS3FxcFBNUzRvVFdDcnQKcnE1V3pCdFVoVlJMN2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMlZBa2xURW9ZOHlDYzFVc1J6a2FueDlWYUlram42NWVwdG9RZWpoK3hrWWx4T01WCnVVR2dOMlZkODJnQ3c3SUpkSXFFL0xYWHlXeXFCcUZQa0M5bkNNV2pRcUh3d3Y4dFkwZnZmS1BXa21DbndPdmYKcWdoTUZaMGFDcEppdTFXQWRTWGRXWUcyQmJabjBmWVdWMlNHdkhjSm13allpVDFrOVFFbStpempHVUhxNzcxSQpqK1pqVDBUNC9mcEJOQWhmZFhNYlF4aDlXcVlyeHE3U0xsYXdDR1VMdEFzcXZqSkhYcmI2Tm1MVVVQVzFHVkNSCnQ2dDNTNnV2TGZDM2x5SUdNaG05Q3pCSW83Q0U5Vnc0b0lDbnpHc21VMnFvNDcvZlBpUmlmYU40R2E0KzJkZWMKUEptaWgrVWNlbjhSOThBQjN2TFZUbHFyZnJCeEszTmdNRzZBZVFJREFRQUJBb0lCQVFDTkpOWjk2QzI1bEN6dQpSOVc0ZE1ocnJXaEZ1enplQzkwQ05nUVp2ZlBwUjhwa05MSDVYengyZm1vbEc5c2Z5OVVFVXF2Smp6b1dZM09UClZ0WmNhYzFjRHpIWXAyRys1UXBQdjNzMjB4c2NlNWE1WVBvbWI3a3JHSnkvWFJDdlovdEZHMURIUDg0L3E1ZUcKOFhUVlVqK0l6Uy81K0NiY0RIb3ovNG1YVit3d2pFTkhwVEh6Q0plWVBtMnhTV3RzaERUUXlkNHF6YUtyd0NURgpXWklmcU1mempKLzBnTlkyaDNtbXR5bXlVNlFWZXdxdis1N1lGL2x4eEYwVnUwOEl2eDJYYU1IYVE1WkMvY1dKCkFESDFWUlhHckdtdUJPNG9NcFFuZGJwZnlDOGpPdXhuWEZnd2JUVHYwUFlZOGZueDFzeU5laWRzMjRYbHlnbG0KQkxiQlBxeTVBb0dCQVBOTGRPQnpqWUpVRFNmMWxkSkViSTEzNk5rRFRHL1NNSjFVL0l5c3ZEdjNldWhHRTVxdQpNc05wK0hVdWZyUzBjY2s2Uis4YUtZdmZrUWlweG1IN2ZlVDhuVFpmYlZ4WklYUjQzVUNkakNISC9ZL3dtakJUCmxtNVZCM1NwYlBzNTFGbUtkZ00wVGszcVhwVWVKUXp3WmlXeDZFVUg2Q1JXT09OWGpWbnRVeXdmQW9HQkFPU3AKV0F2SGprNGNHbjNoM3VuL3F6Vm1JbjhKWHE2VnIzNTJJZjZJQzR2cWxyWm8yYWZvRStvY3BrU1pEYmNUK1hNYwp0cUg5MDJvbm84VFR4RTRhR0RhdEtxMW9nSWtFZmtzdUh1Unh0OTZuNTViVUZQaTA2b3JrUkNxbHUxa0ZkcW52CnNPUTl3SVBMNkZUL25NV1VndmlBU1JIVHA2UUh3eUlaNmtENUVFQm5Bb0dCQUx3SmFiL0FEM0xYTzRQU3o0Uy8KMVpaUlF1blhIdENlQjJ6U0xvOGJRakNteVp1VDdicnpQOURBcW9NRytHNzV0NmZySDRXeEZzTkFlM3ZTbTcxRwovcnBvYzZsK2Y2dU1SOHNaVHdlTnZLeXZRVTVxaXdFbTJYRlV6bnBnS0JiVFQwZ1ZON2lxU0lyM3hUcERIaWV0CjlZVFV4OHZ5bkh6WkZ3YSt1RVQwby8vSkFvR0JBTXZrak5RRUgwcGJHT3hDcWdpeHA3SzMzZTYxSmk0NjN2KysKeXRVeDdrblc1b2pFdWNCVTJ0MFlxdEhrUUN5TnJSTU4rWFE4NTNWeTN6ODFMWWdQRUtSQWlSdVRZWG5ML2VsLwp1S0F2SHF0MXdMWG5hc1BTWG9sMnZhbmhta3JvNmtUaHJEUDVORjdSUmR2MUNZL011M1JtdjhFYm9CSk5zWndJCnk2OGY1M1BsQW9HQU9UN29VakZ0cURvR2FlS0hyaHZQaXNIV290blVPU0hPOHI4enlGZWo4eGsxemNHWUNwQ1kKZS90elN4MW8rL1BtZXNlcjVYRnI2U2VuT09xRVoyNU12UE9HVldBMkFkb0FUMy91QWsvUW1IOURNTzlZd1VvdgpTWVVmc0JhU3RnU014Y3N5cE1uS3E1YU1XTDdBbmwxRjltNnJERUIrRjBIYUdhdzRFNWJIVHlnPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
    }
  },
  {
    "apiVersion": "v1",
    "data": {
      "DATABASE_NAME": "Y29uZmln",
      "HOST": "cmVsZWFzZS1uYW1lLXBvc3RncmVzcWw=",
      "ROLE": "dXNlcm5hbWU=",
      "PASSWORD": "cGFzc3dvcmQ=",
      "PORT": "NTQzMg=="
    },
    "kind": "Secret",
    "metadata": {
      "name": "jdbcconfig-release-name-geoservercloud"
    },
    "type": "Opaque"
  },
  {
    "apiVersion": "v1",
    "data": {
      "rabbitmq-erlang-cookie": "UDQ1UXdPNEJaZFBOZkFLNGhMVnZnQ0tUbVFoZ1pn",
      "rabbitmq-password": "Z2Vvc2VydmVy"
    },
    "kind": "Secret",
    "metadata": {
      "name": "geoserver-rabbitmq"
    },
    "type": "Opaque"
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-rabbitmq-config",
      "namespace": "hXkNLo8R0ku",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.28.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "rabbitmq.conf": "## Username and password\n##\ndefault_user = geoserver\ndefault_pass = CHANGEME\n## Clustering\n##\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator = min-masters\n# enable guest user\nloopback_users.guest = false\n#default_vhost = default-vhost\n#disk_free_limit.absolute = 50MB\n#load_definitions = /app/load_definition.json"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-geoservercloud-config-configs",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "config"
      }
    },
    "data": {
      "config-service.yml": "# Should only be set in application.yml. Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.\n# See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks\neureka.client.healthcheck.enabled: false",
      "gateway-service.yml": "# Defines the root base path at which the gateway exposes all geoserver request paths\n# We're not setting the spring.webflux.base-path because spring-cloud Gateway doesn't\n# work properly with it. See https://github.com/spring-cloud/spring-cloud-gateway/issues/1759\n# For example, if geoserver.base-path=/geoserver-cloud, then geoserver requests will be served\n# under that path prefix (e.g. http://localhost:9090/geoserver-cloud/web, http://localhost:9090/geoserver-cloud/wfs, etc)\n# Examples:\n#geoserver.base-path:\n#geoserver.base-path: /geoserver-cloud\n#geoserver.base-path: /geoserver/cloud\n# Leave it empty for no additional path, setting it to / won't work currently\n#\n# Please note any other prefix than the empty string will require a trailing slash in the root URL\n# for the redirection to the web-ui to work. This is something we need to fix. For example:\n# http://localhost:9090/geoserver-cloud will return 404, but http://localhost:9090/geoserver-cloud/ will work.\ngeoserver.base-path: ${geoserver_base_path:}\n\n# by default, assumes a discovery-client is in use, and perform client-side load balancing on\n# the advertised instances. See the 'static_routes' profile notes for a static config \ntargets:\n  catalog: lb://catalog-service\n  wfs: lb://wfs-service\n  wms: lb://wms-service\n  wcs: lb://wcs-service\n  wps: lb://wps-service\n  rest: lb://restconfig-v1\n  gwc: lb://gwc-service\n  webui: lb://web-ui\n\n# Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html\nserver:\n  compression:\n    enabled: true\n\nspring:\n  cloud:\n    gateway:\n      globalcors:\n        cors-configurations:\n          \"[/**]\":\n            allowedOrigins: \"*\"\n            allowedMethods:\n              - GET\n              - PUT\n              - POST\n              - DELETE\n              - OPTIONS\n              - HEAD\n      default-filters:\n        - StripBasePath=${geoserver.base-path} #remove the base path on downstream requests\n      actuator:\n        verbose:\n          enabled: true\n      routes:\n        - id: catalog\n          uri: ${targets.catalog}\n          predicates:\n            - Path=${geoserver.base-path}/api/v1/**\n          filters: # Expose the catalog and configuration API only if the dev profile is active\n            - RouteProfile=dev,403\n        # WFS routes\n        - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs\n          uri: ${targets.wfs}\n          predicates:\n            - Path=${geoserver.base-path}/wfs,${geoserver.base-path}/{workspace}/wfs,${geoserver.base-path}/{workspace}/{layer}/wfs,${geoserver.base-path}/schemas/wfs/**\n        # proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.\n        - id: wfs_ows\n          uri: ${targets.wfs}\n          predicates:\n            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows\n            - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively\n        # WMS routes\n        - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms\n          uri: ${targets.wms}\n          predicates:\n            - Path=${geoserver.base-path}/wms,${geoserver.base-path}/{workspace}/wms,${geoserver.base-path}/{workspace}/{layer}/wms,${geoserver.base-path}/schemas/wms/**,${geoserver.base-path}/openlayers/**,${geoserver.base-path}/openlayers3/**\n        - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.\n          uri: ${targets.wms}\n          predicates:\n            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows\n            - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively\n        # WCS routes\n        - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs\n          uri: ${targets.wcs}\n          predicates:\n            - Path=${geoserver.base-path}/wcs,${geoserver.base-path}/{workspace}/wcs,${geoserver.base-path}/{workspace}/{layer}/wcs,${geoserver.base-path}/schemas/wcs/**\n        - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.\n          uri: ${targets.wcs}\n          predicates:\n            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows\n            - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively\n        # WPS routes\n        - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps\n          uri: ${targets.wps}\n          predicates:\n            - Path=${geoserver.base-path}/wps,${geoserver.base-path}/{segment}/wps,${geoserver.base-path}/schemas/wps/**\n        - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.\n          uri: ${targets.wps}\n          predicates:\n            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{segment}/ows\n            - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively\n        # REST configuration routes\n        - id: restconfig\n          uri: ${targets.rest}\n          predicates:\n            - Path=${geoserver.base-path}/rest/**\n        # GeoWebcache configuration routes\n        - id: gwc\n          uri: ${targets.gwc}\n          predicates:\n            - Path=${geoserver.base-path}/gwc/**,${geoserver.base-path}/{workspace}/gwc/**,${geoserver.base-path}/{workspace}/{layer}/gwc/**\n        # Web UI configuration routes\n        - id: webui\n          uri: ${targets.webui}\n          predicates:\n            - Path=${geoserver.base-path}/**\n          #- Path=${geoserver.base-path},${geoserver.base-path}/,${geoserver.base-path}/index.html,${geoserver.base-path}/web,${geoserver.base-path}/web/**,${geoserver.base-path}/j_spring_security_check,${geoserver.base-path}/j_spring_security_logout\n\nmanagement:\n  endpoints:\n    enabled-by-default: true\n    web.exposure.include: \"*\"\n  endpoint:\n    info.enabled: true\n    metrics.enabled: true\n    shutdown.enabled: true\n    health:\n      enabled: true\n      show-details: always\n  metrics:\n    binders:\n      processor.enabled: true\n      uptime.enabled: true\n      jvm.enabled: true\n    enable.all: true\n    enable.jvm: true\n    export:\n      atlas.enabled: false\n\n---\n# this profile is automatically included if any of the embedded\n# config_first or discovery_first profile groups are active\nspring.config.activate.on-profile: discovery_eureka\n# Should only be set in application.yml. Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.\n# See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks\neureka.client.healthcheck.enabled: true\neureka.server.url: http://discovery:8761/eureka\n---\nspring.config.activate.on-profile: standalone\n# Define static targets using known host names.\n# Host names can be docker-compose assigned service names, or k8s service names as appropriate\ntargets:\n  catalog: http://catalog:8080\n  wfs: http://wfs:8080\n  wms: http://wms:8080\n  wcs: http://wcs:8080\n  wps: http://wps:8080\n  rest: http://rest:8080\n  gwc: http://gwc:8080\n  webui: http://webui:8080\n---\nspring.config.activate.on-profile: local\ntargets:\n  catalog: http://localhost:9100\n  wfs: http://localhost:9101\n  wms: http://localhost:9102\n  wcs: http://localhost:9103\n  wps: http://localhost:9104\n  rest: http://localhost:9105\n  webui: http://localhost:9106\n  gwc: http://localhost:9107",
      "geoserver.yml": "# This configuration file is imported by all geoserver-specific services' bootstrap.yml\n# For the sake of clarity, configuration properties relative to the spring-boot application\n# itself is imported from geoserver_spring.yml, and properties specific to geoserver from this file.\nspring.config.import: geoserver_spring.yml\n\n# The following geoserver, geotools, and geowebcache configuration properties\n# are common to all geoserver microservices, despite some may not apply to a given service,\n# it's easier to have them all here in the default spring profile.\n# Common configuration for all services. Override or add service specific config\n# properties on each <service-name>-service.yml file\n\n# GeoServer-Cloud common config properties\ngeoserver:\n  metrics:\n    enabled: true\n    instance-id: ${info.instance-id}\n  security:\n    enabled: true\n    authkey: true\n  servlet.filter.session-debug.enabled: false # until the NPE is fixed\n  catalog:\n    advertised: true\n    localWorkspace: true\n    isolated: true\n    secure: true\n    # enable if needed on a backend-specific profile (e.g. jdbcconfig)\n    caching.enabled: false\n  bus:\n    # whether to send distributed events (i.e. acts as master). All instances receive remote events.\n    send-events: true\n    # whether to send the object (CatalogInfo/config info) as payload with the event. Set to false, \n    # not all possible payload types are properly tested, and full object payload is not needed.\n    send-object: ${geoserver.backend.data-directory.enabled}\n    # whether to send a diff of changes as payload with the event. Set to false, not all possible payload types are properly tested nor needed.\n    send-diff: ${geoserver.backend.data-directory.enabled}\n  backend:\n    # configure catalog backends and decide which backend to use on this service.\n    # All backends are disabled, enable the required one on each service. For example, the catalog microservice \n    # will enable one backend type, and the front services the catalog-service backend.\n    # revisit: Could be split into profiles\n    catalog-service:\n      enabled: ${backend.catalog:false}\n      # Base URI of the catalog service. If not set, will be automatically determined using the discovery service, looking for \"catalog-service\"\n      # This allows to explicitly set a fixed location for the catalog service.\n      # uri: http://catalog:8080\n      cache-directory: ${java.io.tmpdir}/cngs/catalog-client/resource_store\n      fallback-resource-directory: ${java.io.tmpdir}/cngs/catalog-client/fallback_resource_store\n    data-directory:\n      enabled: ${backend.data-directory:false}\n      location: ${GEOSERVER_DATA_DIR:/opt/app/data_directory} \n    jdbcconfig:\n      enabled: ${backend.jdbcconfig:false}\n      initdb: true\n      web.enabled: true\n      cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/cngs/jdbcconfig/cache}\n      datasource:\n        url: \"${jdbcconfig.url:jdbc:postgresql://${jdbcconfig.host:database}:${jdbcconfig.port:5432}/${jdbcconfig.database:geoserver_config}?currentSchema=${jdbcconfig.schema:public}}\"\n        username: ${jdbcconfig.username:geoserver}\n        password: ${jdbcconfig.password:geo5erver}\n        driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}\n        # optional:\n        minimumIdle: ${jdbcconfig.minConnections:0}\n        maximumPoolSize: ${jdbcconfig.maxConnections:8}\n        connectionTimeout: ${jdbcconfig.connectionTimeout:250}\n        idleTimeout: ${jdbcconfig.idleTimeout:10000}\n  styling:\n    css.enabled: true\n    mapbox.enabled: true\n  wms:\n    reflector.enabled: true\n    output-formats:\n      vector-tiles:\n        mapbox.enabled: true\n        geojson.enabled: true\n        topojson.enabled: true\n\n# GeoTools HTTP Client proxy configuration, allows configuring cascaded WMS/WMTS/WFS stores\n# that need to go through an HTTP proxy without affecting all the http clients at the JVM level\n# These are default settings. The enabled property can be set to false to disable the custom\n# HTTPClientFactory altogether.\n# The following OS environment variables can be set for easier configuration:\n# HTTP(S)_PROXYHOST, HTTP(S)_PROXYPORT, HTTP(S)_PROXYUSER, HTTP(S)_PROXYPASSWORD, HTTP(S)_NONPROXYHOSTS\ngeotools:\n  httpclient:\n    proxy:\n      enabled: true\n      http:\n        host: ${http.proxyHost:}\n        port: ${http.proxyPort:}\n        user: ${http.proxyUser:}\n        password: ${http.proxyPassword:}\n        nonProxyHosts: ${http.nonProxyHosts:localhost.*}\n        # comma separated list of Java regular expressions, e.g.: nonProxyHosts: localhost, example.*\n      https:\n        host: ${https.proxyHost:${geotools.httpclient.proxy.http.host}}\n        port: ${https.proxyPort:${geotools.httpclient.proxy.http.port}}\n        user: ${https.proxyUser:${geotools.httpclient.proxy.http.user}}\n        password: ${https.proxyPassword:${geotools.httpclient.proxy.http.password}}\n        nonProxyHosts: ${https.nonProxyHosts:${geotools.httpclient.proxy.http.nonProxyHosts}}\n\n# GeoWebCache-specific configuration properties, apply to services that run some GWC\n# internal components. For example, all of gwc-service, wms-service, and web-ui, will\n# need to access GeoWebCache's blob stores, and tile-layer configuration resources.\n# wms-service and web-ui won't event load components related to GWC REST/Web APIs, web UI,\n# and others. Unlike web-ui, wms-service will load the internal components needed for\n# on-demand tile seeding in order to serve WMC-C tiled requests if gwc.wms-integration=true,\n# so that gwc/wms-c integration workds independently of gwc-service.\ngwc:\n  enabled: true\n  cache-directory: ${GEOWEBCACHE_CACHE_DIR:${geoserver.backend.data-directory.location}/gwc}\n  rest-config: true\n  web-ui: true\n  wms-integration: true\n  services:\n    wmts: true\n    tms: true\n    wms: true\n    kml: true\n    gmaps: true\n    mgmaps: true\n  blobstores:\n    azure: true\n    s3: true\n\n###################################################\n#### GeoServer configuration backend profiles: ####\n---\nspring.config.activate.on-profile: datadir\nbackend.jdbcconfig: false\nbackend.catalog: false\nbackend.data-directory: true\n\n---\nspring.config.activate.on-profile: jdbcconfig\nbackend.jdbcconfig: true\nbackend.catalog: false\nbackend.data-directory: false\n\ngeoserver:\n  catalog:\n    # not sure why isolated workspaces don't work with jdbcconfig as backend\n    isolated: false\n    # enable caching if using the jdbcconfig as backend, reduces the number of db roundtrips considerably\n    caching.enabled: true\n\n---\nspring.config.activate.on-profile: catalog\nbackend.catalog: true\nbackend.jdbcconfig: false\nbackend.data-directory: false\ngeoserver:\n  catalog:\n    # enable caching if using the catalog-client as backend\n    caching.enabled: true\n\n#############################################\n#### per microservice-specific profiles: ####\n---\nspring.config.activate.on-profile: wfs_service\n---\nspring.config.activate.on-profile: wms_service\n---\nspring.config.activate.on-profile: wcs_service\n---\nspring.config.activate.on-profile: wps_service\n---\nspring.config.activate.on-profile: restconfig_service\n---\nspring.config.activate.on-profile: gwc_service\n---\nspring.config.activate.on-profile: webui_service\ngeoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n  web-ui:\n    file-browser.hide-file-system: true\n    # These are all default values, here just for reference. You can omit them and add only the ones to disable or further configure\n    security.enabled: true\n    wfs.enabled: true\n    wms.enabled: true\n    wcs.enabled: true\n    wps.enabled: false # not working yet\n    gwc:\n      enabled: ${gwc.enabled:false}\n      capabilities:\n        tms: ${gwc.services.tms:false}\n        wmts: ${gwc.services.wmts:false}\n        wmsc: ${gwc.services.wms:false}\n    extensions:\n      importer.enabled: true\n      geostyler.enabled: true\n    demos:\n      enabled: true\n      wps-request-builder: true\n      wcs-request-builder: true\n      demo-requests: true\n      srs-list: true\n      reprojection-console: true\n      layer-preview-page:\n        enabled: true\n        common-formats:\n          open-layers: true\n          gml: true\n          kml: false #kml links are broken\n    tools:\n      enabled: true\n      resource-browser: true\n      catalog-bulk-load: true\n---\nspring.config.activate.on-profile: catalog_service\ngeoserver:\n  security.enabled: false\n  # Disable advertised catalog, it checks the org.geoserver.ows.Dispatcher.REQUEST to check if an OWS is in progress,\n  # which can never be the case, and causes a java.lang.NoClassDefFoundError on org.springframework.web.servlet.mvc.AbstractController\n  catalog:\n    advertised: false\n    # Disable catalog decorators, this service exposes a \"raw catalog\" backend\n    localWorkspace: false\n    secure: false\n    isolated: false\n    # enable caching while using the jdbcconfig backend, we've disabled its own internal caching due to concurrency related bugs\n    caching.enabled: ${geoserver.backend.jdbcconfig.enabled}\n  catalog-service:\n    io-threads:\n      # Number of back-end threads to hit the actual catalog with. Defaults 4 * number of cores if unset.\n      # If using jdbcconfig, let io-threads be about half the size of geoserver.backend.jdbcconfig.datasource.maximumPoolSize, \n      # it has the tendency to use more than one jdbc connection for some requests.\n      max-size: ${catalog.io.threads:8}\n      # maximum number of queued requests per worker thread before rejecting new requests \n      max-queued: ${catalog.io.maxQueued:10000}\n  # receive events but don't publish, it's the front catalogs that publish events to better track where the changes come from\n  bus.send-events: false    \n  # decide which catalog backend to use on this service, defaults to jdbcconfig\n  backend.jdbcconfig.enabled: ${backend.jdbcconfig:true}\n---\n# local profile, used for development only. Other settings like config and eureka urls in gs_cloud_bootstrap_profiles.yml\nspring.config.activate.on-profile: local\ngeoserver.backend.jdbcconfig.datasource.url: jdbc:postgresql://localhost:54321/geoserver_config?currentSchema=public",
      "geoserver_spring.yml": "# Spring Boot application-specific config properties to be shared by all\n# GeoServer microservices. Imported from geoserver.yml, in order to separate\n# application from geoserver configuration.\nserver:\n  tomcat:\n    # Maximum number of connections that the server accepts and processes at any given time.\n    # Once the limit has been reached, the operating system may still accept connections based on the \"acceptCount\" property.\n    max-connections: 1000 # default: 8192\n    # Maximum queue length for incoming connection requests when all possible request processing threads are in use.\n    accept-count: 100 # default: 100\n    accesslog.enabled: false\n    threads:\n      # Minimum amount of worker threads.\n      min-spare: 2 #default: 10\n      # Maximum amount of worker threads.\n      max: 20 #default: 200\n\nspring:\n  rabbitmq:\n    host: ${rabbitmq.host:rabbitmq}\n    port: ${rabbitmq.port:5672}\n    username: ${rabbitmq.user:guest}\n    password: ${rabbitmq.password:guest}\n  cloud:\n    bus:\n      enabled: true\n      id: ${info.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id\n      trace.enabled: false #switch on tracing of acks (default off).\n    stream:\n      bindings:\n        springCloudBusOutput:\n          destination: gscatalog\n        springCloudBusInput:\n          destination: gscatalog\n  jackson:\n    default-property-inclusion: non-empty\n    serialization.indent-output: false #set to true if doing manual testing and want formatted output\n\nreactive.feign.cloud.enabled: true\nreactive.feign.hystrix.enabled: false\n\nmanagement:\n  endpoints:\n    enabled-by-default: true\n    web.exposure.include: \"*\"\n  endpoint:\n    info.enabled: true\n    metrics.enabled: true\n    shutdown.enabled: true\n    health:\n      enabled: true\n      probes.enabled: true\n      show-details: always\n  metrics:\n    binders:\n      processor.enabled: true\n      uptime.enabled: true\n      jvm.enabled: true\n    enable.all: true\n    enable.jvm: true\n    export:\n      atlas.enabled: false\n\nlogging:\n  level:\n    root: warn\n    org.springframework: warn\n    org.springframework.cloud.bus: info\n    org.springframework.retry: info\n    org.springframework.jdbc.support: info\n    com.zaxxer.hikari.pool: OFF\n    # reactivefeign:\n    reactivefeign.client.log: info\n#    com.netflix.eureka.registry.AbstractInstanceRegistry: error # log flooding with \"WARN No remote registry available for the remote region us-east-1\"\n#    com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: error # log flooding with \"WARN No remote registry available for the remote region us-east-1\"\n    # geoserver roots\n    org.geotools.autoconfigure: info\n    oshi.hardware.platform.linux: error\n    oshi.software.os: error\n    org.geoserver: warn\n    org.geoserver.catalog.plugin: info\n    org.geoserver.jackson: info\n    org.geotools.jackson: info\n    org.geoserver.platform: error\n    org.geoserver.platform.resource.MemoryLockProvider: info\n    org.geoserver.platform.resource.NioFileLockProvider: info\n    org.geoserver.platform.resource.FileLockProvider: info\n    org.geoserver.jdbcconfig: info\n    # gs-cloud roots\n    org.geoserver.cloud: info\n    org.geoserver.cloud.autoconfigure: info\n    org.geoserver.cloud.config.factory: info\n    # bus debugging\n    org.geoserver.cloud.bus: info\n    org.springframework.cloud.bus.BusAutoConfiguration: info\n    org.springframework.cloud.bus.DefaultBusPathMatcher: info\n\n---\n# this profile is automatically included if any of the embedded\n# config_first or discovery_first profile groups are active\nspring.config.activate.on-profile: discovery_eureka\n# Should only be set in application.yml (i.e. not in bootstrap.yml).\n# Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.\n# See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks\neureka.client.healthcheck.enabled: true\neureka.server.url: http://discovery:8761/eureka\n\n---\nspring.config.activate.on-profile: debug\nlogging:\n  level:\n    root: info\n    org.springframework: info\n    # geoserver roots\n    org.geoserver: info\n    org.geoserver.catalog.plugin: debug\n    org.geoserver.wms: info\n    org.geoserver.wfs: info\n    org.geoserver.jackson: debug\n    org.geotools.jackson: debug\n    org.geoserver.platform: error\n    org.geoserver.platform.resource.MemoryLockProvider: info\n    org.geoserver.platform.resource.NioFileLockProvider: debug\n    org.geoserver.platform.resource.FileLockProvider: debug\n    org.geoserver.jdbcconfig: info\n    # gs-cloud roots\n    org.geoserver.cloud: debug\n    org.geoserver.cloud.autoconfigure: trace\n    org.geoserver.cloud.config.factory: trace\n    org.geoserver.cloud.gwc: debug\n    # bus debugging\n    org.geoserver.cloud.bus: trace\n    org.springframework.cloud.bus: debug\n    org.springframework.cloud.bus.BusAutoConfiguration: info\n    org.springframework.cloud.bus.DefaultBusPathMatcher: info\n    # reactivefeign:\n    reactivefeign.client.log: info"
    }
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "namespace": "hXkNLo8R0ku",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.28.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "namespace": "hXkNLo8R0ku",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.28.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-rabbitmq"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-rabbitmq-endpoint-reader"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      },
      "namespace": "hXkNLo8R0ku"
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null,
      "namespace": "hXkNLo8R0ku"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "role": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq-headless",
      "namespace": "hXkNLo8R0ku",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.28.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd"
        },
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp"
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist"
        },
        {
          "name": "http-stats",
          "port": 15672,
          "targetPort": "stats"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "rabbitmq",
        "app.kubernetes.io/instance": "release-name"
      },
      "publishNotReadyAddresses": true
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "hXkNLo8R0ku",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.28.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp",
          "nodePort": null
        },
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd",
          "nodePort": null
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist",
          "nodePort": null
        },
        {
          "name": "http-stats",
          "port": 15672,
          "targetPort": "stats",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "rabbitmq",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoservercloud-gateway",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "gateway"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "gateway"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoservercloud-gwc",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "gwc"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "gwc"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoservercloud-rest",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "rest"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "rest"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoservercloud-wcs",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "wcs"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "wcs"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoservercloud-webui",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "webui"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "webui"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoservercloud-wfs",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "wfs"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "wfs"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoservercloud-wms",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "wms"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "wms"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoservercloud-gateway",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "gateway"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoservercloud",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "gateway"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "ab630a068015163b728962c7c77c0f0e0fe36a2667e8733b8f2c820e9fe8d2d0",
            "specificValues/sha256": "92abca1e1bb72f2067ebcbcb13fb5fe7b5b3918c530ec14260711ce3ee4cd6ca",
            "globalValues/sha256": "972a9c06bf741d6446906d56632af2cd2c2bdb9856d5be9b6ad80a986d586520"
          },
          "labels": {
            "app.kubernetes.io/name": "geoservercloud",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "gateway"
          }
        },
        "spec": {
          "volumes": [
            {
              "name": "localshare",
              "emptyDir": {}
            },
            {
              "name": "configs",
              "configMap": {
                "name": "release-name-geoservercloud-config-configs"
              }
            }
          ],
          "serviceAccountName": "release-name-geoservercloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoservercloud-gateway",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "image": "docker.io/geoservercloud/geoserver-cloud-gateway:1.0-RC21",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "TARGETS_WMS",
                  "value": "http://release-name-geoservercloud-wms:8080"
                },
                {
                  "name": "TARGETS_WFS",
                  "value": "http://release-name-geoservercloud-wfs:8080"
                },
                {
                  "name": "TARGETS_WCS",
                  "value": "http://release-name-geoservercloud-wcs:8080"
                },
                {
                  "name": "TARGETS_GWC",
                  "value": "http://release-name-geoservercloud-gwc:8080"
                },
                {
                  "name": "TARGETS_REST",
                  "value": "http://release-name-geoservercloud-rest:8080"
                },
                {
                  "name": "TARGETS_WEBUI",
                  "value": "http://release-name-geoservercloud-webui:8080"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "standalone,jdbcconfig"
                },
                {
                  "name": "GEOSERVER_BASE_PATH",
                  "value": "/geoserver-cloud"
                },
                {
                  "name": "GEOSERVER_DEBUG_INSTANCEID",
                  "value": "true"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "JAVA_OPTS",
                  "value": "-DALLOW_ENV_PARAMETRIZATION=true "
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PORT",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PORT"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-rabbitmq"
                },
                {
                  "name": "RABBITMQ_PORT",
                  "value": "5672"
                },
                {
                  "name": "RABBITMQ_USER",
                  "value": "geoserver"
                }
              ],
              "volumeMounts": [
                {
                  "name": "configs",
                  "mountPath": "/etc/gscloud"
                },
                {
                  "name": "localshare",
                  "mountPath": "/mnt/localshare"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                },
                {
                  "name": "health",
                  "containerPort": 8081,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "health"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "health"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "health"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "cpu": 2,
                  "memory": "512Mi"
                },
                "requests": {
                  "cpu": 0.10000000000000001,
                  "memory": "128Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoservercloud-gwc",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "gwc"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoservercloud",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "gwc"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "ab630a068015163b728962c7c77c0f0e0fe36a2667e8733b8f2c820e9fe8d2d0",
            "specificValues/sha256": "a9690740264bb9e2309fedbd26ad898f336f5321e9fe023626470d1c3f8c3682",
            "globalValues/sha256": "972a9c06bf741d6446906d56632af2cd2c2bdb9856d5be9b6ad80a986d586520"
          },
          "labels": {
            "app.kubernetes.io/name": "geoservercloud",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "gwc"
          }
        },
        "spec": {
          "volumes": [
            {
              "name": "localshare",
              "emptyDir": {}
            },
            {
              "name": "configs",
              "configMap": {
                "name": "release-name-geoservercloud-config-configs"
              }
            }
          ],
          "serviceAccountName": "release-name-geoservercloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "gwc",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "image": "docker.io/geoservercloud/geoserver-cloud-gwc:1.0-RC21",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "standalone,jdbcconfig"
                },
                {
                  "name": "GEOSERVER_BASE_PATH",
                  "value": "/geoserver-cloud"
                },
                {
                  "name": "GEOSERVER_DEBUG_INSTANCEID",
                  "value": "true"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "JAVA_OPTS",
                  "value": "-DALLOW_ENV_PARAMETRIZATION=true "
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PORT",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PORT"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-rabbitmq"
                },
                {
                  "name": "RABBITMQ_PORT",
                  "value": "5672"
                },
                {
                  "name": "RABBITMQ_USER",
                  "value": "geoserver"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                },
                {
                  "name": "health",
                  "containerPort": 8081,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "localshare",
                  "mountPath": "/mnt/localshare"
                },
                {
                  "name": "configs",
                  "mountPath": "/etc/gscloud"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health/readiness",
                  "port": "health"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "cpu": 4,
                  "memory": "4Gi"
                },
                "requests": {
                  "cpu": 0.10000000000000001,
                  "memory": "512Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoservercloud-rest",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "rest"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoservercloud",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "rest"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "ab630a068015163b728962c7c77c0f0e0fe36a2667e8733b8f2c820e9fe8d2d0",
            "specificValues/sha256": "1df2cc19cf6772f2cd4bc4fe41bf77ab7b212de9547481ee68995c51b45c7350",
            "globalValues/sha256": "972a9c06bf741d6446906d56632af2cd2c2bdb9856d5be9b6ad80a986d586520"
          },
          "labels": {
            "app.kubernetes.io/name": "geoservercloud",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "rest"
          }
        },
        "spec": {
          "volumes": [
            {
              "name": "localshare",
              "emptyDir": {}
            },
            {
              "name": "configs",
              "configMap": {
                "name": "release-name-geoservercloud-config-configs"
              }
            }
          ],
          "serviceAccountName": "release-name-geoservercloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "rest",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "image": "docker.io/geoservercloud/geoserver-cloud-rest:1.0-RC21",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "standalone,jdbcconfig"
                },
                {
                  "name": "GEOSERVER_BASE_PATH",
                  "value": "/geoserver-cloud"
                },
                {
                  "name": "GEOSERVER_DEBUG_INSTANCEID",
                  "value": "true"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "JAVA_OPTS",
                  "value": "-DALLOW_ENV_PARAMETRIZATION=true "
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PORT",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PORT"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-rabbitmq"
                },
                {
                  "name": "RABBITMQ_PORT",
                  "value": "5672"
                },
                {
                  "name": "RABBITMQ_USER",
                  "value": "geoserver"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                },
                {
                  "name": "health",
                  "containerPort": 8081,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "localshare",
                  "mountPath": "/mnt/localshare"
                },
                {
                  "name": "configs",
                  "mountPath": "/etc/gscloud"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health/readiness",
                  "port": "health"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "cpu": 2,
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": 0.10000000000000001,
                  "memory": "512Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoservercloud-wcs",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "wcs"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoservercloud",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "wcs"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "ab630a068015163b728962c7c77c0f0e0fe36a2667e8733b8f2c820e9fe8d2d0",
            "specificValues/sha256": "8862be7440511b1889f3724370edc912e1615b3edfc346122a7cb70edfc70654",
            "globalValues/sha256": "972a9c06bf741d6446906d56632af2cd2c2bdb9856d5be9b6ad80a986d586520"
          },
          "labels": {
            "app.kubernetes.io/name": "geoservercloud",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "wcs"
          }
        },
        "spec": {
          "volumes": [
            {
              "name": "localshare",
              "emptyDir": {}
            },
            {
              "name": "configs",
              "configMap": {
                "name": "release-name-geoservercloud-config-configs"
              }
            }
          ],
          "serviceAccountName": "release-name-geoservercloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "wcs",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "image": "docker.io/geoservercloud/geoserver-cloud-wcs:1.0-RC21",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "standalone,jdbcconfig"
                },
                {
                  "name": "GEOSERVER_BASE_PATH",
                  "value": "/geoserver-cloud"
                },
                {
                  "name": "GEOSERVER_DEBUG_INSTANCEID",
                  "value": "true"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "JAVA_OPTS",
                  "value": "-DALLOW_ENV_PARAMETRIZATION=true "
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PORT",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PORT"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-rabbitmq"
                },
                {
                  "name": "RABBITMQ_PORT",
                  "value": "5672"
                },
                {
                  "name": "RABBITMQ_USER",
                  "value": "geoserver"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                },
                {
                  "name": "health",
                  "containerPort": 8081,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "localshare",
                  "mountPath": "/mnt/localshare"
                },
                {
                  "name": "configs",
                  "mountPath": "/etc/gscloud"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health/readiness",
                  "port": "health"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "cpu": 4,
                  "memory": "4Gi"
                },
                "requests": {
                  "cpu": 0.10000000000000001,
                  "memory": "512Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoservercloud-webui",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "webui"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoservercloud",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "webui"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "ab630a068015163b728962c7c77c0f0e0fe36a2667e8733b8f2c820e9fe8d2d0",
            "specificValues/sha256": "9e4e90fadcbdf3471762d9f0bad4933a88d70a3d6a5444450dfcd85916d82ff8",
            "globalValues/sha256": "972a9c06bf741d6446906d56632af2cd2c2bdb9856d5be9b6ad80a986d586520"
          },
          "labels": {
            "app.kubernetes.io/name": "geoservercloud",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "webui"
          }
        },
        "spec": {
          "volumes": [
            {
              "name": "localshare",
              "emptyDir": {}
            },
            {
              "name": "configs",
              "configMap": {
                "name": "release-name-geoservercloud-config-configs"
              }
            }
          ],
          "serviceAccountName": "release-name-geoservercloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "webui",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "image": "docker.io/geoservercloud/geoserver-cloud-webui:1.0-RC21",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "standalone,jdbcconfig"
                },
                {
                  "name": "GEOSERVER_BASE_PATH",
                  "value": "/geoserver-cloud"
                },
                {
                  "name": "GEOSERVER_DEBUG_INSTANCEID",
                  "value": "true"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "JAVA_OPTS",
                  "value": "-DALLOW_ENV_PARAMETRIZATION=true "
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PORT",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PORT"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-rabbitmq"
                },
                {
                  "name": "RABBITMQ_PORT",
                  "value": "5672"
                },
                {
                  "name": "RABBITMQ_USER",
                  "value": "geoserver"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                },
                {
                  "name": "health",
                  "containerPort": 8081,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "localshare",
                  "mountPath": "/mnt/localshare"
                },
                {
                  "name": "configs",
                  "mountPath": "/etc/gscloud"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health/readiness",
                  "port": "health"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "cpu": 2,
                  "memory": "1024Mi"
                },
                "requests": {
                  "cpu": 0.10000000000000001,
                  "memory": "128Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoservercloud-wfs",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "wfs"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoservercloud",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "wfs"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "ab630a068015163b728962c7c77c0f0e0fe36a2667e8733b8f2c820e9fe8d2d0",
            "specificValues/sha256": "57cfdc1dc38052d83e3c54ba9151b795a5a7aa4e9f3539cda14be2c82258ed09",
            "globalValues/sha256": "972a9c06bf741d6446906d56632af2cd2c2bdb9856d5be9b6ad80a986d586520"
          },
          "labels": {
            "app.kubernetes.io/name": "geoservercloud",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "wfs"
          }
        },
        "spec": {
          "volumes": [
            {
              "name": "localshare",
              "emptyDir": {}
            },
            {
              "name": "configs",
              "configMap": {
                "name": "release-name-geoservercloud-config-configs"
              }
            }
          ],
          "serviceAccountName": "release-name-geoservercloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "wfs",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "image": "docker.io/geoservercloud/geoserver-cloud-wfs:1.0-RC21",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "standalone,jdbcconfig"
                },
                {
                  "name": "GEOSERVER_BASE_PATH",
                  "value": "/geoserver-cloud"
                },
                {
                  "name": "GEOSERVER_DEBUG_INSTANCEID",
                  "value": "true"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "JAVA_OPTS",
                  "value": "-DALLOW_ENV_PARAMETRIZATION=true "
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PORT",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PORT"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-rabbitmq"
                },
                {
                  "name": "RABBITMQ_PORT",
                  "value": "5672"
                },
                {
                  "name": "RABBITMQ_USER",
                  "value": "geoserver"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                },
                {
                  "name": "health",
                  "containerPort": 8081,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "localshare",
                  "mountPath": "/mnt/localshare"
                },
                {
                  "name": "configs",
                  "mountPath": "/etc/gscloud"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health/readiness",
                  "port": "health"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "cpu": 4,
                  "memory": "4Gi"
                },
                "requests": {
                  "cpu": 0.10000000000000001,
                  "memory": "512Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoservercloud-wms",
      "labels": {
        "helm.sh/chart": "geoservercloud-0.0.37",
        "deployed_by": "helm",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoservercloud",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC21",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "wms"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoservercloud",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "wms"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "ab630a068015163b728962c7c77c0f0e0fe36a2667e8733b8f2c820e9fe8d2d0",
            "specificValues/sha256": "200a01537285002addd55515b8da6293fc56f77cb7c6230512694ae1ef903985",
            "globalValues/sha256": "972a9c06bf741d6446906d56632af2cd2c2bdb9856d5be9b6ad80a986d586520"
          },
          "labels": {
            "app.kubernetes.io/name": "geoservercloud",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "wms"
          }
        },
        "spec": {
          "volumes": [
            {
              "name": "localshare",
              "emptyDir": {}
            },
            {
              "name": "configs",
              "configMap": {
                "name": "release-name-geoservercloud-config-configs"
              }
            }
          ],
          "serviceAccountName": "release-name-geoservercloud",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "wms",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "image": "docker.io/geoservercloud/geoserver-cloud-wms:1.0-RC21",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "standalone,jdbcconfig"
                },
                {
                  "name": "GEOSERVER_BASE_PATH",
                  "value": "/geoserver-cloud"
                },
                {
                  "name": "GEOSERVER_DEBUG_INSTANCEID",
                  "value": "true"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "JAVA_OPTS",
                  "value": "-DALLOW_ENV_PARAMETRIZATION=true "
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PORT",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoservercloud",
                      "key": "PORT"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-rabbitmq"
                },
                {
                  "name": "RABBITMQ_PORT",
                  "value": "5672"
                },
                {
                  "name": "RABBITMQ_USER",
                  "value": "geoserver"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                },
                {
                  "name": "health",
                  "containerPort": 8081,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "localshare",
                  "mountPath": "/mnt/localshare"
                },
                {
                  "name": "configs",
                  "mountPath": "/etc/gscloud"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health/liveness",
                  "port": "health"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health/readiness",
                  "port": "health"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "cpu": 4,
                  "memory": "4Gi"
                },
                "requests": {
                  "cpu": 0.10000000000000001,
                  "memory": "512Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null,
      "namespace": "hXkNLo8R0ku"
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "role": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-10.16.2",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "role": "primary",
            "app.kubernetes.io/component": "primary"
          }
        },
        "spec": {
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "postgresql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "automountServiceAccountToken": false,
          "initContainers": [
            {
              "name": "init-chmod-data",
              "image": "docker.io/bitnami/bitnami-shell:10-debian-10-r305",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                }
              },
              "command": [
                "/bin/sh",
                "-cx",
                "chmod -R 777 /dev/shm\ncp /tmp/certs/* /opt/bitnami/postgresql/certs/\nchown -R 1001:1001 /opt/bitnami/postgresql/certs/\nchmod 600 /opt/bitnami/postgresql/certs/tls.key\n"
              ],
              "securityContext": {
                "runAsUser": 0
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "raw-certificates",
                  "mountPath": "/tmp/certs"
                },
                {
                  "name": "postgresql-certificates",
                  "mountPath": "/opt/bitnami/postgresql/certs"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/bitnami/postgresql:11.14.0-debian-10-r28",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "securityContext": {
                "runAsUser": 11785,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-postgres-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "username"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "config"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "yes"
                },
                {
                  "name": "POSTGRESQL_TLS_PREFER_SERVER_CIPHERS",
                  "value": "yes"
                },
                {
                  "name": "POSTGRESQL_TLS_CERT_FILE",
                  "value": "/opt/bitnami/postgresql/certs/tls.crt"
                },
                {
                  "name": "POSTGRESQL_TLS_KEY_FILE",
                  "value": "/opt/bitnami/postgresql/certs/tls.key"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"username\" -d \"dbname=config\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"username\" -d \"dbname=config sslcert=/opt/bitnami/postgresql/certs/tls.crt sslkey=/opt/bitnami/postgresql/certs/tls.key\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "postgresql-certificates",
                  "mountPath": "/opt/bitnami/postgresql/certs",
                  "readOnly": true
                },
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "raw-certificates",
              "secret": {
                "secretName": "release-name-postgresql-crt"
              }
            },
            {
              "name": "postgresql-certificates",
              "emptyDir": {}
            },
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory"
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "hXkNLo8R0ku",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.28.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-rabbitmq-headless",
      "podManagementPolicy": "OrderedReady",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "rabbitmq",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "rabbitmq",
            "helm.sh/chart": "rabbitmq-8.28.1",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm"
          },
          "annotations": {
            "checksum/config": "ccfc53681625340398664c5b0b76ba3020b29087c4fcbba6797e43f3c1cfda43"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-rabbitmq",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "rabbitmq",
                        "app.kubernetes.io/instance": "release-name"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001,
            "runAsUser": 1001
          },
          "terminationGracePeriodSeconds": 120,
          "containers": [
            {
              "name": "rabbitmq",
              "image": "docker.io/bitnami/rabbitmq:3.9.13-debian-10-r14",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MY_POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "K8S_SERVICE_NAME",
                  "value": "release-name-rabbitmq-headless"
                },
                {
                  "name": "K8S_ADDRESS_TYPE",
                  "value": "hostname"
                },
                {
                  "name": "RABBITMQ_FORCE_BOOT",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_NODE_NAME",
                  "value": "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "K8S_HOSTNAME_SUFFIX",
                  "value": ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "RABBITMQ_MNESIA_DIR",
                  "value": "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
                },
                {
                  "name": "RABBITMQ_LDAP_ENABLE",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_LOGS",
                  "value": "-"
                },
                {
                  "name": "RABBITMQ_ULIMIT_NOFILES",
                  "value": "65536"
                },
                {
                  "name": "RABBITMQ_USE_LONGNAME",
                  "value": "true"
                },
                {
                  "name": "RABBITMQ_ERL_COOKIE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-erlang-cookie"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_LOAD_DEFINITIONS",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_SECURE_PASSWORD",
                  "value": "yes"
                },
                {
                  "name": "RABBITMQ_USERNAME",
                  "value": "geoserver"
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PLUGINS",
                  "value": "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
                }
              ],
              "ports": [
                {
                  "name": "amqp",
                  "containerPort": 5672
                },
                {
                  "name": "dist",
                  "containerPort": 25672
                },
                {
                  "name": "stats",
                  "containerPort": 15672
                },
                {
                  "name": "epmd",
                  "containerPort": 4369
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "rabbitmq-diagnostics -q ping"
                  ]
                },
                "initialDelaySeconds": 120,
                "periodSeconds": 30,
                "timeoutSeconds": 20,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 30,
                "timeoutSeconds": 20,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/bin/bash",
                      "-ec",
                      "if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t \"120\" -d  \"false\"\nelse\n    rabbitmqctl stop_app\nfi\n"
                    ]
                  }
                }
              },
              "resources": {
                "limits": {
                  "cpu": 2,
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": 0.10000000000000001,
                  "memory": "512Mi"
                }
              },
              "volumeMounts": [
                {
                  "name": "configuration",
                  "mountPath": "/bitnami/rabbitmq/conf"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/rabbitmq/mnesia"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "configuration",
              "configMap": {
                "name": "release-name-rabbitmq-config",
                "items": [
                  {
                    "key": "rabbitmq.conf",
                    "path": "rabbitmq.conf"
                  }
                ]
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "nginx",
      "annotations": {
        "ingress.kubernetes.io/ssl-redirect": "false",
        "nginx.ingress.kubernetes.io/use-regex": "true"
      }
    },
    "spec": {
      "rules": [
        {
          "http": {
            "paths": [
              {
                "path": "/geoserver-cloud/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "release-name-geoservercloud-gateway",
                    "port": {
                      "number": 8080
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  }
]