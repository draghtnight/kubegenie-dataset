apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-graphprotocol-querynode
  labels:
    helm.sh/chart: graphprotocol-querynode-0.3.1
    app.kubernetes.io/name: graphprotocol-querynode
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: latest
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-graphprotocol-querynode-configmap
data:
  BLOCK_INGESTOR: index-node-0
  GRAPH_KILL_IF_UNRESPONSIVE: "true"
  ethereum: mainnet:https://eth-mainnet.alchemyapi.io/jsonrpc/demo rinkeby:https://eth-rinkeby.alchemyapi.io/jsonrpc/demo
  ipfs: https://testnet.thegraph.com/ipfs/
  node_role: query-node
  postgres_db: graph
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-graphprotocol-querynode-proxy-configmap
data:
  nginx.conf: |
    # Increase the number of connections per worker. The default of
    # 512 causes a lot of 502 HTTP errors, and leads nginx to complain
    # that '512 worker_connections are not enough'
    #
    # We now allow 16k connections which is 1/4 of the available port space
    events {
      worker_connections  16384;
    }
    http {
      # See http://nginx.org/en/docs/http/websocket.html
      map $http_upgrade $connection_upgrade {
          default upgrade;
          ''      close;
      }
      # Tune nginx keepalives to work with the GCP HTTP(S) Load Balancer,
      # see point 3 in this blog post for why
      # https://blog.percy.io/tuning-nginx-behind-google-cloud-platform-http-s-load-balancer-305982ddb340
      keepalive_timeout 650;
      keepalive_requests 10000;
      server {
        location ^~ /index-node/ {
          # Remove the /index-node/ again
          rewrite ^/index-node/(.*)$ /$1 break;
          # Proxy configuration.
          proxy_pass http://127.0.0.1:8030;
          proxy_http_version 1.1;
          proxy_set_header Connection $connection_upgrade;
          proxy_set_header Host $host;
          proxy_set_header Upgrade $http_upgrade;
          proxy_cache_bypass $http_upgrade;
          # Gateway timeout.
          proxy_read_timeout 30s;
          proxy_send_timeout 30s;        }
        location /nginx_status {
          stub_status;
          allow 127.0.0.1;
          deny all;
        }
        location / {
          location = / {
            return 200;
          }
          # Move WebSocket and HTTP requests into /ws/ and /http/ prefixes;
          # this allows us to forward both types of requests to different
          # query node ports
          if ( $connection_upgrade = "upgrade" ) {
            rewrite ^(.*)$ /ws/$1;
          }
          if ( $connection_upgrade != "upgrade" ) {
            rewrite ^(.*)$ /http/$1;
          }
          location /http/ {
            # Remove the /http/ again
            rewrite ^/http/(.*)$ $1 break;
            # Proxy configuration.
            proxy_pass http://127.0.0.1:8000;
            proxy_http_version 1.1;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_cache_bypass $http_upgrade;
            proxy_next_upstream error invalid_header http_502;
            # Gateway timeout.
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
          }
          location /ws {
            # Remove the /ws/ again
            rewrite ^/ws/(.*)$ $1 break;
            # Proxy configuration.
            proxy_pass http://127.0.0.1:8001;
            proxy_http_version 1.1;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_cache_bypass $http_upgrade;
            # Gateway timeout.
            proxy_read_timeout 1800s;
            proxy_send_timeout 1800s;
          }
        }
      }
      log_format timed '$remote_addr (forwarded for $http_x_forwarded_for) '
            ' - $remote_user [$time_local] '
            '"$request" $status $request_completion $body_bytes_sent '
            '"$http_referer" "$http_user_agent" '
            '$request_time $upstream_response_time $pipe';
      access_log /var/log/nginx/access.log timed;
      error_log /var/log/nginx/error.log warn;
    }
    stream {}
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-graphprotocol-querynode
  labels:
    helm.sh/chart: graphprotocol-querynode-0.3.1
    app.kubernetes.io/name: graphprotocol-querynode
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: latest
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
    - port: 8001
      targetPort: ws
      protocol: TCP
      name: ws
    - port: 8030
      targetPort: index-node
      protocol: TCP
      name: index-node
    - port: 8020
      targetPort: json-rpc
      protocol: TCP
      name: json-rpc
    - port: 8040
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: graphprotocol-querynode
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-graphprotocol-querynode-proxy
  labels:
    helm.sh/chart: graphprotocol-querynode-0.3.1
    app.kubernetes.io/name: graphprotocol-querynode
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: latest
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: nginx
      protocol: TCP
  selector:
    app.kubernetes.io/name: graphprotocol-querynode
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-graphprotocol-querynode
  labels:
    helm.sh/chart: graphprotocol-querynode-0.3.1
    app.kubernetes.io/name: graphprotocol-querynode
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: latest
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: graphprotocol-querynode
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/configmap.yaml: a9b65f9b5bec75c5a87c49a27d87abe97e5719bb9067793a965b2679cc6ffb4c
        prometheus.io/path: /metrics
        prometheus.io/port: "8040"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: graphprotocol-querynode
        app.kubernetes.io/instance: release-name
    spec:
      securityContext: {}
      containers:
        - name: graphprotocol-querynode-nginx
          image: nginx
          ports:
            - name: nginx
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: query-node-proxy-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
        - name: graphprotocol-querynode
          securityContext: {}
          image: graphprotocol/graph-node:v0.19.2
          imagePullPolicy: IfNotPresent
          command: null
          args: null
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: ws
              containerPort: 8001
              protocol: TCP
            - name: index-node
              containerPort: 8030
              protocol: TCP
            - name: json-rpc
              containerPort: 8020
              protocol: TCP
            - name: metrics
              containerPort: 8040
              protocol: TCP
          env:
            - name: node_id
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: postgres_host
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: host
            - name: postgres_user
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: user
            - name: postgres_pass
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
          envFrom:
            - configMapRef:
                name: release-name-graphprotocol-querynode-configmap
          resources: {}
      volumes:
        - name: query-node-proxy-config
          configMap:
            name: release-name-graphprotocol-querynode-proxy-configmap
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: release-name-graphprotocol-querynode-metrics
spec:
  endpoints:
    - interval: 5s
      path: /metrics
      port: metrics
  namespaceSelector:
    matchNames:
      - default
  selector:
    matchLabels:
      app.kubernetes.io/name: graphprotocol-querynode
      app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-graphprotocol-querynode-test-connection
  labels:
    helm.sh/chart: graphprotocol-querynode-0.3.1
    app.kubernetes.io/name: graphprotocol-querynode
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: latest
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - 'release-name-graphprotocol-querynode:'
  restartPolicy: Never
