apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-gitlab-runner
  labels:
    app: release-name-gitlab-runner
    chart: gitlab-runner-0.12.6
    release: release-name
    heritage: Helm
data:
  entrypoint: |
    #!/bin/bash
    set -e
    mkdir -p /home/gitlab-runner/.gitlab-runner/
    cp /scripts/config.toml /home/gitlab-runner/.gitlab-runner/

    # Register the runner
    if [[ -f /secrets/accesskey && -f /secrets/secretkey ]]; then
      export CACHE_S3_ACCESS_KEY=$(cat /secrets/accesskey)
      export CACHE_S3_SECRET_KEY=$(cat /secrets/secretkey)
    fi

    if [[ -f /secrets/gcs-applicaton-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-applicaton-credentials-file"
    else
      if [[ -f /secrets/gcs-access-id && -f /secrets/gcs-private-key ]]; then
        export CACHE_GCS_ACCESS_ID=$(cat /secrets/gcs-access-id)
        # echo -e used to make private key multiline (in google json auth key private key is oneline with \n)
        export CACHE_GCS_PRIVATE_KEY=$(echo -e $(cat /secrets/gcs-private-key))
      fi
    fi

    if [[ -f /secrets/runner-registration-token ]]; then
      export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token)
    fi

    if [[ -f /secrets/runner-token ]]; then
      export CI_SERVER_TOKEN=$(cat /secrets/runner-token)
    fi

    if ! sh /scripts/register-the-runner; then
      exit 1
    fi

    # Temporary workaround until https://gitlab.com/gitlab-org/gitlab-runner/issues/4228
    # is merged
    sed -n '30,$p' /home/gitlab-runner/.gitlab-runner/config.toml >> /home/gitlab-runner/custom_commands
    sed -e '30,$d' -i /home/gitlab-runner/.gitlab-runner/config.toml
    cat /scripts/kubernetes.volumes | sed -e '1d' | sed '1,$s/^/      /' >> /home/gitlab-runner/.gitlab-runner/config.toml
    cat /home/gitlab-runner/custom_commands >> /home/gitlab-runner/.gitlab-runner/config.toml

    # Start the runner
    exec /entrypoint run --user=gitlab-runner \
      --working-directory=/home/gitlab-runner
  config.toml: |
    concurrent = 10
    check_interval = 30
    log_level = "info"
    listen_address = '[::]:9252'
  kubernetes.volumes: ""
  configure: |
    set -e
    cp /init-secrets/* /secrets
  register-the-runner: "#!/bin/bash\nMAX_REGISTER_ATTEMPTS=30\n\nfor i in $(seq 1 \"${MAX_REGISTER_ATTEMPTS}\"); do\n  echo \"Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}\"\n  /entrypoint register \\\n    --non-interactive\n\n  retval=$?\n\n  if [ ${retval} = 0 ]; then\n    break\n  elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then\n    exit 1\n  fi\n\n  sleep 5 \ndone\n\nexit 0\n"
  check-live: |
    #!/bin/bash
    if /usr/bin/pgrep -f .*register-the-runner; then
      exit 0
    elif /usr/bin/pgrep gitlab.*runner; then
      exit 0
    else
      exit 1
    fi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-gitlab-runner
  labels:
    app: release-name-gitlab-runner
    chart: gitlab-runner-0.12.6
    release: release-name
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: release-name-gitlab-runner
  template:
    metadata:
      labels:
        app: release-name-gitlab-runner
        chart: gitlab-runner-0.12.6
        release: release-name
        heritage: Helm
      annotations:
        checksum/configmap: 946f1e7fc4cb218855be43e31b1fc68db1aac2bbcac931bdc7a0db05d805a942
        checksum/secrets: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        prometheus.io/scrape: "true"
        prometheus.io/port: "9252"
    spec:
      securityContext:
        runAsUser: 100
        fsGroup: 65533
      terminationGracePeriodSeconds: 3600
      initContainers:
        - name: configure
          command:
            - sh
            - /config/configure
          image: gitlab/gitlab-runner:alpine-v12.6.0
          imagePullPolicy: IfNotPresent
          env:
            - name: CI_SERVER_URL
              value: null
            - name: CLONE_URL
              value: ""
            - name: RUNNER_REQUEST_CONCURRENCY
              value: "1"
            - name: RUNNER_EXECUTOR
              value: kubernetes
            - name: REGISTER_LOCKED
              value: "true"
            - name: RUNNER_TAG_LIST
              value: ""
            - name: RUNNER_OUTPUT_LIMIT
              value: "4096"
            - name: KUBERNETES_IMAGE
              value: ubuntu:16.04
            - name: KUBERNETES_NAMESPACE
              value: default
            - name: KUBERNETES_POLL_TIMEOUT
              value: "180"
            - name: KUBERNETES_CPU_LIMIT
              value: ""
            - name: KUBERNETES_MEMORY_LIMIT
              value: ""
            - name: KUBERNETES_CPU_REQUEST
              value: ""
            - name: KUBERNETES_MEMORY_REQUEST
              value: ""
            - name: KUBERNETES_SERVICE_ACCOUNT
              value: ""
            - name: KUBERNETES_SERVICE_CPU_LIMIT
              value: ""
            - name: KUBERNETES_SERVICE_MEMORY_LIMIT
              value: ""
            - name: KUBERNETES_SERVICE_CPU_REQUEST
              value: ""
            - name: KUBERNETES_SERVICE_MEMORY_REQUEST
              value: ""
            - name: KUBERNETES_HELPER_CPU_LIMIT
              value: ""
            - name: KUBERNETES_HELPER_MEMORY_LIMIT
              value: ""
            - name: KUBERNETES_HELPER_CPU_REQUEST
              value: ""
            - name: KUBERNETES_HELPER_MEMORY_REQUEST
              value: ""
            - name: KUBERNETES_HELPER_IMAGE
              value: ""
            - name: KUBERNETES_PULL_POLICY
              value: ""
          volumeMounts:
            - name: runner-secrets
              mountPath: /secrets
              readOnly: false
            - name: scripts
              mountPath: /config
              readOnly: true
            - name: init-runner-secrets
              mountPath: /init-secrets
              readOnly: true
          resources: {}
      serviceAccountName: ""
      containers:
        - name: release-name-gitlab-runner
          image: gitlab/gitlab-runner:alpine-v12.6.0
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - /scripts/entrypoint
          env:
            - name: CI_SERVER_URL
              value: null
            - name: CLONE_URL
              value: ""
            - name: RUNNER_REQUEST_CONCURRENCY
              value: "1"
            - name: RUNNER_EXECUTOR
              value: kubernetes
            - name: REGISTER_LOCKED
              value: "true"
            - name: RUNNER_TAG_LIST
              value: ""
            - name: RUNNER_OUTPUT_LIMIT
              value: "4096"
            - name: KUBERNETES_IMAGE
              value: ubuntu:16.04
            - name: KUBERNETES_NAMESPACE
              value: default
            - name: KUBERNETES_POLL_TIMEOUT
              value: "180"
            - name: KUBERNETES_CPU_LIMIT
              value: ""
            - name: KUBERNETES_MEMORY_LIMIT
              value: ""
            - name: KUBERNETES_CPU_REQUEST
              value: ""
            - name: KUBERNETES_MEMORY_REQUEST
              value: ""
            - name: KUBERNETES_SERVICE_ACCOUNT
              value: ""
            - name: KUBERNETES_SERVICE_CPU_LIMIT
              value: ""
            - name: KUBERNETES_SERVICE_MEMORY_LIMIT
              value: ""
            - name: KUBERNETES_SERVICE_CPU_REQUEST
              value: ""
            - name: KUBERNETES_SERVICE_MEMORY_REQUEST
              value: ""
            - name: KUBERNETES_HELPER_CPU_LIMIT
              value: ""
            - name: KUBERNETES_HELPER_MEMORY_LIMIT
              value: ""
            - name: KUBERNETES_HELPER_CPU_REQUEST
              value: ""
            - name: KUBERNETES_HELPER_MEMORY_REQUEST
              value: ""
            - name: KUBERNETES_HELPER_IMAGE
              value: ""
            - name: KUBERNETES_PULL_POLICY
              value: ""
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - /scripts/check-live
            initialDelaySeconds: 60
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /usr/bin/pgrep
                - gitlab.*runner
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: metrics
              containerPort: 9252
          volumeMounts:
            - name: runner-secrets
              mountPath: /secrets
            - name: etc-gitlab-runner
              mountPath: /home/gitlab-runner/.gitlab-runner
            - name: scripts
              mountPath: /scripts
          resources:
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: runner-secrets
          emptyDir:
            medium: Memory
        - name: etc-gitlab-runner
          emptyDir:
            medium: Memory
        - name: init-runner-secrets
          projected:
            sources:
              - secret:
                  name: release-name-gitlab-runner
                  items:
                    - key: runner-registration-token
                      path: runner-registration-token
                    - key: runner-token
                      path: runner-token
        - name: scripts
          configMap:
            name: release-name-gitlab-runner
