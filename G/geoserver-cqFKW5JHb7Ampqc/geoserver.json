[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "cqFKW5JHb7Ampqc",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "secrets": [
      {
        "name": "release-name-rabbitmq"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-geoserver",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.13.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "cqFKW5JHb7Ampqc"
    },
    "type": "Opaque",
    "data": {
      "postgresql-postgres-password": "RHQ4ZkViYXZKcw==",
      "postgresql-password": "cGFzc3dvcmQ="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql-crt",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.13.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "kubernetes.io/tls",
    "data": {
      "ca.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRQzR0bzk5NmRMb2pMbDRLanBDNTVmREFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxd2IzTjBaM0psYzNGc0xXTmhNQjRYRFRJeU1EWXhNakV3TXpjek9Gb1hEVEl6TURZeApNakV3TXpjek9Gb3dHREVXTUJRR0ExVUVBeE1OY0c5emRHZHlaWE54YkMxallUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLemRZRnNucU02UHFpRS9EbDRjaGowdmdCWDVadlE0RkoxQURKeVUKajU2WjN1ckN6YnNqMlUvSkc3ejJEZ1RaemFRTzVISEVWTVQxd1YxR0VMRTdOOTlqeXdKQjJhamw2c2dnN3hwegpoU1N4NzNyOU1YQVdGV2RDdW5RMUVRTkNmaFNIQXRHVFQyaCtzejVTRDVlSnpHNWtUWUY0SUxLbi9zTy9tcTJiCmRMRVRXMHlVb1lMR015dFM4QUVKRmhvSjg0WE9jZldQSzBXUXRaVXJ6TlMxbHA5NlhYVzJBNks3Ty9qQ3BoZ3QKcFA2UUxqeUxCWDRhYWxTQW9SbFh0VGYyU2FMR0tPWEtlMTdldDNuc0dKaGMyaUlGeDlXdDdUWGJRbU1zSjZVVQo1RWJFSkhKSE5nSDlFL29qaUJTa0t5MS9iUkd4Znp1VUNVSStZcjN5UGYxbEdxa0NBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUzkzYXVhTVBJczZtaXUxV2xPQ1d2WWpnbzBFakFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQWR6QlVtckd1RFJ5UlY1em83QTZSNjNYamUySnVVakJ2Y29ReU5UYTVYZG1GCmFWN1RoRlM1UW5RZ0ZuVlRpM1RLQ2J3VTdWa1lhamkyeDlxdHdIOW1SKzRyeXpRT01kbzRWY3NuRmNaUVU3cUIKakRWMW1JOHhpcWVZVlR5bkZmcmdIeWRJRzVCai84RDVDY1Y4cTRWdHVyWnptaHdaQXBLNnc1cjhLd2Eza1pzeQpMZktSMThsWTc0SERZK0VxQ3pRWGIvNmRKMXlCMlBaanZTdzZjY3djM1pncGxOVjUxUzFxdmE5T202N2U4ZCs4CkhuMmFpNDlTeTh5TktYS3hZN1dRZmtSZWVuRzdWQ2xVQlZud0QxMjBsclVxRWsyZ3VNQ2FwN3dvMEFJcW4yNmUKN0RPemZSOVJMaHZNcUx1Z3ZZVVR2R3JXcVNpQzgxclFoRjh0QTlDSE9BPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
      "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVKVENDQXcyZ0F3SUJBZ0lRVE1mTzY1c2FETjlCNGtzYVRwZ1lzVEFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxd2IzTjBaM0psYzNGc0xXTmhNQjRYRFRJeU1EWXhNakV3TXpjek9Gb1hEVEl6TURZeApNakV3TXpjek9Gb3dJakVnTUI0R0ExVUVBeE1YY21Wc1pXRnpaUzF1WVcxbExYQnZjM1JuY21WemNXd3dnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRGRjVmVZYXF0SEdoUDlKazAvMW4yME45OEwKNy9UV3dQQ3pnQklDd2ZaQ2RkM0xSaXRVa0pJRlBkZEo0N2FhekdpR2NVSVB2WVJ0OVlLaFZock1NcTZHeFBMdAp0RkMzd0ZMaVRrMlhJdnF6QWI1cVZVdzFpTDI5N1h5RGE2UXZuYS9QdThwZ2s2dkxYTVArSWJBUm9SNU1jMUN2CmtTQzcyTjB2d2pqL2UyeWJBWHJNNTFlMTQ5YzdPSC9iV05ONlFtUUd0VGt4bWtINWNoQ0dMMUVqOXNDUW15cDEKWUthZno2RHNEVEp0OWx4SDhnWGEyeldHNkNLLzR6RXFRaXJFeXdock82NlBPbDhpcTZZZjZ2MHh5WTdwY0U5Qwo0MHZwZjJPb1lSemZXbk94L1lmR3k0WDNzSVowclVMbFE4eStUWmIvNnprWEVxc1pIbXY0QXduS3FLdHJBZ01CCkFBR2pnZ0ZmTUlJQld6QU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUcKQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVdmQycm1qRHlMT3BvcnRWcApUZ2xyMkk0S05CSXdnZm9HQTFVZEVRU0I4akNCNzRJd0tpNXlaV3hsWVhObExXNWhiV1V0Y0c5emRHZHlaWE54CmJDNWtaV1poZFd4MExuTjJZeTRsSVhNb1BHNXBiRDRwZ2k1eVpXeGxZWE5sTFc1aGJXVXRjRzl6ZEdkeVpYTngKYkM1a1pXWmhkV3gwTG5OMll5NGxJWE1vUEc1cGJENHBnamtxTG5KbGJHVmhjMlV0Ym1GdFpTMXdiM04wWjNKbApjM0ZzTFdobFlXUnNaWE56TG1SbFptRjFiSFF1YzNaakxpVWhjeWc4Ym1sc1BpbUNOM0psYkdWaGMyVXRibUZ0ClpTMXdiM04wWjNKbGMzRnNMV2hsWVdSc1pYTnpMbVJsWm1GMWJIUXVjM1pqTGlVaGN5ZzhibWxzUGltQ0YzSmwKYkdWaGMyVXRibUZ0WlMxd2IzTjBaM0psYzNGc01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQXQvNzFlSXJJNApHVC9DRDU4OWR5dlRJbkM3S3JJU1k2Wi9ubzh3VlJxREVDVWdOS1NGWnUyR1hXdWFselA2bzkxZkNCZ3IzQkdQCno4SHlMYkZXMEI3K0N5QjQ5TkFhaVNnbnVvOXpKUXBjbDZBL0NUWUorMU1leGcvWVROcFhjYk40N29hNjdRbHoKYjB5QXdkeS90bm9FeW9PR3BHdXhrOGJjRUZNeGcxYXJVMThFVnRRazJpUllJb3MzdE1GNHB6MzJpb1B4djVUcgpPeU53a3FhZld5YlFkQU9YNWg4S3lQV0tscmFKZjVES3NWZUhsRU94QXhUM0FUaFhLZVcrUnIweGxUZ01RQWY0CmRCY0dPdmUzNll3azdVWkJrNU1Tci9OdkdWUXU5Y0l6TzJNNm1mYkdHNmxuMWtKNnNTUThOUnBhYmptU2huSDQKdlZ4QXRlWCtvbzNzCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
      "tls.key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBM1hGWG1HcXJSeG9UL1NaTlA5Wjl0RGZmQysvMDFzRHdzNEFTQXNIMlFuWGR5MFlyClZKQ1NCVDNYU2VPMm1zeG9obkZDRDcyRWJmV0NvVllhekRLdWhzVHk3YlJRdDhCUzRrNU5seUw2c3dHK2FsVk0KTllpOXZlMThnMnVrTDUydno3dktZSk9yeTF6RC9pR3dFYUVlVEhOUXI1RWd1OWpkTDhJNC8zdHNtd0Y2ek9kWAp0ZVBYT3poLzIxalRla0prQnJVNU1acEIrWElRaGk5UkkvYkFrSnNxZFdDbW44K2c3QTB5YmZaY1IvSUYydHMxCmh1Z2l2K014S2tJcXhNc0lhenV1anpwZklxdW1IK3I5TWNtTzZYQlBRdU5MNlg5anFHRWMzMXB6c2YySHhzdUYKOTdDR2RLMUM1VVBNdmsyVy8rczVGeEtyR1I1citBTUp5cWlyYXdJREFRQUJBb0lCQVFDYVNZUThuK1dpYnBzSwp3SXNHTlkzejZSR3hJWWszcjhxRlpuQW1GN3BhNkFDV3h0Y2QzblMremkyWVA5NVUwS0xyT1RKTUFVR3AwMnNtCnVmV0YzTElaR0ZRaUpvWXU0UU5leGl2dForUEFvVEJvcWZHbFF4YmdvLzBqRy9hVGJveTJjaU01VXVwWmtOTEYKMS9ieThZMUl1dmUydTZsUStISnoraUQ0Y0toay9rRHZjZFpkZWREcjZpNkd6eVNQaEYyaFJJaU8wcVd0ZHBmMApmWS9kWkJ0V214dWFicUtXc011VmhSeDFiR0k0c0ptRG9ONFBTNTBudWFJOEtvTnQrNmpYK21Vajl1Sis1Ykd0CnhPUUo0NFdYelJMZm1GWXFwM056NDVHMm4zWHhjeHpXOFo4eFkxMzVXUitEZEZxNGxQcjhLUTd2a1BIWlMvU3gKUnJWODA1dUJBb0dCQU9XcjVYMG4yNWlGZm9temp2Z3kyM2hhUEFSUkNsUlVKeEhLRUloL0ZoVjU4RzdpRTloMwpFdkNBS2tiNGRCUGVUcndaNUE2ZGxhYlV2bFdhb2VqV0NYUW1aYlZHNHBlUTRXcFgrT0tGVFFSVVl5eUZrVThFCmFJM0lmVmZhOFhQNmFyT3gyMExCT2JKSHJLOEljVmhjUmlzREVOWXliQzAzOHBiQm84bWtlemlMQW9HQkFQYlQKOWFlOS9RcUc0bDYrTzVwZE9tdnpVNDRMa1Y4NFFnY3U2SnpVaUVNbkl0VUZGaUEzNW5keWdtQ2hTazk0Z0Y3Rwp5MEZxNlNBMmFVZE9Zclp1WFB2NmRFZ0hPdGtRRG5pMjYrU3p1NEVXdVZEcEFvWWZncG52Ty82TWxWVExmaWxkCndJUi8xbmR4RkpPUlhFcjYzSWtDNVlPMXFIZnNtU0t5Z3pwdTVkU2hBb0dCQUxqVjRZZ2E5ckRGNXJOZGpaY1UKSHVxNS9Ba2hTMlhZbitUQ01SSVk3U1gxajlrOUd1bWYwdDg0MWsxdGtNV1lxTmJiSTEzYjF0OS80WG8xUzA1KwpTdmR1RzNhTGlMcWYvN204K1BFY2hJSVNoQW9GcUk3bUpsck0yb3RGQ2dManF0SFpObk4vM0RZdFZyMDYxelZjCmRhQVNCSS9OM3A5NW9rTlByY2dQRnBmSEFvR0JBSjF3cUJJZUNxakxUdHRXQmxpNVBNbWN4T0FuR3N3YzYyai8KajlweGFwVkRBbUhVUTcrN1NHTktoRVUwdkZ5aXBXZE84RmxDNDM3cmxnMm92eWhVanpVZkZVcllhYjRKRXVJRwo4OExHcmtSeUJUVEozQlZIUmh3QVVFbFd6TzN3ZXdIUnpqbjEvUXZrOGxZS2MwOVVZcFYyWm9XenVzajcvdFgxCi9lU28xaXJoQW9HQkFKb0RlRDkyUks4OTQyQndQSjMrb3lWUlJaL1FSOGJJaU4vb3U0ZG92RU54Vzg1VS8xOHUKcHYrTWlhNU4rbHBQNlcydEdqWS9JUGVKOWFoRlpYYTVkTzlEbGE4K25ZUS9JRnNRdlJpazZNNGl5ZXQyMUQzTQpzVlR4OTRlV1lCa21qam1mb1ZBN3lRZm94WnY0SVBmdVJoOTZ4V2I1bEdabGl6ZkthTGNUeDQrTwotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
    }
  },
  {
    "apiVersion": "v1",
    "data": {
      "DATABASE_NAME": "Y29uZmln",
      "HOST": "cmVsZWFzZS1uYW1lLXBvc3RncmVzcWw=",
      "ROLE": "dXNlcm5hbWU=",
      "PASSWORD": "cGFzc3dvcmQ="
    },
    "kind": "Secret",
    "metadata": {
      "name": "jdbcconfig-release-name-geoserver"
    },
    "type": "Opaque"
  },
  {
    "apiVersion": "v1",
    "data": {
      "rabbitmq-erlang-cookie": "UDQ1UXdPNEJaZFBOZkFLNGhMVnZnQ0tUbVFoZ1pn",
      "rabbitmq-password": "Z2Vvc2VydmVy"
    },
    "kind": "Secret",
    "metadata": {
      "name": "geoserver-rabbitmq"
    },
    "type": "Opaque"
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-rabbitmq-config",
      "namespace": "cqFKW5JHb7Ampqc",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "rabbitmq.conf": "## Username and password\ndefault_user = geoserver\ndefault_pass = CHANGEME\n## Clustering\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator = min-masters\n# enable guest user\nloopback_users.guest = false\n#default_vhost = default-vhost\n#disk_free_limit.absolute = 50MB\n#load_definitions = /app/load_definition.json"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-geoserver-init-db",
      "annotations": null,
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "init-db.sql": "-- tables\nCREATE TABLE object (\n  oid serial NOT NULL,\n  type_id int4 NOT NULL,\n  id text NOT NULL,\n  blob text NOT NULL,\n  PRIMARY KEY (oid)\n);\n\nCREATE TABLE object_property (\n  oid int4 NOT NULL,\n  property_type int4 NOT NULL,\n  id text NOT NULL,\n  related_oid int4,\n  related_property_type int4,\n  colindex int4 NOT NULL,\n  value text,\n  PRIMARY KEY (oid, property_type, colindex)\n);\n\nCREATE TABLE type (\n  oid serial NOT NULL,\n  typename text NOT NULL,\n  PRIMARY KEY (OID)\n);\n\nCREATE TABLE property_type (\n  oid  serial NOT NULL,\n  target_property int4,\n  type_id int4 NOT NULL,\n  name text NOT NULL,\n  collection bool NOT NULL,\n  text bool NOT NULL,\n  PRIMARY KEY (oid)\n);\n\nCREATE TABLE default_object (\n  def_key text NOT NULL,\n  id text NOT NULL\n\n);\n\n-- foreign keys\nALTER TABLE object_property ADD CONSTRAINT fk_object_property\n  FOREIGN KEY (oid) REFERENCES object (oid) ON DELETE CASCADE;\n\nALTER TABLE property_type ADD CONSTRAINT\n  fk_type_property_type FOREIGN KEY (type_id) REFERENCES type (oid);\n\nALTER TABLE object ADD CONSTRAINT\n  fk_object_type FOREIGN KEY (type_id) REFERENCES type (oid);\n\nALTER TABLE property_type ADD CONSTRAINT\n  fk_property_type_target_property FOREIGN KEY (target_property) REFERENCES property_type (oid);\n\nALTER TABLE object_property ADD CONSTRAINT\n  fk_object_property_property_type FOREIGN KEY (property_type) REFERENCES property_type (oid);\n\n-- indexes\nCREATE INDEX object_type_id_idx ON object (type_id);\nCREATE UNIQUE INDEX object_id_idx ON object (id);\n\nCREATE INDEX object_property_value_upper_idx ON object_property (UPPER(value));\nCREATE INDEX object_property_property_type_idx ON object_property (property_type);\nCREATE INDEX object_property_id_idx ON object_property (id);\nCREATE INDEX object_property_related_oid_idx ON object_property (related_oid);\nCREATE INDEX object_property_related_property_type_idx ON object_property (related_property_type);\nCREATE INDEX object_property_colindex_idx ON object_property (colindex);\nCREATE INDEX object_property_value_idx ON object_property (value);\n\nCREATE UNIQUE INDEX type_typename_idx ON type (typename);\n\nCREATE INDEX property_type_target_property_idx ON property_type (target_property);\nCREATE INDEX property_type_type_id_idx ON property_type (type_id);\nCREATE INDEX property_type_name_idx ON property_type (name);\nCREATE INDEX property_type_collection_idx ON property_type (collection);\n-- Avoid creating the same target property mapping twice\nCREATE UNIQUE INDEX property_type_unique_target_idx ON property_type (target_property, type_id, name);\n\nCREATE INDEX default_object_def_key_idx ON default_object (def_key);\nCREATE INDEX default_object_id_idx ON default_object (id);\n\n-- views\n-- workspace view\nCREATE OR REPLACE VIEW workspace AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT e.value\n          FROM object_property e, property_type f\n        WHERE e.property_type = f.oid\n          AND e.oid = (SELECT g.oid\n                          FROM object_property g, property_type h\n                        WHERE g.property_type = h.oid\n                          AND g.value = (SELECT i.value\n                                            FROM object_property i, property_type j\n                                          WHERE i.oid = a.oid\n                                            AND i.property_type = j.oid\n                                            AND j.name = 'name')\n                          AND h.name = 'prefix')\n          AND f.name = 'URI') as uri\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.catalog.WorkspaceInfo';\n\n-- datastore view\nCREATE OR REPLACE VIEW datastore AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'description') as description,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'type') as type,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'enabled') as enabled,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'workspace.id') workspace\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.catalog.DataStoreInfo';\n\n-- feature type view\nCREATE OR REPLACE VIEW featuretype AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'nativeName') as native_name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'prefixedName') as prefixed_name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'title') as title,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'abstract') as abstract,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'SRS') as srs,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'projectionPolicy') as projection_policy,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'enabled') as enabled,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'store.id') store,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'namespace.id') namespace\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.catalog.FeatureTypeInfo';\n\n-- coveragestore view\nCREATE OR REPLACE VIEW coveragestore AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'description') as description,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'type') as type,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'enabled') as enabled,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'workspace.id') workspace\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.catalog.CoverageStoreInfo';\n\n-- coverage view\nCREATE OR REPLACE VIEW coverage AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'nativeName') as native_name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'prefixedName') as prefixed_name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'title') as title,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'abstract') as abstract,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'SRS') as srs,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'projectionPolicy') as projection_policy,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'enabled') as enabled,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'store.id') store,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'namespace.id') namespace\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.catalog.CoverageInfo';\n\n-- wmsstore view\nCREATE OR REPLACE VIEW wmsstore AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'description') as description,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'capabilitiesURL') as capabilities_url,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'type') as type,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'enabled') as enabled,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'workspace.id') workspace\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.catalog.WMSStoreInfo';\n\n-- wms layer view\nCREATE OR REPLACE VIEW wmslayer AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'nativeName') as native_name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'prefixedName') as prefixed_name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'title') as title,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'abstract') as abstract,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'SRS') as srs,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'projectionPolicy') as projection_policy,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'enabled') as enabled,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'store.id') store,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'namespace.id') namespace\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.catalog.WMSLayerInfo';\n\n-- style view\nCREATE OR REPLACE VIEW style AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'filename') as filename,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'workspace.id') workspace\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.catalog.StyleInfo';\n\n-- layer view\nCREATE OR REPLACE VIEW layer AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'title') as title,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'abstract') as abstract,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'type') as type,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'enabled') as enabled,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'defaultStyle.id') default_style,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'resource.id') resource\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.catalog.LayerInfo';\n\n-- layergroup styles\nCREATE OR REPLACE VIEW layer_style AS\nSELECT a.oid, b.related_oid as style\n  FROM object a, object_property b, property_type c, type d\nWHERE a.oid = b.oid\n  AND a.type_id = d.oid\n  AND b.property_type = c.oid\n  AND c.name = 'styles.id'\n  AND d.typename = 'org.geoserver.catalog.LayerInfo';\n\n-- layer group view\nCREATE OR REPLACE VIEW layergroup AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'title') as title,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'abstract') as abstract,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'mode') as mode,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'workspace.id') workspace\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.catalog.LayerGroupInfo';\n\n-- layergroup layers\nCREATE OR REPLACE VIEW layergroup_layer AS\nSELECT a.oid, b.related_oid as layer\n  FROM object a, object_property b, property_type c, type d\nWHERE a.oid = b.oid\n  AND a.type_id = d.oid\n  AND b.property_type = c.oid\n  AND c.name = 'layers.id'\n  AND d.typename = 'org.geoserver.catalog.LayerGroupInfo';\n\n-- layergroup styles\nCREATE OR REPLACE VIEW layergroup_style AS\nSELECT a.oid, b.related_oid as style\n  FROM object a, object_property b, property_type c, type d\nWHERE a.oid = b.oid\n  AND a.type_id = d.oid\n  AND b.property_type = c.oid\n  AND c.name = 'styles.id'\n  AND d.typename = 'org.geoserver.catalog.LayerGroupInfo';\n\n-- global view\nCREATE OR REPLACE VIEW global AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'featureTypeCacheSize') as feature_type_cache_size,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'globalServices') as global_services,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'xmlPostRequestLogBufferSize') as xml_post_request_log_buffer_size,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'updateSequence') as update_sequence,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'settings.id') as settings\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.config.GeoServerInfo';\n\n-- settings view\nCREATE OR REPLACE VIEW settings AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'title') as title,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'charset') as charset,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'verbose') as verbose,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'verboseExceptions') as verbose_exceptions,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'numDecimals') as num_decimals,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'onlineResource') as online_resource,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'proxyBaseUrl') as proxy_base_url,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'schemaBaseUrl') as schema_base_url,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'workspace.id') as workspace\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.config.SettingsInfo';\n\n-- service view\nCREATE OR REPLACE VIEW service AS\nSELECT a.oid,\n      a.id,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'name') as name,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'title') as title,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'abstract') as abstract,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'maintainer') as maintainer,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'verbose') as verbose,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'citeCompliant') as cite_compliant,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'outputStrategy') as output_strategy,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'onlineResource') as online_resource,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'schemaBaseURL') as schema_base_url,\n      (SELECT c.value\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'enabled') as enabled,\n      (SELECT c.related_oid\n          FROM object_property c, property_type d\n        WHERE c.oid = a.oid\n          AND c.property_type = d.oid\n          AND d.name = 'workspace.id') as workspace\n  FROM object a, type b\nWHERE a.type_id = b.oid\n  AND b.typename = 'org.geoserver.config.ServiceInfo';\n\nCREATE TABLE resources\n(\n  oid serial NOT NULL,\n  name character varying NOT NULL,\n  parent integer,\n  last_modified timestamp without time zone NOT NULL DEFAULT timezone('UTC'::text, now()),\n  content bytea,\n  CONSTRAINT resources_pkey PRIMARY KEY (oid),\n  CONSTRAINT resources_parent_fkey FOREIGN KEY (parent)\n      REFERENCES resources (oid)\n      ON UPDATE RESTRICT ON DELETE CASCADE,\n  CONSTRAINT resources_parent_name_key UNIQUE (parent, name),\n  CONSTRAINT resources_only_one_root_check CHECK (parent IS NOT NULL OR oid = 0)\n);\n\nCREATE INDEX resources_parent_name_idx\n  ON resources (parent NULLS FIRST, name NULLS FIRST);\n\nINSERT INTO resources (oid, name, parent, content) VALUES (0, '', NULL, NULL);\n\n-- only the required table(s) to support distributed locking, from\n-- spring-integration-jdbc-<version>.jar/org/springframework/integration/jdbc/schema-postgresql.sql\n-- Table named RESOURCE_LOCK instead of INT_LOCK\nCREATE TABLE RESOURCE_LOCK  (\n  LOCK_KEY CHAR(36) NOT NULL,\n  REGION VARCHAR(100) NOT NULL,\n  CLIENT_ID CHAR(36),\n  CREATED_DATE TIMESTAMP NOT NULL,\n  constraint LOCK_PK primary key (LOCK_KEY, REGION)\n);\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-geoserver-config-configs",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "config"
      }
    },
    "data": {
      "application.yml": "server:\n  tomcat:\n    # Maximum number of connections that the server accepts and processes at any given time.\n    # Once the limit has been reached, the operating system may still accept connections based on the \"acceptCount\" property.\n    max-connections: 1000 # default: 8192\n    # Maximum queue length for incoming connection requests when all possible request processing threads are in use.\n    accept-count: 100 # default: 100\n    accesslog:\n      enabled: false\n      directory: logs\n      encoding: UTF-8\n    threads:\n      # Minimum amount of worker threads.\n      min-spare: 2 #default: 10\n      # Maximum amount of worker threads.\n      max: 20 #default: 200\n\n# Common configuration for all services. Override or add service specific config\n# properties on each <service-name>-service.yml file\ngeoserver:\n  security.enabled: true\n  servlet.filter.session-debug.enabled: false # until the NPE is fixed\n  catalog:\n    advertised: true\n    localWorkspace: true\n    secure: true\n    # enable caching if using the catalog-service as backend\n    caching.enabled: ${geoserver.backend.catalog-service.enabled}\n  bus:\n    # whether to send distributed events (i.e. acts as master). All instances receive remote events.\n    send-events: true\n    # whether to send the object (CatalogInfo/config info) as payload with the event. Set to false, \n    # not all possible payload types are properly tested, and full object payload is not needed.\n    send-object: ${geoserver.backend.data-directory.enabled}\n    # whether to send a diff of changes as payload with the event. Set to false, not all possible payload types are properly tested nor needed.\n    send-diff: ${geoserver.backend.data-directory.enabled}\n  backend:\n    # configure catalog backends and decide which backend to use on this service.\n    # All backends are disabled, enable the required one on each service. For example, the catalog microservice \n    # will enable one backend type, and the front services the catalog-service backend.\n    # revisit: Could be split into profiles\n    catalog-service:\n      enabled: ${backend.catalog:false}\n      # Base URI of the catalog service. If not set, will be automatically determined using the discovery service, looking for \"catalog-service\"\n      # This allows to explicitly set a fixed location for the catalog service.\n      # uri: http://catalog:8080\n      cache-directory: ${java.io.tmpdir}/cngs/catalog-client/resource_store\n      fallback-resource-directory: ${java.io.tmpdir}/cngs/catalog-client/fallback_resource_store\n    data-directory:\n      enabled: ${backend.data-directory:false}\n      location: ${GEOSERVER_DATA_DIR:/opt/app/data_directory} \n    jdbcconfig:\n      enabled: ${backend.jdbcconfig:false}\n      initdb: false\n      web.enabled: true\n      cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/cngs/jdbcconfig/cache}\n      datasource:\n        jdbcUrl: \"jdbc:postgresql://${jdbcconfig.host}:5432/${jdbcconfig.database}\"\n        username: ${jdbcconfig.username:geoserver}\n        password: ${jdbcconfig.password:geo5erver}\n        driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}\n        # optional:\n        schema: ${jdbcconfig.schema:public}\n        minimumIdle: ${jdbcconfig.minConnections:2}\n        maximumPoolSize: ${jdbcconfig.maxConnections:8}\n\nmanagement:\n  endpoints:\n    enabled-by-default: true\n    web.exposure.include: \"*\"\n  endpoint:\n    info.enabled: true\n    metrics.enabled: true\n    shutdown.enabled: true\n    health:\n      enabled: true\n      show-details: always\n  metrics:\n    binders:\n      processor.enabled: true\n      uptime.enabled: true\n      jvm.enabled: true\n    enable.all: true\n    enable.jvm: true\n    export:\n      atlas.enabled: false\n\nspring:\n  rabbitmq: \n    host: release-name-geoserver-rabbitmq\n    port: 5672\n    username: geoserver\n    password: ${RABBITMQ_PASSWORD}\n  cloud:\n    bus:\n      enabled: true\n      id: ${server.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id\n      trace.enabled: false #switch on tracing of acks (default off).\n    stream:\n      bindings:\n        springCloudBusOutput:\n          destination: gscatalog\n        springCloudBusInput:\n          destination: gscatalog\n  jackson:\n    default-property-inclusion: non_empty\n    serialization.indent_output: false #set to true if doing manual testing and want formatted output\n\nreactive.feign.cloud.enabled: true\nreactive.feign.hystrix.enabled: false\n\nlogging:\n  level:\n    root: WARN\n    org.springframework: ERROR\n    org.springframework.cloud.bus: INFO\n    org.springframework.retry: INFO\n    # geoserver roots\n    org.geoserver: INFO\n    org.geoserver.catalog.plugin: INFO\n    org.geoserver.wms: WARN #don't flood the logs with every request details\n    org.geoserver.wfs: WARN\n    org.geoserver.jackson: INFO\n    org.geotools.jackson: INFO\n    org.geoserver.platform: INFO\n    org.geoserver.platform.resource: INFO\n    org.geoserver.jdbcconfig: INFO\n    oshi.hardware.platform.linux: ERROR\n    oshi.software.os: ERROR\n    # gs-cloud roots\n    org.geoserver.cloud: INFO\n    org.geoserver.cloud.autoconfigure: INFO\n    org.geoserver.cloud.config.factory: INFO\n    # bus debugging\n    org.geoserver.cloud.bus: INFO\n    org.springframework.cloud.bus.BusAutoConfiguration: INFO\n    org.springframework.cloud.bus.DefaultBusPathMatcher: INFO\n    # reactivefeign:\n    reactivefeign.client.log: INFO\n    org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN\n\n---\nspring.profiles: local\n# provide environment variables that otherwise would be given by docker-compose.yml\nrabbitmq.host: localhost\n\njdbcconfig.url: jdbc:postgresql://localhost:5432/geoserver_config\njdbcconfig.username: geoserver\njdbcconfig.password: geo5erver\n---\nspring.profiles: datadir\nbackend.jdbcconfig: false\nbackend.catalog: false\nbackend.data-directory: true\n---\nspring.profiles: jdbcconfig\nbackend.jdbcconfig: true\nbackend.catalog: false\nbackend.data-directory: false\n---\nspring.profiles: catalog\nbackend.catalog: true\nbackend.jdbcconfig: false\nbackend.data-directory: false\n---\nspring.profiles: debug\n\nlogging:\n  level:\n    root: WARN\n    org.springframework: INFO\n    # geoserver roots\n    org.geoserver: INFO\n    org.geoserver.catalog.plugin: DEBUG\n    org.geoserver.wms: WARN\n    org.geoserver.wfs: WARN\n    org.geoserver.jackson: DEBUG\n    org.geotools.jackson: DEBUG\n    org.geoserver.platform: ERROR\n    org.geoserver.jdbcconfig: INFO\n    # gs-cloud roots\n    org.geoserver.cloud: DEBUG\n    org.geoserver.cloud.autoconfigure: DEBUG\n    org.geoserver.cloud.config.factory: DEBUG\n    # bus debugging\n    org.geoserver.cloud.bus: TRACE\n    org.springframework.cloud.bus: DEBUG\n    org.springframework.cloud.bus.BusAutoConfiguration: DEBUG\n    org.springframework.cloud.bus.DefaultBusPathMatcher: INFO\n    # reactivefeign:\n    reactivefeign.client.log: DEBUG\n",
      "config-service.yml": "spring:\n  profiles:\n    active: native #use native filesystem config by default instead of git. REVISIT.\n  config.server.native.searchLocations: ${config.path:file:./config}\n\nlogging:\n  level:\n    root: WARN\n    org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN\n",
      "gateway-service.yml": "server:\n  compression:\n    enabled: true\n# Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html\n\nmanagement:\n  endpoint.gateway.enabled: true # default value\n  endpoints:\n    enabled-by-default: true\n    web.exposure.include: \"*\"\n    #web.exposure.include: gateway, info, health\n    \nspring:\n  cloud:\n    gateway:\n      actuator:\n        verbose:\n          enabled: true\n      routes:\n      - id: catalog\n        uri: lb://catalog-service\n        predicates:\n        - Path=/api/v1/**\n        filters: # Expose the catalog and configuration API only if the dev profile is active\n        - RouteProfile=dev,403\n# WFS routes\n      - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs\n        uri: lb://wfs-service #load balanced to the wfs-service instances\n        predicates:\n        - Path=/wfs,/{segment}/wfs,/schemas/wfs/**\n# proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.\n      - id: wfs_ows\n        uri: lb://wfs-service\n        predicates:\n        - Path=/ows,/{segment}/ows\n        - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively \n# WMS routes\n      - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms\n        uri: lb://wms-service #load balanced to the wms-service instances\n        predicates:\n        - Path=/wms,/{segment}/wms,/schemas/wms/**,/openlayers/**,/openlayers3/**\n      - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.\n        uri: lb://wms-service\n        predicates:\n        - Path=/ows,/{segment}/ows\n        - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively \n# WCS routes\n      - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs\n        uri: lb://wcs-service #load balanced to the wps-service instances\n        predicates:\n        - Path=/wcs,/{segment}/wcs,/schemas/wcs/**\n      - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.\n        uri: lb://wcs-service\n        predicates:\n        - Path=/ows,/{segment}/ows\n        - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively \n# WPS routes\n      - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps\n        uri: lb://wps-service #load balanced to the wps-service instances\n        predicates:\n        - Path=/wps,/{segment}/wps,/schemas/wps/**\n      - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.\n        uri: lb://wps-service\n        predicates:\n        - Path=/ows,/{segment}/ows\n        - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively \n# REST configuration routes\n      - id: restconfig\n        uri: lb://restconfig-v1 #load balanced to the restconfig-v1 instances\n        predicates:\n        - Path=/rest/**\n# Web UI configuration routes\n      - id: restconfig\n        uri: lb://web-ui\n        predicates:\n        - Path=/,/index.html,/web,/web/**,/j_spring_security_check,/j_spring_security_logout\n\nlogging:\n  level:\n    root: WARN\n    com.netflix.discovery: WARN\n    com.netflix.eureka: WARN\n",
      "web-ui.yml": "geoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n  web-ui:\n    file-browser.hide-file-system: true\n    # These are all default values, here just for reference. You can omit them and add only the ones to disable or further configure\n    security.enabled: true\n    wfs.enabled: true\n    wms.enabled: true\n    wcs.enabled: true\n    wps.enabled: false # not working yet\n    gwc.enabled: false # not ready yet\n    extensions:\n      importer.enabled: true\n    demos:\n      enabled: true\n      wps-request-builder: true\n      wcs-request-builder: true\n      demo-requests: true\n      srs-list: true\n      reprojection-console: true\n      layer-preview-page:\n        enabled: true\n        common-formats:\n          open-layers: true\n          gml: true\n          kml: false #kml links are broken\n    tools:\n      enabled: true\n      resource-browser: true\n      catalog-bulk-load: true\n---\nspring.profiles: local\nserver.port: 9106\n",
      "restconfig-v1.yml": "geoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n---\nspring.profiles: local\nserver.port: 9105\n",
      "wfs-service.yml": "geoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n---\nspring.profiles: local\nserver.port: 9101\n  \n",
      "wms-service.yml": "geoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n---\nspring.profiles: local\nserver.port: 9102\n",
      "wcs-service.yml": "geoserver:\n  backend.catalog-service.enabled: ${backend.catalog:true}\n---\nspring.profiles: local\nserver.port: 9103\n"
    }
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "namespace": "cqFKW5JHb7Ampqc",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "namespace": "cqFKW5JHb7Ampqc",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-rabbitmq"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-rabbitmq-endpoint-reader"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.13.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      },
      "namespace": "cqFKW5JHb7Ampqc"
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.13.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null,
      "namespace": "cqFKW5JHb7Ampqc"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "role": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq-headless",
      "namespace": "cqFKW5JHb7Ampqc",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd"
        },
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp"
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist"
        },
        {
          "name": "http-stats",
          "port": 15672,
          "targetPort": "stats"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "rabbitmq",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "cqFKW5JHb7Ampqc",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp",
          "nodePort": null
        },
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd",
          "nodePort": null
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist",
          "nodePort": null
        },
        {
          "name": "http-stats",
          "port": 15672,
          "targetPort": "stats",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "rabbitmq",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserver-config",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "config"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "config"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserver-discovery",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "discovery"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8761,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "discovery"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserver-gateway",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "gateway"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "gateway"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserver-rest",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "rest"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "rest"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserver-wcs",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wcs"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "wcs"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserver-webui",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "webui"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "webui"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserver-wfs",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wfs"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "wfs"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-geoserver-wms",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wms"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "gs-service": "wms"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserver-config",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "config"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "2"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserver",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "config"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "geoserver",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "config"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserver",
          "securityContext": {
            "runAsUser": 630
          },
          "initContainers": [
            {
              "name": "configure-db",
              "image": "postgres:12",
              "command": [
                "psql",
                "-f",
                "/data/init-db.sql"
              ],
              "env": [
                {
                  "name": "PGHOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "PGDATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "PGUSER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "PGPASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "PASSWORD"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "init-db",
                  "mountPath": "/data"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "geoserver-config",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-config:1.0-RC2",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserver-discovery:8761/eureka"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "native"
                },
                {
                  "name": "CONFIG_NATIVE_PATH",
                  "value": "/opt/app/config"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "configs",
                  "mountPath": "/opt/app/config"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "600Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "300Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "configs",
              "configMap": {
                "name": "release-name-geoserver-config-configs"
              }
            },
            {
              "name": "init-db",
              "configMap": {
                "name": "release-name-geoserver-init-db"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserver-discovery",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "discovery"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "1"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserver",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "discovery"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "geoserver",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "discovery"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserver",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserver-discovery",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "image": "geoservercloud/geoserver-cloud-discovery:1.0-RC2",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "EUREKA_INSTANCE_HOSTNAME",
                  "value": "release-name-geoserver-discovery"
                },
                {
                  "name": "SERVER_PORT",
                  "value": "8761"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8761,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "cpu": "300m",
                  "memory": "600Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "300Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserver-gateway",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "gateway"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "3"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserver",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "gateway"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "geoserver",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "gateway"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserver",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserver-gateway",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-gateway:1.0-RC2",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserver-discovery:8761/eureka"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "800Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "400Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserver-rest",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "rest"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "9"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserver",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "rest"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "geoserver",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "rest"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserver",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserver-rest",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-rest:1.0-RC2",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserver-discovery:8761/eureka"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "jdbcconfig"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-geoserver-rabbitmq"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "512Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserver-wcs",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wcs"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "10"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserver",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "wcs"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "geoserver",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "wcs"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserver",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserver-wcs",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-wcs:1.0-RC2",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserver-discovery:8761/eureka"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "jdbcconfig"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "800Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "400Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserver-webui",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "webui"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "10"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserver",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "webui"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "geoserver",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "webui"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserver",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserver-webui",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-webui:1.0-RC2",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserver-discovery:8761/eureka"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "jdbcconfig"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_HOST",
                  "value": "release-name-geoserver-rabbitmq"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": "300m",
                  "memory": "512Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserver-wfs",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wfs"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "10"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserver",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "wfs"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "geoserver",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "wfs"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserver",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserver-wfs",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-wfs:1.0-RC2",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserver-discovery:8761/eureka"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "jdbcconfig"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "800Mi"
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "400Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-geoserver-wms",
      "labels": {
        "helm.sh/chart": "geoserver-0.0.3",
        "deployed_by": "argocd",
        "app.kubernetes.io/app_environment": "master",
        "app.kubernetes.io/base_environment": "dev",
        "app.kubernetes.io/name": "geoserver",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.0-RC2",
        "app.kubernetes.io/managed-by": "Helm",
        "gs-service": "wms"
      },
      "annotations": {
        "argocd.argoproj.io/sync-wave": "10"
      }
    },
    "spec": {
      "revisionHistoryLimit": 3,
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "geoserver",
          "app.kubernetes.io/instance": "release-name",
          "gs-service": "wms"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "geoserver",
            "app.kubernetes.io/instance": "release-name",
            "gs-service": "wms"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-geoserver",
          "securityContext": {
            "runAsUser": 630
          },
          "containers": [
            {
              "name": "geoserver-wms",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "geoservercloud/geoserver-cloud-wms:1.0-RC2",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-c",
                "java org.springframework.boot.loader.JarLauncher"
              ],
              "env": [
                {
                  "name": "EUREKA_SERVER_URL",
                  "value": "http://release-name-geoserver-discovery:8761/eureka"
                },
                {
                  "name": "BACKEND_CATALOG",
                  "value": "false"
                },
                {
                  "name": "BACKEND_DATA_DIRECTORY",
                  "value": "false"
                },
                {
                  "name": "BACKEND_JDBCCONFIG",
                  "value": "true"
                },
                {
                  "name": "SPRING_PROFILES_ACTIVE",
                  "value": "jdbcconfig"
                },
                {
                  "name": "JDBCCONFIG_DATABASE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "DATABASE_NAME"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_HOST",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "HOST"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "ROLE"
                    }
                  }
                },
                {
                  "name": "JDBCCONFIG_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jdbcconfig-release-name-geoserver",
                      "key": "PASSWORD"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "startupProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "failureThreshold": 30,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 10,
                "failureThreshold": 10,
                "initialDelaySeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/actuator/health",
                  "port": "http"
                },
                "periodSeconds": 5
              },
              "resources": {
                "limits": {
                  "memory": "800Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "400Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.13.8",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null,
      "namespace": "cqFKW5JHb7Ampqc"
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "role": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-10.13.8",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "role": "primary",
            "app.kubernetes.io/component": "primary"
          }
        },
        "spec": {
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "postgresql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "automountServiceAccountToken": false,
          "initContainers": [
            {
              "name": "init-chmod-data",
              "image": "docker.io/bitnami/bitnami-shell:10-debian-10-r248",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                }
              },
              "command": [
                "/bin/sh",
                "-cx",
                "chmod -R 777 /dev/shm\ncp /tmp/certs/* /opt/bitnami/postgresql/certs/\nchown -R 1001:1001 /opt/bitnami/postgresql/certs/\nchmod 600 /opt/bitnami/postgresql/certs/tls.key\n"
              ],
              "securityContext": {
                "runAsUser": 0
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "raw-certificates",
                  "mountPath": "/tmp/certs"
                },
                {
                  "name": "postgresql-certificates",
                  "mountPath": "/opt/bitnami/postgresql/certs"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/bitnami/postgresql:11.14.0-debian-10-r0",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "securityContext": {
                "runAsUser": 11060,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-postgres-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "username"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "config"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "yes"
                },
                {
                  "name": "POSTGRESQL_TLS_PREFER_SERVER_CIPHERS",
                  "value": "yes"
                },
                {
                  "name": "POSTGRESQL_TLS_CERT_FILE",
                  "value": "/opt/bitnami/postgresql/certs/tls.crt"
                },
                {
                  "name": "POSTGRESQL_TLS_KEY_FILE",
                  "value": "/opt/bitnami/postgresql/certs/tls.key"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"username\" -d \"dbname=config\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"username\" -d \"dbname=config sslcert=/opt/bitnami/postgresql/certs/tls.crt sslkey=/opt/bitnami/postgresql/certs/tls.key\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "postgresql-certificates",
                  "mountPath": "/opt/bitnami/postgresql/certs",
                  "readOnly": true
                },
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "raw-certificates",
              "secret": {
                "secretName": "release-name-postgresql-crt"
              }
            },
            {
              "name": "postgresql-certificates",
              "emptyDir": {}
            },
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory"
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "cqFKW5JHb7Ampqc",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.0.1",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-rabbitmq-headless",
      "podManagementPolicy": "OrderedReady",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "rabbitmq",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "rabbitmq",
            "helm.sh/chart": "rabbitmq-8.0.1",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm"
          },
          "annotations": null
        },
        "spec": {
          "serviceAccountName": "release-name-rabbitmq",
          "securityContext": {
            "fsGroup": 1001,
            "runAsUser": 1001
          },
          "terminationGracePeriodSeconds": 10,
          "containers": [
            {
              "name": "rabbitmq",
              "image": "docker.io/bitnami/rabbitmq:3.8.9-debian-10-r37",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MY_POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "K8S_SERVICE_NAME",
                  "value": "release-name-rabbitmq-headless"
                },
                {
                  "name": "K8S_ADDRESS_TYPE",
                  "value": "hostname"
                },
                {
                  "name": "RABBITMQ_FORCE_BOOT",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_NODE_NAME",
                  "value": "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "K8S_HOSTNAME_SUFFIX",
                  "value": ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "RABBITMQ_MNESIA_DIR",
                  "value": "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
                },
                {
                  "name": "RABBITMQ_LDAP_ENABLE",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_LOGS",
                  "value": "-"
                },
                {
                  "name": "RABBITMQ_ULIMIT_NOFILES",
                  "value": "65536"
                },
                {
                  "name": "RABBITMQ_USE_LONGNAME",
                  "value": "true"
                },
                {
                  "name": "RABBITMQ_ERL_COOKIE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-erlang-cookie"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_USERNAME",
                  "value": "geoserver"
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geoserver-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PLUGINS",
                  "value": "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
                }
              ],
              "ports": [
                {
                  "name": "amqp",
                  "containerPort": 5672
                },
                {
                  "name": "dist",
                  "containerPort": 25672
                },
                {
                  "name": "stats",
                  "containerPort": 15672
                },
                {
                  "name": "epmd",
                  "containerPort": 4369
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "rabbitmq-diagnostics -q check_running"
                  ]
                },
                "initialDelaySeconds": 120,
                "periodSeconds": 30,
                "timeoutSeconds": 20,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "rabbitmq-diagnostics -q check_running"
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 30,
                "timeoutSeconds": 20,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "bash",
                      "-ec",
                      "rabbitmqctl stop_app"
                    ]
                  }
                }
              },
              "volumeMounts": [
                {
                  "name": "configuration",
                  "mountPath": "/bitnami/rabbitmq/conf"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/rabbitmq/mnesia"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "configuration",
              "configMap": {
                "name": "release-name-rabbitmq-config",
                "items": [
                  {
                    "key": "rabbitmq.conf",
                    "path": "rabbitmq.conf"
                  }
                ]
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "nginx",
      "annotations": {
        "ingress.kubernetes.io/ssl-redirect": "false"
      }
    },
    "spec": {
      "rules": [
        {
          "http": {
            "paths": [
              {
                "path": "/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "release-name-geoserver-gateway",
                    "port": {
                      "number": 8080
                    }
                  }
                }
              },
              {
                "path": "/web/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "release-name-geoserver-webui",
                    "port": {
                      "number": 8080
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  }
]