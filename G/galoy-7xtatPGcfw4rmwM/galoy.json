[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-mongodb",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "mongodb",
        "helm.sh/chart": "mongodb-11.1.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "secrets": [
      {
        "name": "release-name-mongodb"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "automountServiceAccountToken": true,
    "metadata": {
      "name": "release-name-redis",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-serviceaccount"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-price-history-config",
      "labels": {
        "helm.sh/chart": "price-0.1.0",
        "app.kubernetes.io/name": "price-history",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.1.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "stringData": {
      "custom.yaml": "{}"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-redis",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "redis-password": "cGFzc3dvcmQ="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "galoy-config-map",
      "labels": {
        "app": "galoy",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "stringData": {
      "custom.yaml": "apollo:\n  playground: false\nname: Galoy Wallet"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "jwt-secret",
      "labels": {
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/resource-policy": "keep"
      }
    },
    "data": {
      "secret": "V1dKZlN5eHN5Rm1wdkRoTnlZdVZmUXhG"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-mongodb-init-scripts",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "mongodb",
        "helm.sh/chart": "mongodb-11.1.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "mongodb"
      }
    },
    "data": {
      "grant_user_admin_role.sh": "isMaster=$(mongo admin -u root -p \"$MONGODB_ROOT_PASSWORD\" --eval \"rs.isMaster().ismaster\" | tail -1 | tr -d '\\n')\nif [ \"$isMaster\" == \"true\" ]; then\nmongo admin -u root -p $MONGODB_ROOT_PASSWORD << EOF\n  use admin;\n  db.grantRolesToUser('root', [ {role: \"userAdmin\", db: \"galoy\"} ]);\nEOF\nfi;\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-mongodb-scripts",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "mongodb",
        "helm.sh/chart": "mongodb-11.1.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "mongodb"
      }
    },
    "data": {
      "setup.sh": "#!/bin/bash\n\n. /opt/bitnami/scripts/mongodb-env.sh\n. /opt/bitnami/scripts/libfs.sh\n. /opt/bitnami/scripts/liblog.sh\n. /opt/bitnami/scripts/libvalidations.sh\n\nif is_empty_value \"$MONGODB_ADVERTISED_PORT_NUMBER\"; then\n  export MONGODB_ADVERTISED_PORT_NUMBER=\"$MONGODB_PORT_NUMBER\"\nfi\n\ninfo \"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\"\ninfo \"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\"\n\n# Check for existing replica set in case there is no data in the PVC\n# This is for cases where the PVC is lost or for MongoDB caches without\n# persistence\ncurrent_primary=\"\"\nif is_dir_empty \"${MONGODB_DATA_DIR}/db\"; then\n  info \"Data dir empty, checking if the replica set already exists\"\n  current_primary=$(mongo admin --host \"release-name-mongodb-0.release-name-mongodb-headless.default.svc.cluster.local:27017,release-name-mongodb-1.release-name-mongodb-headless.default.svc.cluster.local:27017,release-name-mongodb-2.release-name-mongodb-headless.default.svc.cluster.local:27017\" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD --eval 'db.runCommand(\"ismaster\")' | awk -F\\\" '/primary/ {print $4}')\n\n  if ! is_empty_value \"$current_primary\"; then\n    info \"Detected existing primary: ${current_primary}\"\n  fi\nfi\n\nif ! is_empty_value \"$current_primary\" && [[ \"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\" == \"$current_primary\" ]]; then\n    info \"Advertised name matches current primary, configuring node as a primary\"\n    export MONGODB_REPLICA_SET_MODE=\"primary\"\nelif ! is_empty_value \"$current_primary\" && [[ \"$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER\" != \"$current_primary\" ]]; then\n    info \"Current primary is different from this node. Configuring the node as replica of ${current_primary}\"\n    export MONGODB_REPLICA_SET_MODE=\"secondary\"\n    export MONOGDB_INITIAL_PRIMARY_HOST=\"${current_primary%:*}\"\n    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\"${current_primary#*:}\"\n    export MONGODB_SET_SECONDARY_OK=\"yes\"\nelif [[ \"$MY_POD_NAME\" = \"release-name-mongodb-0\" ]]; then\n    info \"Pod name matches initial primary pod name, configuring node as a primary\"\n    export MONGODB_REPLICA_SET_MODE=\"primary\"\nelse\n    info \"Pod name doesn't match initial primary pod name, configuring node as a secondary\"\n    export MONGODB_REPLICA_SET_MODE=\"secondary\"\n    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\"$MONGODB_PORT_NUMBER\"\nfi\n\nif [[ \"$MONGODB_REPLICA_SET_MODE\" == \"secondary\" ]]; then\n    export MONGODB_INITIAL_PRIMARY_ROOT_USER=\"$MONGODB_ROOT_USER\"\n    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\"$MONGODB_ROOT_PASSWORD\"\n    export MONGODB_ROOT_PASSWORD=\"\"\n    export MONGODB_EXTRA_USERNAMES=\"\"\n    export MONGODB_EXTRA_DATABASES=\"\"\n    export MONGODB_EXTRA_PASSWORDS=\"\"\n    export MONGODB_ROOT_PASSWORD_FILE=\"\"\n    export MONGODB_EXTRA_USERNAMES_FILE=\"\"\n    export MONGODB_EXTRA_DATABASES_FILE=\"\"\n    export MONGODB_EXTRA_PASSWORDS_FILE=\"\"\nfi\n\nexec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh",
      "setup-hidden.sh": "#!/bin/bash\n\n. /opt/bitnami/scripts/mongodb-env.sh\n\necho \"Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME\"\necho \"Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER\"\necho \"Configuring node as a hidden node\"\nexport MONGODB_REPLICA_SET_MODE=\"hidden\"\nexport MONGODB_INITIAL_PRIMARY_ROOT_USER=\"$MONGODB_ROOT_USER\"\nexport MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=\"$MONGODB_ROOT_PASSWORD\"\nexport MONGODB_INITIAL_PRIMARY_PORT_NUMBER=\"$MONGODB_PORT_NUMBER\"\nexport MONGODB_ROOT_PASSWORD=\"\"\nexport MONGODB_EXTRA_USERNAMES=\"\"\nexport MONGODB_EXTRA_DATABASES=\"\"\nexport MONGODB_EXTRA_PASSWORDS=\"\"\nexport MONGODB_ROOT_PASSWORD_FILE=\"\"\nexport MONGODB_EXTRA_USERNAMES_FILE=\"\"\nexport MONGODB_EXTRA_DATABASES_FILE=\"\"\nexport MONGODB_EXTRA_PASSWORDS_FILE=\"\"\nexec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-configuration",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "redis.conf": "# User-supplied common configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"\n# End of common configuration",
      "master.conf": "dir /data\n# User-supplied master configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of master configuration",
      "replica.conf": "dir /data\nslave-read-only yes\n# User-supplied replica configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of replica configuration",
      "sentinel.conf": "dir \"/tmp\"\nport 26379\nsentinel monitor mymaster release-name-redis-node-0.release-name-redis-headless.default.svc.cluster.local 6379 2\nsentinel down-after-milliseconds mymaster 60000\nsentinel failover-timeout mymaster 18000\nsentinel parallel-syncs mymaster 1\n# User-supplied sentinel configuration:\n# End of sentinel configuration"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-health",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "ping_readiness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] && [ \"$responseFirstWord\" != \"LOADING\" ] && [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_sentinel.sh": "#!/bin/bash\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_SENTINEL_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "parse_sentinels.awk": "/ip/ {FOUND_IP=1}\n/port/ {FOUND_PORT=1}\n/runid/ {FOUND_RUNID=1}\n!/ip|port|runid/ {\n  if (FOUND_IP==1) {\n    IP=$1; FOUND_IP=0;\n  }\n  else if (FOUND_PORT==1) {\n    PORT=$1;\n    FOUND_PORT=0;\n  } else if (FOUND_RUNID==1) {\n    printf \"\\nsentinel known-sentinel mymaster %s %s %s\", IP, PORT, $0; FOUND_RUNID=0;\n  }\n}",
      "ping_readiness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] && [ \"$responseFirstWord\" != \"LOADING\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
      "ping_liveness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-scripts",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "start-node.sh": "#!/bin/bash\n\n. /opt/bitnami/scripts/libos.sh\n. /opt/bitnami/scripts/liblog.sh\n. /opt/bitnami/scripts/libvalidations.sh\n\nget_port() {\n    hostname=\"$1\"\n    type=\"$2\"\n\n    port_var=$(echo \"${hostname^^}_SERVICE_PORT_$type\" | sed \"s/-/_/g\")\n    port=${!port_var}\n\n    if [ -z \"$port\" ]; then\n        case $type in\n            \"SENTINEL\")\n                echo 26379\n                ;;\n            \"REDIS\")\n                echo 6379\n                ;;\n        esac\n    else\n        echo $port\n    fi\n}\n\nget_full_hostname() {\n    hostname=\"$1\"\n    echo \"${hostname}.${HEADLESS_SERVICE}\"\n}\n\nREDISPORT=$(get_port \"$HOSTNAME\" \"REDIS\")\n\nHEADLESS_SERVICE=\"release-name-redis-headless.default.svc.cluster.local\"\n\nif [ -n \"$REDIS_EXTERNAL_MASTER_HOST\" ]; then\n    REDIS_SERVICE=\"$REDIS_EXTERNAL_MASTER_HOST\"\nelse\n    REDIS_SERVICE=\"release-name-redis.default.svc.cluster.local\"\nfi\n\nSENTINEL_SERVICE_PORT=$(get_port \"release-name-redis\" \"TCP_SENTINEL\")\nvalidate_quorum() {\n    if is_boolean_yes \"$REDIS_SENTINEL_TLS_ENABLED\"; then\n        quorum_info_command=\"REDISCLI_AUTH=\"\\$REDIS_PASSWORD\" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_SENTINEL_TLS_CERT_FILE} --key ${REDIS_SENTINEL_TLS_KEY_FILE} --cacert ${REDIS_SENTINEL_TLS_CA_FILE} sentinel master mymaster\"\n    else\n        quorum_info_command=\"REDISCLI_AUTH=\"\\$REDIS_PASSWORD\" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel master mymaster\"\n    fi\n    info \"about to run the command: $quorum_info_command\"\n    eval $quorum_info_command | grep -Fq \"s_down\"\n}\n\ntrigger_manual_failover() {\n    if is_boolean_yes \"$REDIS_SENTINEL_TLS_ENABLED\"; then\n        failover_command=\"REDISCLI_AUTH=\"\\$REDIS_PASSWORD\" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_SENTINEL_TLS_CERT_FILE} --key ${REDIS_SENTINEL_TLS_KEY_FILE} --cacert ${REDIS_SENTINEL_TLS_CA_FILE} sentinel failover mymaster\"\n    else\n        failover_command=\"REDISCLI_AUTH=\"\\$REDIS_PASSWORD\" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel failover mymaster\"\n    fi\n\n    info \"about to run the command: $failover_command\"\n    eval $failover_command\n}\n\nget_sentinel_master_info() {\n    if is_boolean_yes \"$REDIS_SENTINEL_TLS_ENABLED\"; then\n        sentinel_info_command=\"REDISCLI_AUTH=\"\\$REDIS_PASSWORD\" timeout 220 redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_SENTINEL_TLS_CERT_FILE} --key ${REDIS_SENTINEL_TLS_KEY_FILE} --cacert ${REDIS_SENTINEL_TLS_CA_FILE} sentinel get-master-addr-by-name mymaster\"\n    else\n        sentinel_info_command=\"REDISCLI_AUTH=\"\\$REDIS_PASSWORD\" timeout 220 redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel get-master-addr-by-name mymaster\"\n    fi\n\n    info \"about to run the command: $sentinel_info_command\"\n    eval $sentinel_info_command\n}\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n\n# check if there is a master\nmaster_in_persisted_conf=\"$(get_full_hostname \"$HOSTNAME\")\"\nmaster_port_in_persisted_conf=\"$REDIS_MASTER_PORT_NUMBER\"\nmaster_in_sentinel=\"$(get_sentinel_master_info)\"\nredisRetVal=$?\n\nif [[ $redisRetVal -ne 0 ]]; then\n    if [[ \"$master_in_persisted_conf\" == \"$(get_full_hostname \"$HOSTNAME\")\" ]]; then\n        # Case 1: No active sentinel and in previous sentinel.conf we were the master --> MASTER\n        info \"Configuring the node as master\"\n        export REDIS_REPLICATION_MODE=\"master\"\n    else\n        # Case 2: No active sentinel and in previous sentinel.conf we were not master --> REPLICA\n        info \"Configuring the node as replica\"\n        export REDIS_REPLICATION_MODE=\"slave\"\n        REDIS_MASTER_HOST=${master_in_persisted_conf}\n        REDIS_MASTER_PORT_NUMBER=${master_port_in_persisted_conf}\n    fi\nelse\n    # Fetches current master's host and port\n    REDIS_SENTINEL_INFO=($(get_sentinel_master_info))\n    info \"Current master: REDIS_SENTINEL_INFO=(${REDIS_SENTINEL_INFO[0]},${REDIS_SENTINEL_INFO[1]})\"\n    REDIS_MASTER_HOST=${REDIS_SENTINEL_INFO[0]}\n    REDIS_MASTER_PORT_NUMBER=${REDIS_SENTINEL_INFO[1]}\n\n    if [[ \"$REDIS_MASTER_HOST\" == \"$(get_full_hostname \"$HOSTNAME\")\" ]]; then\n        # Case 3: Active sentinel and master it is this node --> MASTER\n        info \"Configuring the node as master\"\n        export REDIS_REPLICATION_MODE=\"master\"\n    else\n        # Case 4: Active sentinel and master is not this node --> REPLICA\n        info \"Configuring the node as replica\"\n        export REDIS_REPLICATION_MODE=\"slave\"\n    fi\nfi\n\nif [[ -n \"$REDIS_EXTERNAL_MASTER_HOST\" ]]; then\n  REDIS_MASTER_HOST=\"$REDIS_EXTERNAL_MASTER_HOST\"\n  REDIS_MASTER_PORT_NUMBER=\"${REDIS_EXTERNAL_MASTER_PORT}\"\nfi\n\nif [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf\nfi\n\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\n\necho \"\" >> /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-port $REDISPORT\" >> /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-ip $(get_full_hostname \"$HOSTNAME\")\" >> /opt/bitnami/redis/etc/replica.conf\nARGS=(\"--port\" \"${REDIS_PORT}\")\n\nif [[ \"$REDIS_REPLICATION_MODE\" = \"slave\" ]]; then\n    ARGS+=(\"--slaveof\" \"${REDIS_MASTER_HOST}\" \"${REDIS_MASTER_PORT_NUMBER}\")\nfi\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_MASTER_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/replica.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nexec redis-server \"${ARGS[@]}\"\n",
      "start-sentinel.sh": "#!/bin/bash\n\n. /opt/bitnami/scripts/libos.sh\n. /opt/bitnami/scripts/libvalidations.sh\n. /opt/bitnami/scripts/libfile.sh\n\nHEADLESS_SERVICE=\"release-name-redis-headless.default.svc.cluster.local\"\nREDIS_SERVICE=\"release-name-redis.default.svc.cluster.local\"\n\nget_port() {\n    hostname=\"$1\"\n    type=\"$2\"\n\n    port_var=$(echo \"${hostname^^}_SERVICE_PORT_$type\" | sed \"s/-/_/g\")\n    port=${!port_var}\n\n    if [ -z \"$port\" ]; then\n        case $type in\n            \"SENTINEL\")\n                echo 26379\n                ;;\n            \"REDIS\")\n                echo 6379\n                ;;\n        esac\n    else\n        echo $port\n    fi\n}\n\nget_full_hostname() {\n    hostname=\"$1\"\n    echo \"${hostname}.${HEADLESS_SERVICE}\"\n}\n\nSERVPORT=$(get_port \"$HOSTNAME\" \"SENTINEL\")\nREDISPORT=$(get_port \"$HOSTNAME\" \"REDIS\")\nSENTINEL_SERVICE_PORT=$(get_port \"release-name-redis\" \"TCP_SENTINEL\")\n\nsentinel_conf_set() {\n    local -r key=\"${1:?missing key}\"\n    local value=\"${2:-}\"\n\n    # Sanitize inputs\n    value=\"${value//\\\\/\\\\\\\\}\"\n    value=\"${value//&/\\\\&}\"\n    value=\"${value//\\?/\\\\?}\"\n    [[ \"$value\" = \"\" ]] && value=\"\\\"$value\\\"\"\n\n    replace_in_file \"/opt/bitnami/redis-sentinel/etc/sentinel.conf\" \"^#*\\s*${key} .*\" \"${key} ${value}\" false\n}\nsentinel_conf_add() {\n    echo $'\\n'\"$@\" >> \"/opt/bitnami/redis-sentinel/etc/sentinel.conf\"\n}\nhost_id() {\n    echo \"$1\" | openssl sha1 | awk '{print $2}'\n}\nget_sentinel_master_info() {\n    if is_boolean_yes \"$REDIS_SENTINEL_TLS_ENABLED\"; then\n        sentinel_info_command=\"REDISCLI_AUTH=\"\\$REDIS_PASSWORD\" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_SENTINEL_TLS_CERT_FILE} --key ${REDIS_SENTINEL_TLS_KEY_FILE} --cacert ${REDIS_SENTINEL_TLS_CA_FILE} sentinel get-master-addr-by-name mymaster\"\n    else\n        sentinel_info_command=\"REDISCLI_AUTH=\"\\$REDIS_PASSWORD\" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel get-master-addr-by-name mymaster\"\n    fi\n    info \"about to run the command: $sentinel_info_command\"\n    eval $sentinel_info_command\n}\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n\nmaster_in_persisted_conf=\"$(get_full_hostname \"$HOSTNAME\")\"\nif ! get_sentinel_master_info && [[ \"$master_in_persisted_conf\" == \"$(get_full_hostname \"$HOSTNAME\")\" ]]; then\n    # No master found, lets create a master node\n    export REDIS_REPLICATION_MODE=\"master\"\n\n    REDIS_MASTER_HOST=$(get_full_hostname \"$HOSTNAME\")\n    REDIS_MASTER_PORT_NUMBER=\"$REDISPORT\"\nelse\n    export REDIS_REPLICATION_MODE=\"slave\"\n\n    # Fetches current master's host and port\n    REDIS_SENTINEL_INFO=($(get_sentinel_master_info))\n    info \"printing REDIS_SENTINEL_INFO=(${REDIS_SENTINEL_INFO[0]},${REDIS_SENTINEL_INFO[1]})\"\n    REDIS_MASTER_HOST=${REDIS_SENTINEL_INFO[0]}\n    REDIS_MASTER_PORT_NUMBER=${REDIS_SENTINEL_INFO[1]}\nfi\n\nif [[ -n \"$REDIS_EXTERNAL_MASTER_HOST\" ]]; then\n  REDIS_MASTER_HOST=\"$REDIS_EXTERNAL_MASTER_HOST\"\n  REDIS_MASTER_PORT_NUMBER=\"${REDIS_EXTERNAL_MASTER_PORT}\"\nfi\n\ncp /opt/bitnami/redis-sentinel/mounted-etc/sentinel.conf /opt/bitnami/redis-sentinel/etc/sentinel.conf\nprintf \"\\nsentinel auth-pass %s %s\" \"mymaster\" \"$REDIS_PASSWORD\" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf\nprintf \"\\nrequirepass %s\" \"$REDIS_PASSWORD\" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf\nprintf \"\\nsentinel myid %s\" \"$(host_id \"$HOSTNAME\")\" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf\n\nsentinel_conf_set \"sentinel monitor\" \"mymaster \"$REDIS_MASTER_HOST\" \"$REDIS_MASTER_PORT_NUMBER\" 2\"\n\nadd_known_sentinel() {\n    hostname=\"$1\"\n    ip=\"$2\"\n\n    if [[ -n \"$hostname\" && -n \"$ip\" && \"$hostname\" != \"$HOSTNAME\" ]]; then\n        sentinel_conf_add \"sentinel known-sentinel mymaster $(get_full_hostname \"$hostname\") $(get_port \"$hostname\" \"SENTINEL\") $(host_id \"$hostname\")\"\n    fi\n}\nadd_known_replica() {\n    hostname=\"$1\"\n    ip=\"$2\"\n\n    if [[ -n \"$ip\" && \"$(get_full_hostname \"$hostname\")\" != \"$REDIS_MASTER_HOST\" ]]; then\n        sentinel_conf_add \"sentinel known-replica mymaster $(get_full_hostname \"$hostname\") $(get_port \"$hostname\" \"REDIS\")\"\n    fi\n}\n\n# Add available hosts on the network as known replicas & sentinels\nfor node in $(seq 0 $((3-1))); do\n    hostname=\"release-name-redis-node-$node\"\n    ip=\"$(getent hosts \"$hostname.$HEADLESS_SERVICE\" | awk '{ print $1 }')\"\n    add_known_sentinel \"$hostname\" \"$ip\"\n    add_known_replica \"$hostname\" \"$ip\"\ndone\n\necho \"\" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf\necho \"sentinel announce-hostnames yes\" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf\necho \"sentinel resolve-hostnames yes\" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf\necho \"sentinel announce-port $SERVPORT\" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf\necho \"sentinel announce-ip $(get_full_hostname \"$HOSTNAME\")\" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf\nexec redis-server /opt/bitnami/redis-sentinel/etc/sentinel.conf --sentinel\n",
      "prestop-sentinel.sh": "#!/bin/bash\n\n. /opt/bitnami/scripts/libvalidations.sh\n. /opt/bitnami/scripts/libos.sh\n\nHEADLESS_SERVICE=\"release-name-redis-headless.default.svc.cluster.local\"\nSENTINEL_SERVICE_ENV_NAME=RELEASE_NAME_REDIS_SERVICE_PORT_TCP_SENTINEL\nSENTINEL_SERVICE_PORT=${!SENTINEL_SERVICE_ENV_NAME}\n\nget_full_hostname() {\n    hostname=\"$1\"\n    echo \"${hostname}.${HEADLESS_SERVICE}\"\n}\nrun_sentinel_command() {\n    if is_boolean_yes \"$REDIS_SENTINEL_TLS_ENABLED\"; then\n        redis-cli -h \"$REDIS_SERVICE\" -p \"$SENTINEL_SERVICE_PORT\" --tls --cert \"$REDIS_SENTINEL_TLS_CERT_FILE\" --key \"$REDIS_SENTINEL_TLS_KEY_FILE\" --cacert \"$REDIS_SENTINEL_TLS_CA_FILE\" sentinel \"$@\"\n    else\n        redis-cli -h \"$REDIS_SERVICE\" -p \"$SENTINEL_SERVICE_PORT\" sentinel \"$@\"\n    fi\n}\nfailover_finished() {\n  REDIS_SENTINEL_INFO=($(run_sentinel_command get-master-addr-by-name \"mymaster\"))\n  REDIS_MASTER_HOST=\"${REDIS_SENTINEL_INFO[0]}\"\n  [[ \"$REDIS_MASTER_HOST\" != \"$(get_full_hostname $HOSTNAME)\" ]]\n}\n\nREDIS_SERVICE=\"release-name-redis.default.svc.cluster.local\"\n\n# redis-cli automatically consumes credentials from the REDISCLI_AUTH variable\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\n[[ -f \"$REDIS_PASSWORD_FILE\" ]] && export REDISCLI_AUTH=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n\nif ! failover_finished; then\n    echo \"I am the master pod and you are stopping me. Starting sentinel failover\"\n    # if I am the master, issue a command to failover once and then wait for the failover to finish\n    run_sentinel_command failover \"mymaster\"\n    if retry_while \"failover_finished\" \"20\" 1; then\n        echo \"Master has been successfuly failed over to a different pod.\"\n        exit 0\n    else\n        echo \"Master failover failed\"\n        exit 1\n    fi\nelse\n    exit 0\nfi\n",
      "prestop-redis.sh": "#!/bin/bash\n\n. /opt/bitnami/scripts/libvalidations.sh\n. /opt/bitnami/scripts/libos.sh\n\nrun_redis_command() {\n    if is_boolean_yes \"$REDIS_TLS_ENABLED\"; then\n        redis-cli -h 127.0.0.1 -p \"$REDIS_TLS_PORT\" --tls --cert \"$REDIS_TLS_CERT_FILE\" --key \"$REDIS_TLS_KEY_FILE\" --cacert \"$REDIS_TLS_CA_FILE\" \"$@\"\n    else\n        redis-cli -h 127.0.0.1 -p ${REDIS_PORT} \"$@\"\n    fi\n}\nfailover_finished() {\n    REDIS_ROLE=$(run_redis_command role | head -1)\n    [[ \"$REDIS_ROLE\" != \"master\" ]]\n}\n\n# redis-cli automatically consumes credentials from the REDISCLI_AUTH variable\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\n[[ -f \"$REDIS_PASSWORD_FILE\" ]] && export REDISCLI_AUTH=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n\nif ! failover_finished; then\n    echo \"Waiting for sentinel to run failover for up to 20s\"\n    retry_while \"failover_finished\" \"20\" 1\nelse\n    exit 0\nfi\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "mongo-backup-configmap",
      "labels": {
        "app": "galoy"
      }
    },
    "data": {
      "backup.sh": "echo \"backup script starts\"\nexport BUCKET_NAME=\"galoy-staging-backups\"\nset -e\nLOG_TIME=$(date +%s)\nBACKUP_NAME=\"$NETWORK-$LOG_TIME.gz\"\necho \"Activating service account\"\ngcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS\necho \"Backing up mongodb\"\nmongodump --host=$MONGODB_ADDRESS --port=$MONGODB_PORT --username=$MONGODB_USER --password=$MONGODB_PASSWORD --gzip --archive=$BACKUP_NAME -d=$MONGODB_DB --readPreference=secondary\necho \"Uploading backup $BACKUP_NAME to dropbox\"\ncurl -X POST https://content.dropboxapi.com/2/files/upload --http1.1 --header \"Authorization: Bearer $DROPBOX_ACCESS_TOKEN\" --header \"Dropbox-API-Arg: {\\\"path\\\": \\\"/mongo/$BACKUP_NAME\\\"}\" --header \"Content-Type: application/octet-stream\" --data-binary $BACKUP_NAME\necho \"Uploading backup $BACKUP_NAME to gcs\"\ngsutil cp $BACKUP_NAME gs://$BUCKET_NAME/$BACKUP_NAME 2>&1\necho \"Uploaded backup successfully\"\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-role"
    },
    "rules": [
      {
        "apiGroups": [
          "batch"
        ],
        "resources": [
          "cronjobs"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          "batch"
        ],
        "resources": [
          "jobs"
        ],
        "verbs": [
          "create",
          "delete",
          "get",
          "list"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-rolebinding"
    },
    "roleRef": {
      "kind": "Role",
      "name": "release-name-role",
      "apiGroup": "rbac.authorization.k8s.io"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-serviceaccount",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-mongodb-metrics",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "mongodb",
        "helm.sh/chart": "mongodb-11.1.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "metrics"
      },
      "annotations": {
        "prometheus.io/path": "/metrics",
        "prometheus.io/port": "9216",
        "prometheus.io/scrape": "true"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 9216,
          "targetPort": "metrics",
          "protocol": "TCP",
          "name": "http-metrics"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "mongodb",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "mongodb"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-mongodb-headless",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "mongodb",
        "helm.sh/chart": "mongodb-11.1.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "mongodb"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "mongodb",
          "port": 27017,
          "targetPort": "mongodb"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "mongodb",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "mongodb"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-hl",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.1.9",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.1.9",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-price-history",
      "labels": {
        "helm.sh/chart": "price-0.1.0",
        "app.kubernetes.io/name": "price-history",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.1.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 50052,
          "targetPort": "grpc",
          "protocol": "TCP",
          "name": "grpc"
        },
        {
          "port": 9464,
          "targetPort": "prometheus",
          "protocol": "TCP",
          "name": "prometheus"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "price-history",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-price",
      "labels": {
        "helm.sh/chart": "price-0.1.0",
        "app.kubernetes.io/name": "price",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.1.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 50051,
          "targetPort": "grpc",
          "protocol": "TCP",
          "name": "grpc"
        },
        {
          "port": 9464,
          "targetPort": "prometheus",
          "protocol": "TCP",
          "name": "prometheus"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "price",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-headless",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis"
        },
        {
          "name": "tcp-sentinel",
          "port": 26379,
          "targetPort": "redis-sentinel"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-metrics",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "metrics"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http-metrics",
          "port": 9121,
          "protocol": "TCP",
          "targetPort": "metrics"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "node"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": 6379,
          "nodePort": null
        },
        {
          "name": "tcp-sentinel",
          "port": 26379,
          "targetPort": 26379,
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "node"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "graphql",
      "labels": {
        "app": "graphql",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "NodePort",
      "ports": [
        {
          "port": 4000,
          "targetPort": 4000,
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app": "graphql"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "graphql-admin",
      "labels": {
        "app": "graphql-admin",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "NodePort",
      "ports": [
        {
          "port": 4001,
          "targetPort": 4001,
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app": "graphql-admin"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "api",
      "labels": {
        "app": "api",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "NodePort",
      "ports": [
        {
          "port": 4002,
          "targetPort": 4002,
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app": "api"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "trigger",
      "labels": {
        "app": "trigger",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8888,
          "targetPort": 8888,
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app": "trigger"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-price",
      "labels": {
        "helm.sh/chart": "price-0.1.0",
        "app.kubernetes.io/name": "price",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "kube-monkey/enabled": "enabled",
        "kube-monkey/identifier": "price",
        "kube-monkey/kill-mode": "fixed",
        "kube-monkey/kill-value": "1",
        "kube-monkey/mtbf": "8"
      }
    },
    "spec": {
      "replicas": 1,
      "strategy": {
        "type": "Recreate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "price",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "prometheus.io/path": "/metrics",
            "prometheus.io/port": "9464",
            "prometheus.io/scrape": "true"
          },
          "labels": {
            "app.kubernetes.io/name": "price",
            "app.kubernetes.io/instance": "release-name",
            "kube-monkey/enabled": "enabled",
            "kube-monkey/identifier": "price"
          }
        },
        "spec": {
          "serviceAccountName": "default",
          "securityContext": {},
          "containers": [
            {
              "name": "price",
              "securityContext": {
                "runAsUser": 11595,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "us.gcr.io/galoy-org/price@sha256:ee709cdeceb0bca231b477bfd8506929cd803107f2266045c307b4c0ba363965",
              "ports": [
                {
                  "name": "grpc",
                  "containerPort": 50051,
                  "protocol": "TCP"
                },
                {
                  "name": "prometheus",
                  "containerPort": 9464,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/grpc_health_probe",
                    "-addr=:50051"
                  ]
                },
                "initialDelaySeconds": 45,
                "timeoutSeconds": 2
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/grpc_health_probe",
                    "-addr=:50051"
                  ]
                },
                "timeoutSeconds": 2
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-price-history",
      "labels": {
        "helm.sh/chart": "price-0.1.0",
        "app.kubernetes.io/name": "price-history",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "kube-monkey/enabled": "enabled",
        "kube-monkey/identifier": "priceHistory",
        "kube-monkey/kill-mode": "fixed",
        "kube-monkey/kill-value": "1",
        "kube-monkey/mtbf": "8"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "price-history",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "price-history",
            "app.kubernetes.io/instance": "release-name",
            "kube-monkey/enabled": "enabled",
            "kube-monkey/identifier": "priceHistory"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "history",
              "image": "us.gcr.io/galoy-org/price-history@sha256:86294559d50931f4ebb11e08fde47a4183cf7d976899c9633ccd3563f62dd6ec",
              "ports": [
                {
                  "name": "grpc",
                  "containerPort": 50052,
                  "protocol": "TCP"
                },
                {
                  "name": "prometheus",
                  "containerPort": 9464,
                  "protocol": "TCP"
                }
              ],
              "env": [
                {
                  "name": "DB_HOST",
                  "value": "galoy-postgresql"
                },
                {
                  "name": "DB_PWD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-price-history-postgres-creds",
                      "key": "password"
                    }
                  }
                },
                {
                  "name": "DB_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-price-history-postgres-creds",
                      "key": "username"
                    }
                  }
                },
                {
                  "name": "DB_DB",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-price-history-postgres-creds",
                      "key": "database"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "custom-yaml",
                  "mountPath": "/var/yaml/"
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/grpc_health_probe",
                    "-addr=:50052"
                  ]
                },
                "initialDelaySeconds": 45,
                "timeoutSeconds": 2
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/grpc_health_probe",
                    "-addr=:50052"
                  ]
                },
                "timeoutSeconds": 2
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "custom-yaml",
              "secret": {
                "secretName": "release-name-price-history-config"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "graphql-admin",
      "labels": {
        "app": "graphql-admin",
        "app.kubernetes.io/managed-by": "Helm",
        "kube-monkey/enabled": "enabled",
        "kube-monkey/identifier": "graphql-admin",
        "kube-monkey/kill-mode": "fixed",
        "kube-monkey/kill-value": "1",
        "kube-monkey/mtbf": "8"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "graphql-admin"
        }
      },
      "template": {
        "metadata": {
          "name": "graphql-admin",
          "labels": {
            "app": "graphql-admin",
            "kube-monkey/enabled": "enabled",
            "kube-monkey/identifier": "graphql-admin",
            "allow-to-lnd": "true",
            "allow-to-bitcoind": "true"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-serviceaccount",
          "initContainers": [
            {
              "name": "wait-for-mongodb-migrate",
              "image": "groundnuty/k8s-wait-for:v1.5.1",
              "args": [
                "job-wr",
                "release-name-mongodb-migrate-1"
              ]
            }
          ],
          "containers": [
            {
              "name": "graphql-admin",
              "image": "us.gcr.io/galoy-org/galoy-app@sha256:f51110f9567ea1011d5581342cf03bb19508ff64d4b1bfa2191102fc5be992bd",
              "args": [
                "-r",
                "/app/lib/services/tracing.js",
                "lib/servers/graphql-admin-server.js"
              ],
              "volumeMounts": [
                {
                  "name": "firebase-serviceaccount",
                  "mountPath": "/tmp/firebase-serviceaccount",
                  "readOnly": true
                },
                {
                  "name": "custom-yaml",
                  "mountPath": "/var/yaml/"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 4001,
                  "protocol": "TCP"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "100m"
                },
                "limits": {
                  "cpu": "1000m"
                }
              },
              "env": [
                {
                  "name": "HELMREVISION",
                  "value": "1"
                },
                {
                  "name": "NODE_ENV",
                  "value": "production"
                },
                {
                  "name": "JAEGER_HOST",
                  "value": "localhost"
                },
                {
                  "name": "TRACING_SERVICE_NAME",
                  "value": "galoy-graphql-admin"
                },
                {
                  "name": "MONGODB_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mongodb",
                      "key": "mongodb-password"
                    }
                  }
                },
                {
                  "name": "MONGODB_USER",
                  "value": "testGaloy"
                },
                {
                  "name": "MONGODB_ADDRESS",
                  "value": "galoy-mongodb-0.galoy-mongodb-headless,galoy-mongodb-1.galoy-mongodb-headless,galoy-mongodb-2.galoy-mongodb-headless"
                },
                {
                  "name": "LND1_DNS",
                  "value": null
                },
                {
                  "name": "LND1_MACAROON",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-credentials",
                      "key": "admin_macaroon_base64"
                    }
                  }
                },
                {
                  "name": "LND1_TLS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-credentials",
                      "key": "tls_base64"
                    }
                  }
                },
                {
                  "name": "LND1_PUBKEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-pubkey",
                      "key": "pubkey"
                    }
                  }
                },
                {
                  "name": "LND2_DNS",
                  "value": null
                },
                {
                  "name": "LND2_MACAROON",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-credentials",
                      "key": "admin_macaroon_base64"
                    }
                  }
                },
                {
                  "name": "LND2_TLS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-credentials",
                      "key": "tls_base64"
                    }
                  }
                },
                {
                  "name": "LND2_PUBKEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-pubkey",
                      "key": "pubkey"
                    }
                  }
                },
                {
                  "name": "BITCOINDADDR",
                  "value": null
                },
                {
                  "name": "BITCOINDRPCPASS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "bitcoind-rpcpassword",
                      "key": "password"
                    }
                  }
                },
                {
                  "name": "BITCOINDPORT",
                  "value": "8332"
                },
                {
                  "name": "GEETEST_ID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geetest-key",
                      "key": "id"
                    }
                  }
                },
                {
                  "name": "GEETEST_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geetest-key",
                      "key": "key"
                    }
                  }
                },
                {
                  "name": "REDIS_MASTER_NAME",
                  "value": "mymaster"
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_0_DNS",
                  "value": "galoy-redis-node-0.galoy-redis-headless"
                },
                {
                  "name": "REDIS_1_DNS",
                  "value": "galoy-redis-node-1.galoy-redis-headless"
                },
                {
                  "name": "REDIS_2_DNS",
                  "value": "galoy-redis-node-2.galoy-redis-headless"
                },
                {
                  "name": "JWT_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jwt-secret",
                      "key": "secret"
                    }
                  }
                },
                {
                  "name": "NETWORK",
                  "value": "mainnet"
                },
                {
                  "name": "LOGLEVEL",
                  "value": "debug"
                },
                {
                  "name": "GOOGLE_APPLICATION_CREDENTIALS",
                  "value": "/tmp/firebase-serviceaccount/galoyapp-firebase-serviceaccount.json"
                },
                {
                  "name": "TWILIO_PHONE_NUMBER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_PHONE_NUMBER"
                    }
                  }
                },
                {
                  "name": "TWILIO_ACCOUNT_SID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_ACCOUNT_SID"
                    }
                  }
                },
                {
                  "name": "TWILIO_AUTH_TOKEN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_AUTH_TOKEN"
                    }
                  }
                },
                {
                  "name": "PRICE_SERVER_HOST",
                  "value": "dealer-price.namespace.svc.cluster.local"
                },
                {
                  "name": "PRICE_SERVER_PORT",
                  "value": "50055"
                },
                {
                  "name": "PRICE_HISTORY_HOST",
                  "value": "galoy-price-history"
                },
                {
                  "name": "PRICE_HISTORY_PORT",
                  "value": "50052"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 4001
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "failureThreshold": 5,
                "timeoutSeconds": 1
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 4001
                },
                "initialDelaySeconds": 5,
                "failureThreshold": 5,
                "successThreshold": 2,
                "timeoutSeconds": 1
              }
            }
          ],
          "volumes": [
            {
              "name": "firebase-serviceaccount",
              "secret": {
                "secretName": "galoyapp-firebase-serviceaccount"
              }
            },
            {
              "name": "custom-yaml",
              "secret": {
                "secretName": "galoy-config-map"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "api",
      "labels": {
        "app": "api",
        "app.kubernetes.io/managed-by": "Helm",
        "kube-monkey/enabled": "enabled",
        "kube-monkey/identifier": "api",
        "kube-monkey/kill-mode": "fixed",
        "kube-monkey/kill-value": "1",
        "kube-monkey/mtbf": "8"
      }
    },
    "spec": {
      "replicas": 2,
      "selector": {
        "matchLabels": {
          "app": "api"
        }
      },
      "template": {
        "metadata": {
          "name": "api",
          "labels": {
            "app": "api",
            "kube-monkey/enabled": "enabled",
            "kube-monkey/identifier": "api",
            "allow-to-lnd": "true",
            "allow-to-bitcoind": "true"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-serviceaccount",
          "initContainers": [
            {
              "name": "wait-for-mongodb-migrate",
              "image": "groundnuty/k8s-wait-for:v1.5.1",
              "args": [
                "job-wr",
                "release-name-mongodb-migrate-1"
              ]
            }
          ],
          "containers": [
            {
              "name": "api",
              "image": "us.gcr.io/galoy-org/galoy-app@sha256:f51110f9567ea1011d5581342cf03bb19508ff64d4b1bfa2191102fc5be992bd",
              "args": [
                "-r",
                "/app/lib/services/tracing.js",
                "lib/servers/graphql-main-server.js"
              ],
              "volumeMounts": [
                {
                  "name": "firebase-serviceaccount",
                  "mountPath": "/tmp/firebase-serviceaccount",
                  "readOnly": true
                },
                {
                  "name": "custom-yaml",
                  "mountPath": "/var/yaml/"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 4002,
                  "protocol": "TCP"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "100m"
                },
                "limits": {
                  "cpu": "1000m"
                }
              },
              "env": [
                {
                  "name": "HELMREVISION",
                  "value": "1"
                },
                {
                  "name": "NODE_ENV",
                  "value": "production"
                },
                {
                  "name": "JAEGER_HOST",
                  "value": "localhost"
                },
                {
                  "name": "TRACING_SERVICE_NAME",
                  "value": "galoy-api"
                },
                {
                  "name": "MONGODB_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mongodb",
                      "key": "mongodb-password"
                    }
                  }
                },
                {
                  "name": "MONGODB_USER",
                  "value": "testGaloy"
                },
                {
                  "name": "MONGODB_ADDRESS",
                  "value": "galoy-mongodb-0.galoy-mongodb-headless,galoy-mongodb-1.galoy-mongodb-headless,galoy-mongodb-2.galoy-mongodb-headless"
                },
                {
                  "name": "LND1_DNS",
                  "value": null
                },
                {
                  "name": "LND1_MACAROON",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-credentials",
                      "key": "admin_macaroon_base64"
                    }
                  }
                },
                {
                  "name": "LND1_TLS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-credentials",
                      "key": "tls_base64"
                    }
                  }
                },
                {
                  "name": "LND1_PUBKEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-pubkey",
                      "key": "pubkey"
                    }
                  }
                },
                {
                  "name": "LND2_DNS",
                  "value": null
                },
                {
                  "name": "LND2_MACAROON",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-credentials",
                      "key": "admin_macaroon_base64"
                    }
                  }
                },
                {
                  "name": "LND2_TLS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-credentials",
                      "key": "tls_base64"
                    }
                  }
                },
                {
                  "name": "LND2_PUBKEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-pubkey",
                      "key": "pubkey"
                    }
                  }
                },
                {
                  "name": "BITCOINDADDR",
                  "value": null
                },
                {
                  "name": "BITCOINDRPCPASS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "bitcoind-rpcpassword",
                      "key": "password"
                    }
                  }
                },
                {
                  "name": "BITCOINDPORT",
                  "value": "8332"
                },
                {
                  "name": "GEETEST_ID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geetest-key",
                      "key": "id"
                    }
                  }
                },
                {
                  "name": "GEETEST_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geetest-key",
                      "key": "key"
                    }
                  }
                },
                {
                  "name": "REDIS_MASTER_NAME",
                  "value": "mymaster"
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_0_DNS",
                  "value": "galoy-redis-node-0.galoy-redis-headless"
                },
                {
                  "name": "REDIS_1_DNS",
                  "value": "galoy-redis-node-1.galoy-redis-headless"
                },
                {
                  "name": "REDIS_2_DNS",
                  "value": "galoy-redis-node-2.galoy-redis-headless"
                },
                {
                  "name": "JWT_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jwt-secret",
                      "key": "secret"
                    }
                  }
                },
                {
                  "name": "NETWORK",
                  "value": "mainnet"
                },
                {
                  "name": "LOGLEVEL",
                  "value": "debug"
                },
                {
                  "name": "GOOGLE_APPLICATION_CREDENTIALS",
                  "value": "/tmp/firebase-serviceaccount/galoyapp-firebase-serviceaccount.json"
                },
                {
                  "name": "APOLLO_GRAPH_VARIANT",
                  "value": "current"
                },
                {
                  "name": "APOLLO_SCHEMA_REPORTING",
                  "value": "true"
                },
                {
                  "name": "APOLLO_GRAPH_ID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "galoy-apollo-secret",
                      "key": "id"
                    }
                  }
                },
                {
                  "name": "APOLLO_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "galoy-apollo-secret",
                      "key": "key"
                    }
                  }
                },
                {
                  "name": "TWILIO_PHONE_NUMBER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_PHONE_NUMBER"
                    }
                  }
                },
                {
                  "name": "TWILIO_ACCOUNT_SID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_ACCOUNT_SID"
                    }
                  }
                },
                {
                  "name": "TWILIO_AUTH_TOKEN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_AUTH_TOKEN"
                    }
                  }
                },
                {
                  "name": "PRICE_SERVER_HOST",
                  "value": "dealer-price.namespace.svc.cluster.local"
                },
                {
                  "name": "PRICE_SERVER_PORT",
                  "value": "50055"
                },
                {
                  "name": "PRICE_HISTORY_HOST",
                  "value": "galoy-price-history"
                },
                {
                  "name": "PRICE_HISTORY_PORT",
                  "value": "50052"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 4002
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "failureThreshold": 5,
                "timeoutSeconds": 1
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 4002
                },
                "initialDelaySeconds": 5,
                "failureThreshold": 5,
                "successThreshold": 2,
                "timeoutSeconds": 1
              }
            }
          ],
          "volumes": [
            {
              "name": "firebase-serviceaccount",
              "secret": {
                "secretName": "galoyapp-firebase-serviceaccount"
              }
            },
            {
              "name": "custom-yaml",
              "secret": {
                "secretName": "galoy-config-map"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "exporter",
      "labels": {
        "app": "exporter",
        "app.kubernetes.io/managed-by": "Helm",
        "kube-monkey/enabled": "enabled",
        "kube-monkey/identifier": "exporter",
        "kube-monkey/kill-mode": "fixed",
        "kube-monkey/kill-value": "1",
        "kube-monkey/mtbf": "8"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "exporter"
        }
      },
      "template": {
        "metadata": {
          "name": "exporter",
          "labels": {
            "app": "exporter",
            "kube-monkey/enabled": "enabled",
            "kube-monkey/identifier": "exporter",
            "allow-to-lnd": "true",
            "allow-to-bitcoind": "true"
          },
          "annotations": {
            "prometheus.io/path": "/metrics",
            "prometheus.io/port": "3000",
            "prometheus.io/scrape": "true"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-serviceaccount",
          "initContainers": [
            {
              "name": "wait-for-mongodb-migrate",
              "image": "groundnuty/k8s-wait-for:v1.5.1",
              "args": [
                "job-wr",
                "release-name-mongodb-migrate-1"
              ]
            }
          ],
          "containers": [
            {
              "name": "exporter",
              "image": "us.gcr.io/galoy-org/galoy-app@sha256:f51110f9567ea1011d5581342cf03bb19508ff64d4b1bfa2191102fc5be992bd",
              "args": [
                "-r",
                "/app/lib/services/tracing.js",
                "lib/servers/exporter.js"
              ],
              "volumeMounts": [
                {
                  "name": "firebase-serviceaccount",
                  "mountPath": "/tmp/firebase-serviceaccount",
                  "readOnly": true
                },
                {
                  "name": "custom-yaml",
                  "mountPath": "/var/yaml/"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 3000,
                  "protocol": "TCP"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "100m"
                },
                "limits": {
                  "cpu": "1000m"
                }
              },
              "env": [
                {
                  "name": "HELMREVISION",
                  "value": "1"
                },
                {
                  "name": "NODE_ENV",
                  "value": "production"
                },
                {
                  "name": "JAEGER_HOST",
                  "value": "localhost"
                },
                {
                  "name": "TRACING_SERVICE_NAME",
                  "value": "galoy-exporter"
                },
                {
                  "name": "MONGODB_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mongodb",
                      "key": "mongodb-password"
                    }
                  }
                },
                {
                  "name": "MONGODB_USER",
                  "value": "testGaloy"
                },
                {
                  "name": "MONGODB_ADDRESS",
                  "value": "galoy-mongodb-0.galoy-mongodb-headless,galoy-mongodb-1.galoy-mongodb-headless,galoy-mongodb-2.galoy-mongodb-headless"
                },
                {
                  "name": "LND1_DNS",
                  "value": null
                },
                {
                  "name": "LND1_MACAROON",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-credentials",
                      "key": "admin_macaroon_base64"
                    }
                  }
                },
                {
                  "name": "LND1_TLS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-credentials",
                      "key": "tls_base64"
                    }
                  }
                },
                {
                  "name": "LND1_PUBKEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-pubkey",
                      "key": "pubkey"
                    }
                  }
                },
                {
                  "name": "LND2_DNS",
                  "value": null
                },
                {
                  "name": "LND2_MACAROON",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-credentials",
                      "key": "admin_macaroon_base64"
                    }
                  }
                },
                {
                  "name": "LND2_TLS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-credentials",
                      "key": "tls_base64"
                    }
                  }
                },
                {
                  "name": "LND2_PUBKEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-pubkey",
                      "key": "pubkey"
                    }
                  }
                },
                {
                  "name": "BITCOINDADDR",
                  "value": null
                },
                {
                  "name": "BITCOINDRPCPASS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "bitcoind-rpcpassword",
                      "key": "password"
                    }
                  }
                },
                {
                  "name": "BITCOINDPORT",
                  "value": "8332"
                },
                {
                  "name": "GEETEST_ID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geetest-key",
                      "key": "id"
                    }
                  }
                },
                {
                  "name": "GEETEST_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geetest-key",
                      "key": "key"
                    }
                  }
                },
                {
                  "name": "REDIS_MASTER_NAME",
                  "value": "mymaster"
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_0_DNS",
                  "value": "galoy-redis-node-0.galoy-redis-headless"
                },
                {
                  "name": "REDIS_1_DNS",
                  "value": "galoy-redis-node-1.galoy-redis-headless"
                },
                {
                  "name": "REDIS_2_DNS",
                  "value": "galoy-redis-node-2.galoy-redis-headless"
                },
                {
                  "name": "JWT_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jwt-secret",
                      "key": "secret"
                    }
                  }
                },
                {
                  "name": "NETWORK",
                  "value": "mainnet"
                },
                {
                  "name": "LOGLEVEL",
                  "value": "debug"
                },
                {
                  "name": "GOOGLE_APPLICATION_CREDENTIALS",
                  "value": "/tmp/firebase-serviceaccount/galoyapp-firebase-serviceaccount.json"
                },
                {
                  "name": "TWILIO_PHONE_NUMBER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_PHONE_NUMBER"
                    }
                  }
                },
                {
                  "name": "TWILIO_ACCOUNT_SID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_ACCOUNT_SID"
                    }
                  }
                },
                {
                  "name": "TWILIO_AUTH_TOKEN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_AUTH_TOKEN"
                    }
                  }
                },
                {
                  "name": "PRICE_SERVER_HOST",
                  "value": "dealer-price.namespace.svc.cluster.local"
                },
                {
                  "name": "PRICE_SERVER_PORT",
                  "value": "50055"
                },
                {
                  "name": "PRICE_HISTORY_HOST",
                  "value": "galoy-price-history"
                },
                {
                  "name": "PRICE_HISTORY_PORT",
                  "value": "50052"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 3000
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "failureThreshold": 5,
                "timeoutSeconds": 1
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 3000
                },
                "initialDelaySeconds": 5,
                "failureThreshold": 5,
                "successThreshold": 2,
                "timeoutSeconds": 1
              }
            }
          ],
          "volumes": [
            {
              "name": "firebase-serviceaccount",
              "secret": {
                "secretName": "galoyapp-firebase-serviceaccount"
              }
            },
            {
              "name": "custom-yaml",
              "secret": {
                "secretName": "galoy-config-map"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "trigger",
      "labels": {
        "app": "trigger",
        "app.kubernetes.io/managed-by": "Helm",
        "kube-monkey/enabled": "enabled",
        "kube-monkey/identifier": "trigger",
        "kube-monkey/kill-mode": "fixed",
        "kube-monkey/kill-value": "1",
        "kube-monkey/mtbf": "8"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "trigger"
        }
      },
      "template": {
        "metadata": {
          "name": "trigger",
          "labels": {
            "app": "trigger",
            "kube-monkey/enabled": "enabled",
            "kube-monkey/identifier": "trigger",
            "allow-to-lnd": "true",
            "allow-to-bitcoind": "true"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-serviceaccount",
          "initContainers": [
            {
              "name": "wait-for-mongodb-migrate",
              "image": "groundnuty/k8s-wait-for:v1.5.1",
              "args": [
                "job-wr",
                "release-name-mongodb-migrate-1"
              ]
            }
          ],
          "containers": [
            {
              "name": "trigger",
              "image": "us.gcr.io/galoy-org/galoy-app@sha256:f51110f9567ea1011d5581342cf03bb19508ff64d4b1bfa2191102fc5be992bd",
              "args": [
                "-r",
                "/app/lib/services/tracing.js",
                "lib/servers/trigger.js"
              ],
              "volumeMounts": [
                {
                  "name": "firebase-serviceaccount",
                  "mountPath": "/tmp/firebase-serviceaccount",
                  "readOnly": true
                },
                {
                  "name": "service-account",
                  "mountPath": "/var/secret/cloud.google.com"
                },
                {
                  "name": "custom-yaml",
                  "mountPath": "/var/yaml/"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8888,
                  "protocol": "TCP"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "100m"
                },
                "limits": {
                  "cpu": "1000m"
                }
              },
              "env": [
                {
                  "name": "HELMREVISION",
                  "value": "1"
                },
                {
                  "name": "NODE_ENV",
                  "value": "production"
                },
                {
                  "name": "JAEGER_HOST",
                  "value": "localhost"
                },
                {
                  "name": "TRACING_SERVICE_NAME",
                  "value": "galoy-trigger"
                },
                {
                  "name": "MONGODB_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mongodb",
                      "key": "mongodb-password"
                    }
                  }
                },
                {
                  "name": "MONGODB_USER",
                  "value": "testGaloy"
                },
                {
                  "name": "MONGODB_ADDRESS",
                  "value": "galoy-mongodb-0.galoy-mongodb-headless,galoy-mongodb-1.galoy-mongodb-headless,galoy-mongodb-2.galoy-mongodb-headless"
                },
                {
                  "name": "LND1_DNS",
                  "value": null
                },
                {
                  "name": "LND1_MACAROON",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-credentials",
                      "key": "admin_macaroon_base64"
                    }
                  }
                },
                {
                  "name": "LND1_TLS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-credentials",
                      "key": "tls_base64"
                    }
                  }
                },
                {
                  "name": "LND1_PUBKEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd1-pubkey",
                      "key": "pubkey"
                    }
                  }
                },
                {
                  "name": "LND2_DNS",
                  "value": null
                },
                {
                  "name": "LND2_MACAROON",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-credentials",
                      "key": "admin_macaroon_base64"
                    }
                  }
                },
                {
                  "name": "LND2_TLS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-credentials",
                      "key": "tls_base64"
                    }
                  }
                },
                {
                  "name": "LND2_PUBKEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "lnd2-pubkey",
                      "key": "pubkey"
                    }
                  }
                },
                {
                  "name": "BITCOINDADDR",
                  "value": null
                },
                {
                  "name": "BITCOINDRPCPASS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "bitcoind-rpcpassword",
                      "key": "password"
                    }
                  }
                },
                {
                  "name": "BITCOINDPORT",
                  "value": "8332"
                },
                {
                  "name": "GEETEST_ID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geetest-key",
                      "key": "id"
                    }
                  }
                },
                {
                  "name": "GEETEST_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "geetest-key",
                      "key": "key"
                    }
                  }
                },
                {
                  "name": "REDIS_MASTER_NAME",
                  "value": "mymaster"
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_0_DNS",
                  "value": "galoy-redis-node-0.galoy-redis-headless"
                },
                {
                  "name": "REDIS_1_DNS",
                  "value": "galoy-redis-node-1.galoy-redis-headless"
                },
                {
                  "name": "REDIS_2_DNS",
                  "value": "galoy-redis-node-2.galoy-redis-headless"
                },
                {
                  "name": "JWT_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "jwt-secret",
                      "key": "secret"
                    }
                  }
                },
                {
                  "name": "NETWORK",
                  "value": "mainnet"
                },
                {
                  "name": "LOGLEVEL",
                  "value": "debug"
                },
                {
                  "name": "GOOGLE_APPLICATION_CREDENTIALS",
                  "value": "/tmp/firebase-serviceaccount/galoyapp-firebase-serviceaccount.json"
                },
                {
                  "name": "GCS_APPLICATION_CREDENTIALS",
                  "value": "/var/secret/cloud.google.com/gcs-sa-key.json"
                },
                {
                  "name": "DROPBOX_ACCESS_TOKEN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "dropbox-access-token",
                      "key": "token"
                    }
                  }
                },
                {
                  "name": "TWILIO_PHONE_NUMBER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_PHONE_NUMBER"
                    }
                  }
                },
                {
                  "name": "TWILIO_ACCOUNT_SID",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_ACCOUNT_SID"
                    }
                  }
                },
                {
                  "name": "TWILIO_AUTH_TOKEN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "twilio-secret",
                      "key": "TWILIO_AUTH_TOKEN"
                    }
                  }
                },
                {
                  "name": "PRICE_SERVER_HOST",
                  "value": "dealer-price.namespace.svc.cluster.local"
                },
                {
                  "name": "PRICE_SERVER_PORT",
                  "value": "50055"
                },
                {
                  "name": "PRICE_HISTORY_HOST",
                  "value": "galoy-price-history"
                },
                {
                  "name": "PRICE_HISTORY_PORT",
                  "value": "50052"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 8888
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10,
                "failureThreshold": 5,
                "timeoutSeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 8888
                },
                "initialDelaySeconds": 5,
                "failureThreshold": 5,
                "successThreshold": 2,
                "timeoutSeconds": 30
              }
            }
          ],
          "volumes": [
            {
              "name": "firebase-serviceaccount",
              "secret": {
                "secretName": "galoyapp-firebase-serviceaccount"
              }
            },
            {
              "name": "service-account",
              "secret": {
                "secretName": "gcs-sa-key"
              }
            },
            {
              "name": "custom-yaml",
              "secret": {
                "secretName": "galoy-config-map"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-mongodb",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "mongodb",
        "helm.sh/chart": "mongodb-11.1.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "mongodb",
        "kube-monkey/enabled": "enabled",
        "kube-monkey/identifier": "mongodb",
        "kube-monkey/kill-mode": "fixed",
        "kube-monkey/kill-value": "1",
        "kube-monkey/mtbf": "8"
      }
    },
    "spec": {
      "serviceName": "release-name-mongodb-headless",
      "podManagementPolicy": "OrderedReady",
      "replicas": 3,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "mongodb",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "mongodb"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "mongodb",
            "helm.sh/chart": "mongodb-11.1.10",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "mongodb",
            "kube-monkey/enabled": "enabled",
            "kube-monkey/identifier": "mongodb"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-mongodb",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "mongodb",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "mongodb"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001,
            "sysctls": []
          },
          "containers": [
            {
              "name": "mongodb",
              "image": "docker.io/bitnami/mongodb:4.4.13-debian-10-r52",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 10810,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/scripts/setup.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "MY_POD_HOST_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.hostIP"
                    }
                  }
                },
                {
                  "name": "K8S_SERVICE_NAME",
                  "value": "release-name-mongodb-headless"
                },
                {
                  "name": "MONGODB_INITIAL_PRIMARY_HOST",
                  "value": "release-name-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "MONGODB_REPLICA_SET_NAME",
                  "value": "rs0"
                },
                {
                  "name": "MONGODB_ADVERTISED_HOSTNAME",
                  "value": "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "MONGODB_EXTRA_USERNAMES",
                  "value": "testGaloy"
                },
                {
                  "name": "MONGODB_EXTRA_DATABASES",
                  "value": "galoy"
                },
                {
                  "name": "MONGODB_EXTRA_PASSWORDS",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "galoy-mongodb",
                      "key": "mongodb-passwords"
                    }
                  }
                },
                {
                  "name": "MONGODB_ROOT_USER",
                  "value": "root"
                },
                {
                  "name": "MONGODB_ROOT_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "galoy-mongodb",
                      "key": "mongodb-root-password"
                    }
                  }
                },
                {
                  "name": "MONGODB_REPLICA_SET_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "galoy-mongodb",
                      "key": "mongodb-replica-set-key"
                    }
                  }
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no"
                },
                {
                  "name": "MONGODB_SYSTEM_LOG_VERBOSITY",
                  "value": "0"
                },
                {
                  "name": "MONGODB_DISABLE_SYSTEM_LOG",
                  "value": "no"
                },
                {
                  "name": "MONGODB_DISABLE_JAVASCRIPT",
                  "value": "no"
                },
                {
                  "name": "MONGODB_ENABLE_JOURNAL",
                  "value": "yes"
                },
                {
                  "name": "MONGODB_ENABLE_IPV6",
                  "value": "no"
                },
                {
                  "name": "MONGODB_ENABLE_DIRECTORY_PER_DB",
                  "value": "no"
                }
              ],
              "ports": [
                {
                  "containerPort": 27017,
                  "name": "mongodb"
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "mongo",
                    "--disableImplicitSessions",
                    "--eval",
                    "db.adminCommand('ping')"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "mongo",
                    "--disableImplicitSessions",
                    "--eval",
                    "db.adminCommand('ping')"
                  ]
                },
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "datadir",
                  "mountPath": "/bitnami/mongodb",
                  "subPath": null
                },
                {
                  "name": "custom-init-scripts",
                  "mountPath": "/docker-entrypoint-initdb.d"
                },
                {
                  "name": "scripts",
                  "mountPath": "/scripts/setup.sh",
                  "subPath": "setup.sh"
                }
              ]
            },
            {
              "name": "metrics",
              "image": "docker.io/bitnami/mongodb-exporter:0.31.2-debian-10-r14",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1001
              },
              "command": [
                "/bin/bash",
                "-ec"
              ],
              "args": [
                "/bin/mongodb_exporter --web.listen-address \":9216\" --mongodb.uri \"mongodb://$MONGODB_ROOT_USER:$(echo $MONGODB_ROOT_PASSWORD | sed -r \"s/@/%40/g;s/:/%3A/g\")@localhost:27017/admin?\" \n"
              ],
              "env": [
                {
                  "name": "MONGODB_ROOT_USER",
                  "value": "root"
                },
                {
                  "name": "MONGODB_ROOT_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "galoy-mongodb",
                      "key": "mongodb-root-password"
                    }
                  }
                }
              ],
              "volumeMounts": null,
              "ports": [
                {
                  "name": "metrics",
                  "containerPort": 9216
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "metrics"
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 5,
                "timeoutSeconds": 5,
                "failureThreshold": 3,
                "successThreshold": 1
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "metrics"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "timeoutSeconds": 1,
                "failureThreshold": 3,
                "successThreshold": 1
              },
              "resources": {
                "limits": {},
                "requests": {}
              }
            }
          ],
          "volumes": [
            {
              "name": "custom-init-scripts",
              "configMap": {
                "name": "release-name-mongodb-init-scripts"
              }
            },
            {
              "name": "scripts",
              "configMap": {
                "name": "release-name-mongodb-scripts",
                "defaultMode": 493
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "datadir"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.1.9",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "replicas": 1,
      "serviceName": "release-name-postgresql-hl",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-11.1.9",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "primary"
          },
          "annotations": null
        },
        "spec": {
          "serviceAccountName": "default",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "postgresql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "hostNetwork": false,
          "hostIPC": false,
          "initContainers": null,
          "containers": [
            {
              "name": "postgresql",
              "image": "docker.io/bitnami/postgresql:14.2.0-debian-10-r35",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 11535,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "price-history"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "galoy-price-history-postgres-creds",
                      "key": "password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "price-history"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"price-history\" -d \"dbname=price-history\" -h 127.0.0.1 -p 5432"
                  ]
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"price-history\" -d \"dbname=price-history\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-redis-node",
      "namespace": "7xtatPGcfw4rmwM",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.5",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "node"
      }
    },
    "spec": {
      "replicas": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "node"
        }
      },
      "serviceName": "release-name-redis-headless",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.8.5",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "node"
          },
          "annotations": {
            "checksum/configmap": "775e16da3296a248a6b161a2bf3666ce57b1f71423f57b1be4be00c2c0c62735",
            "checksum/health": "27f5bcdf2b94ff4b32780a6b30ac24a407ad117e0c2ebf2f2e502ffa2d3b5b97",
            "checksum/scripts": "5e8d2a9cc86bf8e083de41f5896b5bea618a6b7f4ab9070f24c9d2a2ca152a69",
            "checksum/secret": "0610e93883a472a3aceb913818cd4f557bbeb9aecf135909b9f7c23f31384948",
            "prometheus.io/port": "9121",
            "prometheus.io/scrape": "true"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "serviceAccountName": "release-name-redis",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "redis",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "node"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "terminationGracePeriodSeconds": 30,
          "containers": [
            {
              "name": "redis",
              "image": "docker.io/bitnami/redis:6.2.6-debian-10-r179",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 10730,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-node.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "REDIS_MASTER_PORT_NUMBER",
                  "value": "6379"
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no"
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_MASTER_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379"
                },
                {
                  "name": "REDIS_DATA_DIR",
                  "value": "/data"
                }
              ],
              "ports": [
                {
                  "name": "redis",
                  "containerPort": 6379
                }
              ],
              "startupProbe": {
                "failureThreshold": 22,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "tcpSocket": {
                  "port": "redis"
                }
              },
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 1,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 5"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "start-scripts",
                  "mountPath": "/opt/bitnami/scripts/start-scripts"
                },
                {
                  "name": "health",
                  "mountPath": "/health"
                },
                {
                  "name": "redis-data",
                  "mountPath": "/data",
                  "subPath": null
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/redis/mounted-etc"
                },
                {
                  "name": "redis-tmp-conf",
                  "mountPath": "/opt/bitnami/redis/etc"
                },
                {
                  "name": "tmp",
                  "mountPath": "/tmp"
                }
              ],
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/bin/bash",
                      "-c",
                      "/opt/bitnami/scripts/start-scripts/prestop-redis.sh"
                    ]
                  }
                }
              }
            },
            {
              "name": "sentinel",
              "image": "docker.io/bitnami/redis-sentinel:6.2.6-debian-10-r176",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 1001
              },
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-sentinel.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_SENTINEL_TLS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "REDIS_SENTINEL_PORT",
                  "value": "26379"
                }
              ],
              "ports": [
                {
                  "name": "redis-sentinel",
                  "containerPort": 26379
                }
              ],
              "startupProbe": {
                "failureThreshold": 22,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "tcpSocket": {
                  "port": "redis-sentinel"
                }
              },
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_sentinel.sh 5"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 1,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_sentinel.sh 5"
                  ]
                }
              },
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/bin/bash",
                      "-c",
                      "/opt/bitnami/scripts/start-scripts/prestop-sentinel.sh"
                    ]
                  }
                }
              },
              "resources": {
                "limits": {},
                "requests": {}
              },
              "volumeMounts": [
                {
                  "name": "start-scripts",
                  "mountPath": "/opt/bitnami/scripts/start-scripts"
                },
                {
                  "name": "health",
                  "mountPath": "/health"
                },
                {
                  "name": "sentinel-data",
                  "mountPath": "/opt/bitnami/redis-sentinel/etc"
                },
                {
                  "name": "redis-data",
                  "mountPath": "/data",
                  "subPath": null
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/redis-sentinel/mounted-etc"
                }
              ]
            },
            {
              "name": "metrics",
              "image": "docker.io/bitnami/redis-exporter:1.37.0-debian-10-r18",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 1001
              },
              "command": [
                "/bin/bash",
                "-c",
                "if [[ -f '/secrets/redis-password' ]]; then\n    export REDIS_PASSWORD=$(cat /secrets/redis-password)\nfi\nredis_exporter\n"
              ],
              "env": [
                {
                  "name": "REDIS_ALIAS",
                  "value": "release-name-redis"
                },
                {
                  "name": "REDIS_USER",
                  "value": "default"
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "metrics",
                  "containerPort": 9121
                }
              ],
              "resources": {
                "limits": {},
                "requests": {}
              },
              "volumeMounts": null
            }
          ],
          "volumes": [
            {
              "name": "start-scripts",
              "configMap": {
                "name": "release-name-redis-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "health",
              "configMap": {
                "name": "release-name-redis-health",
                "defaultMode": 493
              }
            },
            {
              "name": "config",
              "configMap": {
                "name": "release-name-redis-configuration"
              }
            },
            {
              "name": "sentinel-data",
              "emptyDir": {}
            },
            {
              "name": "redis-tmp-conf",
              "emptyDir": {}
            },
            {
              "name": "tmp",
              "emptyDir": {}
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "redis-data",
            "labels": {
              "app.kubernetes.io/name": "redis",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/component": "node"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-price-history-postgres-migrate-1"
    },
    "spec": {
      "backoffLimit": 3,
      "template": {
        "spec": {
          "containers": [
            {
              "name": "migrate",
              "image": "us.gcr.io/galoy-org/price-history-migrate@sha256:007a3ec51d7e705238d1b98bc3e5fa4168f2cb23ed8333fe68823d93b322ef8f",
              "env": [
                {
                  "name": "DB_HOST",
                  "value": "galoy-postgresql"
                },
                {
                  "name": "DB_PWD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-price-history-postgres-creds",
                      "key": "password"
                    }
                  }
                },
                {
                  "name": "DB_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-price-history-postgres-creds",
                      "key": "username"
                    }
                  }
                },
                {
                  "name": "DB_DB",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-price-history-postgres-creds",
                      "key": "database"
                    }
                  }
                }
              ]
            }
          ],
          "restartPolicy": "Never"
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-mongodb-migrate-1"
    },
    "spec": {
      "backoffLimit": 1,
      "template": {
        "spec": {
          "serviceAccountName": "release-name-serviceaccount",
          "initContainers": [
            {
              "name": "trigger-mongodb-backup",
              "image": "groundnuty/k8s-wait-for:v1.5.1",
              "command": [
                "/bin/sh",
                "-c",
                "job_name=\"release-name-pre-migration-backup-1\"\necho \"Executing ${job_name}\"\nkubectl delete job \"${job_name}\" || true\nkubectl create job --from=cronjob/mongo-backup \"${job_name}\"\nsleep 1\nwait_for.sh job \"${job_name}\"\nsleep 1\nstatus=\"$(kubectl get job ${job_name} -o jsonpath='{.status.succeeded}')\"\nif [[ \"${status}\" != \"1\" ]]; then\n  echo \"Backup failed!\"\n  exit 1\nelse\n  echo \"Backup succeeded!\"\nfi\nkubectl delete job \"${job_name}\"\n"
              ]
            }
          ],
          "containers": [
            {
              "name": "mongodb-migrate",
              "image": "us.gcr.io/galoy-org/galoy-app-migrate@sha256:204c561dc0e877a8decf02c0b4b3af525e47c3b1a82a46b7f94fd823321604e2",
              "env": [
                {
                  "name": "MONGODB_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mongodb",
                      "key": "mongodb-password"
                    }
                  }
                },
                {
                  "name": "MONGODB_USER",
                  "value": "testGaloy"
                },
                {
                  "name": "MONGODB_ADDRESS",
                  "value": "galoy-mongodb-0.galoy-mongodb-headless,galoy-mongodb-1.galoy-mongodb-headless,galoy-mongodb-2.galoy-mongodb-headless"
                }
              ]
            }
          ],
          "restartPolicy": "Never"
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1beta1",
    "kind": "CronJob",
    "metadata": {
      "name": "release-name-price-history-cronjob",
      "labels": {
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "schedule": "2 * * * *",
      "jobTemplate": {
        "spec": {
          "activeDeadlineSeconds": 60,
          "template": {
            "spec": {
              "containers": [
                {
                  "name": "update-price",
                  "image": "us.gcr.io/galoy-org/price-history@sha256:86294559d50931f4ebb11e08fde47a4183cf7d976899c9633ccd3563f62dd6ec",
                  "args": [
                    "servers/history/cron.js"
                  ],
                  "env": [
                    {
                      "name": "DB_HOST",
                      "value": "galoy-postgresql"
                    },
                    {
                      "name": "DB_PWD",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "release-name-price-history-postgres-creds",
                          "key": "password"
                        }
                      }
                    },
                    {
                      "name": "DB_USER",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "release-name-price-history-postgres-creds",
                          "key": "username"
                        }
                      }
                    },
                    {
                      "name": "DB_DB",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "release-name-price-history-postgres-creds",
                          "key": "database"
                        }
                      }
                    }
                  ],
                  "volumeMounts": [
                    {
                      "name": "custom-yaml",
                      "mountPath": "/var/yaml/"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "custom-yaml",
                  "secret": {
                    "secretName": "release-name-price-history-config"
                  }
                }
              ],
              "restartPolicy": "OnFailure"
            }
          }
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1beta1",
    "kind": "CronJob",
    "metadata": {
      "name": "cronjob",
      "labels": {
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "schedule": "0 2 * * *",
      "jobTemplate": {
        "spec": {
          "activeDeadlineSeconds": 7201,
          "template": {
            "metadata": {
              "labels": {
                "allow-to-lnd": "true",
                "allow-to-bitcoind": "true"
              }
            },
            "spec": {
              "serviceAccountName": "release-name-serviceaccount",
              "initContainers": [
                {
                  "name": "wait-for-mongodb-migrate",
                  "image": "groundnuty/k8s-wait-for:v1.5.1",
                  "args": [
                    "job-wr",
                    "release-name-mongodb-migrate-1"
                  ]
                }
              ],
              "containers": [
                {
                  "name": "cronjob",
                  "image": "us.gcr.io/galoy-org/galoy-app@sha256:f51110f9567ea1011d5581342cf03bb19508ff64d4b1bfa2191102fc5be992bd",
                  "args": [
                    "-r",
                    "/app/lib/services/tracing.js",
                    "lib/servers/cron.js"
                  ],
                  "volumeMounts": [
                    {
                      "name": "firebase-serviceaccount",
                      "mountPath": "/tmp/firebase-serviceaccount",
                      "readOnly": true
                    },
                    {
                      "name": "custom-yaml",
                      "mountPath": "/var/yaml/"
                    }
                  ],
                  "env": [
                    {
                      "name": "HELMREVISION",
                      "value": "1"
                    },
                    {
                      "name": "MONGODB_PASSWORD",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "release-name-mongodb",
                          "key": "mongodb-password"
                        }
                      }
                    },
                    {
                      "name": "JWT_SECRET",
                      "value": "dummy"
                    },
                    {
                      "name": "MONGODB_USER",
                      "value": "testGaloy"
                    },
                    {
                      "name": "JAEGER_HOST",
                      "value": "localhost"
                    },
                    {
                      "name": "TRACING_SERVICE_NAME",
                      "value": "galoy-cronjob"
                    },
                    {
                      "name": "MONGODB_ADDRESS",
                      "value": "galoy-mongodb-0.galoy-mongodb-headless,galoy-mongodb-1.galoy-mongodb-headless,galoy-mongodb-2.galoy-mongodb-headless"
                    },
                    {
                      "name": "LND1_DNS",
                      "value": null
                    },
                    {
                      "name": "LND1_MACAROON",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd1-credentials",
                          "key": "admin_macaroon_base64"
                        }
                      }
                    },
                    {
                      "name": "LND1_TLS",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd1-credentials",
                          "key": "tls_base64"
                        }
                      }
                    },
                    {
                      "name": "LND1_PUBKEY",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd1-pubkey",
                          "key": "pubkey"
                        }
                      }
                    },
                    {
                      "name": "LND2_DNS",
                      "value": null
                    },
                    {
                      "name": "LND2_MACAROON",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd2-credentials",
                          "key": "admin_macaroon_base64"
                        }
                      }
                    },
                    {
                      "name": "LND2_TLS",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd2-credentials",
                          "key": "tls_base64"
                        }
                      }
                    },
                    {
                      "name": "LND2_PUBKEY",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd2-pubkey",
                          "key": "pubkey"
                        }
                      }
                    },
                    {
                      "name": "BITCOINDADDR",
                      "value": null
                    },
                    {
                      "name": "BITCOINDRPCPASS",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "bitcoind-rpcpassword",
                          "key": "password"
                        }
                      }
                    },
                    {
                      "name": "BITCOINDPORT",
                      "value": "8332"
                    },
                    {
                      "name": "NETWORK",
                      "value": "mainnet"
                    },
                    {
                      "name": "REDIS_PASSWORD",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "release-name-redis",
                          "key": "redis-password"
                        }
                      }
                    },
                    {
                      "name": "REDIS_MASTER_NAME",
                      "value": "mymaster"
                    },
                    {
                      "name": "REDIS_0_DNS",
                      "value": "galoy-redis-node-0.galoy-redis-headless"
                    },
                    {
                      "name": "REDIS_1_DNS",
                      "value": "galoy-redis-node-1.galoy-redis-headless"
                    },
                    {
                      "name": "REDIS_2_DNS",
                      "value": "galoy-redis-node-2.galoy-redis-headless"
                    },
                    {
                      "name": "LOGLEVEL",
                      "value": "debug"
                    },
                    {
                      "name": "GOOGLE_APPLICATION_CREDENTIALS",
                      "value": "/tmp/firebase-serviceaccount/galoyapp-firebase-serviceaccount.json"
                    },
                    {
                      "name": "DROPBOX_ACCESS_TOKEN",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "dropbox-access-token",
                          "key": "token"
                        }
                      }
                    }
                  ]
                }
              ],
              "restartPolicy": "OnFailure",
              "volumes": [
                {
                  "name": "firebase-serviceaccount",
                  "secret": {
                    "secretName": "galoyapp-firebase-serviceaccount"
                  }
                },
                {
                  "name": "custom-yaml",
                  "secret": {
                    "secretName": "galoy-config-map"
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1beta1",
    "kind": "CronJob",
    "metadata": {
      "name": "balance-notif",
      "labels": {
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "schedule": "0 14 * * *",
      "jobTemplate": {
        "spec": {
          "activeDeadlineSeconds": 7201,
          "template": {
            "metadata": {
              "labels": {
                "allow-to-lnd": "true",
                "allow-to-bitcoind": "true"
              }
            },
            "spec": {
              "serviceAccountName": "release-name-serviceaccount",
              "initContainers": [
                {
                  "name": "wait-for-mongodb-migrate",
                  "image": "groundnuty/k8s-wait-for:v1.5.1",
                  "args": [
                    "job-wr",
                    "release-name-mongodb-migrate-1"
                  ]
                }
              ],
              "containers": [
                {
                  "name": "balance-notif",
                  "image": "us.gcr.io/galoy-org/galoy-app@sha256:f51110f9567ea1011d5581342cf03bb19508ff64d4b1bfa2191102fc5be992bd",
                  "args": [
                    "-r",
                    "/app/lib/services/tracing.js",
                    "lib/servers/daily-balance-notification.js"
                  ],
                  "volumeMounts": [
                    {
                      "name": "firebase-serviceaccount",
                      "mountPath": "/tmp/firebase-serviceaccount",
                      "readOnly": true
                    },
                    {
                      "name": "custom-yaml",
                      "mountPath": "/var/yaml/"
                    }
                  ],
                  "env": [
                    {
                      "name": "HELMREVISION",
                      "value": "1"
                    },
                    {
                      "name": "MONGODB_PASSWORD",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "release-name-mongodb",
                          "key": "mongodb-password"
                        }
                      }
                    },
                    {
                      "name": "JWT_SECRET",
                      "value": "dummy"
                    },
                    {
                      "name": "MONGODB_USER",
                      "value": "testGaloy"
                    },
                    {
                      "name": "JAEGER_HOST",
                      "value": "localhost"
                    },
                    {
                      "name": "TRACING_SERVICE_NAME",
                      "value": "galoy-balance-notif"
                    },
                    {
                      "name": "MONGODB_ADDRESS",
                      "value": "galoy-mongodb-0.galoy-mongodb-headless,galoy-mongodb-1.galoy-mongodb-headless,galoy-mongodb-2.galoy-mongodb-headless"
                    },
                    {
                      "name": "LND1_DNS",
                      "value": null
                    },
                    {
                      "name": "LND1_MACAROON",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd1-credentials",
                          "key": "admin_macaroon_base64"
                        }
                      }
                    },
                    {
                      "name": "LND1_TLS",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd1-credentials",
                          "key": "tls_base64"
                        }
                      }
                    },
                    {
                      "name": "LND1_PUBKEY",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd1-pubkey",
                          "key": "pubkey"
                        }
                      }
                    },
                    {
                      "name": "LND2_DNS",
                      "value": null
                    },
                    {
                      "name": "LND2_MACAROON",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd2-credentials",
                          "key": "admin_macaroon_base64"
                        }
                      }
                    },
                    {
                      "name": "LND2_TLS",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd2-credentials",
                          "key": "tls_base64"
                        }
                      }
                    },
                    {
                      "name": "LND2_PUBKEY",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "lnd2-pubkey",
                          "key": "pubkey"
                        }
                      }
                    },
                    {
                      "name": "BITCOINDADDR",
                      "value": null
                    },
                    {
                      "name": "BITCOINDRPCPASS",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "bitcoind-rpcpassword",
                          "key": "password"
                        }
                      }
                    },
                    {
                      "name": "BITCOINDPORT",
                      "value": "8332"
                    },
                    {
                      "name": "NETWORK",
                      "value": "mainnet"
                    },
                    {
                      "name": "REDIS_PASSWORD",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "release-name-redis",
                          "key": "redis-password"
                        }
                      }
                    },
                    {
                      "name": "REDIS_MASTER_NAME",
                      "value": "mymaster"
                    },
                    {
                      "name": "REDIS_0_DNS",
                      "value": "galoy-redis-node-0.galoy-redis-headless"
                    },
                    {
                      "name": "REDIS_1_DNS",
                      "value": "galoy-redis-node-1.galoy-redis-headless"
                    },
                    {
                      "name": "REDIS_2_DNS",
                      "value": "galoy-redis-node-2.galoy-redis-headless"
                    },
                    {
                      "name": "LOGLEVEL",
                      "value": "debug"
                    },
                    {
                      "name": "GOOGLE_APPLICATION_CREDENTIALS",
                      "value": "/tmp/firebase-serviceaccount/galoyapp-firebase-serviceaccount.json"
                    },
                    {
                      "name": "DROPBOX_ACCESS_TOKEN",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "dropbox-access-token",
                          "key": "token"
                        }
                      }
                    }
                  ]
                }
              ],
              "restartPolicy": "OnFailure",
              "volumes": [
                {
                  "name": "firebase-serviceaccount",
                  "secret": {
                    "secretName": "galoyapp-firebase-serviceaccount"
                  }
                },
                {
                  "name": "custom-yaml",
                  "secret": {
                    "secretName": "galoy-config-map"
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1beta1",
    "kind": "CronJob",
    "metadata": {
      "name": "mongo-backup",
      "labels": {
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "schedule": "0 * * * *",
      "jobTemplate": {
        "spec": {
          "activeDeadlineSeconds": 300,
          "template": {
            "spec": {
              "restartPolicy": "OnFailure",
              "containers": [
                {
                  "name": "mongodb-backup",
                  "image": "us.gcr.io/galoy-org/mongo-backup@sha256:4cfc197ea082ef3dae2d4321a9dfa31ef185f43d578a37a224095b75de656e6a",
                  "command": [
                    "/bin/sh",
                    "-c",
                    "/var/backup.sh"
                  ],
                  "volumeMounts": [
                    {
                      "name": "mongo-backup-configmap",
                      "mountPath": "/var/backup.sh",
                      "subPath": "backup.sh"
                    },
                    {
                      "name": "service-account",
                      "mountPath": "/var/secret/cloud.google.com"
                    }
                  ],
                  "env": [
                    {
                      "name": "NETWORK",
                      "value": "mainnet"
                    },
                    {
                      "name": "MONGODB_PASSWORD",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "release-name-mongodb",
                          "key": "mongodb-password"
                        }
                      }
                    },
                    {
                      "name": "MONGODB_USER",
                      "value": "testGaloy"
                    },
                    {
                      "name": "MONGODB_ADDRESS",
                      "value": "galoy-mongodb-0.galoy-mongodb-headless,galoy-mongodb-1.galoy-mongodb-headless,galoy-mongodb-2.galoy-mongodb-headless"
                    },
                    {
                      "name": "MONGODB_PORT",
                      "value": "27017"
                    },
                    {
                      "name": "MONGODB_DB",
                      "value": "galoy"
                    },
                    {
                      "name": "DROPBOX_ACCESS_TOKEN",
                      "valueFrom": {
                        "secretKeyRef": {
                          "name": "dropbox-access-token",
                          "key": "token"
                        }
                      }
                    },
                    {
                      "name": "GOOGLE_APPLICATION_CREDENTIALS",
                      "value": "/var/secret/cloud.google.com/galoyapp-31518a00082f.json"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "mongo-backup-configmap",
                  "configMap": {
                    "name": "mongo-backup-configmap",
                    "defaultMode": 484
                  }
                },
                {
                  "name": "service-account",
                  "secret": {
                    "secretName": "gcs-sa-key"
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-price-test-connection",
      "labels": {
        "helm.sh/chart": "price-0.1.0",
        "app.kubernetes.io/name": "price",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.1.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "test"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "wget",
          "image": "busybox",
          "command": [
            "wget"
          ],
          "args": [
            "release-name-price:"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]