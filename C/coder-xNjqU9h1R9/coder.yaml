apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-deny-all
  namespace: default
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: coderd
spec:
  podSelector:
    matchLabels:
      com.coder.resource: "true"
  policyTypes:
    - Ingress
  ingress: []
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coderd
  namespace: default
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: coderd
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: coderd
  policyTypes:
    - Ingress
  ingress:
    - {}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: timescale
  namespace: default
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: timescale
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: timescale
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: release-name
              app.kubernetes.io/component: coderd
      ports:
        - protocol: TCP
          port: 5432
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              app.kubernetes.io/name: istio-controlplane
          podSelector:
            matchLabels:
              istio: pilot
    - ports:
        - port: 53
          protocol: TCP
        - port: 53
          protocol: UDP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: xNjqU9h1R9
  name: environments
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: coderd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coder
  namespace: xNjqU9h1R9
  annotations: {}
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: coderd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: xNjqU9h1R9
  name: timescale
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: timescale
    coder.deployment: timescale
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: coder
  namespace: xNjqU9h1R9
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: coderd
rules:
  - apiGroups:
      - ""
      - apps
      - networking.k8s.io
    resources:
      - persistentvolumeclaims
      - pods
      - deployments
      - services
      - secrets
      - pods/exec
      - pods/log
      - events
      - networkpolicies
      - serviceaccounts
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
      - deletecollection
  - apiGroups:
      - metrics.k8s.io
      - storage.k8s.io
    resources:
      - pods
      - storageclasses
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: coder
  namespace: xNjqU9h1R9
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: coderd
subjects:
  - kind: ServiceAccount
    name: coder
roleRef:
  kind: Role
  name: coder
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: coderd
  namespace: xNjqU9h1R9
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: coderd
  annotations: {}
spec:
  externalTrafficPolicy: Local
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  type: LoadBalancer
  selector:
    coder.deployment: coderd
  ports:
    - name: tcp-coderd
      port: 80
      targetPort: 8080
      protocol: TCP
    - name: tcp-coderd-https
      port: 443
      targetPort: 8443
      protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: timescale
  namespace: xNjqU9h1R9
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: timescale
    app: timescale
    coder.deployment: timescale
spec:
  ports:
    - port: 5432
      name: tcp-timescale
  selector:
    app: timescale
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coderd
  namespace: xNjqU9h1R9
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: coderd
    app: coderd
    coder.deployment: coderd
  annotations: {}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      coder.deployment: coderd
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coder
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: coderd
        app.kubernetes.io/part-of: coder
        app: coderd
        coder.deployment: coderd
      annotations: {}
    spec:
      securityContext:
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: Always
      terminationGracePeriodSeconds: 300
      serviceAccountName: coder
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - coderd
                topologyKey: kubernetes.io/hostname
              weight: 1
      nodeSelector:
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      initContainers:
        - name: migrations
          image: docker.io/coderenvs/coder-service:1.31.1
          imagePullPolicy: Always
          env:
            - name: HUMAN_LOG
              value: /dev/stderr
            - name: JSON_LOG
              value: ""
            - name: STACKDRIVER_LOG
              value: ""
            - name: SPLUNK_URL
              value: ""
            - name: SPLUNK_TOKEN
              value: ""
            - name: SPLUNK_CHANNEL
              value: ""
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DEVURL_HOST
              value: ""
            - name: VERBOSE
              value: "true"
            - name: http_proxy
              value: ""
            - name: https_proxy
              value: ""
            - name: no_proxy
              value: cluster.local
            - name: DB_HOST
              value: timescale.default.svc.cluster.local
            - name: DB_PORT
              value: "5432"
            - name: DB_USER
              value: coder
            - name: DB_NAME
              value: coder
            - name: DB_SSL_MODE
              value: disable
          command:
            - coderd
            - migrate
            - up
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: tmp-pgcerts
              mountPath: /tmp/pgcerts
      containers:
        - name: coderd
          image: docker.io/coderenvs/coder-service:1.31.1
          imagePullPolicy: Always
          ports:
            - name: tcp-coderd
              containerPort: 8080
            - name: pprof-coderd
              containerPort: 6060
            - name: prom-coderd
              containerPort: 2112
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 11722
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                "": NET_RAW
          tty: false
          env:
            - name: SKIP_MIGRATIONS
              value: "true"
            - name: ASSETS_URL
            - name: HUMAN_LOG
              value: /dev/stderr
            - name: JSON_LOG
              value: ""
            - name: STACKDRIVER_LOG
              value: ""
            - name: AMPLITUDE_API_KEY
              value: ""
            - name: ENVBOX_IMAGE
              value: docker.io/coderenvs/envbox:1.31.1
            - name: CLUSTER_ADDRESS
              value: https://kubernetes.default.svc.cluster.local:443
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DEVURL_HOST
              value: ""
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: VERBOSE
              value: "true"
            - name: OIDC_REDIRECT_OPTIONS
              value: '{}'
            - name: http_proxy
              value: ""
            - name: https_proxy
              value: ""
            - name: no_proxy
              value: cluster.local
            - name: TRUST_PROXY_IP
              value: "false"
            - name: PROXY_TRUSTED_ORIGINS
              value: ""
            - name: PROXY_TRUSTED_HEADERS
              value: ""
            - name: CODER_ALTERNATE_HOSTNAMES
              value: ""
            - name: CODER_MIGRATE_BUILT_IN_PROVIDER
              value: "true"
            - name: DB_HOST
              value: timescale.default.svc.cluster.local
            - name: DB_PORT
              value: "5432"
            - name: DB_USER
              value: coder
            - name: DB_NAME
              value: coder
            - name: DB_SSL_MODE
              value: disable
          command:
            - coderd
            - run
          readinessProbe:
            httpGet:
              path: /cem-healthz
              port: 8080
            initialDelaySeconds: 10
            failureThreshold: 15
            periodSeconds: 10
            timeoutSeconds: 3
          livenessProbe:
            httpGet:
              path: /cem-healthz
              port: 8080
            initialDelaySeconds: 30
            failureThreshold: 30
            periodSeconds: 10
            timeoutSeconds: 3
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 250m
              memory: 512Mi
          volumeMounts:
            - name: tmp-pgcerts
              mountPath: /tmp/pgcerts
      volumes:
        - name: tmp-pgcerts
          emptyDir: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: timescale
  namespace: xNjqU9h1R9
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.31.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.31.1
    app.kubernetes.io/component: timescale
  annotations: {}
spec:
  serviceName: timescale
  replicas: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app: timescale
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coder
        helm.sh/chart: coder-1.31.1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: 1.31.1
        app.kubernetes.io/component: timescale
        app: timescale
        coder.deployment: timescale
      annotations: {}
    spec:
      serviceAccountName: timescale
      securityContext:
        runAsNonRoot: true
        runAsUser: 70
        runAsGroup: 70
        fsGroup: 70
      terminationGracePeriodSeconds: 60
      containers:
        - name: timescale
          image: docker.io/coderenvs/timescale:1.31.1
          imagePullPolicy: Always
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - coder
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - coder
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          ports:
            - containerPort: 5432
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: timescale-data
              mountPath: /var/lib/postgresql/data
              readOnly: false
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: run
              mountPath: /var/run/postgresql
              readOnly: false
          resources:
            requests:
              cpu: 250m
              memory: 1Gi
            limits:
              cpu: 250m
              memory: 1Gi
          lifecycle:
            preStop:
              exec:
                command:
                  - pg_ctl
                  - stop
                  - --mode=fast
                  - --timeout=60
      volumes:
        - name: tmp
          emptyDir: {}
        - name: run
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: timescale-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
