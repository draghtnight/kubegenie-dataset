[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-capsize",
      "namespace": "uc64rIBQ8d4",
      "labels": {
        "app": "capsize",
        "chart": "capsize-0.2.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-capsize"
    },
    "data": {
      "capsize.py": "#!/usr/bin/env python3\n\"\"\"\ncapsize.py\n\nChecks to see if a deployment is older than a configured age\nand triggers a rolling restart if they are too old.\n\"\"\"\nimport os\nimport sys\nimport json\nfrom datetime import datetime\nimport logging\nimport pytz\nfrom kubernetes import client, config\n\n# Configure Logging\nlogLevel = os.environ.get(\"LOG_LEVEL\", \"INFO\").upper()\nformatter = logging.Formatter('%(asctime)s  %(levelname)8s  %(message)s')\nlogger = logging.getLogger(__name__)\nsh = logging.StreamHandler()\nsh.setFormatter(formatter)\nlogger.setLevel(logLevel)\nlogger.addHandler(sh)\n\n# Config from environment variables\nreqEnv = (\"KUBE_NAMESPACE\", \"KUBE_DEPLOY_NAME\", \"KUBE_CONTAINER_NAME\")\nfor var in reqEnv:\n    if var in os.environ:\n        namespace = os.environ.get(var)\n    else:\n        logger.error(\"Missing environment variable %s\", var)\n        sys.exit(1)\n\ndeploymentName = os.environ.get(\"KUBE_DEPLOY_NAME\")\ncontainerName = os.environ.get(\"KUBE_CONTAINER_NAME\")\nmaxAge = int(os.environ.get(\"MAX_POD_AGE\", 30 * 3600 * 24))\nconfigType = os.environ.get(\"CONFIG_TYPE\", \"cluster\")\n\nlogger.info(\"CONFIG  %15s: %s\", 'namespace', namespace)\nlogger.info(\"CONFIG  %15s: %s\", 'deploymentName', deploymentName)\nlogger.info(\"CONFIG  %15s: %s\", 'containerName', containerName)\nlogger.info(\"CONFIG  %15s: %s\", 'maxAge', maxAge)\nlogger.info(\"CONFIG  %15s: %s\", 'logLevel', logLevel)\nlogger.info(\"CONFIG  %15s: %s\", 'configType', configType)\n\n# Get the time and initialize some things\nnow = datetime.utcnow().replace(tzinfo=pytz.utc)\nnowUnix = int(now.strftime(\"%s\"))\npodAges = []\ntriggerRestart = False\n\n\ndef rollDeployment():\n    \"\"\"\n    Patches the deployment to trigger a reboot\n    \"\"\"\n    extApi = client.ExtensionsV1beta1Api()\n    body = \"\"\"{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\\\n        \"\",\"env\":[{\"name\":\"LAST_MANUAL_RESTART\",\\\n        \"value\":\"\"}]}]}}}}\"\"\"\n    patch = json.loads(body)\n    patch['spec']['template']['spec']['containers'][0]['name'] = containerName\n    patch['spec']['template']['spec']['containers'][0]['env'][0]['value'] \\\n        = str(nowUnix)\n    logger.debug(\"Patch created: %s\", json.dumps(patch, indent=2))\n    logger.info(\"Applying patch to restart pods\")\n    ret = extApi.patch_namespaced_deployment(deploymentName,\n                                             namespace, patch, pretty=True)\n    logger.debug(ret)\n\n\n# Setup Kubernetes access\nif configType == \"cluster\":\n    config.load_incluster_config()\n    logger.info(\"Using in-cluster config\")\nelif configType == \"local\":\n    config.load_kube_config()\n    logger.info(\"Using local kubeconfig\")\n\ncoreApi = client.CoreV1Api()\npodRet = coreApi.list_namespaced_pod(namespace)\n\nif len(podRet.items) != 0:\n    for pod in podRet.items:\n        podName = pod.metadata.name\n        status = pod.status.phase\n        if deploymentName in podName and status == 'Running':\n            podAge = now - pod.status.start_time\n            logger.debug('Found pod %s that is %ds old',\n                         podName, podAge.seconds)\n\n            if (podAge.total_seconds() > maxAge):\n                logger.info(\"Found pod that triggers restart: %s\", podName)\n                triggerRestart = True\n            else:\n                logger.info(\"Not triggering restart for %s - %d < %s\",\n                            podName, podAge.seconds, maxAge)\n\nif triggerRestart:\n    rollDeployment()"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "name": "release-name-capsize",
      "labels": {
        "app": "capsize",
        "chart": "capsize-0.2.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "extensions",
          "apps"
        ],
        "resources": [
          "deployments"
        ],
        "verbs": [
          "get",
          "list",
          "patch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "pods"
        ],
        "verbs": [
          "get",
          "list"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-capsize",
      "namespace": "kube-system",
      "labels": {
        "app": "capsize",
        "chart": "capsize-0.2.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-capsize"
    },
    "subjects": [
      {
        "name": "release-name-capsize",
        "namespace": "default",
        "kind": "ServiceAccount"
      }
    ]
  },
  {
    "apiVersion": "batch/v1beta1",
    "kind": "CronJob",
    "metadata": {
      "name": "release-name-capsize",
      "labels": {
        "chart": "capsize-0.2.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "schedule": "0 3 */1 * *",
      "concurrencyPolicy": "Forbid",
      "suspend": false,
      "jobTemplate": {
        "spec": {
          "backoffLimit": 0,
          "template": {
            "spec": {
              "restartPolicy": "Never",
              "serviceAccountName": "release-name-capsize",
              "containers": [
                {
                  "name": "capsize",
                  "image": "python:3-slim",
                  "imagePullPolicy": "IfNotPresent",
                  "command": [
                    "sh",
                    "-c",
                    "pip install kubernetes\npip install pytz\npython /scripts/capsize.py\n"
                  ],
                  "env": [
                    {
                      "name": "KUBE_NAMESPACE",
                      "value": "kube-system"
                    },
                    {
                      "name": "KUBE_DEPLOY_NAME",
                      "value": "some-deployment"
                    },
                    {
                      "name": "KUBE_CONTAINER_NAME",
                      "value": "some-container"
                    },
                    {
                      "name": "MAX_POD_AGE",
                      "value": "2592000"
                    },
                    {
                      "name": "LOG_LEVEL",
                      "value": "INFO"
                    },
                    {
                      "name": "CONFIG_TYPE",
                      "value": "cluster"
                    }
                  ],
                  "volumeMounts": [
                    {
                      "name": "scripts",
                      "mountPath": "/scripts"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "scripts",
                  "configMap": {
                    "defaultMode": 484,
                    "name": "release-name-capsize"
                  }
                }
              ]
            }
          }
        }
      }
    }
  }
]