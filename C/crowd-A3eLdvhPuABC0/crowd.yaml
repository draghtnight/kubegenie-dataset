apiVersion: v1
kind: Secret
metadata:
  name: crowd-db
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.1.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-password: akx5YjQ2ZDFxMw==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-crowd
  labels:
    helm.sh/chart: crowd-2.0.9
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.0.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  ATL_JDBC_PASSWORD: Q0hBTkdFTUU=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-db-helper-cm
  labels:
    helm.sh/chart: crowd-2.0.9
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.0.0
    app.kubernetes.io/managed-by: Helm
data:
  setup.sql: |
    CREATE USER crowduser WITH ENCRYPTED PASSWORD 'CHANGEME';
    CREATE DATABASE crowddb WITH OWNER crowduser
      ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' TEMPLATE template0;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-crowd-cm
  labels:
    helm.sh/chart: crowd-2.0.9
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.0.0
    app.kubernetes.io/managed-by: Helm
data:
  ATL_TOMCAT_PORT: "8095"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-crowd-home
  labels:
    helm.sh/chart: crowd-2.0.9
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: crowd-db-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.1.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: crowd-db
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.1.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-crowd
  labels:
    helm.sh/chart: crowd-2.0.9
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8095
      protocol: TCP
  selector:
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-crowd
  labels:
    helm.sh/chart: crowd-2.0.9
    app.kubernetes.io/name: crowd
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 5.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: crowd
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: crowd
        app.kubernetes.io/instance: release-name
    spec:
      initContainers:
        - name: init-postgres
          image: postgres:9.6.11-alpine
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - until pg_isready -h crowd-db -p 5432 ; do echo waiting for crowd-db; sleep 5; done;
      serviceAccountName: default
      securityContext:
        fsGroup: 2004
      containers:
        - name: crowd
          image: atlassian/crowd:5.0.0
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: release-name-crowd-cm
          env:
            - name: ATL_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-crowd
                  key: ATL_JDBC_PASSWORD
            - name: JVM_SUPPORT_RECOMMENDED_ARGS
              value: ""
          ports:
            - name: http
              containerPort: 8095
              protocol: TCP
          volumeMounts:
            - mountPath: /var/atlassian/application-data/crowd
              name: release-name-crowd-home
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: release-name-crowd-home
          persistentVolumeClaim:
            claimName: release-name-crowd-home
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: crowd-db
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.1.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
spec:
  serviceName: crowd-db-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: master
  template:
    metadata:
      name: crowd-db
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-9.1.4
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: master
    spec:
      securityContext:
        fsGroup: 1001
      containers:
        - name: crowd-db
          image: docker.io/bitnami/postgresql:11
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          securityContext:
            runAsUser: 11762
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: crowd-db
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: null
      volumes:
        - name: custom-init-scripts
          configMap:
            name: release-name-db-helper-cm
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
