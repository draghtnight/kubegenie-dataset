[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "monitoring"
    }
  },
  {
    "apiVersion": "v1",
    "data": {
      "config.yml": "global:\n  # ResolveTimeout is the time after which an alert is declared resolved\n  # if it has not been updated.\n  resolve_timeout: 5m\n\n  # The smarthost and SMTP sender used for mail notifications.\n  smtp_smarthost: 'mail.exmail.com:465'\n  smtp_from: 'admin@mail.exmail.com'\n  smtp_auth_username: 'admin@mail.exmail.com'\n  smtp_auth_password: '}'\n  smtp_require_tls: false\n\n# # The directory from which notification templates are read.\ntemplates:\n- '/etc/alertmanager-templates/*.tmpl'\n\n# The root route on which each incoming alert enters.\nroute:\n\n  # The labels by which incoming alerts are grouped together. For example,\n  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would\n  # be batched into a single group.\n\n  group_by: ['alertname']\n\n  # When a new group of alerts is created by an incoming alert, wait at\n  # least 'group_wait' to send the initial notification.\n  # This way ensures that you get multiple alerts for the same group that start\n  # firing shortly after another are batched together on the first\n  # notification.\n\n  group_wait: 30s\n\n  # When the first notification was sent, wait 'group_interval' to send a batch\n  # of new alerts that started firing for that group.\n\n  group_interval: 5m\n\n  # If an alert has successfully been sent, wait 'repeat_interval' to\n  # resend them.\n\n  #repeat_interval: 1m\n  repeat_interval: 15m\n\n  # A default receiver\n\n  # If an alert isn't caught by a route, send it to default.\n  receiver: email_default_alert\n\n  # All the above attributes are inherited by all child routes and can\n  # overwritten on each.\n\n  # The child route trees.\n  routes:\n  - match:\n      app: prometheus\n    receiver: \"email_default_alert\"\n    continue: true\n  - match:\n      app: prometheus\n    receiver: \"email_xxxxx_alert\"\nreceivers:\n- name: 'email_default_alert'\n  webhook_configs:\n  - url: \"http://ml.hd.wenqi.us/receive\"\n- name: 'email_xxxxx_alert'\n  webhook_configs:\n  - url: \"http://ml.hd.wenqi.us/receive\""
    },
    "kind": "ConfigMap",
    "metadata": {
      "name": "alertmanager-release-name"
    }
  },
  {
    "apiVersion": "v1",
    "data": {
      "default.tmpl": null
    },
    "kind": "ConfigMap",
    "metadata": {
      "name": "alertmanager-templates-release-name"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "grafana-config"
    },
    "data": {
      "grafana.ini": "##################### Grafana Configuration Example #####################\n#\n# Everything has defaults so you only need to uncomment things you want to\n# change\n\n# possible values : production, development\n;app_mode = production\n\n# instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty\n;instance_name = ${HOSTNAME}\n\n#################################### Paths ####################################\n[paths]\n# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)\n;data = /var/lib/grafana\n\n# Directory where grafana can store logs\n;logs = /var/log/grafana\n\n# Directory where grafana will automatically scan and look for plugins\n;plugins = /var/lib/grafana/plugins\n\n# folder that contains provisioning config files that grafana will apply on startup and while running.\n;provisioning = conf/provisioning\n\n#################################### Server ####################################\n[server]\n# Protocol (http, https, socket)\n;protocol = http\n\n# The ip address to bind to, empty will bind to all interfaces\n;http_addr =\n\n# The http port  to use\n;http_port = 3000\n\n# The public facing domain name used to access grafana from a browser\n;domain = localhost\n\n# Redirect to correct domain if host header does not match domain\n# Prevents DNS rebinding attacks\n;enforce_domain = false\n\n# The full public facing url you use in browser, used for redirects and emails\n# If you use reverse proxy and sub path specify full url (with sub path)\n;root_url = http://localhost:3000\n\n# Log web requests\n;router_logging = false\n\n# the path relative working path\n;static_root_path = public\n\n# enable gzip\n;enable_gzip = false\n\n# https certs & key file\n;cert_file =\n;cert_key =\n\n# Unix socket path\n;socket =\n\n#################################### Database ####################################\n[database]\n# You can configure the database connection by specifying type, host, name, user and password\n# as separate properties or as on string using the url properties.\n\n# Either \"mysql\", \"postgres\" or \"sqlite3\", it's your choice\n;type = sqlite3\n;host = 127.0.0.1:3306\n;name = grafana\n;user = root\n# If the password contains # or ; you have to wrap it with triple quotes. Ex \"\"\"#password;\"\"\"\n;password =\n\n# Use either URL or the previous fields to configure the database\n# Example: mysql://user:secret@host:port/database\n;url =\n\n# For \"postgres\" only, either \"disable\", \"require\" or \"verify-full\"\n;ssl_mode = disable\n\n# For \"sqlite3\" only, path relative to data_path setting\n;path = grafana.db\n\n# Max idle conn setting default is 2\n;max_idle_conn = 2\n\n# Max conn setting default is 0 (mean not set)\n;max_open_conn =\n\n# Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)\n;conn_max_lifetime = 14400\n\n# Set to true to log the sql calls and execution times.\nlog_queries =\n\n#################################### Session ####################################\n[session]\n# Either \"memory\", \"file\", \"redis\", \"mysql\", \"postgres\", default is \"file\"\n;provider = file\n\n# Provider config options\n# memory: not have any config yet\n# file: session dir path, is relative to grafana data_path\n# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`\n# mysql: go-sql-driver/mysql dsn config string, e.g. `user:password@tcp(127.0.0.1:3306)/database_name`\n# postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable\n;provider_config = sessions\n\n# Session cookie name\n;cookie_name = grafana_sess\n\n# If you use session in https only, default is false\n;cookie_secure = false\n\n# Session life time, default is 86400\n;session_life_time = 86400\n\n#################################### Data proxy ###########################\n[dataproxy]\n\n# This enables data proxy logging, default is false\n;logging = false\n\n#################################### Analytics ####################################\n[analytics]\n# Server reporting, sends usage counters to stats.grafana.org every 24 hours.\n# No ip addresses are being tracked, only simple counters to track\n# running instances, dashboard and error counts. It is very helpful to us.\n# Change this option to false to disable reporting.\n;reporting_enabled = true\n\n# Set to false to disable all checks to https://grafana.net\n# for new vesions (grafana itself and plugins), check is used\n# in some UI views to notify that grafana or plugin update exists\n# This option does not cause any auto updates, nor send any information\n# only a GET request to http://grafana.com to get latest versions\n;check_for_updates = true\n\n# Google Analytics universal tracking code, only enabled if you specify an id here\n;google_analytics_ua_id =\n\n#################################### Security ####################################\n[security]\n# default admin user, created on startup\n;admin_user = admin\n\n# default admin password, can be changed before first start of grafana,  or in profile settings\n;admin_password = admin\n\n# used for signing\n;secret_key = SW2YcwTIb9zpOOhoPsMm\n\n# Auto-login remember days\n;login_remember_days = 7\n;cookie_username = grafana_user\n;cookie_remember_name = grafana_remember\n\n# disable gravatar profile images\n;disable_gravatar = false\n\n# data source proxy whitelist (ip_or_domain:port separated by spaces)\n;data_source_proxy_whitelist =\n\n# disable protection against brute force login attempts\n;disable_brute_force_login_protection = false\n\n#################################### Snapshots ###########################\n[snapshots]\n# snapshot sharing options\n;external_enabled = true\n;external_snapshot_url = https://snapshots-origin.raintank.io\n;external_snapshot_name = Publish to snapshot.raintank.io\n\n# remove expired snapshot\n;snapshot_remove_expired = true\n\n#################################### Dashboards History ##################\n[dashboards]\n# Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1\n;versions_to_keep = 20\n\n#################################### Users ###############################\n[users]\n# disable user signup / registration\n;allow_sign_up = true\n\n# Allow non admin users to create organizations\n;allow_org_create = true\n\n# Set to true to automatically assign new users to the default organization (id 1)\n;auto_assign_org = true\n\n# Default role new users will be automatically assigned (if disabled above is set to true)\n;auto_assign_org_role = Viewer\n\n# Background text for the user field on the login page\n;login_hint = email or username\n\n# Default UI theme (\"dark\" or \"light\")\n;default_theme = dark\n\n# External user management, these options affect the organization users view\n;external_manage_link_url =\n;external_manage_link_name =\n;external_manage_info =\n\n# Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.\n;viewers_can_edit = false\n\n[auth]\n# Set to true to disable (hide) the login form, useful if you use OAuth, defaults to false\n;disable_login_form = false\n\n# Set to true to disable the signout link in the side menu. useful if you use auth.proxy, defaults to false\n;disable_signout_menu = false\n\n# URL to redirect the user to after sign out\n;signout_redirect_url =\n\n#################################### Anonymous Auth ##########################\n[auth.anonymous]\n# enable anonymous access\n;enabled = false\n\n# specify organization name that should be used for unauthenticated users\n;org_name = Main Org.\n\n# specify role for unauthenticated users\n;org_role = Viewer\n\n#################################### Github Auth ##########################\n[auth.github]\n;enabled = false\n;allow_sign_up = true\n;client_id = some_id\n;client_secret = some_secret\n;scopes = user:email,read:org\n;auth_url = https://github.com/login/oauth/authorize\n;token_url = https://github.com/login/oauth/access_token\n;api_url = https://api.github.com/user\n;team_ids =\n;allowed_organizations =\n\n#################################### Google Auth ##########################\n[auth.google]\n;enabled = false\n;allow_sign_up = true\n;client_id = some_client_id\n;client_secret = some_client_secret\n;scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email\n;auth_url = https://accounts.google.com/o/oauth2/auth\n;token_url = https://accounts.google.com/o/oauth2/token\n;api_url = https://www.googleapis.com/oauth2/v1/userinfo\n;allowed_domains =\n\n#################################### Generic OAuth ##########################\n[auth.generic_oauth]\n;enabled = false\n;name = OAuth\n;allow_sign_up = true\n;client_id = some_id\n;client_secret = some_secret\n;scopes = user:email,read:org\n;auth_url = https://foo.bar/login/oauth/authorize\n;token_url = https://foo.bar/login/oauth/access_token\n;api_url = https://foo.bar/user\n;team_ids =\n;allowed_organizations =\n\n#################################### Grafana.com Auth ####################\n[auth.grafana_com]\n;enabled = false\n;allow_sign_up = true\n;client_id = some_id\n;client_secret = some_secret\n;scopes = user:email\n;allowed_organizations =\n\n#################################### Auth Proxy ##########################\n[auth.proxy]\n;enabled = false\n;header_name = X-WEBAUTH-USER\n;header_property = username\n;auto_sign_up = true\n;ldap_sync_ttl = 60\n;whitelist = 192.168.1.1, 192.168.2.1\n\n#################################### Basic Auth ##########################\n[auth.basic]\n;enabled = true\n\n#################################### Auth LDAP ##########################\n[auth.ldap]\n;enabled = false\n;config_file = /etc/grafana/ldap.toml\n;allow_sign_up = true\n\n#################################### SMTP / Emailing ##########################\n[smtp]\n\n;enabled = false\n;host = localhost:25\n;user =\n# If the password contains # or ; you have to wrap it with trippel quotes. Ex \"\"\"#password;\"\"\"\n;password =\n;cert_file =\n;key_file =\n;skip_verify = false\n;from_address = admin@grafana.localhost\n;from_name = Grafana\n# EHLO identity in SMTP dialog (defaults to instance_name)\n;ehlo_identity = dashboard.example.com\n\n[emails]\n;welcome_email_on_sign_up = false\n\n#################################### Logging ##########################\n[log]\n# Either \"console\", \"file\", \"syslog\". Default is console and  file\n# Use space to separate multiple modes, e.g. \"console file\"\n;mode = console file\n\n# Either \"debug\", \"info\", \"warn\", \"error\", \"critical\", default is \"info\"\n;level = info\n\n# optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug\n;filters =\n\n# For \"console\" mode only\n[log.console]\n;level =\n\n# log line format, valid options are text, console and json\n;format = console\n\n# For \"file\" mode only\n[log.file]\n;level =\n\n# log line format, valid options are text, console and json\n;format = text\n\n# This enables automated log rotate(switch of following options), default is true\n;log_rotate = true\n\n# Max line number of single file, default is 1000000\n;max_lines = 1000000\n\n# Max size shift of single file, default is 28 means 1 << 28, 256MB\n;max_size_shift = 28\n\n# Segment log daily, default is true\n;daily_rotate = true\n\n# Expired days of log file(delete after max days), default is 7\n;max_days = 7\n\n[log.syslog]\n;level =\n\n# log line format, valid options are text, console and json\n;format = text\n\n# Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.\n;network =\n;address =\n\n# Syslog facility. user, daemon and local0 through local7 are valid.\n;facility =\n\n# Syslog tag. By default, the process' argv[0] is used.\n;tag =\n\n#################################### Alerting ############################\n[alerting]\n# Disable alerting engine & UI features\n;enabled = true\n# Makes it possible to turn off alert rule execution but alerting UI is visible\n;execute_alerts = true\n\n#################################### Explore #############################\n[explore]\n# Enable the Explore section\n;enabled = false\n\n#################################### Internal Grafana Metrics ##########################\n# Metrics available at HTTP API Url /metrics\n[metrics]\n# Disable / Enable internal metrics\n;enabled           = true\n\n# Publish interval\n;interval_seconds  = 10\n\n# Send internal metrics to Graphite\n[metrics.graphite]\n# Enable by setting the address setting (ex localhost:2003)\n;address =\n;prefix = prod.grafana.%(instance_name)s.\n\n#################################### Distributed tracing ############\n[tracing.jaeger]\n# Enable by setting the address sending traces to jaeger (ex localhost:6831)\n;address = localhost:6831\n# Tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)\n;always_included_tag = tag1:value1\n# Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote\n;sampler_type = const\n# jaeger samplerconfig param\n# for \"const\" sampler, 0 or 1 for always false/true respectively\n# for \"probabilistic\" sampler, a probability between 0 and 1\n# for \"rateLimiting\" sampler, the number of spans per second\n# for \"remote\" sampler, param is the same as for \"probabilistic\"\n# and indicates the initial sampling rate before the actual one\n# is received from the mothership\n;sampler_param = 1\n\n#################################### Grafana.com integration  ##########################\n# Url used to to import dashboards directly from Grafana.com\n[grafana_com]\n;url = https://grafana.com\n\n#################################### External image storage ##########################\n[external_image_storage]\n# Used for uploading images to public servers so they can be included in slack/email messages.\n# you can choose between (s3, webdav, gcs, azure_blob, local)\n;provider =\n\n[external_image_storage.s3]\n;bucket =\n;region =\n;path =\n;access_key =\n;secret_key =\n\n[external_image_storage.webdav]\n;url =\n;public_url =\n;username =\n;password =\n\n[external_image_storage.gcs]\n;key_file =\n;bucket =\n;path =\n\n[external_image_storage.azure_blob]\n;account_name =\n;account_key =\n;container_name =\n\n[external_image_storage.local]\n# does not require any configuration\n"
    }
  },
  {
    "apiVersion": "v1",
    "data": {
      "prometheus.yaml": "global:\n  scrape_interval: 10s\n  scrape_timeout: 10s\n  evaluation_interval: 10s\nalerting:\n  alertmanagers:\n  - static_configs:\n    - targets:\n      - alertmanager-release-name:9093\n    scheme: http\n    path_prefix: /\n    timeout: 10s\nrule_files:\n- /etc/prometheus-rules/*.rules\nscrape_configs:\n- job_name: kubernetes-pod\n  metrics_path: /metrics\n  scheme: http\n  kubernetes_sd_configs:\n  - api_server: null\n    role: pod\n    namespaces:\n      names: []\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n    separator: ;\n    regex: \"true\"\n    replacement: $1\n    action: keep\n  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]\n    separator: ;\n    regex: (https?)\n    target_label: __scheme__\n    replacement: $1\n    action: replace\n  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n    separator: ;\n    regex: (.+)(?::\\d+);(\\d+)\n    target_label: __address__\n    replacement: $1:$2\n    action: replace\n  - source_labels: [__meta_kubernetes_pod_name]\n    separator: ;\n    regex: (.*)\n    target_label: pod_name\n    replacement: $1\n    action: replace\n  - source_labels: [__metrics_path__]\n    separator: ;\n    regex: (.*)\n    target_label: cluster\n    replacement: default\n    action: replace\n- job_name: kubernetes-pod-java\n  metrics_path: /prometheus\n  scheme: http\n  kubernetes_sd_configs:\n  - api_server: null\n    role: pod\n    namespaces:\n      names: []\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_label_choerodon_io_metrics_port]\n    separator: ;\n    regex: .+\n    replacement: $1\n    action: keep\n  - source_labels: [__meta_kubernetes_pod_annotation_choerodon_io_metrics_path]\n    separator: ;\n    regex: .+\n    replacement: $1\n    action: drop\n  - source_labels: [__address__, __meta_kubernetes_pod_label_choerodon_io_metrics_port]\n    separator: ;\n    regex: (.+)(?::\\d+);(\\d+)\n    target_label: __address__\n    replacement: $1:$2\n    action: replace\n  - source_labels: [__meta_kubernetes_pod_name]\n    separator: ;\n    regex: (.*)\n    target_label: pod_name\n    replacement: $1\n    action: replace\n  - source_labels: [__metrics_path__]\n    separator: ;\n    regex: (.*)\n    target_label: cluster\n    replacement: default\n    action: replace\n- job_name: kubernetes-pod-choerodon\n  metrics_path: /metrics\n  scheme: http\n  kubernetes_sd_configs:\n  - api_server: null\n    role: pod\n    namespaces:\n      names: []\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_annotation_choerodon_io_metrics_path]\n    separator: ;\n    regex: .+\n    replacement: $1\n    action: keep\n  - source_labels: [__address__, __meta_kubernetes_pod_label_choerodon_io_metrics_port]\n    separator: ;\n    regex: (.+)(?::\\d+);(\\d+)\n    target_label: __address__\n    replacement: $1:$2\n    action: replace\n  - source_labels: [__meta_kubernetes_pod_annotation_choerodon_io_metrics_path]\n    separator: ;\n    regex: (.+)\n    target_label: __metrics_path__\n    replacement: $1\n    action: replace\n  - source_labels: [__meta_kubernetes_pod_name]\n    separator: ;\n    regex: (.*)\n    target_label: pod_name\n    replacement: $1\n    action: replace\n  - source_labels: [__meta_kubernetes_pod_node_name]\n    separator: ;\n    regex: (.+)\n    target_label: node_name\n    replacement: $1\n    action: replace\n  - source_labels: [__meta_kubernetes_namespace]\n    separator: ;\n    regex: (.+)\n    target_label: namespace\n    replacement: $1\n    action: replace\n  - source_labels: [__meta_kubernetes_pod_annotation_choerodon_io_metrics_group]\n    separator: ;\n    regex: (.*)\n    target_label: choerodon_group\n    replacement: $1\n    action: replace\n  - source_labels: [__metrics_path__]\n    separator: ;\n    regex: (.*)\n    target_label: cluster\n    replacement: default\n    action: replace\n- job_name: kubernetes-pod-redis\n  metrics_path: /metrics\n  scheme: http\n  kubernetes_sd_configs:\n  - api_server: null\n    role: pod\n    namespaces:\n      names: []\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_annotation_choerodon_io_metrics_group]\n    separator: ;\n    regex: redis\n    replacement: $1\n    action: keep\n  - source_labels: [__meta_kubernetes_pod_ip]\n    separator: ;\n    regex: (.*)\n    target_label: __address__\n    replacement: $1:9121\n    action: replace\n  - source_labels: [__meta_kubernetes_pod_name]\n    separator: ;\n    regex: (.*)\n    target_label: pod_name\n    replacement: $1\n    action: replace\n  - source_labels: [__metrics_path__]\n    separator: ;\n    regex: (.*)\n    target_label: cluster\n    replacement: default\n    action: replace\n- job_name: kubernetes-endpoints\n  metrics_path: /metrics\n  scheme: http\n  kubernetes_sd_configs:\n  - api_server: null\n    role: endpoints\n    namespaces:\n      names: []\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n    separator: ;\n    regex: \"true\"\n    replacement: $1\n    action: keep\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n    separator: ;\n    regex: (https?)\n    target_label: __scheme__\n    replacement: $1\n    action: replace\n  - source_labels: [__meta_kubernetes_pod_node_name]\n    separator: ;\n    regex: (.+)\n    target_label: node_name\n    replacement: $1\n    action: replace\n  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n    separator: ;\n    regex: (.+)\n    target_label: __metrics_path__\n    replacement: $1\n    action: replace\n  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n    separator: ;\n    regex: (.+)(?::\\d+);(\\d+)\n    target_label: __address__\n    replacement: $1:$2\n    action: replace\n  - separator: ;\n    regex: __meta_kubernetes_service_label_(.+)\n    replacement: $1\n    action: labelmap\n  - source_labels: [__meta_kubernetes_namespace]\n    separator: ;\n    regex: (.*)\n    target_label: kubernetes_namespace\n    replacement: $1\n    action: replace\n  - source_labels: [__meta_kubernetes_service_name]\n    separator: ;\n    regex: (.*)\n    target_label: kubernetes_name\n    replacement: $1\n    action: replace\n  - source_labels: [__metrics_path__]\n    separator: ;\n    regex: (.*)\n    target_label: cluster\n    replacement: default\n    action: replace\n- job_name: kubernetes-cadvisor\n  metrics_path: /metrics\n  scheme: https\n  kubernetes_sd_configs:\n  - api_server: null\n    role: node\n    namespaces:\n      names: []\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: false\n  relabel_configs:\n  - separator: ;\n    regex: __meta_kubernetes_node_label_(.+)\n    replacement: $1\n    action: labelmap\n  - source_labels: [__address__]\n    separator: ;\n    regex: ([^:;]+):(\\d+)\n    target_label: __address__\n    replacement: ${1}:10250\n    action: replace\n  - source_labels: [__meta_kubernetes_node_name]\n    separator: ;\n    regex: (.+)\n    target_label: __metrics_path__\n    replacement: /metrics/cadvisor\n    action: replace\n  - source_labels: [__metrics_path__]\n    separator: ;\n    regex: (.*)\n    target_label: cluster\n    replacement: default\n    action: replace\n"
    },
    "kind": "ConfigMap",
    "metadata": {
      "name": "prometheus-core"
    }
  },
  {
    "apiVersion": "v1",
    "data": {
      "portal.rules": "groups:\n- name: container_cpu\n  rules:\n  - record: cpu_irate25s_sum\n    expr: sum(irate (container_cpu_usage_seconds_total{image!=\"\",name=~\"^k8s_.*\", pod_name!=\"\",container_name!=\"POD\"}[25s]) ) by (cluster,pod_name,container_name,namespace,kubernetes_io_hostname,service_code)\n  - record: memory_rss\n    expr: sum(container_memory_rss{container_name!=\"POD\",image!=\"\",name=~\"^k8s_.*\"}) by (cluster,pod_name,container_name,namespace,kubernetes_io_hostname,service_code)\n  - record: net_irate25s_receive\n    expr: sum(irate( container_network_receive_bytes_total{ image!=\"\",name=~\"^k8s_.*\"}[25s]) ) by (cluster,pod_name,container_name,namespace,kubernetes_io_hostname,service_code)\n  - record: net_irate25s_transmit\n    expr: sum(irate( container_network_receive_bytes_total{ image!=\"\",name=~\"^k8s_.*\"}[25s]) ) by (cluster,pod_name,container_name,namespace,kubernetes_io_hostname,service_code)\n  - record: fsio_irate25s\n    expr: sum(irate(container_fs_io_time_seconds_total{image!=\"\",container_name!=\"POD\", pod_name!=\"\"}[25s])) by (cluster,pod_name,container_name,namespace,kubernetes_io_hostname,service_code)\n",
      "host.rules": "groups:\n- name: host_alert\n  rules:\n  - alert: HighCpuUsage\n    expr: 1 - avg(irate(node_cpu{mode=\"idle\"}[25s])) by (node_name) > 0.75\n    for: 5m\n    annotations:\n      summary: Cpu使用率持续5分钟超过75%\n"
    },
    "kind": "ConfigMap",
    "metadata": {
      "name": "prometheus-rules"
    }
  },
  {
    "kind": "ClusterRole",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "monitoring-reader"
    },
    "rules": [
      {
        "apiGroups": [
          "*"
        ],
        "resources": [
          "*"
        ],
        "verbs": [
          "get",
          "watch",
          "list"
        ]
      }
    ]
  },
  {
    "kind": "ClusterRoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "metadata": {
      "name": "monitoring-controller"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "monitoring-reader"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "monitoring",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "alertmanager-release-name",
      "labels": {
        "choerodon.io/metrics-port": "9093",
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "alertmanager"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 9093,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "alertmanager"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-grafana",
      "labels": {
        "choerodon.io/infra": "grafana"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 3000,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "choerodon.io/metrics-port": "3000",
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "grafana"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": {
        "prometheus.io/scrape": "true"
      },
      "name": "release-name-kube-state",
      "labels": {
        "choerodon.io/infra": "kube-state-metrics"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 8080,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "kube-state-metrics"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "choerodon.io/metrics-port": "9090",
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "prometheus"
      },
      "name": "prometheus"
    },
    "spec": {
      "ports": [
        {
          "name": "webui",
          "port": 9090,
          "protocol": "TCP",
          "targetPort": 9090
        }
      ],
      "selector": {
        "choerodon.io/metrics-port": "9090",
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "prometheus"
      },
      "sessionAffinity": "None"
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "DaemonSet",
    "metadata": {
      "labels": {
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "node-exporter",
        "choerodon.io/logs-parser": "docker"
      },
      "name": "release-name-node-exporter"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "choerodon.io/release": "release-name",
          "choerodon.io/infra": "node-exporter"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "choerodon.io/metrics-group": "node",
            "choerodon.io/metrics-path": "/metrics"
          },
          "labels": {
            "choerodon.io/release": "release-name",
            "choerodon.io/infra": "node-exporter"
          },
          "name": "node-exporter"
        },
        "spec": {
          "containers": [
            {
              "image": "dockerhub.azk8s.cn/prom/node-exporter:v0.18.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "node-exporter",
              "ports": [
                {
                  "containerPort": 9100,
                  "hostPort": 9100,
                  "name": "prom-node-exp",
                  "protocol": "TCP"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "terminationMessagePath": "/dev/termination-log",
              "terminationMessagePolicy": "File"
            }
          ],
          "dnsPolicy": "ClusterFirst",
          "hostNetwork": true,
          "hostPID": true,
          "restartPolicy": "Always",
          "schedulerName": "default-scheduler",
          "securityContext": {},
          "terminationGracePeriodSeconds": 30
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-alertmanager",
      "labels": {
        "choerodon.io/metrics-port": "9093",
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "alertmanager",
        "choerodon.io/logs-parser": "docker"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "choerodon.io/metrics-port": "9093",
          "choerodon.io/release": "release-name",
          "choerodon.io/infra": "alertmanager"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "choerodon.io/metrics-group": "alertmanager",
            "choerodon.io/metrics-path": "/metrics"
          },
          "labels": {
            "choerodon.io/metrics-port": "9093",
            "choerodon.io/release": "release-name",
            "choerodon.io/infra": "alertmanager"
          }
        },
        "spec": {
          "initContainers": [
            {
              "name": "alertmanager-init",
              "image": "registry.cn-hangzhou.aliyuncs.com/choerodon-tools/alertmanager:init",
              "imagePullPolicy": "IfNotPresent",
              "volumeMounts": [
                {
                  "mountPath": "/etc/alertmanager",
                  "name": "alertmanager-data",
                  "subPath": "alertmanager/config"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "alertmanager",
              "image": "registry.cn-hangzhou.aliyuncs.com/choerodon-tools/alertmanager:v0.7.1",
              "imagePullPolicy": "IfNotPresent",
              "volumeMounts": [
                {
                  "mountPath": "/etc/alertmanager",
                  "name": "alertmanager-data",
                  "subPath": "alertmanager/config"
                },
                {
                  "mountPath": "/etc/alertmanager-templates",
                  "name": "alertmanager-data",
                  "subPath": "alertmanager/templates"
                },
                {
                  "mountPath": "/alertmanager",
                  "name": "alertmanager-data",
                  "subPath": "alertmanager/data"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9093,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                }
              },
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "128Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                }
              }
            }
          ],
          "nodeName": null,
          "volumes": [
            {
              "name": "alertmanager-data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-grafana",
      "labels": {
        "choerodon.io/metrics-port": "3000",
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "grafana",
        "choerodon.io/logs-parser": "docker"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "choerodon.io/metrics-port": "3000",
          "choerodon.io/release": "release-name",
          "choerodon.io/infra": "grafana"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "choerodon.io/metrics-group": "grafana",
            "choerodon.io/metrics-path": "/metrics"
          },
          "labels": {
            "choerodon.io/metrics-port": "3000",
            "choerodon.io/release": "release-name",
            "choerodon.io/infra": "grafana"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "grafana",
              "image": "registry.cn-shanghai.aliyuncs.com/choerodon/grafana:6.2.2",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "GF_AUTH_BASIC_ENABLED",
                  "value": "true"
                },
                {
                  "name": "GF_AUTH_ANONYMOUS_ENABLED",
                  "value": "false"
                }
              ],
              "volumeMounts": [
                {
                  "mountPath": "/var/lib/grafana",
                  "name": "grafana-data",
                  "subPath": "grafana"
                },
                {
                  "mountPath": "/etc/grafana/grafana.ini",
                  "name": "grafana-config",
                  "subPath": "grafana.ini"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 3000,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                }
              },
              "resources": {
                "limits": {
                  "cpu": "200m",
                  "memory": "864Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "512Mi"
                }
              }
            }
          ],
          "nodeName": null,
          "volumes": [
            {
              "name": "grafana-config",
              "configMap": {
                "name": "grafana-config",
                "items": [
                  {
                    "key": "grafana.ini",
                    "path": "grafana.ini"
                  }
                ]
              }
            },
            {
              "name": "grafana-data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-kube-state",
      "labels": {
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "kube-state-metrics",
        "choerodon.io/logs-parser": "docker"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "choerodon.io/release": "release-name",
          "choerodon.io/infra": "kube-state-metrics"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "choerodon.io/release": "release-name",
            "choerodon.io/infra": "kube-state-metrics"
          }
        },
        "spec": {
          "serviceAccountName": "monitoring",
          "containers": [
            {
              "name": "kube-state-metrics",
              "image": "gcr.azk8s.cn/google_containers/kube-state-metrics:v1.7.1",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http"
                }
              },
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "228Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-prometheus",
      "labels": {
        "choerodon.io/metrics-port": "9090",
        "choerodon.io/release": "release-name",
        "choerodon.io/infra": "prometheus",
        "choerodon.io/logs-parser": "docker"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "choerodon.io/metrics-port": "9090",
          "choerodon.io/release": "release-name",
          "choerodon.io/infra": "prometheus"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "choerodon.io/metrics-group": "prometheus",
            "choerodon.io/metrics-path": "/metrics"
          },
          "labels": {
            "choerodon.io/metrics-port": "9090",
            "choerodon.io/release": "release-name",
            "choerodon.io/infra": "prometheus"
          },
          "name": "prometheus-core"
        },
        "spec": {
          "initContainers": [
            {
              "name": "prometheus-init",
              "image": "registry.cn-hangzhou.aliyuncs.com/choerodon-tools/prometheus:init",
              "imagePullPolicy": "IfNotPresent",
              "volumeMounts": [
                {
                  "mountPath": "/configmap/prometheus",
                  "name": "config-volume"
                },
                {
                  "mountPath": "/configmap/prometheus-rules",
                  "name": "rules-volume"
                },
                {
                  "mountPath": "/etc/prometheus",
                  "name": "data",
                  "subPath": "prometheus/config"
                },
                {
                  "mountPath": "/etc/prometheus-rules",
                  "name": "data",
                  "subPath": "prometheus/rules"
                },
                {
                  "mountPath": "/var/data",
                  "name": "data",
                  "subPath": "prometheus/data"
                }
              ]
            }
          ],
          "containers": [
            {
              "args": [
                "--config.file=/etc/prometheus/prometheus.yaml",
                "--web.external-url=http://prometheus.example.com",
                "--storage.tsdb.path=/var/data",
                "--storage.tsdb.retention=14d",
                "--web.enable-lifecycle"
              ],
              "image": "registry.cn-hangzhou.aliyuncs.com/choerodon-tools/prometheus:v2.2.1",
              "imagePullPolicy": "IfNotPresent",
              "name": "prometheus",
              "ports": [
                {
                  "containerPort": 9090,
                  "name": "webui",
                  "protocol": "TCP"
                }
              ],
              "terminationMessagePath": "/dev/termination-log",
              "terminationMessagePolicy": "File",
              "volumeMounts": [
                {
                  "mountPath": "/etc/prometheus",
                  "name": "data",
                  "subPath": "prometheus/config"
                },
                {
                  "mountPath": "/etc/prometheus-rules",
                  "name": "data",
                  "subPath": "prometheus/rules"
                },
                {
                  "mountPath": "/var/data",
                  "name": "data",
                  "subPath": "prometheus/data"
                }
              ],
              "securityContext": {
                "privileged": true,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "resources": {
                "limits": {
                  "cpu": "500m",
                  "memory": "4G"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "2G"
                }
              }
            },
            {
              "name": "watch-rules",
              "image": "weaveworks/watch:master-5b2a6e5",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "-v",
                "-t",
                "-p=/etc/prometheus-rules",
                "curl",
                "-X",
                "POST",
                "--fail",
                "-o",
                "-",
                "-sS",
                "http://localhost:9090/-/reload"
              ],
              "volumeMounts": [
                {
                  "mountPath": "/etc/prometheus-rules",
                  "name": "data",
                  "subPath": "prometheus/rules"
                }
              ]
            },
            {
              "name": "watch-core",
              "image": "weaveworks/watch:master-5b2a6e5",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "-v",
                "-t",
                "-p=/etc/prometheus",
                "curl",
                "-X",
                "POST",
                "--fail",
                "-o",
                "-",
                "-sS",
                "http://localhost:9090/-/reload"
              ],
              "volumeMounts": [
                {
                  "mountPath": "/etc/prometheus",
                  "name": "data",
                  "subPath": "prometheus/config"
                }
              ]
            }
          ],
          "restartPolicy": "Always",
          "serviceAccountName": "monitoring",
          "nodeName": null,
          "volumes": [
            {
              "configMap": {
                "defaultMode": 420,
                "name": "prometheus-core"
              },
              "name": "config-volume"
            },
            {
              "configMap": {
                "defaultMode": 420,
                "name": "prometheus-rules"
              },
              "name": "rules-volume"
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  }
]