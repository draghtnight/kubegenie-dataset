apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: elasticsearch-master-pdb
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: elasticsearch-master
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-keycloa
  namespace: k4HMVWQ0A
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.1.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: identity
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: operate-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: operate
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: optimize
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: optimize-8.0.10
    app.kubernetes.io/version: 3.8.0
    app.kubernetes.io/component: optimize
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-zeebe-gateway-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-gateway-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: zeebe-gateway
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: zeebe-broker
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: k4HMVWQ0A
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: am96SHpFMkRXRA==
  password: N29UbDlscVlrOA==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-keycloak
  namespace: k4HMVWQ0A
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.1.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
type: Opaque
data:
  admin-password: U2kwQ3ZQaTZxag==
  management-password: aGNtcnI3blBTaA==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-operate-identity-secret
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: identity
type: Opaque
data:
  operate-secret: NGl1TllKVEMwdg==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-optimize-identity-secret
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: identity
type: Opaque
data:
  optimize-secret: SkppbklHNFRuNg==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-tasklist-identity-secret
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: identity
type: Opaque
data:
  tasklist-secret: YndvVnp0R054Wg==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-keycloa-env-vars
  namespace: k4HMVWQ0A
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.1.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
data:
  KEYCLOAK_CREATE_ADMIN_USER: "true"
  KEYCLOAK_ADMIN_USER: admin
  KEYCLOAK_MANAGEMENT_USER: manager
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY_ADDRESS_FORWARDING: "false"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: release-name-postgresql
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: bitnami_keycloak
  KEYCLOAK_DATABASE_USER: bn_keycloak
  KEYCLOAK_CACHE_OWNERS_COUNT: "1"
  KEYCLOAK_AUTH_CACHE_OWNERS_COUNT: "1"
  KEYCLOAK_ENABLE_TLS: "false"
---
kind: ConfigMap
metadata:
  name: release-name-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: operate-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: operate
apiVersion: v1
data:
  application.yml: |
    # Operate configuration file
    camunda.operate:
      # ELS instance to store Operate data
      elasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: elasticsearch-master
        # Transport port
        port: 9200
      # Zeebe instance
      zeebe:
        # Broker contact point
        brokerContactPoint: "release-name-zeebe-gateway:26500"
      # ELS instance to export Zeebe data to
      zeebeElasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: elasticsearch-master
        # Transport port
        port: 9200
        # Index prefix, configured in Zeebe Elasticsearch exporter
        prefix: zeebe-record
    logging:
      level:
        ROOT: INFO
        org.camunda.operate: DEBUG
    #Spring Boot Actuator endpoints to be exposed
    management.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus
---
kind: ConfigMap
metadata:
  name: release-name-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: tasklist-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: tasklist
apiVersion: v1
data:
  application.yml: |
    # Tasklist configuration file

    camunda.tasklist:
      # Set Tasklist username and password.
      # If user with <username> does not exists it will be created.
      # Default: demo/demo
      #username:
      #password:
      # ELS instance to store Tasklist data
      elasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: elasticsearch-master
        # Transport port
        port: 9200
      # Zeebe instance
      zeebe:
        # Broker contact point
        brokerContactPoint: release-name-zeebe-gateway:26500
      # ELS instance to export Zeebe data to
      zeebeElasticsearch:
        # Cluster name
        clusterName: elasticsearch
        # Host
        host: elasticsearch-master
        # Transport port
        port: 9200
        # Index prefix, configured in Zeebe Elasticsearch exporter
        prefix: zeebe-record
    #Spring Boot Actuator endpoints to be exposed
    management.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus
    # Enable or disable metrics
    #management.metrics.export.prometheus.enabled: false
---
kind: ConfigMap
metadata:
  name: release-name-zeebe-gateway-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-gateway-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: zeebe-gateway
apiVersion: v1
data:
  gateway-log4j2.xml: ""
---
kind: ConfigMap
metadata:
  name: release-name-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: zeebe-broker
apiVersion: v1
data:
  startup.sh: |
    #!/usr/bin/env bash
    set -eux -o pipefail

    export ZEEBE_BROKER_CLUSTER_NODEID=${ZEEBE_BROKER_CLUSTER_NODEID:-${K8S_NAME##*-}}

    if [ "$(ls -A /exporters/)" ]; then
      mkdir /usr/local/zeebe/exporters/
      cp -a /exporters/*.jar /usr/local/zeebe/exporters/
    else
      echo "No exporters available."
    fi

    env
    exec /usr/local/zeebe/bin/broker
  broker-log4j2.xml: ""
---
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: Helm
    release: release-name
    chart: elasticsearch
    app: elasticsearch-master
  annotations: {}
spec:
  type: ClusterIP
  selector:
    release: release-name
    chart: elasticsearch
    app: elasticsearch-master
  publishNotReadyAddresses: false
  ports:
    - name: http
      protocol: TCP
      port: 9200
    - name: transport
      protocol: TCP
      port: 9300
---
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: Helm
    release: release-name
    chart: elasticsearch
    app: elasticsearch-master
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: elasticsearch-master
  ports:
    - name: http
      port: 9200
    - name: transport
      port: 9300
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: k4HMVWQ0A
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: k4HMVWQ0A
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-keycloa-headless
  namespace: k4HMVWQ0A
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.1.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-keycloa
  namespace: k4HMVWQ0A
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.1.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      nodePort: null
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: identity
  annotations: null
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: identity
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: operate-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: operate
  annotations: null
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: operate
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: optimize
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: optimize-8.0.10
    app.kubernetes.io/version: 3.8.0
    app.kubernetes.io/component: optimize
  annotations: null
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8090
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: optimize
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: optimize
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: tasklist-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: tasklist
spec:
  type: ClusterIP
  ports:
    - port: 80
      name: http
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: tasklist
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-gateway-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: zeebe-gateway
  annotations: null
spec:
  type: ClusterIP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: zeebe-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: zeebe-gateway
  ports:
    - port: 9600
      protocol: TCP
      name: http
    - port: 26500
      protocol: TCP
      name: gateway
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: zeebe-broker
  annotations: {}
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
    - port: 9600
      protocol: TCP
      name: http
    - port: 26502
      protocol: TCP
      name: internal
    - port: 26501
      protocol: TCP
      name: command
  selector:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: zeebe-broker
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-identity
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: identity
  annotations: {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: identity
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: identity
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: identity
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: identity-8.0.10
        app.kubernetes.io/version: 8.0.0
        app.kubernetes.io/component: identity
    spec:
      imagePullSecrets: []
      containers:
        - name: identity
          image: camunda/identity:8.0.0
          env:
            - name: KEYCLOAK_USERS_0_USERNAME
              value: demo
            - name: KEYCLOAK_USERS_0_PASSWORD
              value: demo
            - name: KEYCLOAK_USERS_0_ROLES_0
              value: Identity
            - name: KEYCLOAK_USERS_0_ROLES_1
              value: Operate
            - name: KEYCLOAK_INIT_OPERATE_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-operate-identity-secret
                  key: operate-secret
            - name: KEYCLOAK_INIT_OPERATE_ROOT_URL
              value: http://localhost:8081
            - name: KEYCLOAK_USERS_0_ROLES_2
              value: Tasklist
            - name: KEYCLOAK_INIT_TASKLIST_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-tasklist-identity-secret
                  key: tasklist-secret
            - name: KEYCLOAK_INIT_TASKLIST_ROOT_URL
              value: http://localhost:8082
            - name: KEYCLOAK_USERS_0_ROLES_3
              value: Optimize
            - name: KEYCLOAK_INIT_OPTIMIZE_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-optimize-identity-secret
                  key: optimize-secret
            - name: KEYCLOAK_INIT_OPTIMIZE_ROOT_URL
              value: http://localhost:8083
            - name: SERVER_PORT
              value: "8080"
            - name: KEYCLOAK_URL
              value: http://release-name-keycloa:80/auth
            - name: IDENTITY_AUTH_PROVIDER_ISSUER_URL
              value: http://localhost:18080/auth/realms/camunda-platform
            - name: IDENTITY_AUTH_PROVIDER_BACKEND_URL
              value: http://release-name-keycloa:80/auth/realms/camunda-platform
            - name: KEYCLOAK_SETUP_USER
              value: admin
            - name: KEYCLOAK_SETUP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-keycloak
                  key: admin-password
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 600m
              memory: 400Mi
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-operate
  labels:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: operate-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: operate
  annotations: {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: operate
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: operate
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: operate
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: operate-8.0.10
        app.kubernetes.io/version: 8.0.0
        app.kubernetes.io/component: operate
    spec:
      imagePullSecrets: []
      containers:
        - name: operate
          image: camunda/operate:8.0.0
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: identity-auth
            - name: CAMUNDA_OPERATE_IDENTITY_ISSUER_URL
              value: http://localhost:18080/auth/realms/camunda-platform
            - name: CAMUNDA_OPERATE_IDENTITY_ISSUER_BACKEND_URL
              value: http://release-name-keycloa:80/auth/realms/camunda-platform
            - name: CAMUNDA_OPERATE_IDENTITY_CLIENT_ID
              value: operate
            - name: CAMUNDA_OPERATE_IDENTITY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-operate-identity-secret
                  key: operate-secret
            - name: CAMUNDA_OPERATE_IDENTITY_AUDIENCE
              value: operate-api
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 600m
              memory: 400Mi
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /usr/local/operate/config/application.yml
              subPath: application.yml
      volumes:
        - name: config
          configMap:
            name: release-name-operate
            defaultMode: 484
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-optimize
  labels:
    app: camunda-platform
    app.kubernetes.io/name: optimize
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: optimize-8.0.10
    app.kubernetes.io/version: 3.8.0
    app.kubernetes.io/component: optimize
  annotations: {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: optimize
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: optimize
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: optimize
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: optimize-8.0.10
        app.kubernetes.io/version: 3.8.0
        app.kubernetes.io/component: optimize
    spec:
      imagePullSecrets: []
      containers:
        - name: optimize
          image: camunda/optimize:3.8.0
          env:
            - name: CAMUNDA_OPTIMIZE_ZEEBE_ENABLED
              value: "true"
            - name: CAMUNDA_OPTIMIZE_ZEEBE_PARTITION_COUNT
              value: "3"
            - name: OPTIMIZE_ELASTICSEARCH_HOST
              value: elasticsearch-master
            - name: OPTIMIZE_ELASTICSEARCH_HTTP_PORT
              value: "9200"
            - name: SPRING_PROFILES_ACTIVE
              value: ccsm
            - name: CAMUNDA_OPTIMIZE_IDENTITY_ISSUER_URL
              value: http://localhost:18080/auth/realms/camunda-platform
            - name: CAMUNDA_OPTIMIZE_IDENTITY_ISSUER_BACKEND_URL
              value: http://release-name-keycloa:80/auth/realms/camunda-platform
            - name: CAMUNDA_OPTIMIZE_IDENTITY_CLIENTID
              value: optimize
            - name: CAMUNDA_OPTIMIZE_IDENTITY_CLIENTSECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-optimize-identity-secret
                  key: optimize-secret
            - name: CAMUNDA_OPTIMIZE_IDENTITY_AUDIENCE
              value: optimize-api
            - name: CAMUNDA_OPTIMIZE_SECURITY_AUTH_COOKIE_SAME_SITE_ENABLED
              value: "false"
            - name: CAMUNDA_OPTIMIZE_UI_LOGOUT_HIDDEN
              value: "true"
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 600m
              memory: 1Gi
          ports:
            - containerPort: 8090
              name: http
              protocol: TCP
          volumeMounts: null
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-tasklist
  labels:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: tasklist-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: tasklist
  annotations: {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: tasklist
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: tasklist
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: tasklist
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: tasklist-8.0.10
        app.kubernetes.io/version: 8.0.0
        app.kubernetes.io/component: tasklist
    spec:
      imagePullSecrets: []
      containers:
        - name: tasklist
          image: camunda/tasklist:8.0.0
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: identity-auth
            - name: CAMUNDA_TASKLIST_IDENTITY_ISSUER_URL
              value: http://localhost:18080/auth/realms/camunda-platform
            - name: CAMUNDA_TASKLIST_IDENTITY_ISSUER_BACKEND_URL
              value: http://release-name-keycloa:80/auth/realms/camunda-platform
            - name: CAMUNDA_TASKLIST_IDENTITY_CLIENT_ID
              value: tasklist
            - name: CAMUNDA_TASKLIST_IDENTITY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-tasklist-identity-secret
                  key: tasklist-secret
            - name: CAMUNDA_TASKLIST_IDENTITY_AUDIENCE
              value: tasklist-api
            - name: GRAPHQL_PLAYGROUND_ENABLED
              value: "true"
            - name: GRAPHQL_PLAYGROUND_SETTINGS_REQUEST_CREDENTIALS
              value: include
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 400m
              memory: 1Gi
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /app/resources/application.yml
              subPath: application.yml
      volumes:
        - name: config
          configMap:
            name: release-name-tasklist
            defaultMode: 484
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-zeebe-gateway
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-gateway-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: zeebe-gateway
  annotations: {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: zeebe-gateway
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-gateway
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: zeebe-gateway
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: zeebe-gateway-8.0.10
        app.kubernetes.io/version: 8.0.0
        app.kubernetes.io/component: zeebe-gateway
      annotations: {}
    spec:
      imagePullSecrets: []
      containers:
        - name: zeebe-gateway
          image: camunda/zeebe:8.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9600
              name: http
            - containerPort: 26500
              name: gateway
            - containerPort: 26502
              name: internal
          env:
            - name: ZEEBE_STANDALONE_GATEWAY
              value: "true"
            - name: ZEEBE_GATEWAY_CLUSTER_CLUSTERNAME
              value: release-name-zeebe
            - name: ZEEBE_GATEWAY_CLUSTER_MEMBERID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ZEEBE_LOG_LEVEL
              value: info
            - name: JAVA_TOOL_OPTIONS
              value: -XX:+ExitOnOutOfMemoryError
            - name: ZEEBE_GATEWAY_CLUSTER_CONTACTPOINT
              value: release-name-zeebe:26502
            - name: ZEEBE_GATEWAY_NETWORK_HOST
              value: 0.0.0.0
            - name: ZEEBE_GATEWAY_NETWORK_PORT
              value: "26500"
            - name: ZEEBE_GATEWAY_CLUSTER_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: ZEEBE_GATEWAY_CLUSTER_PORT
              value: "26502"
            - name: ZEEBE_GATEWAY_MONITORING_HOST
              value: 0.0.0.0
            - name: ZEEBE_GATEWAY_MONITORING_PORT
              value: "9600"
          volumeMounts: null
          readinessProbe:
            tcpSocket:
              port: gateway
            initialDelaySeconds: 20
            periodSeconds: 5
          resources:
            limits:
              cpu: 400m
              memory: 450Mi
            requests:
              cpu: 400m
              memory: 450Mi
      volumes:
        - name: config
          configMap:
            name: release-name-zeebe-gateway-gateway
            defaultMode: 484
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - zeebe-gateway
              topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: Helm
    release: release-name
    chart: elasticsearch
    app: elasticsearch-master
  annotations:
    esMajorVersion: "7"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: elasticsearch-master
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 64Gi
  template:
    metadata:
      name: elasticsearch-master
      labels:
        release: release-name
        chart: elasticsearch
        app: elasticsearch-master
      annotations: null
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - elasticsearch-master
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes: null
      enableServiceLinks: true
      initContainers:
        - name: configure-sysctl
          securityContext:
            runAsUser: 10613
            privileged: true
            capabilities:
              drop:
                "": NET_RAW
          image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
          imagePullPolicy: IfNotPresent
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          resources:
            seccompProfile:
              type: RuntimeDefault
      containers:
        - name: elasticsearch
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 10041
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
          imagePullPolicy: IfNotPresent
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e
                  # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file

                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Elasticsearch Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no

                  http () {
                    local path="${1}"
                    local args="${2}"
                    set -- -XGET -s

                    if [ "$args" != "" ]; then
                      set -- "$@" $args
                    fi

                    if [ -n "${ELASTIC_PASSWORD}" ]; then
                      set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"
                    fi

                    curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                  }

                  if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    HTTP_CODE=$(http "/" "-w %{http_code}")
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                      exit ${RC}
                    fi
                    # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    elif [[ ${HTTP_CODE} == "503" && "7" == "6" ]]; then
                      exit 0
                    else
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                      exit 1
                    fi

                  else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                    if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                      touch ${START_FILE}
                      exit 0
                    else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                      exit 1
                    fi
                  fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 1Gi
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: cluster.initial_master_nodes
              value: elasticsearch-master-0,elasticsearch-master-1,
            - name: discovery.seed_hosts
              value: elasticsearch-master-headless
            - name: cluster.name
              value: elasticsearch
            - name: network.host
              value: 0.0.0.0
            - name: cluster.deprecation_indexing.enabled
              value: "false"
            - name: ES_JAVA_OPTS
              value: -Xmx1g -Xms1g
            - name: node.data
              value: "true"
            - name: node.ingest
              value: "true"
            - name: node.master
              value: "true"
            - name: node.ml
              value: "true"
            - name: node.remote_cluster_client
              value: "true"
            - name: xpack.security.enabled
              value: "false"
          volumeMounts:
            - name: elasticsearch-master
              mountPath: /usr/share/elasticsearch/data
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: k4HMVWQ0A
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.1.9
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations: null
    spec:
      serviceAccountName: default
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers: null
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.2.0-debian-10-r35
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11167
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_USER
              value: bn_keycloak
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: POSTGRES_DB
              value: bitnami_keycloak
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "bn_keycloak" -d "dbname=bitnami_keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-keycloa
  namespace: k4HMVWQ0A
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.1.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
spec:
  replicas: 1
  podManagementPolicy: Parallel
  serviceName: release-name-keycloa-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: 8cdf49c0f8c6c6a75ba20c4509fc0489768a6b544aa5fc8c95cb03f5ed6372bc
        checksum/secrets: 771adaedb88876444c86f0ece6a7fe48b4a7235796efede424f2d5a0b18403e8
      labels:
        app.kubernetes.io/name: keycloak
        helm.sh/chart: keycloak-7.1.6
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: keycloak
    spec:
      serviceAccountName: release-name-keycloa
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: keycloak
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:16.1.1-debian-10-r52
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 11824
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-keycloak
                  key: admin-password
            - name: KEYCLOAK_MANAGEMENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-keycloak
                  key: management-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
          envFrom:
            - configMapRef:
                name: release-name-keycloa-env-vars
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: http-management
              containerPort: 9990
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /auth/
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /auth/realms/master
              port: http
          volumeMounts: null
      volumes: null
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: zeebe-broker
  annotations: null
spec:
  replicas: 3
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: zeebe
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: zeebe-broker
  serviceName: release-name-zeebe
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: zeebe
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: zeebe-8.0.10
        app.kubernetes.io/version: 8.0.0
        app.kubernetes.io/component: zeebe-broker
      annotations: null
    spec:
      imagePullSecrets: []
      initContainers: null
      containers:
        - name: zeebe
          image: camunda/zeebe:8.0.0
          imagePullPolicy: IfNotPresent
          env:
            - name: LC_ALL
              value: C.UTF-8
            - name: K8S_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_SERVICE_NAME
              value: release-name-zeebe
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ZEEBE_BROKER_NETWORK_ADVERTISEDHOST
              value: $(K8S_NAME).$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc
            - name: ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS
              value: $(K8S_SERVICE_NAME)-0.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502, $(K8S_SERVICE_NAME)-1.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502, $(K8S_SERVICE_NAME)-2.$(K8S_SERVICE_NAME).$(K8S_NAMESPACE).svc:26502,
            - name: ZEEBE_BROKER_CLUSTER_CLUSTERNAME
              value: release-name-zeebe
            - name: ZEEBE_LOG_LEVEL
              value: info
            - name: ZEEBE_BROKER_CLUSTER_PARTITIONSCOUNT
              value: "3"
            - name: ZEEBE_BROKER_CLUSTER_CLUSTERSIZE
              value: "3"
            - name: ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR
              value: "3"
            - name: ZEEBE_BROKER_THREADS_CPUTHREADCOUNT
              value: "3"
            - name: ZEEBE_BROKER_THREADS_IOTHREADCOUNT
              value: "3"
            - name: ZEEBE_BROKER_GATEWAY_ENABLE
              value: "false"
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME
              value: io.camunda.zeebe.exporter.ElasticsearchExporter
            - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL
              value: http://elasticsearch-master:9200
            - name: ZEEBE_BROKER_NETWORK_COMMANDAPI_PORT
              value: "26501"
            - name: ZEEBE_BROKER_NETWORK_INTERNALAPI_PORT
              value: "26502"
            - name: ZEEBE_BROKER_NETWORK_MONITORINGAPI_PORT
              value: "9600"
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_TOOL_OPTIONS
              value: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/zeebe/data -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError
            - name: ZEEBE_BROKER_DATA_SNAPSHOTPERIOD
              value: 5m
            - name: ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK
              value: "0.85"
            - name: ZEEBE_BROKER_DATA_DISKUSAGEREPLICATIONWATERMARK
              value: "0.87"
          ports:
            - containerPort: 9600
              name: http
            - containerPort: 26501
              name: command
            - containerPort: 26502
              name: internal
          readinessProbe:
            httpGet:
              path: /ready
              port: 9600
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 960m
              memory: 1920Mi
            requests:
              cpu: 800m
              memory: 1200Mi
          volumeMounts:
            - name: config
              mountPath: /usr/local/bin/startup.sh
              subPath: startup.sh
            - name: data
              mountPath: /usr/local/zeebe/data
            - name: exporters
              mountPath: /exporters
      volumes:
        - name: config
          configMap:
            name: release-name-zeebe
            defaultMode: 484
        - name: exporters
          emptyDir: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - zeebe-broker
              topologyKey: kubernetes.io/hostname
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: null
        resources:
          requests:
            storage: 32Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-seooy-test
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  containers:
    - name: release-name-ikdbk-test
      image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash -e
          curl -XGET --fail 'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-identity-test-connection
  labels:
    app: camunda-platform
    app.kubernetes.io/name: identity
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: identity-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: identity
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-identity:80
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-operate-test-connection
  labels:
    app: camunda-platform
    app.kubernetes.io/name: operate
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: operate-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: operate
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-operate:80
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-optimize-test-connection
  labels:
    app: camunda-platform
    app.kubernetes.io/name: optimize
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: optimize-8.0.10
    app.kubernetes.io/version: 3.8.0
    app.kubernetes.io/component: optimize
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-optimize:80
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-tasklist-test-connection
  labels:
    app: camunda-platform
    app.kubernetes.io/name: tasklist
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: tasklist-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: tasklist
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-tasklist:80
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-zeebe-test-connection
  labels:
    app: camunda-platform
    app.kubernetes.io/name: zeebe
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: zeebe-8.0.10
    app.kubernetes.io/version: 8.0.0
    app.kubernetes.io/component: zeebe-broker
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-zeebe:9600
  restartPolicy: Never
