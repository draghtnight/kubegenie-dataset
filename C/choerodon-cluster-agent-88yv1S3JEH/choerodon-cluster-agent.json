[
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "cm-default"
    },
    "data": null
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "cm-polaris-config"
    },
    "data": {
      "config": "displayName: \"choerodon-polaris\"\nchecks:\n  # resources\n  cpuRequestsMissing: warning\n  cpuLimitsMissing: warning\n  memoryRequestsMissing: warning\n  memoryLimitsMissing: warning\n  # images\n  tagNotSpecified: error\n  pullPolicyNotAlways: ignore\n  # healthChecks\n  readinessProbeMissing: warning\n  livenessProbeMissing: warning\n  # networking\n  hostNetworkSet: warning\n  hostPortSet: warning\n  # security\n  hostIPCSet: error\n  hostPIDSet: error\n  notReadOnlyRootFileSystem: warning\n  privilegeEscalationAllowed: error\n  runAsRootAllowed: warning\n  runAsPrivileged: error\n  dangerousCapabilities: error\n  insecureCapabilities: warning\ncontrollersToScan:\n  - Deployments\n  - StatefulSets\n  - DaemonSets\n  - CronJobs\n  - Jobs\n  - ReplicationControllers\nexemptions:\n  - controllerNames:\n      - dns-controller\n      - datadog-datadog\n      - kube-flannel-ds\n      - kube2iam\n      - aws-iam-authenticator\n      - datadog\n      - kube2iam\n    rules:\n      - hostNetworkSet\n  - controllerNames:\n      - aws-iam-authenticator\n      - aws-cluster-autoscaler\n      - kube-state-metrics\n      - dns-controller\n      - external-dns\n      - dnsmasq\n      - autoscaler\n      - kubernetes-dashboard\n      - install-cni\n      - kube2iam\n    rules:\n      - readinessProbeMissing\n      - livenessProbeMissing\n  - controllerNames:\n      - aws-iam-authenticator\n      - nginx-ingress-controller\n      - nginx-ingress-default-backend\n      - aws-cluster-autoscaler\n      - kube-state-metrics\n      - dns-controller\n      - external-dns\n      - kubedns\n      - dnsmasq\n      - autoscaler\n      - tiller\n      - kube2iam\n    rules:\n      - runAsRootAllowed\n  - controllerNames:\n      - aws-iam-authenticator\n      - nginx-ingress-controller\n      - nginx-ingress-default-backend\n      - aws-cluster-autoscaler\n      - kube-state-metrics\n      - dns-controller\n      - external-dns\n      - kubedns\n      - dnsmasq\n      - autoscaler\n      - tiller\n      - kube2iam\n    rules:\n      - notReadOnlyRootFileSystem\n  - controllerNames:\n      - cert-manager\n      - dns-controller\n      - kubedns\n      - dnsmasq\n      - autoscaler\n      - insights-agent-goldilocks-vpa-install\n    rules:\n      - cpuRequestsMissing\n      - cpuLimitsMissing\n      - memoryRequestsMissing\n      - memoryLimitsMissing\n  - controllerNames:\n      - kube2iam\n      - kube-flannel-ds\n    rules:\n      - runAsPrivileged\n  - controllerNames:\n      - kube-hunter\n    rules:\n      - hostPIDSet\n  - controllerNames:\n      - polaris\n      - kube-hunter\n      - goldilocks\n      - insights-agent-goldilocks-vpa-install\n    rules:\n      - notReadOnlyRootFileSystem\n  - controllerNames:\n      - insights-agent-goldilocks-controller\n    rules:\n      - livenessProbeMissing\n      - readinessProbeMissing\n  - controllerNames:\n      - insights-agent-goldilocks-vpa-install\n      - kube-hunter\n    rules:\n      - runAsRootAllowed",
      "cpuLimitsMissing": "successMessage: CPU limits are set\nfailureMessage: CPU limits should be set\ncategory: Resources\ntarget: Container\ncontainers:\n  exclude:\n  - initContainer\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  required:\n  - resources\n  properties:\n    resources:\n      type: object\n      required:\n      - limits\n      properties:\n        limits:\n          type: object\n          required:\n          - cpu\n          properties:\n            cpu:\n              type: string\n              not:\n                const: ''",
      "cpuRequestsMissing": "successMessage: CPU requests are set\nfailureMessage: CPU requests should be set\ncategory: Resources\ntarget: Container\ncontainers:\n  exclude:\n  - initContainer\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  required:\n  - resources\n  properties:\n    resources:\n      type: object\n      required:\n      - requests\n      properties:\n        requests:\n          type: object\n          required:\n          - cpu\n          properties:\n            cpu:\n              type: string\n              not:\n                const: ''",
      "dangerousCapabilities": "successMessage: Container does not have any dangerous capabilities\nfailureMessage: Container should not have dangerous capabilities\ncategory: Security\ntarget: Container\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  properties:\n    securityContext:\n      type: object\n      properties:\n        capabilities:\n          type: object\n          properties:\n            add:\n              type: array\n              not:\n                contains:\n                  const: ALL\n              not:\n                contains:\n                  const: SYS_ADMIN\n              not:\n                contains:\n                  const: NET_ADMIN",
      "hostIPCSet": "successMessage: Host IPC is not configured\nfailureMessage: Host IPC should not be configured\ncategory: Security\ntarget: Pod\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  properties:\n    hostIPC:\n      not:\n        const: true",
      "hostNetworkSet": "successMessage: Host network is not configured\nfailureMessage: Host network should not be configured\ncategory: Networking\ntarget: Pod\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  properties:\n    hostNetwork:\n      not:\n        const: true",
      "hostPIDSet": "successMessage: Host PID is not configured\nfailureMessage: Host PID should not be configured\ncategory: Security\ntarget: Pod\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  properties:\n    hostPID:\n      not:\n        const: true",
      "hostPortSet": "successMessage: Host port is not configured\nfailureMessage: Host port should not be configured\ncategory: Networking\ntarget: Container\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  required:\n  properties:\n    ports:\n      type: array\n      items:\n        properties:\n          hostPort:\n            const: 0",
      "insecureCapabilities": "successMessage: Container does not have any insecure capabilities\nfailureMessage: Container should not have insecure capabilities\ncategory: Security\ntarget: Container\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  properties:\n    securityContext:\n      type: object\n      properties:\n        capabilities:\n          type: object\n          properties:\n            add:\n              enum:\n              - CHOWN\n              - DAC_OVERRIDE\n              - FSETID\n              - FOWNER\n              - MKNOD\n              - NET_RAW\n              - SETGID\n              - SETUID\n              - SETFCAP\n              - SETPCAP\n              - NET_BIND_SERVICE\n              - SYS_CHROOT\n              - KILL\n              - AUDIT_WRITE",
      "livenessProbeMissing": "successMessage: Liveness probe is configured\nfailureMessage: Liveness probe should be configured\ncategory: Health Checks\ncontrollers:\n  exclude:\n  - Job\n  - CronJob\ncontainers:\n  exclude:\n  - initContainer\ntarget: Container\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  required:\n  - livenessProbe\n  properties:\n    livenessProbe:\n      type: object\n      not:\n        const: null",
      "memoryLimitsMissing": "successMessage: Memory limits are set\nfailureMessage: Memory limits should be set\ncategory: Resources\ntarget: Container\ncontainers:\n  exclude:\n  - initContainer\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  required:\n  - resources\n  properties:\n    resources:\n      type: object\n      required:\n      - limits\n      properties:\n        limits:\n          type: object\n          required:\n          - memory\n          properties:\n            memory:\n              type: string\n              not:\n                const: ''",
      "notReadOnlyRootFileSystem": "successMessage: Filesystem is read only\nfailureMessage: Filesystem should be read only\ncategory: Security\ntarget: Container\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  required:\n  - securityContext\n  properties:\n    securityContext:\n      required:\n      - readOnlyRootFilesystem\n      properties:\n        readOnlyRootFilesystem:\n          const: true",
      "privilegeEscalationAllowed": "successMessage: Privilege escalation not allowed\nfailureMessage: Privilege escalation should not be allowed\ncategory: Security\ntarget: Container\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  properties:\n    securityContext:\n      properties:\n        allowPrivilegeEscalation:\n          not:\n            const: true",
      "pullPolicyNotAlways": "successMessage: Image pull policy is \"Always\"\nfailureMessage: Image pull policy should be \"Always\"\ncategory: Images\ntarget: Container\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  required:\n  - imagePullPolicy\n  properties:\n    imagePullPolicy:\n      const: Always",
      "readinessProbeMissing": "successMessage: Readiness probe is configured\nfailureMessage: Readiness probe should be configured\ncategory: Health Checks\ncontrollers:\n  exclude:\n  - Job\n  - CronJob\ncontainers:\n  exclude:\n  - initContainer\ntarget: Container\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  required:\n  - readinessProbe\n  properties:\n    readinessProbe:\n      type: object\n      not:\n        const: null",
      "runAsPrivileged": "successMessage: Not running as privileged\nfailureMessage: Should not be running as privileged\ncategory: Security\ntarget: Container\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  properties:\n    securityContext:\n      properties:\n        privileged:\n          not:\n            const: true",
      "runAsRootAllowed": "successMessage: Is not allowed to run as root\nfailureMessage: Should not be allowed to run as root\ncategory: Security\ntarget: Container\nschemaTarget: Pod\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  definitions:\n    goodSecurityContext:\n      type: object\n      anyOf:\n      - required:\n        - runAsUser\n        properties:\n          runAsUser:\n            minimum: 1\n      - required:\n        - runAsNonRoot\n        properties:\n          runAsNonRoot:\n            const: true\n    notBadSecurityContext:\n      type: object\n      properties:\n        runAsUser:\n          minimum: 1\n        runAsNonRoot:\n          const: true\n  type: object\n  anyOf:\n  # non-root specified at pod-level, and not overridden at container level\n  - required:\n    - securityContext\n    properties:\n      securityContext:\n        $ref: \"#/definitions/goodSecurityContext\"\n      containers:\n        type: array\n        items:\n          properties:\n            securityContext:\n              $ref: \"#/definitions/notBadSecurityContext\"\n  # non-root specified at container level\n  - properties:\n      containers:\n        type: array\n        items:\n          required:\n          - securityContext\n          properties:\n            securityContext:\n              $ref: \"#/definitions/goodSecurityContext\"",
      "tagNotSpecified": "successMessage: Image tag is specified\nfailureMessage: Image tag should be specified\ncategory: Images\ntarget: Container\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  required:\n  - image\n  allOf:\n  - properties:\n      image:\n        pattern: ^.+:.+$\n  - properties:\n      image:\n        not:\n          pattern: ^.+:latest$",
      "memoryRequestsMissing": "successMessage: Memory requests are set\nfailureMessage: Memory requests should be set\ncategory: Resources\ntarget: Container\ncontainers:\n  exclude:\n    - initContainer\nschema:\n  '$schema': http://json-schema.org/draft-07/schema\n  type: object\n  required:\n    - resources\n  properties:\n    resources:\n      type: object\n      required:\n        - requests\n      properties:\n        requests:\n          type: object\n          required:\n            - memory\n          properties:\n            memory:\n              type: string\n              not:\n                const: ''"
    }
  },
  {
    "kind": "Deployment",
    "apiVersion": "apps/v1",
    "metadata": {
      "name": "release-name",
      "labels": {
        "app": "release-name"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "release-name"
        }
      },
      "strategy": {
        "rollingUpdate": {
          "maxSurge": 1,
          "maxUnavailable": 1
        },
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "default",
          "dnsPolicy": "ClusterFirstWithHostNet",
          "containers": [
            {
              "name": "release-name",
              "image": "registry.cn-shanghai.aliyuncs.com/c7n/choerodon-cluster-agent:2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                }
              ],
              "args": [
                "/choerodon-cluster-agent",
                "--v=0",
                "--connect=?group=cluster:0&processor=agent&secret_key=devops_ws&key=cluster:0&clusterId=0&token=&version=2.0.0",
                "--token=",
                "--agent-version=2.0.0",
                "--choerodon-id=default",
                "--clusterId=0"
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8088,
                  "protocol": "TCP"
                }
              ],
              "resources": {
                "limits": {
                  "memory": "1024Mi"
                },
                "requests": {
                  "memory": "768Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "mountPath": "/polaris",
                  "name": "cm-polaris-config"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "cm-polaris-config",
              "configMap": {
                "name": "cm-polaris-config"
              }
            }
          ]
        }
      }
    }
  }
]