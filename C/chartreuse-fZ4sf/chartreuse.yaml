apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-chartreuse
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.0.0
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-chartreuse
  labels:
    app: chartreuse
    chart: chartreuse-4.0.0
    release: release-name
    heritage: Helm
type: Opaque
stringData:
  CHARTREUSE_ALEMBIC_URL: postgresql://my-dummy-username:my-dummy-password@release-name-postgresql:5432/my-dummy-database?sslmode=prefer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-chartreuse
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.0.0
    app.kubernetes.io/managed-by: Helm
data:
  CHARTREUSE_ALEMBIC_ALLOW_MIGRATION_FOR_EMPTY_DATABASE: "1"
  HELM_IS_INSTALL: "1"
  CHARTREUSE_ENABLE_STOP_PODS: "1"
  CHARTREUSE_UPGRADE_BEFORE_DEPLOYMENT: ""
  CHARTREUSE_MIGRATE_CONTAINER_IMAGE: overrideme:latest
  CHARTREUSE_MIGRATE_IMAGE_PULL_SECRET: ""
  CHARTREUSE_RELEASE_NAME: release-name
  CHARTREUSE_ALEMBIC_ADDITIONAL_PARAMETERS: ""
  CHARTREUSE_UPGRADE_PRIORITYCLASS_NAME: ""
  HELM_CHART_VERSION: 4.0.0
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-chartreuse
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.0.0
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - replicationcontrollers/scale
    verbs:
      - get
      - list
      - update
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - get
      - list
      - update
      - create
      - delete
  - apiGroups:
      - extensions
    resources:
      - deployments/scale
      - replicasets/scale
    verbs:
      - get
      - list
      - update
      - patch
  - apiGroups:
      - apps
    resources:
      - deployments/scale
      - replicasets/scale
    verbs:
      - get
      - list
      - update
      - patch
  - apiGroups:
      - extensions
    resources:
      - deployments
      - replicasets
    verbs:
      - get
      - list
  - apiGroups:
      - apps
    resources:
      - deployments
      - replicasets
    verbs:
      - get
      - list
  - apiGroups:
      - wiremind.io
    resources:
      - expecteddeploymentscales
    verbs:
      - get
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-chartreuse
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.0.0
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-chartreuse
subjects:
  - kind: ServiceAccount
    name: release-name-chartreuse
    namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-chartreuse-ephemeral
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.0.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-chartreuse-ephemeral
  labels:
    app: chartreuse
    chart: chartreuse-4.0.0
    release: release-name
    heritage: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
type: Opaque
stringData:
  CHARTREUSE_ALEMBIC_URL: postgresql://my-dummy-username:my-dummy-password@release-name-postgresql:5432/my-dummy-database?sslmode=prefer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-chartreuse-ephemeral
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.0.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
data:
  CHARTREUSE_ALEMBIC_ALLOW_MIGRATION_FOR_EMPTY_DATABASE: "1"
  HELM_IS_INSTALL: "1"
  CHARTREUSE_ENABLE_STOP_PODS: "1"
  CHARTREUSE_UPGRADE_BEFORE_DEPLOYMENT: ""
  CHARTREUSE_MIGRATE_CONTAINER_IMAGE: overrideme:latest
  CHARTREUSE_MIGRATE_IMAGE_PULL_SECRET: ""
  CHARTREUSE_RELEASE_NAME: release-name
  CHARTREUSE_ALEMBIC_ADDITIONAL_PARAMETERS: ""
  CHARTREUSE_UPGRADE_PRIORITYCLASS_NAME: ""
  HELM_CHART_VERSION: 4.0.0
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-chartreuse-ephemeral
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.0.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
rules:
  - apiGroups:
      - ""
    resources:
      - replicationcontrollers/scale
    verbs:
      - get
      - list
      - update
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - get
      - list
      - update
      - create
      - delete
  - apiGroups:
      - extensions
    resources:
      - deployments/scale
      - replicasets/scale
    verbs:
      - get
      - list
      - update
      - patch
  - apiGroups:
      - apps
    resources:
      - deployments/scale
      - replicasets/scale
    verbs:
      - get
      - list
      - update
      - patch
  - apiGroups:
      - extensions
    resources:
      - deployments
      - replicasets
    verbs:
      - get
      - list
  - apiGroups:
      - apps
    resources:
      - deployments
      - replicasets
    verbs:
      - get
      - list
  - apiGroups:
      - wiremind.io
    resources:
      - expecteddeploymentscales
    verbs:
      - get
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-chartreuse-ephemeral
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.0.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-chartreuse-ephemeral
subjects:
  - kind: ServiceAccount
    name: release-name-chartreuse-ephemeral
    namespace: default
---
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-chartreuse-ephemeral
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.0.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartreuse-upgrade
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 1800
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chartreuse
        helm.sh/chart: chartreuse-4.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: 4.0.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: chartreuse-upgrade-ephemeral
        release-name-postgresql-client: "true"
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: null
      initContainers:
        - name: postgresql-wait
          image: bitnami/postgresql:latest
          imagePullPolicy: IfNotPresent
          command:
            - sh
          args:
            - -c
            - |
              until pg_isready "--dbname=$CHARTREUSE_ALEMBIC_URL"; do
                echo "Waiting for Postgresql to be ready...";
                sleep 1;
              done;
          envFrom:
            - secretRef:
                name: release-name-chartreuse-ephemeral
            - configMapRef:
                name: release-name-chartreuse-ephemeral
      containers:
        - name: chartreuse
          image: overrideme:latest
          imagePullPolicy: IfNotPresent
          command:
            - chartreuse-upgrade
          envFrom:
            - secretRef:
                name: release-name-chartreuse-ephemeral
            - configMapRef:
                name: release-name-chartreuse-ephemeral
          env: null
      serviceAccountName: release-name-chartreuse-ephemeral
      terminationGracePeriodSeconds: 0
