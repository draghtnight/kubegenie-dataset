[
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "kubernetes"
    },
    "data": {
      "serviceConfig": "name: kubernetes\nkafka_bootstrap_servers: [\"cord-kafka\"]\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nevent_bus:\n  endpoint: \"cord-kafka\"\n  kind: kafka\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-kafka:9092\"\n      topic: xos.log.kubernetes\n  loggers:\n    '':\n      handlers:\n          - console\n          - file\n          - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "base-kubernetes-tosca"
    },
    "data": {
      "010-fixtures.yaml": "description: Some basic fixtures\nimports:\n- custom_types/networkparametertype.yaml\n- custom_types/networktemplate.yaml\ntopology_template:\n  node_templates:\n    Private:\n      properties:\n        name: Private\n        translation: none\n        visibility: private\n      type: tosca.nodes.NetworkTemplate\n    Public dedicated IPv4:\n      properties:\n        name: Public dedicated IPv4\n        shared_network_name: ext-net\n        translation: none\n        visibility: public\n      type: tosca.nodes.NetworkTemplate\n    Public shared IPv4:\n      properties:\n        name: Public shared IPv4\n        shared_network_name: nat-net\n        translation: NAT\n        visibility: private\n      type: tosca.nodes.NetworkTemplate\n    bridge:\n      properties:\n        name: bridge\n      type: tosca.nodes.NetworkParameterType\n    c_tag:\n      properties:\n        name: c_tag\n      type: tosca.nodes.NetworkParameterType\n    device:\n      properties:\n        name: device\n      type: tosca.nodes.NetworkParameterType\n    neutron_port_name:\n      properties:\n        name: neutron_port_name\n      type: tosca.nodes.NetworkParameterType\n    next_hop:\n      properties:\n        name: next_hop\n      type: tosca.nodes.NetworkParameterType\n    s_tag:\n      properties:\n        name: s_tag\n      type: tosca.nodes.NetworkParameterType\ntosca_definitions_version: tosca_simple_yaml_1_0\n",
      "040-cord-services.yaml": "description: Set up Kubernetes Service\nimports:\n- custom_types/kubernetesservice.yaml\n- custom_types/trustdomain.yaml\ntopology_template:\n  node_templates:\n    default_trustdomain:\n      properties:\n        name: default\n      requirements:\n      - owner:\n          node: service#kubernetes\n          relationship: tosca.relationships.BelongsToOne\n      type: tosca.nodes.TrustDomain\n    service#kubernetes:\n      properties:\n        name: kubernetes\n      type: tosca.nodes.KubernetesService\ntosca_definitions_version: tosca_simple_yaml_1_0\n",
      "050-service-graph-constraints.yaml": "description: Constraints on the Services position in the graph\nimports:\n- custom_types/servicegraphconstraint.yaml\ntopology_template:\n  node_templates:\n    constraints:\n      properties:\n        constraints: '[]'\n      type: tosca.nodes.ServiceGraphConstraint\ntosca_definitions_version: tosca_simple_yaml_1_0\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "att-workflow-driver"
    },
    "data": {
      "serviceConfig": "name: att-workflow-driver\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nevent_bus:\n  endpoint: \"cord-platform-kafka\"\n  kind: kafka\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-platform-kafka:9092\"\n      topic: xos.log.att-workflow-driver\n  loggers:\n    '':\n      handlers:\n        - console\n        - file\n        - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "fabric-crossconnect"
    },
    "data": {
      "serviceConfig": "name: fabric-crossconnect\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nevent_bus:\n  endpoint: \"cord-platform-kafka\"\n  kind: kafka\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-platform-kafka:9092\"\n      topic: xos.log.fabric-crossconnect\n  loggers:\n    '':\n      handlers:\n          - console\n          - file\n          - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "fabric"
    },
    "data": {
      "serviceConfig": "name: fabric\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nevent_bus:\n  endpoint: \"cord-platform-kafka\"\n  kind: kafka\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-platform-kafka:9092\"\n      topic: xos.log.fabric\n  loggers:\n    '':\n      handlers:\n          - console\n          - file\n          - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "mcord-subscriber"
    },
    "data": {
      "serviceConfig": "name: mcord\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: xos-core:50051\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-kafka:9092\"\n      topic: xos.log.mcord-subscriber\n  loggers:\n    '':\n      handlers:\n        - console\n        - file\n        - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "onos-service"
    },
    "data": {
      "serviceConfig": "name: onos\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nevent_bus:\n  endpoint: \"cord-platform-kafka\"\n  kind: kafka\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-platform-kafka:9092\"\n      topic: xos.log.onos-service\n  loggers:\n    '':\n      handlers:\n        - console\n        - file\n        - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "rcord"
    },
    "data": {
      "serviceConfig": "name: rcord\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-kafka:9092\"\n      topic: xos.log.rcord\n  loggers:\n    '':\n      handlers:\n        - console\n        - file\n        - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "volt"
    },
    "data": {
      "serviceConfig": "name: volt\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nevent_bus:\n  endpoint: \"cord-platform-kafka\"\n  kind: kafka\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-platform-kafka:9092\"\n      topic: xos.log.volt\n  loggers:\n    '':\n      handlers:\n        - console\n        - file\n        - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "vrouter"
    },
    "data": {
      "serviceConfig": "name: vrouter\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: xos-core:50051\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-kafka:9092\"\n      topic: xos.log.vrouter\n  loggers:\n    '':\n      handlers:\n        - console\n        - file\n        - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "comac-tosca"
    },
    "data": {
      "010-rcord-subscriber-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\nimports:\n  - custom_types/rcordservice.yaml\ndescription: R-CORD service TOSCA\ntopology_template:\n  node_templates:\n    service#rcord:\n      type: tosca.nodes.RCORDService\n      properties:\n        name: rcord\n        kind: data\n",
      "020-volt-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\ndescription: Set up VOLT service\nimports:\n  - custom_types/voltservice.yaml\n\ntopology_template:\n  node_templates:\n    service#volt:\n      type: tosca.nodes.VOLTService\n      properties:\n        name: volt\n        kind: data\n        voltha_url: \"voltha.voltha.svc.cluster.local\"\n        voltha_port: 8882\n",
      "030-fabric-crossconnect-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\ndescription: Set up fabric-crossconnect service\nimports:\n  - custom_types/fabriccrossconnectservice.yaml\n\ntopology_template:\n  node_templates:\n    service#fabric-crossconnect:\n      type: tosca.nodes.FabricCrossconnectService\n      properties:\n        name: fabric-crossconnect\n        kind: data\n",
      "040-fixtures.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\ndescription: Set up att-workflow-driver service\nimports:\n  - custom_types/attworkflowdriverservice.yaml\n\ntopology_template:\n  node_templates:\n    service#att-workflow-driver:\n      type: tosca.nodes.AttWorkflowDriverService\n      properties:\n        name: att-workflow-driver\n        kind: oss\n",
      "050-onos-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\n\nimports:\n   - custom_types/onosapp.yaml\n   - custom_types/onosservice.yaml\n   - custom_types/serviceinstanceattribute.yaml\n\ndescription: Configures services in COMAC\n\ntopology_template:\n  node_templates:\n\n    service#onos:\n      type: tosca.nodes.ONOSService\n      properties:\n          name: onos\n          kind: data\n          rest_hostname: \"cord-platform-onos-ui.default.svc.cluster.local\"\n          rest_port: 8181\n    onos_app#openflow-base:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: openflow-base\n        app_id: org.onosproject.openflow-base\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#hostprovider:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: hostprovider\n        app_id: org.onosproject.hostprovider\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    # FOR ATT-Workflow --\n    onos_app#aaa:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: aaa\n        app_id: org.opencord.aaa\n        url: https://oss.sonatype.org/content/groups/public/org/opencord/aaa-app/1.9.0/aaa-app-1.9.0.oar\n        version: 1.9.0\n        dependencies: org.opencord.sadis\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n    # --\n\n    onos_app#olt:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: olt\n        app_id: org.opencord.olt\n        url: https://oss.sonatype.org/content/groups/public/org/opencord/olt-app/3.0.1/olt-app-3.0.1.oar\n        version: 3.0.1\n        dependencies: org.opencord.sadis\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#sadis:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: sadis\n        app_id: org.opencord.sadis\n        url: https://oss.sonatype.org/content/groups/public/org/opencord/sadis-app/3.1.0/sadis-app-3.1.0.oar\n        version: 3.1.0\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#dhcpl2relay:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: dhcpl2relay\n        app_id: org.opencord.dhcpl2relay\n        url: https://oss.sonatype.org/content/groups/public/org/opencord/dhcpl2relay-app/1.6.0/dhcpl2relay-app-1.6.0.oar\n        version: 1.6.0\n        dependencies: org.opencord.sadis\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#kafka:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: kafka\n        app_id: org.opencord.kafka\n        url: https://oss.sonatype.org/content/groups/public/org/opencord/kafka/1.1.0/kafka-1.1.0.oar\n        version: 1.1.0\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    # CORD-Configuration\n    kafka-config-attr:\n      type: tosca.nodes.ServiceInstanceAttribute\n      properties:\n        name: /onos/v1/network/configuration/apps/org.opencord.kafka\n        value: >\n          {\n            \"kafka\" : {\n              \"bootstrapServers\" : \"cord-platform-kafka.default.svc.cluster.local:9092\"\n            }\n          }\n      requirements:\n        - service_instance:\n            node: onos_app#kafka\n            relationship: tosca.relationships.BelongsToOne\n\n    sadis-config-attr:\n      type: tosca.nodes.ServiceInstanceAttribute\n      properties:\n        name: /onos/v1/network/configuration/apps/org.opencord.sadis\n        value: >\n          {\n            \"sadis\" : {\n              \"integration\" : {\n                \"cache\" : {\n                  \"maxsize\" : 1000,\n                  \"ttl\": \"PT300S\"\n                },\n                \"url\" : \"http://sadis-service:8000/subscriber/%s\"\n              }\n            },\n            \"bandwidthprofile\":{\n               \"integration\":{\n                  \"url\": \"http://sadis-service:8000/bandwidthprofiles/%s\",\n                  \"cache\":{\n                     \"enabled\":true,\n                     \"maxsize\":40,\n                     \"ttl\":\"PT1m\"\n                  }\n               }\n            }\n          }\n      requirements:\n        - service_instance:\n            node: onos_app#sadis\n            relationship: tosca.relationships.BelongsToOne\n\n    # FOR ATT-Workflow --\n    aaa-config-attr:\n      type: tosca.nodes.ServiceInstanceAttribute\n      properties:\n        name: /onos/v1/network/configuration/apps/org.opencord.aaa\n        value: >\n          {\n            \"AAA\" : {\n              \"radiusConnectionType\" : \"socket\",\n              \"radiusHost\" : \"freeradius.voltha.svc.cluster.local\",\n              \"radiusServerPort\" : \"1812\",\n              \"radiusSecret\" : \"SECRET\"\n            }\n          }\n      requirements:\n        - service_instance:\n            node: onos_app#aaa\n            relationship: tosca.relationships.BelongsToOne\n\n    olt-config-attr:\n      type: tosca.nodes.ServiceInstanceAttribute\n      properties:\n        name: /onos/v1/configuration/org.opencord.olt.impl.Olt?preset=true\n        value: >\n          {\n            \"enableDhcpOnProvisioning\" : true\n          }\n      requirements:\n        - service_instance:\n            node: onos_app#olt\n            relationship: tosca.relationships.BelongsToOne\n    # --\n\n    onos_app#segmentrouting:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: org.onosproject.segmentrouting\n        app_id: org.onosproject.segmentrouting\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#netcfghostprovider:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: org.onosproject.netcfghostprovider\n        app_id: org.onosproject.netcfghostprovider\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#openflow:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: org.onosproject.openflow\n        app_id: org.onosproject.openflow\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n",
      "070-fabric-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\ndescription: Set up Fabric service\nimports:\n  - custom_types/fabricservice.yaml\n\ntopology_template:\n  node_templates:\n    service#fabric:\n      type: tosca.nodes.FabricService\n      properties:\n        name: fabric\n        kind: data\n",
      "080-fixtures.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\ndescription: Some basic fixtures\nimports:\n  - custom_types/networkparametertype.yaml\n  - custom_types/networktemplate.yaml\ntopology_template:\n  node_templates:\n\n# -----------------------------------------------------------------------------\n# Network Parameter Types\n# -----------------------------------------------------------------------------\n    s_tag:\n      type: tosca.nodes.NetworkParameterType\n      properties:\n        name: s_tag\n    c_tag:\n      type: tosca.nodes.NetworkParameterType\n      properties:\n        name: c_tag\n    next_hop:\n      type: tosca.nodes.NetworkParameterType\n      properties:\n        name: next_hop\n    device:\n      type: tosca.nodes.NetworkParameterType\n      properties:\n        name: device\n    bridge:\n      type: tosca.nodes.NetworkParameterType\n      properties:\n        name: bridge\n    neutron_port_name:\n      type: tosca.nodes.NetworkParameterType\n      properties:\n        name: neutron_port_name\n\n# -----------------------------------------------------------------------------\n# Network Templates\n# -----------------------------------------------------------------------------\n    Private:\n      type: tosca.nodes.NetworkTemplate\n      properties:\n        name: Private\n        visibility: private\n        translation: none\n\n    Public shared IPv4:\n      type: tosca.nodes.NetworkTemplate\n      properties:\n        name: Public shared IPv4\n        visibility: private\n        translation: NAT\n        shared_network_name: nat-net\n\n    Public dedicated IPv4:\n      type: tosca.nodes.NetworkTemplate\n      properties:\n        name: Public dedicated IPv4\n        visibility: public\n        translation: none\n        shared_network_name: ext-net\n",
      "0900-vrouter-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\ndescription: Set up VRouter service\nimports:\n  - custom_types/vrouterservice.yaml\n\ntopology_template:\n  node_templates:\n    service#vrouter:\n      type: tosca.nodes.VRouterService\n      properties:\n        name: vrouter\n        kind: data\n",
      "100-mcord-subscriber-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\n\nimports:\n  - custom_types/mcordsubscriberservice.yaml\n\ndescription: Configures the mcord-subscriber service\n\ntopology_template:\n  node_templates:\n    service#mcord:\n      type: tosca.nodes.MCordSubscriberService\n      properties:\n        name: mcord\n",
      "300-service-graph.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\nimports:\n  - custom_types/fabricservice.yaml\n  - custom_types/mcordsubscriberservice.yaml\n  - custom_types/onosservice.yaml\n  - custom_types/vrouterservice.yaml\n  - custom_types/rcordservice.yaml\n  - custom_types/voltservice.yaml\n  - custom_types/fabriccrossconnectservice.yaml\n  - custom_types/attworkflowdriverservice.yaml\n  - custom_types/servicegraphconstraint.yaml\n  - custom_types/servicedependency.yaml\n  - custom_types/service.yaml\ndescription: COMAC service graph\ntopology_template:\n  node_templates:\n\n    service#onos:\n      type: tosca.nodes.ONOSService\n      properties:\n        name: onos\n        must-exist: true\n\n    service#fabric:\n      type: tosca.nodes.FabricService\n      properties:\n        name: fabric\n        must-exist: true\n\n    service#vrouter:\n      type: tosca.nodes.VRouterService\n      properties:\n        name: vrouter\n        must-exist: true\n\n    service#mcord:\n      type: tosca.nodes.MCordSubscriberService\n      properties:\n        name: mcord\n        must-exist: true\n\n\n    service#rcord:\n      type: tosca.nodes.RCORDService\n      properties:\n        name: rcord\n        must-exist: true\n\n    service#volt:\n      type: tosca.nodes.VOLTService\n      properties:\n        name: volt\n        must-exist: true\n\n    service#fabric-crossconnect:\n      type: tosca.nodes.FabricCrossconnectService\n      properties:\n        name: fabric-crossconnect\n        must-exist: true\n\n    # FOR ATT-Workflow --\n    service#att-workflow-driver:\n      type: tosca.nodes.AttWorkflowDriverService\n      properties:\n        name: att-workflow-driver\n        must-exist: true\n    # --\n\n    service#omec-cp:\n      type: tosca.nodes.Service\n      properties:\n        name: omec-cp\n\n    service#omec-up:\n      type: tosca.nodes.Service\n      properties:\n        name: omec-up\n\n    service#cdn-local:\n      type: tosca.nodes.Service\n      properties:\n        name: cdn-local\n\n    service#cdn-remote:\n      type: tosca.nodes.Service\n      properties:\n        name: cdn-remote\n\n    service_dependency#onos-fabric_fabric:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#fabric\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#vrouter_fabric:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#vrouter\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#fabric\n            relationship: tosca.relationships.BelongsToOne\n    service_dependency#rcord_volt:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#rcord\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#volt\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#onos_volt:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#volt\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#volt_fabric-crossconnect:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#volt\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#fabric-crossconnect\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#onos_fabric-crossconnect:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#fabric-crossconnect\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    # FOR ATT-Workflow --\n    service_dependency#workflow_volt:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#att-workflow-driver\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#volt\n            relationship: tosca.relationships.BelongsToOne\n    # --\n\n\n    service_dependency#mcord_epc_cp:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#omec-cp\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#mcord\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#mcord_epc_up:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#omec-up\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#mcord\n            relationship: tosca.relationships.BelongsToOne\n\n\n    service_dependency#epc_cp_epc_up:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#omec-up\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#omec-cp\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#epc_up_cdn_local:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#cdn-local\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#omec-up\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#cdn_local_cdn_remote:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#cdn-remote\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#cdn-local\n            relationship: tosca.relationships.BelongsToOne\n\n    constraints:\n      type: tosca.nodes.ServiceGraphConstraint\n      properties:\n        constraints: '[[\"mcord\", null, null, \"rcord\"], [\"progran\", null, \"att-workflow-driver\", \"volt\"], [\"omec-cp\", \"omec-up\", \"onos\", \"fabric-crossconnect\"], [null, \"cdn-local\", \"fabric\", null], [null, \"cdn-remote\", \"vrouter\", null]]'\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "sadis-service",
      "labels": {
        "app": "sadis-server"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "sadis-service",
          "port": 8000,
          "targetPort": 8000,
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app": "sadis-server",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-kubernetes",
      "labels": {
        "app": "kubernetes",
        "chart": "kubernetes-1.3.1",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "kubernetes",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "kubernetes",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "04ab1236116e13fc86e04773d28a0ea99bbeb82c52cdc0cb47d651a3b8e596de"
          }
        },
        "spec": {
          "serviceAccountName": "kubernetes-synchronizer",
          "containers": [
            {
              "name": "kubernetes",
              "image": "omecproject/kubernetes-synchronizer:comac-1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "kubernetes-config",
                  "mountPath": "/opt/xos/synchronizers/kubernetes/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "kubernetes-config",
              "configMap": {
                "name": "kubernetes",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-att-workflow-driver",
      "labels": {
        "app": "att-workflow-driver",
        "chart": "att-workflow-driver-1.1.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "att-workflow-driver",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "att-workflow-driver",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "9c4ac8a5bc4bb7b18243a0b56853af581b5167f07766f79eef228d534a8116a9"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "att-workflow-driver",
              "image": "xosproject/att-workflow-driver-synchronizer:1.2.3",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "att-workflow-driver-config",
                  "mountPath": "/opt/xos/synchronizers/att-workflow-driver/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "att-workflow-driver-config",
              "configMap": {
                "name": "att-workflow-driver",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-fabric-crossconnect",
      "labels": {
        "app": "fabric-crossconnect",
        "chart": "fabric-crossconnect-1.2.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "fabric-crossconnect",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "fabric-crossconnect",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "64b217d2c7bde09add1b5d826ba70854e94603e892cf3520f7e40c59d0999b1c"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "fabric-crossconnect",
              "image": "xosproject/fabric-crossconnect-synchronizer:1.2.2",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "fabric-crossconnect-config",
                  "mountPath": "/opt/xos/synchronizers/fabric-crossconnect/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "fabric-crossconnect-config",
              "configMap": {
                "name": "fabric-crossconnect",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-fabric",
      "labels": {
        "app": "fabric",
        "chart": "fabric-2.2.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "fabric",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "fabric",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "c555a40bf5fd575629ba29d52effa2335a8038344f4a5ce4f4b6e3cafd957976"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "fabric",
              "image": "xosproject/fabric-synchronizer:2.2.2",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "fabric-config",
                  "mountPath": "/opt/xos/synchronizers/fabric/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "fabric-config",
              "configMap": {
                "name": "fabric",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-onos-service",
      "labels": {
        "app": "onos-service",
        "chart": "onos-service-2.1.3",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "onos-service",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "onos-service",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "e4d46b3c1d45863cd49b3d80b169c3b6423e35ea4ae0e3709150979e92ca142a"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "onos-service",
              "image": "xosproject/onos-synchronizer:2.1.2",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "onos-service-config",
                  "mountPath": "/opt/xos/synchronizers/onos/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "onos-service-config",
              "configMap": {
                "name": "onos-service",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-rcord",
      "labels": {
        "app": "rcord",
        "chart": "rcord-1.0.16",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "rcord",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "rcord",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "9a2404feaf652a72140efa424652083eca58f5923bcae49404a5cf97bd5abb46"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "rcord",
              "image": "xosproject/rcord-synchronizer:1.3.2",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "rcord-config",
                  "mountPath": "/opt/xos/synchronizers/rcord/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "rcord-config",
              "configMap": {
                "name": "rcord",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "Deployment",
    "metadata": {
      "name": "sadis-server",
      "labels": {
        "app": "sadis-server"
      }
    },
    "spec": {
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "sadis-server",
            "release": "release-name"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "sadis-server",
              "image": "opencord/sadis-server:1.1.0",
              "imagePullPolicy": "Always",
              "ports": [
                {
                  "containerPort": 8000,
                  "port": 8000,
                  "protocol": "TCP"
                }
              ],
              "env": [
                {
                  "name": "SADISSERVER_PORT",
                  "value": "8000"
                },
                {
                  "name": "SADISSERVER_USERNAME",
                  "value": "admin@opencord.org"
                },
                {
                  "name": "SADISSERVER_PASSWORD",
                  "value": "letmein"
                },
                {
                  "name": "SADISSERVER_XOS",
                  "value": "xos-chameleon:9101"
                },
                {
                  "name": "SADISSERVER_KAFKABROKER",
                  "value": "cord-platform-kafka:9092"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-volt",
      "labels": {
        "app": "volt",
        "chart": "volt-2.2.5",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "volt",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "volt",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "b1dd08cb69e137c1be88fe98e3bb3ab7096ebaea6652c57b6ad3d62c294df83d"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "volt",
              "image": "xosproject/volt-synchronizer:2.2.4",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "volt-config",
                  "mountPath": "/opt/xos/synchronizers/volt/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "volt-config",
              "configMap": {
                "name": "volt",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-vrouter",
      "labels": {
        "app": "vrouter",
        "chart": "vrouter-2.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "vrouter",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "vrouter",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "6bd1e09f0dfda7c2bbb6426726ec8c5575509bd53d70fb82ec33bc6fc6863784"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "vrouter",
              "image": "xosproject/vrouter-synchronizer:2.1.0",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "vrouter-config",
                  "mountPath": "/opt/xos/synchronizers/vrouter/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "vrouter-config",
              "configMap": {
                "name": "vrouter",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-base-kubernetes-tosca-loader",
      "labels": {
        "app": "base-kubernetes",
        "chart": "base-kubernetes-1.2.1",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "backoffLimit": 12,
      "template": {
        "metadata": {
          "labels": {
            "app": "base-kubernetes",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "69411cd6483f6323a20a38290a8e524614f5619ef51dfeb2bd6fd3cce8d02b49"
          }
        },
        "spec": {
          "restartPolicy": "OnFailure",
          "containers": [
            {
              "name": "base-kubernetes-tosca-loader",
              "image": "xosproject/tosca-loader:1.3.1",
              "imagePullPolicy": "Always",
              "env": [
                {
                  "name": "XOS_USER",
                  "value": "admin@opencord.org"
                },
                {
                  "name": "XOS_PASSWD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "xos-admin-passwd-secret",
                      "key": "password"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "base-kubernetes-tosca",
                  "mountPath": "/opt/tosca"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "base-kubernetes-tosca",
              "configMap": {
                "name": "base-kubernetes-tosca"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-mcord-subscriber",
      "labels": {
        "app": "mcord-subscriber",
        "chart": "mcord-subscriber-2.0.5",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "app": "mcord-subscriber",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "339f998fac66b2bad920c49dacef9e271f67a0e13f68af9fb614b9b86b118948"
          }
        },
        "spec": {
          "restartPolicy": "Never",
          "containers": [
            {
              "name": "mcord-subscriber",
              "image": "omecproject/mcord-synchronizer:comac-1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "mcord-subscriber-config",
                  "mountPath": "/opt/xos/synchronizers/mcord/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "mcord-subscriber-config",
              "configMap": {
                "name": "mcord-subscriber",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-comac-tosca-loader",
      "labels": {
        "app": "comac",
        "chart": "comac-0.0.7",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "backoffLimit": 12,
      "template": {
        "metadata": {
          "labels": {
            "app": "comac",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "96c702acf045e51374e22155b1d8395f20250149b772cadeb188a57bc68a845e"
          }
        },
        "spec": {
          "restartPolicy": "OnFailure",
          "containers": [
            {
              "name": "comac-tosca-loader",
              "image": "xosproject/tosca-loader:1.3.1",
              "imagePullPolicy": "Always",
              "env": [
                {
                  "name": "XOS_USER",
                  "value": "admin@opencord.org"
                },
                {
                  "name": "XOS_PASSWD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "xos-admin-passwd-secret",
                      "key": "password"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "comac-tosca",
                  "mountPath": "/opt/tosca"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "comac-tosca",
              "configMap": {
                "name": "comac-tosca"
              }
            }
          ]
        }
      }
    }
  }
]