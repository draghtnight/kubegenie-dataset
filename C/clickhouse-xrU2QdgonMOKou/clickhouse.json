[
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "zk-pdb-release-name",
      "namespace": "default"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "zk-release-name"
        }
      },
      "maxUnavailable": 1
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "clickhouse-release-name-configuration",
      "labels": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "clickhouse-0.1.1",
        "app.kubernetes.io/version": "21.1"
      }
    },
    "data": {
      "config.xml": "<?xml version=\"1.0\"?>\n<yandex>\n  <listen_host>0.0.0.0</listen_host>\n  \n\n  <logger>\n    <level>error</level>\n    <log></log>\n    <errorlog></errorlog>\n    <console>1</console>\n  </logger>\n\n  <default_on_cluster_name>cluster</default_on_cluster_name>\n  <!-- <display_name>clickhouse-cluster</display_name> -->\n  <http_port>8123</http_port>\n  <tcp_port>9000</tcp_port>\n  <interserver_http_port>9009</interserver_http_port>\n\n  <mark_cache_size>5368709120</mark_cache_size>\n\n  <compression incl=\"clickhouse_compression\">\n    <case>\n      <method>lz4</method>\n    </case>\n  </compression>\n\n  <distributed_ddl>\n    <path>/clickhouse/clickhouse-release-name/task_queue/ddl</path>\n  </distributed_ddl>\n\n  <remote_servers>\n    <cluster>\n      <shard>\n        <weight>1</weight>\n        <replica>\n              <host>clickhouse-release-name-s0-r0-0.clickhouse-release-name.default.svc.cluster.local</host>\n              <port>9000</port>\n              <user>default</user>\n              <password>C1ickh0use</password>\n        </replica>\n        <replica>\n              <host>clickhouse-release-name-s0-r1-0.clickhouse-release-name.default.svc.cluster.local</host>\n              <port>9000</port>\n              <user>default</user>\n              <password>C1ickh0use</password>\n        </replica>\n      </shard>\n    </cluster>\n    <logical_consistency_cluster>\n      <shard>\n        <weight>1</weight>\n        <replica>\n              <host>clickhouse-release-name-s0-r0-0.clickhouse-release-name.default.svc.cluster.local</host>\n              <port>9000</port>\n              <user>default</user>\n              <password>C1ickh0use</password>\n        </replica>\n        <replica>\n              <host>clickhouse-release-name-s0-r1-0.clickhouse-release-name.default.svc.cluster.local</host>\n              <port>9000</port>\n              <user>default</user>\n              <password>C1ickh0use</password>\n        </replica>\n      </shard>\n    </logical_consistency_cluster>\n    <physical_consistency_cluster>\n      <shard>\n        <internal_replication>true</internal_replication>\n        <replica>\n              <host>clickhouse-release-name-s0-r0-0.clickhouse-release-name.default.svc.cluster.local</host>\n              <port>9000</port>\n              <user>default</user>\n              <password>C1ickh0use</password>\n        </replica>\n        <replica>\n              <host>clickhouse-release-name-s0-r1-0.clickhouse-release-name.default.svc.cluster.local</host>\n              <port>9000</port>\n              <user>default</user>\n              <password>C1ickh0use</password>\n        </replica>\n      </shard>\n    </physical_consistency_cluster>\n  </remote_servers>\n\n  <profiles>\n    <default>\n\n    </default>\n  </profiles>\n\n  <users>\n      <default>\n        <password_sha256_hex>9109b4cc5bfc78a316090a3caf04bd0e4b722fecc0f8641b0b0a6b854b3f8d44</password_sha256_hex>\n        <networks>\n          <ip>0.0.0.0/0</ip>\n          \n        </networks>\n        <profile>default</profile>\n        <quota>default</quota>\n      </default>\n  </users>\n\n  <quotas>\n    <default>\n      <interval>\n        <duration>3600</duration>\n        <queries>0</queries>\n        <errors>0</errors>\n        <result_rows>0</result_rows>\n        <read_rows>0</read_rows>\n        <execution_time>0</execution_time>\n      </interval>\n    </default>\n  </quotas>\n\n  <zookeeper>\n    <node>\n      <host>zk-server-release-name</host>\n      <port>2181</port>\n    </node>\n  </zookeeper>\n</yandex>\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "clickhouse-release-name-s0-r0-configuration",
      "labels": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "clickhouse-0.1.1",
        "app.kubernetes.io/version": "21.1"
      }
    },
    "data": {
      "macros.xml": "<yandex>\n  <macros>\n    <shard>clickhouse-release-names0</shard>\n    <replica>r0</replica>\n  </macros>\n</yandex>\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "clickhouse-release-name-s0-r1-configuration",
      "labels": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "clickhouse-0.1.1",
        "app.kubernetes.io/version": "21.1"
      }
    },
    "data": {
      "macros.xml": "<yandex>\n  <macros>\n    <shard>clickhouse-release-names0</shard>\n    <replica>r1</replica>\n  </macros>\n</yandex>\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "clickhouse-release-name-s0-r0",
      "labels": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "clickhouse-0.1.1",
        "app.kubernetes.io/version": "21.1",
        "clickhouse/component": "clickhouse"
      }
    },
    "spec": {
      "selector": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "clickhouse/shard-index": "0",
        "clickhouse/replica-index": "0",
        "clickhouse/component": "clickhouse"
      },
      "ports": [
        {
          "name": "native",
          "protocol": "TCP",
          "port": 9000
        },
        {
          "name": "http",
          "protocol": "TCP",
          "port": 8123
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "clickhouse-release-name-s0-r1",
      "labels": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "clickhouse-0.1.1",
        "app.kubernetes.io/version": "21.1",
        "clickhouse/component": "clickhouse"
      }
    },
    "spec": {
      "selector": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "clickhouse/shard-index": "0",
        "clickhouse/replica-index": "1",
        "clickhouse/component": "clickhouse"
      },
      "ports": [
        {
          "name": "native",
          "protocol": "TCP",
          "port": 9000
        },
        {
          "name": "http",
          "protocol": "TCP",
          "port": 8123
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "clickhouse-release-name",
      "labels": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "clickhouse-0.1.1",
        "app.kubernetes.io/version": "21.1"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "clickhouse/component": "clickhouse"
      },
      "ports": [
        {
          "name": "native",
          "protocol": "TCP",
          "port": 9000
        },
        {
          "name": "http",
          "protocol": "TCP",
          "port": 8123
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "zk-client-release-name",
      "namespace": "xrU2QdgonMOKou",
      "labels": {
        "app": "zk-release-name"
      }
    },
    "spec": {
      "ports": [
        {
          "port": 2181,
          "name": "client"
        }
      ],
      "selector": {
        "app": "zk-release-name",
        "what": "node"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "zk-server-release-name",
      "namespace": "xrU2QdgonMOKou",
      "labels": {
        "app": "zk-release-name"
      }
    },
    "spec": {
      "ports": [
        {
          "port": 2888,
          "name": "server"
        },
        {
          "port": 3888,
          "name": "leader-election"
        }
      ],
      "clusterIP": "None",
      "selector": {
        "app": "zk-release-name",
        "what": "node"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "clickhouse-release-name-s0-r0",
      "labels": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "clickhouse-0.1.1",
        "app.kubernetes.io/version": "21.1"
      }
    },
    "spec": {
      "replicas": 1,
      "serviceName": "clickhouse-release-name",
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "clickhouse",
          "app.kubernetes.io/instance": "release-name",
          "clickhouse/component": "clickhouse",
          "clickhouse/shard-index": "0",
          "clickhouse/replica-index": "0"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "clickhouse",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "helm.sh/chart": "clickhouse-0.1.1",
            "app.kubernetes.io/version": "21.1",
            "clickhouse/component": "clickhouse",
            "clickhouse/shard-index": "0",
            "clickhouse/replica-index": "0"
          },
          "annotations": {
            "clickhouse/config-checksum": "9c91d006ba9fe562e2f18ab3f4d54b4441315168c31ebc02cfdf4863beb97b07"
          }
        },
        "spec": {
          "hostname": "clickhouse-release-name-s0-r0",
          "containers": [
            {
              "name": "clickhouse",
              "image": "radondb/clickhouse-server:v21.1.3.32-stable",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-c",
                    "OK=$(/usr/bin/clickhouse client --user=default --password=C1ickh0use --port=9000 --query='SELECT 1'); if [[ \"$OK\" == \"1\" ]]; then exit 0; else exit 1; fi"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 30,
                "timeoutSeconds": 5,
                "failureThreshold": 3,
                "successThreshold": 1
              },
              "resources": {
                "requests": {
                  "memory": "1Gi",
                  "cpu": 0.5
                },
                "limits": {
                  "memory": "1Gi",
                  "cpu": 0.5
                }
              },
              "ports": [
                {
                  "containerPort": 9000
                },
                {
                  "containerPort": 8123
                }
              ],
              "volumeMounts": [
                {
                  "name": "common-configuration",
                  "subPath": "config.xml",
                  "mountPath": "/etc/clickhouse-server/config.xml"
                },
                {
                  "name": "instance-configuration",
                  "subPath": "macros.xml",
                  "mountPath": "/etc/clickhouse-server/config.d/macros.xml"
                },
                {
                  "name": "ck-datadir",
                  "mountPath": "/var/lib/clickhouse"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "common-configuration",
              "configMap": {
                "name": "clickhouse-release-name-configuration"
              }
            },
            {
              "name": "instance-configuration",
              "configMap": {
                "name": "clickhouse-release-name-s0-r0-configuration"
              }
            }
          ],
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "clickhouse",
                        "app.kubernetes.io/instance": "release-name",
                        "clickhouse/component": "clickhouse",
                        "clickhouse/shard-index": "0"
                      }
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 20
                },
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "clickhouse",
                        "app.kubernetes.io/instance": "release-name",
                        "clickhouse/component": "clickhouse",
                        "clickhouse/replica-index": "0"
                      }
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 10
                },
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "clickhouse",
                        "app.kubernetes.io/instance": "release-name",
                        "clickhouse/component": "clickhouse"
                      }
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 5
                }
              ]
            }
          },
          "securityContext": {
            "runAsUser": 101,
            "fsGroup": 101
          }
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "ck-datadir"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "clickhouse-release-name-s0-r1",
      "labels": {
        "app.kubernetes.io/name": "clickhouse",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "clickhouse-0.1.1",
        "app.kubernetes.io/version": "21.1"
      }
    },
    "spec": {
      "replicas": 1,
      "serviceName": "clickhouse-release-name",
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "clickhouse",
          "app.kubernetes.io/instance": "release-name",
          "clickhouse/component": "clickhouse",
          "clickhouse/shard-index": "0",
          "clickhouse/replica-index": "1"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "clickhouse",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "helm.sh/chart": "clickhouse-0.1.1",
            "app.kubernetes.io/version": "21.1",
            "clickhouse/component": "clickhouse",
            "clickhouse/shard-index": "0",
            "clickhouse/replica-index": "1"
          },
          "annotations": {
            "clickhouse/config-checksum": "9c91d006ba9fe562e2f18ab3f4d54b4441315168c31ebc02cfdf4863beb97b07"
          }
        },
        "spec": {
          "hostname": "clickhouse-release-name-s0-r1",
          "containers": [
            {
              "name": "clickhouse",
              "image": "radondb/clickhouse-server:v21.1.3.32-stable",
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-c",
                    "OK=$(/usr/bin/clickhouse client --user=default --password=C1ickh0use --port=9000 --query='SELECT 1'); if [[ \"$OK\" == \"1\" ]]; then exit 0; else exit 1; fi"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 30,
                "timeoutSeconds": 5,
                "failureThreshold": 3,
                "successThreshold": 1
              },
              "resources": {
                "requests": {
                  "memory": "1Gi",
                  "cpu": 0.5
                },
                "limits": {
                  "memory": "1Gi",
                  "cpu": 0.5
                }
              },
              "ports": [
                {
                  "containerPort": 9000
                },
                {
                  "containerPort": 8123
                }
              ],
              "volumeMounts": [
                {
                  "name": "common-configuration",
                  "subPath": "config.xml",
                  "mountPath": "/etc/clickhouse-server/config.xml"
                },
                {
                  "name": "instance-configuration",
                  "subPath": "macros.xml",
                  "mountPath": "/etc/clickhouse-server/config.d/macros.xml"
                },
                {
                  "name": "ck-datadir",
                  "mountPath": "/var/lib/clickhouse"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "common-configuration",
              "configMap": {
                "name": "clickhouse-release-name-configuration"
              }
            },
            {
              "name": "instance-configuration",
              "configMap": {
                "name": "clickhouse-release-name-s0-r1-configuration"
              }
            }
          ],
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "clickhouse",
                        "app.kubernetes.io/instance": "release-name",
                        "clickhouse/component": "clickhouse",
                        "clickhouse/shard-index": "0"
                      }
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 20
                },
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "clickhouse",
                        "app.kubernetes.io/instance": "release-name",
                        "clickhouse/component": "clickhouse",
                        "clickhouse/replica-index": "1"
                      }
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 10
                },
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "clickhouse",
                        "app.kubernetes.io/instance": "release-name",
                        "clickhouse/component": "clickhouse"
                      }
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 5
                }
              ]
            }
          },
          "securityContext": {
            "runAsUser": 101,
            "fsGroup": 101
          }
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "ck-datadir"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "zk-release-name",
      "namespace": "xrU2QdgonMOKou"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "zk-release-name"
        }
      },
      "serviceName": "zk-server-release-name",
      "replicas": 3,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "podManagementPolicy": "Parallel",
      "template": {
        "metadata": {
          "labels": {
            "app": "zk-release-name",
            "what": "node"
          }
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": [
                            "zk-release-name"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  }
                }
              ]
            }
          },
          "containers": [
            {
              "name": "zookeeper",
              "imagePullPolicy": "IfNotPresent",
              "image": "radondb/zookeeper:3.6.2",
              "resources": {
                "requests": {
                  "memory": "1Gi",
                  "cpu": 0.5
                },
                "limits": {
                  "memory": "1Gi",
                  "cpu": 0.5
                }
              },
              "ports": [
                {
                  "containerPort": 2181,
                  "name": "client"
                },
                {
                  "containerPort": 2888,
                  "name": "server"
                },
                {
                  "containerPort": 3888,
                  "name": "leader-election"
                }
              ],
              "command": [
                "bash",
                "-x",
                "-c",
                "SERVERS=3 &&\nHOST=`hostname -s` &&\nDOMAIN=`hostname -d` &&\nCLIENT_PORT=2181 &&\nSERVER_PORT=2888 &&\nELECTION_PORT=3888 &&\nZOO_CONF_DIR=/conf &&\nZOO_DATA_DIR=/var/lib/zookeeper/data &&\nZOO_DATA_LOG_DIR=/var/lib/zookeeper/data_log &&\n{\n  echo \"clientPort=${CLIENT_PORT}\"\n  echo 'tickTime=2000'\n  echo 'initLimit=30000'\n  echo 'syncLimit=10'\n  echo 'maxClientCnxns=2000'\n  echo 'maxSessionTimeout=60000000'\n  echo \"dataDir=${ZOO_DATA_DIR}\"\n  echo \"dataLogDir=${ZOO_DATA_LOG_DIR}\"\n  echo 'autopurge.snapRetainCount=10'\n  echo 'autopurge.purgeInterval=1'\n  echo 'preAllocSize=131072'\n  echo 'snapCount=3000000'\n  echo 'leaderServes=yes'\n  echo 'standaloneEnabled=true'\n  echo '4lw.commands.whitelist=stat, ruok, conf, isro'\n} > /conf/zoo.cfg &&\n{\n  echo \"zookeeper.root.logger=CONSOLE\"\n  echo \"zookeeper.console.threshold=INFO\"\n  echo \"log4j.rootLogger=\\${zookeeper.root.logger}\"\n  echo \"log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\"\n  echo \"log4j.appender.CONSOLE.Threshold=\\${zookeeper.console.threshold}\"\n  echo \"log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\"\n  echo \"log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n\"\n} > /conf/log4j.properties &&\necho 'JVMFLAGS=\"-Xms128M -Xmx1G -XX:+CMSParallelRemarkEnabled\"' > /conf/java.env &&\nif [[ $HOST =~ (.*)-([0-9]+)$ ]]; then\n    NAME=${BASH_REMATCH[1]}\n    ORD=${BASH_REMATCH[2]}\nelse\n    echo \"Fialed to parse name and ordinal of Pod\"\n    exit 1\nfi &&\nmkdir -p ${ZOO_DATA_DIR} &&\nmkdir -p ${ZOO_DATA_LOG_DIR} &&\nexport MY_ID=$((ORD+1)) &&\necho $MY_ID > $ZOO_DATA_DIR/myid &&\nif [[ $SERVERS -gt 1 ]]; then\n  for (( i=1; i<=$SERVERS; i++ )); do\n      echo \"server.$i=$NAME-$((i-1)).$DOMAIN:$SERVER_PORT:$ELECTION_PORT\" >> /conf/zoo.cfg;\n  done\nfi &&\nchown -Rv zookeeper \"$ZOO_DATA_DIR\" \"$ZOO_DATA_LOG_DIR\" \"$ZOO_LOG_DIR\" \"$ZOO_CONF_DIR\" &&\nzkServer.sh start-foreground\n"
              ],
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-c",
                    "OK=$(echo ruok | nc 127.0.0.1 2181); if [[ \"$OK\" == \"imok\" ]]; then exit 0; else exit 1; fi"
                  ]
                },
                "initialDelaySeconds": 10,
                "timeoutSeconds": 5
              },
              "livenessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-c",
                    "OK=$(echo ruok | nc 127.0.0.1 2181); if [[ \"$OK\" == \"imok\" ]]; then exit 0; else exit 1; fi"
                  ]
                },
                "initialDelaySeconds": 10,
                "timeoutSeconds": 5
              },
              "volumeMounts": [
                {
                  "name": "datadir-volume",
                  "mountPath": "/var/lib/zookeeper"
                }
              ]
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "datadir-volume"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        }
      ]
    }
  },
  null,
  null
]