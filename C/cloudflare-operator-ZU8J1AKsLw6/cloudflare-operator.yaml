apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-cloudflare-operator
  namespace: ZU8J1AKsLw6
  labels:
    helm.sh/chart: cloudflare-operator-0.2.4
    app.kubernetes.io/name: cloudflare-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v0.2.4
    app.kubernetes.io/managed-by: Helm
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: release-name-cloudflare-operator
rules:
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - accounts
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - accounts/finalizers
    verbs:
      - update
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - accounts/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - dnsrecords
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - dnsrecords/finalizers
    verbs:
      - update
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - dnsrecords/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - ips
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - ips/finalizers
    verbs:
      - update
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - ips/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - zones
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - zones/finalizers
    verbs:
      - update
  - apiGroups:
      - cf.containeroo.ch
    resources:
      - zones/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-cloudflare-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-cloudflare-operator
subjects:
  - kind: ServiceAccount
    name: release-name-cloudflare-operator
    namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-cloudflare-operator
  namespace: ZU8J1AKsLw6
  labels:
    helm.sh/chart: cloudflare-operator-0.2.4
    app.kubernetes.io/name: cloudflare-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v0.2.4
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cloudflare-operator
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cloudflare-operator
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-cloudflare-operator
      securityContext: {}
      containers:
        - name: cloudflare-operator
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          image: ghcr.io/containeroo/cloudflare-operator:v0.2.4
          imagePullPolicy: IfNotPresent
          ports:
            - name: metrics
              containerPort: 8080
              protocol: TCP
            - name: probes
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: probes
          readinessProbe:
            httpGet:
              path: /healthz
              port: probes
          resources:
            limits:
              cpu: 100m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 200Mi
