[
  {
    "kind": "NetworkPolicy",
    "apiVersion": "networking.k8s.io/v1",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.0.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "podSelector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "ingress": [
        {
          "ports": [
            {
              "port": 5432
            }
          ]
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.0.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "postgresql-postgres-password": "YjJTUm1PYVdGSA==",
      "postgresql-password": "Y2xhaXI="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-clair",
      "labels": {
        "app.kubernetes.io/name": "clair",
        "helm.sh/chart": "clair-0.2.9",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "config.yaml": "clair:\n  database:\n    # Database driver\n    type: pgsql\n    options:\n      # PostgreSQL Connection string\n      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING\n      # This should be done using secrets or Vault, but for now this will also work\n      source: \"postgres://postgres:clair@release-name-postgresql:5432/postgres?sslmode=disable\"\n      \n\n      # Number of elements kept in the cache\n      # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.\n      cachesize: 16384\n\n      # 32-bit URL-safe base64 key used to encrypt pagination tokens\n      # If one is not provided, it will be generated.\n      # Multiple clair instances in the same cluster need the same value.\n      paginationkey: \"\"\n  api:\n    # v3 grpc/RESTful API server address\n    addr: \"0.0.0.0:6060\"\n\n    # Health server address\n    # This is an unencrypted endpoint useful for load balancers to check to healthiness of the clair server.\n    healthaddr: \"0.0.0.0:6061\"\n\n    # Deadline before an API request will respond with a 503\n    timeout: 900s\n\n    # Optional PKI configuration\n    # If you want to easily generate client certificates and CAs, try the following projects:\n    # https://github.com/coreos/etcd-ca\n    # https://github.com/cloudflare/cfssl\n    servername:\n    cafile:\n    keyfile:\n    certfile:\n\n  worker:\n    namespace_detectors:\n    - os-release\n    - lsb-release\n    - apt-sources\n    - alpine-release\n    - redhat-release\n\n    feature_listers:\n    - apk\n    - dpkg\n    - rpm\n\n  updater:\n    # Frequency the database will be updated with vulnerabilities from the default data sources\n    # The value 0 disables the updater entirely.\n    interval: \"2h\"\n    enabledupdaters:\n    - debian\n    - ubuntu\n    - rhel\n    - oracle\n    - alpine\n\n  notifier:\n    # Number of attempts before the notification is marked as failed to be sent\n    attempts: 3\n\n    # Duration before a failed notification is retried\n    renotifyinterval: 2h\n\n    http:\n      # Optional endpoint that will receive notifications via POST requests\n      endpoint: \"\"\n\n      # Optional PKI configuration\n      # If you want to easily generate client certificates and CAs, try the following projects:\n      # https://github.com/cloudflare/cfssl\n      # https://github.com/coreos/etcd-ca\n      servername:\n      cafile:\n      keyfile:\n      certfile:\n\n      # Optional HTTP Proxy: must be a valid URL (including the scheme).\n      proxy:\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.0.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.0.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "role": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-clair",
      "labels": {
        "app.kubernetes.io/name": "clair",
        "helm.sh/chart": "clair-0.2.9",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "clair-api",
          "port": 6060,
          "targetPort": 6060,
          "protocol": "TCP"
        },
        {
          "name": "clair-health",
          "port": 6061,
          "targetPort": 6061,
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "clair",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-clair",
      "labels": {
        "app.kubernetes.io/name": "clair",
        "helm.sh/chart": "clair-0.2.9",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "clair",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "clair",
            "helm.sh/chart": "clair-0.2.9",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm"
          }
        },
        "spec": {
          "volumes": [
            {
              "name": "clair-config",
              "configMap": {
                "name": "release-name-clair"
              }
            }
          ],
          "containers": [
            {
              "name": "clair",
              "image": "quay.io/coreos/clair:v2.1.6",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "-log-level=debug"
              ],
              "ports": [
                {
                  "name": "clair-api",
                  "containerPort": 6060,
                  "protocol": "TCP"
                },
                {
                  "name": "clair-health",
                  "containerPort": 6061,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/health",
                  "port": 6061
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/health",
                  "port": 6061
                }
              },
              "volumeMounts": [
                {
                  "name": "clair-config",
                  "mountPath": "/etc/clair"
                }
              ],
              "resources": {
                "limits": {
                  "cpu": 2,
                  "memory": "3000Mi"
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "2000Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.0.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "role": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-10.0.0",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "role": "primary"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/bitnami/postgresql:11.10.0-debian-10-r2",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "limits": {
                  "cpu": 2,
                  "memory": "512Mi"
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "512Mi"
                }
              },
              "securityContext": {
                "runAsUser": 10138,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "true"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "postgres"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql",
                  "subPath": null
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory",
                "sizeLimit": "1Gi"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        }
      ]
    }
  }
]