apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: release-name-cassandra
  labels:
    helm.sh/chart: cassandra-0.1.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.11.9
spec:
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  privileged: false
  readOnlyRootFilesystem: false
  runAsGroup:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - max: 65535
        min: 1000
    rule: MustRunAs
  fsGroup:
    rule: RunAsAny
  volumes:
    - secret
    - configMap
    - emptyDir
    - projected
    - downwardAPI
    - hostPath
    - persistentVolumeClaim
  rule: MustRunAsNonRoot
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: cassandra-0.1.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.11.9
  name: release-name-cassandra
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-cassandra
  labels:
    helm.sh/chart: cassandra-0.1.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.11.9
type: Opaque
stringData:
  SENTRY_DSN: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-cassandra
  labels:
    helm.sh/chart: cassandra-0.1.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.11.9
data:
  cassandra-rackdc.properties: |
    dc=dc1
    rack=rack1
  jvm.options: |
    -ea
    -XX:+UseThreadPriorities
    -XX:ThreadPriorityPolicy=42
    -XX:+HeapDumpOnOutOfMemoryError
    -Xss256k
    -XX:StringTableSize=1000003
    -XX:+AlwaysPreTouch
    -XX:-UseBiasedLocking
    -XX:+UseTLAB
    -XX:+ResizeTLAB
    -XX:+UseNUMA
    -XX:+PerfDisableSharedMem
    -Djava.net.preferIPv4Stack=true
    -XX:+UseParNewGC
    -XX:+UseConcMarkSweepGC
    -XX:+CMSParallelRemarkEnabled
    -XX:SurvivorRatio=8
    -XX:MaxTenuringThreshold=1
    -XX:CMSInitiatingOccupancyFraction=75
    -XX:+UseCMSInitiatingOccupancyOnly
    -XX:CMSWaitDuration=10000
    -XX:+CMSParallelInitialMarkEnabled
    -XX:+CMSEdenChunksRecordAlways
    -XX:+CMSClassUnloadingEnabled
    -XX:+PrintGCDetails
    -XX:+PrintGCDateStamps
    -XX:+PrintHeapAtGC
    -XX:+PrintTenuringDistribution
    -XX:+PrintGCApplicationStoppedTime
    -XX:+PrintPromotionFailure
    -XX:+UseGCLogFileRotation
    -XX:NumberOfGCLogFiles=10
    -XX:GCLogFileSize=10M
  cassandra.yaml: |
    # Cassandra storage config YAML
    cluster_name: 'Cassandra Cluster'
    num_tokens: 256
    # allocate_tokens_for_keyspace: KEYSPACE
    # initial_token:
    hinted_handoff_enabled: true
    # hinted_handoff_disabled_datacenters:
    #    - DC1
    #    - DC2

    max_hint_window_in_ms: 10800000 # 3 hours
    hinted_handoff_throttle_in_kb: 1024
    max_hints_delivery_threads: 2
    hints_directory: /var/lib/cassandra/hints
    hints_flush_period_in_ms: 10000
    max_hints_file_size_in_mb: 128
    # hints_compression:
    #   - class_name: LZ4Compressor
    #     parameters:
    #         -

    batchlog_replay_throttle_in_kb: 1024

    # Authentication backend, implementing IAuthenticator; used to identify users
    # Out of the box, Cassandra provides org.apache.cassandra.auth.{AllowAllAuthenticator,
    # PasswordAuthenticator}.
    #
    # - AllowAllAuthenticator performs no checks - set it to disable authentication.
    # - PasswordAuthenticator relies on username/password pairs to authenticate
    #   users. It keeps usernames and hashed passwords in system_auth.roles table.
    #   Please increase system_auth keyspace replication factor if you use this authenticator.
    #   If using PasswordAuthenticator, CassandraRoleManager must also be used (see below)
    authenticator: AllowAllAuthenticator

    # Authorization backend, implementing IAuthorizer; used to limit access/provide permissions
    # Out of the box, Cassandra provides org.apache.cassandra.auth.{AllowAllAuthorizer,
    # CassandraAuthorizer}.
    #
    # - AllowAllAuthorizer allows any action to any user - set it to disable authorization.
    # - CassandraAuthorizer stores permissions in system_auth.role_permissions table. Please
    #   increase system_auth keyspace replication factor if you use this authorizer.
    authorizer: AllowAllAuthorizer

    # Part of the Authentication & Authorization backend, implementing IRoleManager; used
    # to maintain grants and memberships between roles.
    # Out of the box, Cassandra provides org.apache.cassandra.auth.CassandraRoleManager,
    # which stores role information in the system_auth keyspace. Most functions of the
    # IRoleManager require an authenticated login, so unless the configured IAuthenticator
    # actually implements authentication, most of this functionality will be unavailable.
    #
    # - CassandraRoleManager stores role data in the system_auth keyspace. Please
    #   increase system_auth keyspace replication factor if you use this role manager.
    role_manager: CassandraRoleManager
    roles_validity_in_ms: 2000
    # roles_update_interval_in_ms: 2000
    permissions_validity_in_ms: 2000
    # permissions_update_interval_in_ms: 2000
    credentials_validity_in_ms: 2000
    # credentials_update_interval_in_ms: 2000
    partitioner: org.apache.cassandra.dht.Murmur3Partitioner
    data_file_directories:
      - /var/lib/cassandra/data

    commitlog_directory: /var/lib/cassandra/commitlog
    cdc_enabled: false
    cdc_raw_directory: /var/lib/cassandra/cdc_raw
    disk_failure_policy: stop
    commit_failure_policy: stop
    prepared_statements_cache_size_mb:
    thrift_prepared_statements_cache_size_mb:
    key_cache_size_in_mb:
    key_cache_save_period: 14400
    # key_cache_keys_to_save: 100
    # row_cache_class_name: org.apache.cassandra.cache.OHCProvider
    row_cache_size_in_mb: 0
    row_cache_save_period: 0
    # row_cache_keys_to_save: 100
    counter_cache_size_in_mb:
    counter_cache_save_period: 7200
    # counter_cache_keys_to_save: 100
    saved_caches_directory: /var/lib/cassandra/saved_caches
    commitlog_sync: periodic
    commitlog_sync_period_in_ms: 10000
    commitlog_segment_size_in_mb: 32
    # commitlog_compression:
    #   - class_name: LZ4Compressor
    #     parameters:
    #         -

    seed_provider:
      - class_name: org.apache.cassandra.locator.SimpleSeedProvider
        parameters:
          - seeds: "release-name-cassandra-0.release-name-cassandra-headless.default.svc.cluster.local"

    concurrent_reads: 32
    concurrent_writes: 32
    concurrent_counter_writes: 32
    concurrent_materialized_view_writes: 32
    # file_cache_size_in_mb: 512
    # buffer_pool_use_heap_if_exhausted: true
    # disk_optimization_strategy: ssd
    # memtable_heap_space_in_mb: 2048
    # memtable_offheap_space_in_mb: 2048
    # memtable_cleanup_threshold: 0.11
    memtable_allocation_type: heap_buffers
    # repair_session_max_tree_depth: 18
    # commitlog_total_space_in_mb: 8192
    # memtable_flush_writers: 2
    # cdc_total_space_in_mb: 4096
    # cdc_free_space_check_interval_ms: 250
    index_summary_capacity_in_mb:
    index_summary_resize_interval_in_minutes: 60
    trickle_fsync: false
    trickle_fsync_interval_in_kb: 10240
    storage_port: 7000
    ssl_storage_port: 7001
    listen_address: POD_IP
    broadcast_address: POD_IP
    internode_authenticator: org.apache.cassandra.auth.AllowAllInternodeAuthenticator
    start_native_transport: true
    native_transport_port: 9042
    # native_transport_max_threads: 128
    # native_transport_max_frame_size_in_mb: 256
    # native_transport_max_concurrent_connections: -1
    # native_transport_max_concurrent_connections_per_ip: -1
    start_rpc: true
    rpc_address: 0.0.0.0
    rpc_port: 9160
    broadcast_rpc_address: POD_IP
    rpc_keepalive: true
    rpc_server_type: sync
    # rpc_min_threads: 16
    # rpc_max_threads: 2048
    # rpc_send_buff_size_in_bytes:
    # rpc_recv_buff_size_in_bytes:
    # internode_send_buff_size_in_bytes:
    # internode_recv_buff_size_in_bytes:
    thrift_framed_transport_size_in_mb: 15
    incremental_backups: false
    snapshot_before_compaction: false
    auto_snapshot: true
    column_index_size_in_kb: 64
    column_index_cache_size_in_kb: 2
    # concurrent_compactors: 1
    compaction_throughput_mb_per_sec: 16
    sstable_preemptive_open_interval_in_mb: 50
    # stream_throughput_outbound_megabits_per_sec: 200
    # inter_dc_stream_throughput_outbound_megabits_per_sec: 200
    read_request_timeout_in_ms: 5000
    range_request_timeout_in_ms: 10000
    write_request_timeout_in_ms: 2000
    counter_write_request_timeout_in_ms: 5000
    cas_contention_timeout_in_ms: 1000
    truncate_request_timeout_in_ms: 60000
    request_timeout_in_ms: 10000
    slow_query_log_timeout_in_ms: 500
    cross_node_timeout: false
    # streaming_keep_alive_period_in_secs: 300
    # phi_convict_threshold: 8
    endpoint_snitch: SimpleSnitch
    dynamic_snitch_update_interval_in_ms: 100
    dynamic_snitch_reset_interval_in_ms: 600000
    dynamic_snitch_badness_threshold: 0.1
    request_scheduler: org.apache.cassandra.scheduler.NoScheduler

    # Scheduler Options vary based on the type of scheduler
    #
    # NoScheduler
    #   Has no options
    #
    # RoundRobin
    #   throttle_limit
    #     The throttle_limit is the number of in-flight
    #     requests per client.  Requests beyond
    #     that limit are queued up until
    #     running requests can complete.
    #     The value of 80 here is twice the number of
    #     concurrent_reads + concurrent_writes.
    #   default_weight
    #     default_weight is optional and allows for
    #     overriding the default which is 1.
    #   weights
    #     Weights are optional and will default to 1 or the
    #     overridden default_weight. The weight translates into how
    #     many requests are handled during each turn of the
    #     RoundRobin, based on the scheduler id.
    #
    # request_scheduler_options:
    #    throttle_limit: 80
    #    default_weight: 5
    #    weights:
    #      Keyspace1: 1
    #      Keyspace2: 5

    # request_scheduler_id: keyspace
    server_encryption_options:
        internode_encryption: none
        keystore: conf/.keystore
        keystore_password: cassandra
        truststore: conf/.truststore
        truststore_password: cassandra
        # More advanced defaults below:
        # protocol: TLS
        # algorithm: SunX509
        # store_type: JKS
        # cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]
        # require_client_auth: false
        # require_endpoint_verification: false

    client_encryption_options:
        enabled: false
        optional: false
        keystore: conf/.keystore
        keystore_password: cassandra
        # require_client_auth: false
        # Set trustore and truststore_password if require_client_auth is true
        # truststore: conf/.truststore
        # truststore_password: cassandra
        # More advanced defaults below:
        # protocol: TLS
        # algorithm: SunX509
        # store_type: JKS
        # cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]

    internode_compression: dc
    inter_dc_tcp_nodelay: false
    tracetype_query_ttl: 86400
    tracetype_repair_ttl: 604800
    # gc_log_threshold_in_ms: 200
    enable_user_defined_functions: false
    enable_scripted_user_defined_functions: false
    windows_timer_interval: 1
    transparent_data_encryption_options:
        enabled: false
        chunk_length_kb: 64
        cipher: AES/CBC/PKCS5Padding
        key_alias: testing:1
        # CBC IV length for AES needs to be 16 bytes (which is also the default size)
        # iv_length: 16
        key_provider:
          - class_name: org.apache.cassandra.security.JKSKeyProvider
            parameters:
              - keystore: conf/.keystore
                keystore_password: cassandra
                store_type: JCEKS
                key_password: cassandra

    tombstone_warn_threshold: 1000
    tombstone_failure_threshold: 100000
    replica_filtering_protection:
        cached_rows_warn_threshold: 2000
        cached_rows_fail_threshold: 32000

    batch_size_warn_threshold_in_kb: 5
    batch_size_fail_threshold_in_kb: 50
    unlogged_batch_across_partitions_warn_threshold: 10
    compaction_large_partition_warning_threshold_mb: 100
    gc_warn_threshold_in_ms: 1000
    # max_value_size_in_mb: 256
    back_pressure_enabled: false
    back_pressure_strategy:
        - class_name: org.apache.cassandra.net.RateBasedBackPressure
          parameters:
            - high_ratio: 0.90
              factor: 5
              flow: FAST

    # otc_coalescing_strategy: DISABLED
    # otc_coalescing_window_us: 200
    # otc_coalescing_enough_coalesced_messages: 8
    # otc_backlog_expiration_interval_ms: 200
    enable_materialized_views: false
    enable_sasi_indexes: false
  cassandra-env.sh: "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncalculate_heap_sizes()\n{\n    case \"`uname`\" in\n        Linux)\n            system_memory_in_mb=`free -m | awk '/:/ {print $2;exit}'`\n            system_cpu_cores=`egrep -c 'processor([[:space:]]+):.*' /proc/cpuinfo`\n        ;;\n        FreeBSD)\n            system_memory_in_bytes=`sysctl hw.physmem | awk '{print $2}'`\n            system_memory_in_mb=`expr $system_memory_in_bytes / 1024 / 1024`\n            system_cpu_cores=`sysctl hw.ncpu | awk '{print $2}'`\n        ;;\n        SunOS)\n            system_memory_in_mb=`prtconf | awk '/Memory size:/ {print $3}'`\n            system_cpu_cores=`psrinfo | wc -l`\n        ;;\n        Darwin)\n            system_memory_in_bytes=`sysctl hw.memsize | awk '{print $2}'`\n            system_memory_in_mb=`expr $system_memory_in_bytes / 1024 / 1024`\n            system_cpu_cores=`sysctl hw.ncpu | awk '{print $2}'`\n        ;;\n        *)\n            # assume reasonable defaults for e.g. a modern desktop or\n            # cheap server\n            system_memory_in_mb=\"2048\"\n            system_cpu_cores=\"2\"\n        ;;\n    esac\n\n    # some systems like the raspberry pi don't report cores, use at least 1\n    if [ \"$system_cpu_cores\" -lt \"1\" ]\n    then\n        system_cpu_cores=\"1\"\n    fi\n\n    # set max heap size based on the following\n    # max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB))\n    # calculate 1/2 ram and cap to 1024MB\n    # calculate 1/4 ram and cap to 8192MB\n    # pick the max\n    half_system_memory_in_mb=`expr $system_memory_in_mb / 2`\n    quarter_system_memory_in_mb=`expr $half_system_memory_in_mb / 2`\n    if [ \"$half_system_memory_in_mb\" -gt \"1024\" ]\n    then\n        half_system_memory_in_mb=\"1024\"\n    fi\n    if [ \"$quarter_system_memory_in_mb\" -gt \"8192\" ]\n    then\n        quarter_system_memory_in_mb=\"8192\"\n    fi\n    if [ \"$half_system_memory_in_mb\" -gt \"$quarter_system_memory_in_mb\" ]\n    then\n        max_heap_size_in_mb=\"$half_system_memory_in_mb\"\n    else\n        max_heap_size_in_mb=\"$quarter_system_memory_in_mb\"\n    fi\n    MAX_HEAP_SIZE=\"${max_heap_size_in_mb}M\"\n\n    # Young gen: min(max_sensible_per_modern_cpu_core * num_cores, 1/4 * heap size)\n    max_sensible_yg_per_core_in_mb=\"100\"\n    max_sensible_yg_in_mb=`expr $max_sensible_yg_per_core_in_mb \"*\" $system_cpu_cores`\n\n    desired_yg_in_mb=`expr $max_heap_size_in_mb / 4`\n\n    if [ \"$desired_yg_in_mb\" -gt \"$max_sensible_yg_in_mb\" ]\n    then\n        HEAP_NEWSIZE=\"${max_sensible_yg_in_mb}M\"\n    else\n        HEAP_NEWSIZE=\"${desired_yg_in_mb}M\"\n    fi\n}\n\n# Determine the sort of JVM we'll be running on.\njava_ver_output=`\"${JAVA:-java}\" -version 2>&1`\njvmver=`echo \"$java_ver_output\" | grep '[openjdk|java] version' | awk -F'\"' 'NR==1 {print $2}' | cut -d\\- -f1`\nJVM_VERSION=${jvmver%_*}\nJVM_PATCH_VERSION=${jvmver#*_}\n\nif [ \"$JVM_VERSION\" \\< \"1.8\" ] ; then\n    echo \"Cassandra 3.0 and later require Java 8u40 or later.\"\n    exit 1;\nfi\n\nif [ \"$JVM_VERSION\" \\< \"1.8\" ] && [ \"$JVM_PATCH_VERSION\" -lt 40 ] ; then\n    echo \"Cassandra 3.0 and later require Java 8u40 or later.\"\n    exit 1;\nfi\n\njvm=`echo \"$java_ver_output\" | grep -A 1 '[openjdk|java] version' | awk 'NR==2 {print $1}'`\ncase \"$jvm\" in\n    OpenJDK)\n        JVM_VENDOR=OpenJDK\n        # this will be \"64-Bit\" or \"32-Bit\"\n        JVM_ARCH=`echo \"$java_ver_output\" | awk 'NR==3 {print $2}'`\n        ;;\n    \"Java(TM)\")\n        JVM_VENDOR=Oracle\n        # this will be \"64-Bit\" or \"32-Bit\"\n        JVM_ARCH=`echo \"$java_ver_output\" | awk 'NR==3 {print $3}'`\n        ;;\n    *)\n        # Help fill in other JVM values\n        JVM_VENDOR=other\n        JVM_ARCH=unknown\n        ;;\nesac\n\n# Sets the path where logback and GC logs are written.\nif [ \"x$CASSANDRA_LOG_DIR\" = \"x\" ] ; then\n    CASSANDRA_LOG_DIR=\"$CASSANDRA_HOME/logs\"\nfi\n\n#GC log path has to be defined here because it needs to access CASSANDRA_HOME\nJVM_OPTS=\"$JVM_OPTS -Xloggc:${CASSANDRA_LOG_DIR}/gc.log\"\n\n# Here we create the arguments that will get passed to the jvm when\n# starting cassandra.\n\n# Read user-defined JVM options from jvm.options file\nJVM_OPTS_FILE=$CASSANDRA_CONF/jvm.options\nfor opt in `grep \"^-\" $JVM_OPTS_FILE`\ndo\n  JVM_OPTS=\"$JVM_OPTS $opt\"\ndone\n\n# Check what parameters were defined on jvm.options file to avoid conflicts\necho $JVM_OPTS | grep -q Xmn\nDEFINED_XMN=$?\necho $JVM_OPTS | grep -q Xmx\nDEFINED_XMX=$?\necho $JVM_OPTS | grep -q Xms\nDEFINED_XMS=$?\necho $JVM_OPTS | grep -q UseConcMarkSweepGC\nUSING_CMS=$?\necho $JVM_OPTS | grep -q UseG1GC\nUSING_G1=$?\n\n# Override these to set the amount of memory to allocate to the JVM at\n# start-up. For production use you may wish to adjust this for your\n# environment. MAX_HEAP_SIZE is the total amount of memory dedicated\n# to the Java heap. HEAP_NEWSIZE refers to the size of the young\n# generation. Both MAX_HEAP_SIZE and HEAP_NEWSIZE should be either set\n# or not (if you set one, set the other).\n#\n# The main trade-off for the young generation is that the larger it\n# is, the longer GC pause times will be. The shorter it is, the more\n# expensive GC will be (usually).\n#\n# The example HEAP_NEWSIZE assumes a modern 8-core+ machine for decent pause\n# times. If in doubt, and if you do not particularly want to tweak, go with\n# 100 MB per physical CPU core.\n\n#MAX_HEAP_SIZE=\"4G\"\n#HEAP_NEWSIZE=\"800M\"\n\n# Set this to control the amount of arenas per-thread in glibc\n#export MALLOC_ARENA_MAX=4\n\n# only calculate the size if it's not set manually\nif [ \"x$MAX_HEAP_SIZE\" = \"x\" ] && [ \"x$HEAP_NEWSIZE\" = \"x\" -o $USING_G1 -eq 0 ]; then\n    calculate_heap_sizes\nelif [ \"x$MAX_HEAP_SIZE\" = \"x\" ] ||  [ \"x$HEAP_NEWSIZE\" = \"x\" -a $USING_G1 -ne 0 ]; then\n    echo \"please set or unset MAX_HEAP_SIZE and HEAP_NEWSIZE in pairs when using CMS GC (see cassandra-env.sh)\"\n    exit 1\nfi\n\nif [ \"x$MALLOC_ARENA_MAX\" = \"x\" ] ; then\n    export MALLOC_ARENA_MAX=4\nfi\n\n# We only set -Xms and -Xmx if they were not defined on jvm.options file\n# If defined, both Xmx and Xms should be defined together.\nif [ $DEFINED_XMX -ne 0 ] && [ $DEFINED_XMS -ne 0 ]; then\n     JVM_OPTS=\"$JVM_OPTS -Xms${MAX_HEAP_SIZE}\"\n     JVM_OPTS=\"$JVM_OPTS -Xmx${MAX_HEAP_SIZE}\"\nelif [ $DEFINED_XMX -ne 0 ] || [ $DEFINED_XMS -ne 0 ]; then\n     echo \"Please set or unset -Xmx and -Xms flags in pairs on jvm.options file.\"\n     exit 1\nfi\n\n# We only set -Xmn flag if it was not defined in jvm.options file\n# and if the CMS GC is being used\n# If defined, both Xmn and Xmx should be defined together.\nif [ $DEFINED_XMN -eq 0 ] && [ $DEFINED_XMX -ne 0 ]; then\n    echo \"Please set or unset -Xmx and -Xmn flags in pairs on jvm.options file.\"\n    exit 1\nelif [ $DEFINED_XMN -ne 0 ] && [ $USING_CMS -eq 0 ]; then\n    JVM_OPTS=\"$JVM_OPTS -Xmn${HEAP_NEWSIZE}\"\nfi\n\nif [ \"$JVM_ARCH\" = \"64-Bit\" ] && [ $USING_CMS -eq 0 ]; then\n    JVM_OPTS=\"$JVM_OPTS -XX:+UseCondCardMark\"\nfi\n\n# provides hints to the JIT compiler\nJVM_OPTS=\"$JVM_OPTS -XX:CompileCommandFile=$CASSANDRA_CONF/hotspot_compiler\"\n\n# add the jamm javaagent\nJVM_OPTS=\"$JVM_OPTS -javaagent:$CASSANDRA_HOME/lib/jamm-0.3.0.jar\"\n\n# set jvm HeapDumpPath with CASSANDRA_HEAPDUMP_DIR\nif [ \"x$CASSANDRA_HEAPDUMP_DIR\" != \"x\" ]; then\n    JVM_OPTS=\"$JVM_OPTS -XX:HeapDumpPath=$CASSANDRA_HEAPDUMP_DIR/cassandra-`date +%s`-pid$$.hprof\"\nfi\n\n# stop the jvm on OutOfMemoryError as it can result in some data corruption\n# uncomment the preferred option\n# ExitOnOutOfMemoryError and CrashOnOutOfMemoryError require a JRE greater or equals to 1.7 update 101 or 1.8 update 92\n# For OnOutOfMemoryError we cannot use the JVM_OPTS variables because bash commands split words\n# on white spaces without taking quotes into account\n# JVM_OPTS=\"$JVM_OPTS -XX:+ExitOnOutOfMemoryError\"\n# JVM_OPTS=\"$JVM_OPTS -XX:+CrashOnOutOfMemoryError\"\nJVM_ON_OUT_OF_MEMORY_ERROR_OPT=\"-XX:OnOutOfMemoryError=kill -9 %p\"\n\n# print an heap histogram on OutOfMemoryError\n# JVM_OPTS=\"$JVM_OPTS -Dcassandra.printHeapHistogramOnOutOfMemoryError=true\"\n\n# jmx: metrics and administration interface\n#\n# add this if you're having trouble connecting:\n# JVM_OPTS=\"$JVM_OPTS -Djava.rmi.server.hostname=<public name>\"\n#\n# see\n# https://blogs.oracle.com/jmxetc/entry/troubleshooting_connection_problems_in_jconsole\n# for more on configuring JMX through firewalls, etc. (Short version:\n# get it working with no firewall first.)\n#\n# Cassandra ships with JMX accessible *only* from localhost.  \n# To enable remote JMX connections, uncomment lines below\n# with authentication and/or ssl enabled. See https://wiki.apache.org/cassandra/JmxSecurity \n#\nif [ \"x$LOCAL_JMX\" = \"x\" ]; then\n    LOCAL_JMX=yes\nfi\n\n# Specifies the default port over which Cassandra will be available for\n# JMX connections.\n# For security reasons, you should not expose this port to the internet.  Firewall it if needed.\nJMX_PORT=\"7199\"\n\nif [ \"$LOCAL_JMX\" = \"yes\" ]; then\n  JVM_OPTS=\"$JVM_OPTS -Dcassandra.jmx.local.port=$JMX_PORT\"\n  JVM_OPTS=\"$JVM_OPTS -Dcom.sun.management.jmxremote.authenticate=false\"\nelse\n  JVM_OPTS=\"$JVM_OPTS -Dcassandra.jmx.remote.port=$JMX_PORT\"\n  # if ssl is enabled the same port cannot be used for both jmx and rmi so either\n  # pick another value for this property or comment out to use a random port (though see CASSANDRA-7087 for origins)\n  JVM_OPTS=\"$JVM_OPTS -Dcom.sun.management.jmxremote.rmi.port=$JMX_PORT\"\n\n  # turn on JMX authentication. See below for further options\n  JVM_OPTS=\"$JVM_OPTS -Dcom.sun.management.jmxremote.authenticate=true\"\n\n  # jmx ssl options\n  #JVM_OPTS=\"$JVM_OPTS -Dcom.sun.management.jmxremote.ssl=true\"\n  #JVM_OPTS=\"$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.need.client.auth=true\"\n  #JVM_OPTS=\"$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.protocols=<enabled-protocols>\"\n  #JVM_OPTS=\"$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.cipher.suites=<enabled-cipher-suites>\"\n  #JVM_OPTS=\"$JVM_OPTS -Djavax.net.ssl.keyStore=/path/to/keystore\"\n  #JVM_OPTS=\"$JVM_OPTS -Djavax.net.ssl.keyStorePassword=<keystore-password>\"\n  #JVM_OPTS=\"$JVM_OPTS -Djavax.net.ssl.trustStore=/path/to/truststore\"\n  #JVM_OPTS=\"$JVM_OPTS -Djavax.net.ssl.trustStorePassword=<truststore-password>\"\nfi\n\n# jmx authentication and authorization options. By default, auth is only\n# activated for remote connections but they can also be enabled for local only JMX\n## Basic file based authn & authz\nJVM_OPTS=\"$JVM_OPTS -Dcom.sun.management.jmxremote.password.file=/etc/cassandra/jmxremote.password\"\n#JVM_OPTS=\"$JVM_OPTS -Dcom.sun.management.jmxremote.access.file=/etc/cassandra/jmxremote.access\"\n## Custom auth settings which can be used as alternatives to JMX's out of the box auth utilities.\n## JAAS login modules can be used for authentication by uncommenting these two properties.\n## Cassandra ships with a LoginModule implementation - org.apache.cassandra.auth.CassandraLoginModule -\n## which delegates to the IAuthenticator configured in cassandra.yaml. See the sample JAAS configuration\n## file cassandra-jaas.config\n#JVM_OPTS=\"$JVM_OPTS -Dcassandra.jmx.remote.login.config=CassandraLogin\"\n#JVM_OPTS=\"$JVM_OPTS -Djava.security.auth.login.config=$CASSANDRA_CONF/cassandra-jaas.config\"\n\n## Cassandra also ships with a helper for delegating JMX authz calls to the configured IAuthorizer,\n## uncomment this to use it. Requires one of the two authentication options to be enabled\n#JVM_OPTS=\"$JVM_OPTS -Dcassandra.jmx.authorizer=org.apache.cassandra.auth.jmx.AuthorizationProxy\"\n\n# To use mx4j, an HTML interface for JMX, add mx4j-tools.jar to the lib/\n# directory.\n# See http://cassandra.apache.org/doc/3.11/operating/metrics.html#jmx\n# By default mx4j listens on 0.0.0.0:8081. Uncomment the following lines\n# to control its listen address and port.\n#MX4J_ADDRESS=\"-Dmx4jaddress=127.0.0.1\"\n#MX4J_PORT=\"-Dmx4jport=8081\"\n\n# Cassandra uses SIGAR to capture OS metrics CASSANDRA-7838\n# for SIGAR we have to set the java.library.path\n# to the location of the native libraries.\nJVM_OPTS=\"$JVM_OPTS -Djava.library.path=$CASSANDRA_HOME/lib/sigar-bin\"\n\nJVM_OPTS=\"$JVM_OPTS $MX4J_ADDRESS\"\nJVM_OPTS=\"$JVM_OPTS $MX4J_PORT\"\nJVM_OPTS=\"$JVM_OPTS $JVM_EXTRA_OPTS\"\n"
  cassandra-jaas.config: |
    // Delegates authentication to Cassandra's configured IAuthenticator
    CassandraLogin {
      org.apache.cassandra.auth.CassandraLoginModule REQUIRED;
    };
  cassandra-topology.properties: |
    # Licensed to the Apache Software Foundation (ASF) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The ASF licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    # Cassandra Node IP=Data Center:Rack
    192.168.1.100=DC1:RAC1
    192.168.2.200=DC2:RAC2

    10.0.0.10=DC1:RAC1
    10.0.0.11=DC1:RAC1
    10.0.0.12=DC1:RAC2

    10.20.114.10=DC2:RAC1
    10.20.114.11=DC2:RAC1

    10.21.119.13=DC3:RAC1
    10.21.119.10=DC3:RAC1

    10.0.0.13=DC1:RAC2
    10.21.119.14=DC3:RAC2
    10.20.114.15=DC2:RAC2

    # default for unknown nodes
    default=DC1:r1

    # Native IPv6 is supported, however you must escape the colon in the IPv6 Address
    # Also be sure to comment out JVM_OPTS="$JVM_OPTS -Djava.net.preferIPv4Stack=true"
    # in cassandra-env.sh
    fe80\:0\:0\:0\:202\:b3ff\:fe1e\:8329=DC1:RAC3
  commitlog_archiving.properties: |
    archive_command=
    restore_command=
    restore_directories=
    restore_point_in_time=
    precision=MICROSECONDS
  cqlshrc.sample: |
    [authentication]
    ; username = fred
    ; password = !!bang!!$
    ; keyspace = ks1

    [ui]
    ; color = on
    ; datetimeformat = %Y-%m-%d %H:%M:%S%z
    ;timezone = Etc/UTC
    ;float_precision = 5
    ;double_precision = 12
    ; completekey = tab
    ; encoding = utf8

    [cql]
    ; version = 3.2.1

    [connection]
    hostname = 127.0.0.1
    port = 9042
    ; ssl = true
    ; timeout = 10
    ; request_timeout = 10

    [csv]
    ; field_size_limit = 131072

    [tracing]
    ; max_trace_wait = 10.0

    ;[ssl]
    ; certfile = ~/keys/cassandra.cert
    ;validate = true
    ;userkey = ~/key.pem
    ;usercert = ~/cert.pem

    ; [certfiles]
    ; 192.168.1.3 = ~/keys/cassandra01.cert
    ; 192.168.1.4 = ~/keys/cassandra02.cert

    ; [copy]
    ; nullval = null
    ; header = false
    ; decimalsep = .
    ; thousandssep =
    ; boolstyle = True,False
    ; numprocesses =
    ; maxattempts = 5
    ; reportfrequency = 0.25
    ; ratefile =

    ; [copy-to]
    ; maxrequests = 6
    ; pagesize = 1000
    ; pagetimeout = 10
    ; begintoken =
    ; endtoken =
    ; maxoutputsize = -1
    ; encoding = utf8

    ; [copy-from]
    ; ingestrate = 100000
    ; maxrows = -1
    ; skiprows = 0
    ; skipcols =
    ; maxparseerrors = -1
    ; maxinserterrors = 1000
    ; errfile =
    ; maxbatchsize = 20
    ; minbatchsize = 2
    ; chunksize =  1000

    ; [copy:mykeyspace.mytable]
    ; chunksize = 1000

    ; [copy-from:mykeyspace.mytable]
    ; ingestrate = 20000

    ; [copy-to:mykeyspace.mytable]
    ; pagetimeout = 30
  hotspot_compiler: |
    dontinline org.apache.cassandra.db.Columns$Serializer::deserializeLargeSubset (Lorg.apache.cassandra.io.util.DataInputPlus;Lorg.apache.cassandra.db.Columns;I)Lorg.apache.cassandra.db.Columns;
    dontinline org.apache.cassandra.db.Columns$Serializer::serializeLargeSubset (Ljava.util.Collection;ILorg.apache.cassandra.db.Columns;ILorg.apache.cassandra.io.util.DataOutputPlus;)V
    dontinline org.apache.cassandra.db.Columns$Serializer::serializeLargeSubsetSize (Ljava.util.Collection;ILorg.apache.cassandra.db.Columns;I)I
    dontinline org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager::advanceAllocatingFrom (Lorg.apache.cassandra.db.commitlog.CommitLogSegment;)V
    dontinline org.apache.cassandra.db.transform.BaseIterator::tryGetMoreContents ()Z
    dontinline org.apache.cassandra.db.transform.StoppingTransformation::stop ()V
    dontinline org.apache.cassandra.db.transform.StoppingTransformation::stopInPartition ()V
    dontinline org.apache.cassandra.io.util.BufferedDataOutputStreamPlus::doFlush (I)V
    dontinline org.apache.cassandra.io.util.BufferedDataOutputStreamPlus::writeExcessSlow ()V
    dontinline org.apache.cassandra.io.util.BufferedDataOutputStreamPlus::writeSlow (JI)V
    dontinline org.apache.cassandra.io.util.RebufferingInputStream::readPrimitiveSlowly (I)J
    inline org.apache.cassandra.db.rows.UnfilteredSerializer::serializeRowBody (Lorg.apache.cassandra.db.rows.Row;ILorg.apache.cassandra.db.SerializationHeader;Lorg.apache.cassandra.io.util.DataOutputPlus;)V
    inline org.apache.cassandra.io.util.Memory::checkBounds (JJ)V
    inline org.apache.cassandra.io.util.SafeMemory::checkBounds (JJ)V
    inline org.apache.cassandra.utils.AsymmetricOrdering::selectBoundary (Lorg.apache.cassandra.utils.AsymmetricOrdering.Op;II)I
    inline org.apache.cassandra.utils.AsymmetricOrdering::strictnessOfLessThan (Lorg.apache.cassandra.utils.AsymmetricOrdering.Op;)I
    inline org.apache.cassandra.utils.BloomFilter::indexes (Lorg.apache.cassandra.utils.IFilter.FilterKey;)[J
    inline org.apache.cassandra.utils.BloomFilter::setIndexes (JJIJ[J)V
    inline org.apache.cassandra.utils.ByteBufferUtil::compare (Ljava.nio.ByteBuffer;[B)I
    inline org.apache.cassandra.utils.ByteBufferUtil::compare ([BLjava.nio.ByteBuffer;)I
    inline org.apache.cassandra.utils.ByteBufferUtil::compareUnsigned (Ljava.nio.ByteBuffer;Ljava.nio.ByteBuffer;)I
    inline org.apache.cassandra.utils.FastByteOperations$UnsafeOperations::compareTo (Ljava.lang.Object;JILjava.lang.Object;JI)I
    inline org.apache.cassandra.utils.FastByteOperations$UnsafeOperations::compareTo (Ljava.lang.Object;JILjava.nio.ByteBuffer;)I
    inline org.apache.cassandra.utils.FastByteOperations$UnsafeOperations::compareTo (Ljava.nio.ByteBuffer;Ljava.nio.ByteBuffer;)I
    inline org.apache.cassandra.utils.vint.VIntCoding::encodeVInt (JI)[B
  logback-tools.xml: |
    <!--
     Licensed to the Apache Software Foundation (ASF) under one
     or more contributor license agreements.  See the NOTICE file
     distributed with this work for additional information
     regarding copyright ownership.  The ASF licenses this file
     to you under the Apache License, Version 2.0 (the
     "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing,
     software distributed under the License is distributed on an
     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
     KIND, either express or implied.  See the License for the
     specific language governing permissions and limitations
     under the License.
    -->

    <configuration>
      <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
        <target>System.err</target>
        <encoder>
          <pattern>%-5level %date{"HH:mm:ss,SSS"} %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
          <level>WARN</level>
        </filter>
      </appender>

      <root level="WARN">
        <appender-ref ref="STDERR" />
      </root>
    </configuration>
  logback.xml: |
    <!--
     Licensed to the Apache Software Foundation (ASF) under one
     or more contributor license agreements.  See the NOTICE file
     distributed with this work for additional information
     regarding copyright ownership.  The ASF licenses this file
     to you under the Apache License, Version 2.0 (the
     "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing,
     software distributed under the License is distributed on an
     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
     KIND, either express or implied.  See the License for the
     specific language governing permissions and limitations
     under the License.
    -->

    <!--
    In order to disable debug.log, comment-out the ASYNCDEBUGLOG
    appender reference in the root level section below.
    -->

    <configuration scan="true">
      <jmxConfigurator />

      <!-- No shutdown hook; we run it ourselves in StorageService after shutdown -->

      <!-- SYSTEMLOG rolling file appender to system.log (INFO level) -->

      <appender name="SYSTEMLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
          <level>INFO</level>
        </filter>
        <file>${cassandra.logdir}/system.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
          <fileNamePattern>${cassandra.logdir}/system.log.%i.zip</fileNamePattern>
          <minIndex>1</minIndex>
          <maxIndex>20</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
          <maxFileSize>20MB</maxFileSize>
        </triggeringPolicy>
        <encoder>
          <pattern>%-5level [%thread] %date{ISO8601} %F:%L - %msg%n</pattern>
        </encoder>
      </appender>

      <!-- DEBUGLOG rolling file appender to debug.log (all levels) -->

      <appender name="DEBUGLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${cassandra.logdir}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
          <fileNamePattern>${cassandra.logdir}/debug.log.%i.zip</fileNamePattern>
          <minIndex>1</minIndex>
          <maxIndex>20</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
          <maxFileSize>20MB</maxFileSize>
        </triggeringPolicy>
        <encoder>
          <pattern>%-5level [%thread] %date{ISO8601} %F:%L - %msg%n</pattern>
        </encoder>
      </appender>

      <!-- ASYNCLOG assynchronous appender to debug.log (all levels) -->

      <appender name="ASYNCDEBUGLOG" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>1024</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="DEBUGLOG" />
      </appender>

      <!-- STDOUT console appender to stdout (INFO level) -->

      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
          <level>INFO</level>
        </filter>
        <encoder>
          <pattern>%-5level [%thread] %date{ISO8601} %F:%L - %msg%n</pattern>
        </encoder>
      </appender>

      <!-- Uncomment bellow and corresponding appender-ref to activate logback metrics
      <appender name="LogbackMetrics" class="com.codahale.metrics.logback.InstrumentedAppender" />
       -->

      <root level="INFO">
        <appender-ref ref="SYSTEMLOG" />
        <appender-ref ref="STDOUT" />
        <!-- <appender-ref ref="ASYNCDEBUGLOG" /> -->
        <!--
        <appender-ref ref="LogbackMetrics" />
        -->
      </root>

      <logger name="org.apache.cassandra" level="DEBUG"/>
      <logger name="com.thinkaurelius.thrift" level="ERROR"/>
    </configuration>
  metrics-reporter-config-sample.yaml: |
    # For details see:
    # * http://wiki.apache.org/cassandra/Metrics
    # * https://github.com/addthis/metrics-reporter-config

    # This is an example file for configuring which metrics should go
    # where.  The sample sends everything to a flat file for humans to
    # poke at.  metrics-ganglia or metrics-graphite are more likely to
    # operationally useful.

    # Some metrics are global for a node (KeyCache capacity) while others
    # are broken down by column family or even IP.  The sample list
    # includes all of the global metrics via a while list.  To include
    # metrics for the system column family for example add
    # "^org.apache.cassandra.metrics.ColumnFamily.system.+".


    # Start Cassandra with
    # -Dcassandra.metricsReporterConfigFile=metrics-reporter-config.yaml
    # for this file to be used.  If you are using metrics-ganglia,
    # metrics-graphite, or a custom reporter you will also have to add those
    # jars to the lib directory.  Nothing in this file can affect
    # jmx metrics.


    console:
      -
        outfile: '/tmp/metrics.out'
        period: 10
        timeunit: 'SECONDS'
        predicate:
          color: "white"
          useQualifiedName: true
          patterns:
            - "^org.apache.cassandra.metrics.Cache.+"
            - "^org.apache.cassandra.metrics.ClientRequest.+" # includes ClientRequestMetrics
            - "^org.apache.cassandra.metrics.CommitLog.+"
            - "^org.apache.cassandra.metrics.Compaction.+"
            - "^org.apache.cassandra.metrics.DroppedMessage.+"
            - "^org.apache.cassandra.metrics.ReadRepair.+"
            - "^org.apache.cassandra.metrics.Storage.+"
            - "^org.apache.cassandra.metrics.ThreadPools.+"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-cassandra
  labels:
    helm.sh/chart: cassandra-0.1.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.11.9
rules:
  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    verbs:
      - use
    resourceNames:
      - release-name-cassandra
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-cassandra
  labels:
    helm.sh/chart: cassandra-0.1.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.11.9
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-cassandra
subjects:
  - kind: ServiceAccount
    name: release-name-cassandra
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-cassandra-pods
  labels:
    helm.sh/chart: cassandra-0.1.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.11.9
spec:
  ports:
    - name: rpc
      port: 9160
      targetPort: 9160
      protocol: TCP
    - name: storage
      port: 7000
      targetPort: 7000
      protocol: TCP
    - name: storage-ssl
      port: 7001
      targetPort: 7001
      protocol: TCP
    - name: native
      port: 9042
      targetPort: 9042
      protocol: TCP
  selector:
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
  clusterIP: None
  type: ClusterIP
  publishNotReadyAddresses: true
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-cassandra
  labels:
    helm.sh/chart: cassandra-0.1.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.11.9
spec:
  ports:
    - name: rpc
      port: 9160
      targetPort: 9160
      protocol: TCP
    - name: storage
      port: 7000
      targetPort: 7000
      protocol: TCP
    - name: storage-ssl
      port: 7001
      targetPort: 7001
      protocol: TCP
    - name: native
      port: 9042
      targetPort: 9042
      protocol: TCP
  selector:
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-cassandra
  labels:
    helm.sh/chart: cassandra-0.1.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.11.9
spec:
  replicas: 1
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app.kubernetes.io/name: cassandra
      app.kubernetes.io/instance: release-name
  serviceName: release-name-cassandra-pods
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: cassandra
        app.kubernetes.io/instance: release-name
      annotations:
        secret/checksum: 147376625e72617789a250e2c64fed9b7cd2100f96fa3c4c71e2477de2973945
        config/checksum: 77df9adb38cedc4057413fefe0692b637f37a805f84b8de699f94f41db9d0398
    spec:
      serviceAccountName: release-name-cassandra
      terminationGracePeriodSeconds: 30
      volumes:
        - name: conf
          configMap:
            name: release-name-cassandra
        - name: data
          emptyDir: {}
      containers:
        - name: release-name
          image: docker.io/library/cassandra:3.11.9
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - -ec
            - |
              # first arg is `-f` or `--some-option`
              # or there are no args
              if [ "$#" -eq 0 ] || [ "${1#-}" != "$1" ]; then
                set -- cassandra -f "$@"
              fi

              # "sed -i", but without "mv" (which doesn't work on a bind-mounted file, for example)
              _sed-in-place() {
                local filename="$1"; shift
                local tempFile
                tempFile="$(mktemp)"
                sed "$@" "$filename" > "$tempFile"
                cat "$tempFile" > "$filename"
                rm "$tempFile"
              }

              if [ "$1" = 'cassandra' ]; then
                CASSANDRA_CONF="/var/lib/cassandra/conf"
                CASSANDRA_RPC_ADDRESS="0.0.0.0"
                CASSANDRA_LISTEN_ADDRESS="$POD_IP"
                CASSANDRA_BROADCAST_ADDRESS="$POD_IP"
                CASSANDRA_BROADCAST_RPC_ADDRESS="$POD_IP"

                mkdir -p "$CASSANDRA_CONF/triggers"
                cp -v /etc/cassandra/*.* "$CASSANDRA_CONF/"

                if [ -n "${CASSANDRA_NAME:+1}" ]; then
                  : ${CASSANDRA_SEEDS:="cassandra"}
                fi
                : ${CASSANDRA_SEEDS:="$CASSANDRA_BROADCAST_ADDRESS"}

                _sed-in-place "$CASSANDRA_CONF/cassandra.yaml" \
                  -r 's/(- seeds:).*/\1 "'"$CASSANDRA_SEEDS"'"/'

                for yaml in \
                  broadcast_address \
                  broadcast_rpc_address \
                  endpoint_snitch \
                  listen_address \
                  num_tokens \
                  rpc_address \
                  start_rpc \
                ; do
                  var="CASSANDRA_${yaml^^}"
                  val="${!var}"
                  if [ "$val" ]; then
                    _sed-in-place "$CASSANDRA_CONF/cassandra.yaml" \
                      -r 's/^(# )?('"$yaml"':).*/\2 '"$val"'/'
                  fi
                done
              fi

              exec "$@"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: JAVA_HOME
              value: /opt/java/openjdk
            - name: CASSANDRA_CONF
              value: /var/lib/cassandra/conf
            - name: CASSANDRA_HOME
              value: /opt/cassandra
          envFrom:
            - configMapRef:
                name: release-name-cassandra
            - secretRef:
                name: release-name-cassandra
          resources:
            limits:
              cpu: 2
              memory: 12Gi
            requests:
              cpu: 1
              memory: 8Gi
          ports:
            - name: rpc
              containerPort: 9160
              protocol: TCP
            - name: storage
              containerPort: 7000
              protocol: TCP
            - name: storage-ssl
              containerPort: 7001
              protocol: TCP
            - name: native
              containerPort: 9042
              protocol: TCP
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10238
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: conf
              mountPath: /etc/cassandra
            - name: data
              mountPath: /var/lib/cassandra
      securityContext:
        fsGroup: 999
