apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-console-link-cronjob
  labels:
    helm.sh/chart: console-link-cronjob-0.5.1
    app.kubernetes.io/name: console-link-cronjob
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v0.1.0
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-console-link-cronjob
  labels:
    helm.sh/chart: console-link-cronjob-0.5.1
    app.kubernetes.io/name: console-link-cronjob
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v0.1.0
    app.kubernetes.io/managed-by: Helm
data:
  reconcile-ibm-observe-console-links.sh: |
    #!/bin/bash

    if [[ -z "${DEFAULT_SECTION}" ]]; then
      DEFAULT_SECTION="Cloud-Native Toolkit"
    fi

    if [[ -z "${DEFAULT_LOCATION}" ]]; then
      DEFAULT_LOCATION="ApplicationMenu"
    fi

    NAMESPACE="ibm-observe"

    # list all routes with console-link.cloud-native-toolkit.dev/enabled annotation
    DAEMON_SETS=$(kubectl get daemonsets -n "${NAMESPACE}" -o yaml | yq eval -j '.' - | jq -c '.items[] | del(.metadata.annotations["kubectl.kubernetes.io/last-applied-configuration"])')

    AGENT_NAME=$(echo "${DAEMON_SETS}" | jq -r 'select(.metadata.name == "logdna-agent") | .metadata.name // empty')
    name="ibm-logging"
    imageURL="${LOGGING_IMAGE}"
    text="IBM Log Analysis"
    type="logging"
    url="https://cloud.ibm.com/observe/logging"

    if [[ -n "${AGENT_NAME}" ]] && ! kubectl get consolelink "${name}" 1> /dev/null 2> /dev/null; then
      echo "Looking up guid for ${AGENT_NAME}"
      guid=$(kubectl get configmap -n "${NAMESPACE}" -o json | jq -r --arg NAME "${AGENT_NAME}" '.items | .[] | select(.data.daemonsetName == $NAME) | .metadata.name')
      if [[ -n "${guid}" ]]; then
        url="https://cloud.ibm.com/observe/embedded-view/${type}/${guid}"
      fi

      echo "Using url for ${AGENT_NAME}: ${url}"

      cat > /tmp/console-link.yaml << EOL
    apiVersion: console.openshift.io/v1
    kind: ConsoleLink
    metadata:
      name: $name
    spec:
      applicationMenu:
        imageURL: "$imageURL"
        section: "$DEFAULT_SECTION"
      href: "$url"
      location: "$DEFAULT_LOCATION"
      text: "$text"
    EOL

      echo "Creating/updating consolelink: ${name}"
      kubectl apply -f /tmp/console-link.yaml
    elif [[ -z "${AGENT_NAME}" ]]; then
      # delete consolelink
      kubectl delete consolelink "${name}"
    else
      echo "Console link already exists: ${name}"
    fi

    AGENT_NAME=$(echo "${DAEMON_SETS}" | jq -r 'select(.metadata.name == "sysdig-agent") | .metadata.name // empty')
    name="ibm-monitoring"
    imageURL="${MONITORING_IMAGE}"
    text="IBM Monitoring"
    type="monitoring"
    url="https://cloud.ibm.com/observe/monitoring"

    if [[ -n "${AGENT_NAME}" ]] && ! kubectl get consolelink "${name}" 1> /dev/null 2> /dev/null; then
      echo "Looking up guid for ${AGENT_NAME}"
      guid=$(kubectl get configmap -n "${NAMESPACE}" -o json | jq -r --arg NAME "${AGENT_NAME}" '.items | .[] | select(.data.daemonsetName == $NAME) | .metadata.name')
      if [[ -n "${guid}" ]]; then
        url="https://cloud.ibm.com/observe/embedded-view/${type}/${guid}"
      fi

      echo "Using url for ${AGENT_NAME}: ${url}"

      cat > /tmp/console-link.yaml << EOL
    apiVersion: console.openshift.io/v1
    kind: ConsoleLink
    metadata:
      name: $name
    spec:
      applicationMenu:
        imageURL: "$imageURL"
        section: "$DEFAULT_SECTION"
      href: "$url"
      location: "$DEFAULT_LOCATION"
      text: "$text"
    EOL

      echo "Creating/updating consolelink: ${name}"
      kubectl apply -f /tmp/console-link.yaml
    elif [[ -z "${AGENT_NAME}" ]]; then
      # delete consolelink
      kubectl delete consolelink "${name}"
    else
      echo "Console link already exists: ${name}"
    fi
  reconcile-route-console-links.sh: |
    #!/bin/bash

    if [[ -z "${DEFAULT_SECTION}" ]]; then
      DEFAULT_SECTION="Cloud-Native Toolkit"
    fi

    if [[ -z "${DEFAULT_LOCATION}" ]]; then
      DEFAULT_LOCATION="ApplicationMenu"
    fi

    # list all routes and configmaps with console-link.cloud-native-toolkit.dev/enabled label
    RESOURCES=$(kubectl get routes,configmaps -A -l console-link.cloud-native-toolkit.dev/enabled=true -o yaml | yq eval -j '.' - | jq -c '.items[] | del(.metadata.annotations["kubectl.kubernetes.io/last-applied-configuration"])')

    if [[ -z "${RESOURCES}" ]]; then
      echo "No resources found with 'console-link.cloud-native-toolkit.dev/enabled=true' label"
      exit 0
    fi

    # for each resource create/update a console link
    echo "${RESOURCES}" | while read -r resource; do
      namespace="$(echo "${resource}" | jq -r '.metadata.namespace')"
      name="$(echo "${resource}" | jq -r '.metadata.name')"
      if [[ -z "${name}" ]]; then
        echo "Error parsing resource: ${resource}"
        continue
      fi

      kind="$(echo "${resource}" | jq -r '.kind')"

      if [[ "${kind}" == "Route" ]]; then
        host="$(echo "${resource}" | jq -r '.spec.host')"
        url="https://${host}"
      elif [[ "${kind}" == "ConfigMap" ]]; then
        url="$(echo "${resource}" | jq -r '.data.url')"
      else
        echo "Unhandled resource: ${kind}"
        continue
      fi

      category="$(echo "${resource}" | jq -r '.metadata.annotations["console-link.cloud-native-toolkit.dev/category"] // empty')"
      section="$(echo "${resource}" | jq -r --arg DEFAULT "${DEFAULT_SECTION}" '.metadata.annotations["console-link.cloud-native-toolkit.dev/section"] // $DEFAULT')"
      location="$(echo "${resource}" | jq -r --arg DEFAULT "${DEFAULT_LOCATION}" '.metadata.annotations["console-link.cloud-native-toolkit.dev/location"] // $DEFAULT')"
      imageURL="$(echo "${resource}" | jq -r '.metadata.annotations["console-link.cloud-native-toolkit.dev/imageUrl"] // empty')"
      text="$(echo "${resource}" | jq -r --arg DEFAULT "$name" '.metadata.annotations["console-link.cloud-native-toolkit.dev/displayName"] // $DEFAULT')"

      app="$(echo "${resource}" | jq -r --arg DEFAULT "${name}" '.metadata.labels["app.kubernetes.io/name"] // $DEFAULT')"
      if [[ -z "${app}" ]]; then
        app="$(echo "${resource}" | jq -r --arg DEFAULT "${name}" '.metadata.labels["app"] // $DEFAULT')"
      fi
      partOf="$(echo "${resource}" | jq -r --arg DEFAULT "${name}" '.metadata.labels["app.kubernetes.io/part-of"] // $DEFAULT')"

      cat > /tmp/console-link.yaml << EOL
    apiVersion: console.openshift.io/v1
    kind: ConsoleLink
    metadata:
      name: $name
    spec:
      applicationMenu:
        imageURL: "$imageURL"
        section: "$section"
      href: "$url"
      location: "$location"
      text: "$text"
    EOL

      echo "Creating/updating consolelink: ${name}"
      kubectl apply -f /tmp/console-link.yaml

      if [[ "${kind}" == "ConfigMap" ]]; then
        echo "ConfigMap already exists. Skipping config map create"
        continue
      fi

      prefix=$(echo ${name^^} | sed "s/-/_/g")

      cat > /tmp/configmap.yaml << EOL
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${name}-config
      labels:
        group: cloud-native-toolkit
        app.kubernetes.io/component: tools
        app.kubernetes.io/part-of: ${partOf}
        app: ${app}
        app.kubernetes.io/name: ${app}
      annotations:
        console-link.cloud-native-toolkit.dev/category: ${category}
        console-link.cloud-native-toolkit.dev/section: ${section}
        console-link.cloud-native-toolkit.dev/location: ${location}
        console-link.cloud-native-toolkit.dev/imageUrl: ${imageUrl}
        console-link.cloud-native-toolkit.dev/displayName: ${text}
    spec:
      ${prefix}_URL: "$url"
      url: "$url"
    EOL

      echo "Creating/updating configmap: ${name}-config"
      kubectl apply -n "${namespace}" -f /tmp/configmap.yaml
    done
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-console-link-cronjob
  labels:
    helm.sh/chart: console-link-cronjob-0.5.1
    app.kubernetes.io/name: console-link-cronjob
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v0.1.0
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - '*'
  - apiGroups:
      - apps
    resources:
      - daemonsets
    verbs:
      - list
      - get
  - apiGroups:
      - route.openshift.io
    resources:
      - routes
    verbs:
      - list
      - get
  - apiGroups:
      - console.openshift.io
    resources:
      - consolelinks
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-console-link-cronjob
  labels:
    helm.sh/chart: console-link-cronjob-0.5.1
    app.kubernetes.io/name: console-link-cronjob
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v0.1.0
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-console-link-cronjob
subjects:
  - kind: ServiceAccount
    name: release-name-console-link-cronjob
    namespace: default
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: release-name-console-link-cronjob
  labels:
    helm.sh/chart: console-link-cronjob-0.5.1
    app.kubernetes.io/name: console-link-cronjob
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v0.1.0
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: '*/5 * * * *'
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          volumes:
            - name: scripts
              configMap:
                name: release-name-console-link-cronjob
                defaultMode: 511
          serviceAccountName: release-name-console-link-cronjob
          containers:
            - name: job
              image: quay.io/cloudnativetoolkit/console-link-cronjob:v0.1.0
              volumeMounts:
                - mountPath: /scripts
                  name: scripts
              env:
                - name: LOGGING_IMAGE
                  value: 'data:image/svg+xml,%3Csvg id=''Build_icon_here'' data-name=''Build icon here'' xmlns=''http://www.w3.org/2000/svg'' xmlns:xlink=''http://www.w3.org/1999/xlink'' viewBox=''0 0 32 32''%3E%3Cdefs%3E%3ClinearGradient id=''linear-gradient'' x1=''8'' y1=''5'' x2=''21'' y2=''5'' gradientUnits=''userSpaceOnUse''%3E%3Cstop offset=''0'' stop-opacity=''0''/%3E%3Cstop offset=''0.7''/%3E%3C/linearGradient%3E%3Cmask id=''mask'' x=''0'' y=''0'' width=''32'' height=''32'' maskUnits=''userSpaceOnUse''%3E%3Cg%3E%3Cpath d=''M28,16v6H4V6H20V4H4A2,2,0,0,0,2,6V22a2,2,0,0,0,2,2h8v4H8v2H24V28H20V24h8a2,2,0,0,0,2-2V16ZM18,28H14V24h4Z'' style=''fill: %23fff''/%3E%3Crect x=''8'' y=''3'' width=''13'' height=''4'' style=''fill: url(%23linear-gradient)''/%3E%3C/g%3E%3C/mask%3E%3ClinearGradient id=''linear-gradient-2'' x1=''-3503.824'' y1=''32'' x2=''-3533.941'' gradientTransform=''matrix(1.063, 0, 0, -1, 3754.813, 32)'' gradientUnits=''userSpaceOnUse''%3E%3Cstop offset=''0.1'' stop-color=''%2308bdba''/%3E%3Cstop offset=''0.9'' stop-color=''%230f62fe''/%3E%3C/linearGradient%3E%3C/defs%3E%3Cg%3E%3Cg style=''mask: url(%23mask)''%3E%3Crect width=''32'' height=''32'' transform=''translate(32 32) rotate(180)'' style=''fill: url(%23linear-gradient-2)''/%3E%3C/g%3E%3Crect x=''18'' y=''4'' width=''12'' height=''2'' style=''fill: %23001d6c''/%3E%3Crect x=''18'' y=''8'' width=''12'' height=''2'' style=''fill: %23001d6c''/%3E%3Crect x=''18'' y=''12'' width=''6'' height=''2'' style=''fill: %23001d6c''/%3E%3C/g%3E%3C/svg%3E%0A'
                - name: MONITORING_IMAGE
                  value: 'data:image/svg+xml,%3Csvg id=''Build_icon_here'' data-name=''Build icon here'' xmlns=''http://www.w3.org/2000/svg'' xmlns:xlink=''http://www.w3.org/1999/xlink'' viewBox=''0 0 32 32''%3E%3Cdefs%3E%3ClinearGradient id=''linear-gradient'' x1=''8'' y1=''5'' x2=''21'' y2=''5'' gradientUnits=''userSpaceOnUse''%3E%3Cstop offset=''0'' stop-opacity=''0''/%3E%3Cstop offset=''0.7''/%3E%3C/linearGradient%3E%3Cmask id=''mask'' x=''0'' y=''0'' width=''32'' height=''32'' maskUnits=''userSpaceOnUse''%3E%3Cg%3E%3Cpath d=''M28,16v6H4V6H20V4H4A2,2,0,0,0,2,6V22a2,2,0,0,0,2,2h8v4H8v2H24V28H20V24h8a2,2,0,0,0,2-2V16ZM18,28H14V24h4Z'' style=''fill: %23fff''/%3E%3Crect x=''8'' y=''3'' width=''13'' height=''4'' style=''fill: url(%23linear-gradient)''/%3E%3C/g%3E%3C/mask%3E%3ClinearGradient id=''linear-gradient-2'' x1=''-3503.824'' y1=''32'' x2=''-3533.941'' gradientTransform=''matrix(1.063, 0, 0, -1, 3754.813, 32)'' gradientUnits=''userSpaceOnUse''%3E%3Cstop offset=''0.1'' stop-color=''%23ee5396''/%3E%3Cstop offset=''0.9'' stop-color=''%238a3ffc''/%3E%3C/linearGradient%3E%3C/defs%3E%3Cg%3E%3Cg style=''mask: url(%23mask)''%3E%3Crect width=''32'' height=''32'' transform=''translate(32 32) rotate(180)'' style=''fill: url(%23linear-gradient-2)''/%3E%3C/g%3E%3Cpath d=''M11,10.938h4.891l1.693,5.906a1,1,0,0,0,1.881,0l2.822-9.938.941,3.375a1.133,1.133,0,0,0,.94.657H30l0-1.126,0-.75H24.921L23.228,3.156a.935.935,0,0,0-.941-.656,1.022,1.022,0,0,0-.94.656l-2.822,9.938-.941-3.375a1.133,1.133,0,0,0-.941-.657H11v1.876Z'' style=''fill: %23001d6c''/%3E%3C/g%3E%3C/svg%3E%0A'
              command:
                - /bin/sh
              args:
                - -c
                - /scripts/reconcile-route-console-links.sh || echo 'Route error'; /scripts/reconcile-ibm-observe-console-links.sh
