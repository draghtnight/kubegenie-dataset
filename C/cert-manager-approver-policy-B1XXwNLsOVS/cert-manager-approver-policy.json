[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "cert-manager-approver-policy",
      "labels": {
        "app.kubernetes.io/name": "cert-manager-approver-policy",
        "helm.sh/chart": "cert-manager-approver-policy-v0.3.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.3.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "cert-manager-approver-policy-tls",
      "annotations": {
        "cert-manager.io/allow-direct-injection": "true"
      },
      "labels": {
        "app": "cert-manager-approver-policy",
        "app.kubernetes.io/name": "cert-manager-approver-policy",
        "helm.sh/chart": "cert-manager-approver-policy-v0.3.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.3.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "apiextensions.k8s.io/v1",
    "kind": "CustomResourceDefinition",
    "metadata": {
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.6.0"
      },
      "creationTimestamp": null,
      "name": "certificaterequestpolicies.policy.cert-manager.io"
    },
    "spec": {
      "group": "policy.cert-manager.io",
      "names": {
        "categories": [
          "cert-manager"
        ],
        "kind": "CertificateRequestPolicy",
        "listKind": "CertificateRequestPolicyList",
        "plural": "certificaterequestpolicies",
        "shortNames": [
          "crp"
        ],
        "singular": "certificaterequestpolicy"
      },
      "scope": "Cluster",
      "versions": [
        {
          "additionalPrinterColumns": [
            {
              "description": "CertificateRequestPolicy is ready for evaluation",
              "jsonPath": ".status.conditions[?(@.type == \"Ready\")].status",
              "name": "Ready",
              "type": "string"
            },
            {
              "description": "Timestamp CertificateRequestPolicy was created",
              "jsonPath": ".metadata.creationTimestamp",
              "name": "Age",
              "type": "date"
            }
          ],
          "name": "v1alpha1",
          "schema": {
            "openAPIV3Schema": {
              "description": "CertificateRequestPolicy is an object for describing a \"policy profile\" that makes decisions on whether applicable CertificateRequests should be approved or denied.",
              "type": "object",
              "properties": {
                "apiVersion": {
                  "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                },
                "spec": {
                  "description": "CertificateRequestPolicySpec defines the desired state of CertificateRequestPolicy.",
                  "type": "object",
                  "required": [
                    "selector"
                  ],
                  "properties": {
                    "allowed": {
                      "description": "Allowed is the set of attributes that are \"allowed\" by this policy. A CertificateRequest will only be considered permissible for this policy if the CertificateRequest has the same or less as what is allowed.  Empty or `nil` allowed fields mean CertificateRequests are not allowed to have that field present to be permissible.",
                      "type": "object",
                      "properties": {
                        "commonName": {
                          "description": "CommonName defines the X.509 Common Name that is permissible.",
                          "type": "object",
                          "properties": {
                            "required": {
                              "description": "Required marks this field as being a required value on the request. May only be set to true if Value is also defined.",
                              "type": "boolean"
                            },
                            "value": {
                              "description": "Value defines the value that is permissible to be present on the request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids the value from being requested. An empty string is equivalent to `nil`, however an empty string pared with Required as `true` is an impossible condition that always denies. Value may not be `nil` if Required is `true`.",
                              "type": "string"
                            }
                          }
                        },
                        "dnsNames": {
                          "description": "DNSNames defines the X.509 DNS SANs that may be requested for. Accepts wildcards \"*\".",
                          "type": "object",
                          "properties": {
                            "required": {
                              "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                              "type": "boolean"
                            },
                            "values": {
                              "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "emailAddresses": {
                          "description": "EmailAddresses defines the X.509 Email SANs that may be requested for.",
                          "type": "object",
                          "properties": {
                            "required": {
                              "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                              "type": "boolean"
                            },
                            "values": {
                              "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "ipAddresses": {
                          "description": "IPAddresses defines the X.509 IP SANs that may be requested for.",
                          "type": "object",
                          "properties": {
                            "required": {
                              "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                              "type": "boolean"
                            },
                            "values": {
                              "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "isCA": {
                          "description": "IsCA defines whether it is permissible for a CertificateRequest to have the `spec.IsCA` field set to `true`. An omitted field, value of `nil` or `false`, forbids the `spec.IsCA` field from bring `true`. A value of `true` permits CertificateRequests setting the `spec.IsCA` field to `true`.",
                          "type": "boolean"
                        },
                        "subject": {
                          "description": "Subject defines the X.509 subject that is permissible. An omitted field or value of `nil` forbids any Subject being requested.",
                          "type": "object",
                          "properties": {
                            "countries": {
                              "description": "Countries define the X.509 Subject Countries that may be requested for.",
                              "type": "object",
                              "properties": {
                                "required": {
                                  "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                                  "type": "boolean"
                                },
                                "values": {
                                  "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "localities": {
                              "description": "Localities defines the X.509 Subject Localities that may be requested for.",
                              "type": "object",
                              "properties": {
                                "required": {
                                  "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                                  "type": "boolean"
                                },
                                "values": {
                                  "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "organizationalUnits": {
                              "description": "OrganizationalUnits defines the X.509 Subject Organizational Units that may be requested for.",
                              "type": "object",
                              "properties": {
                                "required": {
                                  "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                                  "type": "boolean"
                                },
                                "values": {
                                  "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "organizations": {
                              "description": "Organizations define the X.509 Subject Organizations that may be requested for.",
                              "type": "object",
                              "properties": {
                                "required": {
                                  "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                                  "type": "boolean"
                                },
                                "values": {
                                  "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "postalCodes": {
                              "description": "PostalCodes defines the X.509 Subject Postal Codes that may be requested for.",
                              "type": "object",
                              "properties": {
                                "required": {
                                  "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                                  "type": "boolean"
                                },
                                "values": {
                                  "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "provinces": {
                              "description": "Provinces defines the X.509 Subject Provinces that may be requested for.",
                              "type": "object",
                              "properties": {
                                "required": {
                                  "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                                  "type": "boolean"
                                },
                                "values": {
                                  "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "serialNumber": {
                              "description": "SerialNumber defines the X.509 Subject Serial Number that may be requested for.",
                              "type": "object",
                              "properties": {
                                "required": {
                                  "description": "Required marks this field as being a required value on the request. May only be set to true if Value is also defined.",
                                  "type": "boolean"
                                },
                                "value": {
                                  "description": "Value defines the value that is permissible to be present on the request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids the value from being requested. An empty string is equivalent to `nil`, however an empty string pared with Required as `true` is an impossible condition that always denies. Value may not be `nil` if Required is `true`.",
                                  "type": "string"
                                }
                              }
                            },
                            "streetAddresses": {
                              "description": "StreetAddresses defines the X.509 Subject Street Addresses that may be requested for.",
                              "type": "object",
                              "properties": {
                                "required": {
                                  "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                                  "type": "boolean"
                                },
                                "values": {
                                  "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "uris": {
                          "description": "URIs defines the X.509 URI SANs that may be requested for.",
                          "type": "object",
                          "properties": {
                            "required": {
                              "description": "Required marks this field as being a required value on the request. May only be set to true if Values is also defined. Default is nil which marks the field as not required.",
                              "type": "boolean"
                            },
                            "values": {
                              "description": "Defines the values that are permissible to be present on request. Accepts wildcards \"*\". An omitted field or value of `nil` forbids any value on the related field in the request from being requested. An empty slice `[]` is equivalent to `nil`, however an empty slice pared with Required `true` is an impossible condition that always denies. Values may not be `nil` if Required is `true`.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "usages": {
                          "description": "Usages defines the list of permissible key usages that may appear on the CertificateRequest `spec.keyUsages` field. An omitted field or value of `nil` forbids any Usages being requested. An empty slice `[]` is equivalent to `nil`.",
                          "type": "array",
                          "items": {
                            "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                            "type": "string",
                            "enum": [
                              "signing",
                              "digital signature",
                              "content commitment",
                              "key encipherment",
                              "key agreement",
                              "data encipherment",
                              "cert sign",
                              "crl sign",
                              "encipher only",
                              "decipher only",
                              "any",
                              "server auth",
                              "client auth",
                              "code signing",
                              "email protection",
                              "s/mime",
                              "ipsec end system",
                              "ipsec tunnel",
                              "ipsec user",
                              "timestamping",
                              "ocsp signing",
                              "microsoft sgc",
                              "netscape sgc"
                            ]
                          }
                        }
                      }
                    },
                    "constraints": {
                      "description": "Constraints is the set of attributes that _must_ be satisfied by the CertificateRequest for the request to be permissible by the policy. Empty or `nil` constraint fields mean CertificateRequests satisfy that field with any value of their corresponding attribute.",
                      "type": "object",
                      "properties": {
                        "maxDuration": {
                          "description": "MaxDuration defines the maximum duration a certificate may be requested for. Values are inclusive (i.e. a max value of `1h` will accept a duration of `1h`). MaxDuration and MinDuration may be the same value. An omitted field or value of `nil` permits any maximum duration. If MaxDuration is defined, a duration _must_ be requested on the CertificateRequest.",
                          "type": "string"
                        },
                        "minDuration": {
                          "description": "MinDuration defines the minimum duration a certificate may be requested for. Values are inclusive (i.e. a min value of `1h` will accept a duration of `1h`). MinDuration and MaxDuration may be the same value. An omitted field or value of `nil` permits any minimum duration. If MinDuration is defined, a duration _must_ be requested on the CertificateRequest.",
                          "type": "string"
                        },
                        "privateKey": {
                          "description": "PrivateKey defines the shape of permissible private keys that may be used for the request with this policy. An omitted field or value of `nil` permits the use of any private key by the requestor.",
                          "type": "object",
                          "properties": {
                            "algorithm": {
                              "description": "Algorithm defines the allowed crypto algorithm that is used by the requestor for their private key in their request. An omitted field or value of `nil` permits any Algorithm.",
                              "type": "string",
                              "enum": [
                                "RSA",
                                "ECDSA",
                                "Ed25519"
                              ]
                            },
                            "maxSize": {
                              "description": "MaxSize defines the maximum key size a requestor may use for their private key. Values are inclusive (i.e. a min value of `2048` will accept a size of `2048`). MaxSize and MinSize may be the same value. An omitted field or value of `nil` permits any maximum size.",
                              "type": "integer"
                            },
                            "minSize": {
                              "description": "MinSize defines the minimum key size a requestor may use for their private key. Values are inclusive (i.e. a min value of `2048` will accept a size of `2048`). MinSize and MaxSize may be the same value. An omitted field or value of `nil` permits any minimum size.",
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "plugins": {
                      "description": "Plugins define a set of plugins and their configuration that should be executed when this policy is evaluated against a CertificateRequest. A plugin must already be built within approver-policy for it to be available.",
                      "type": "object",
                      "additionalProperties": {
                        "description": "CertificateRequestPolicyPluginData is configuration needed by the plugin approver to evaluate a CertificateRequest on this policy.",
                        "type": "object",
                        "properties": {
                          "values": {
                            "description": "Values define a set of well-known, to the plugin, key value pairs that are required for the plugin to successfully evaluate a request based on this policy.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "selector": {
                      "description": "Selector is used for selecting over which CertificateRequests this CertificateRequestPolicy is appropriate for and so will used for its evaluation.",
                      "type": "object",
                      "required": [
                        "issuerRef"
                      ],
                      "properties": {
                        "issuerRef": {
                          "description": "IssuerRef is used to match this CertificateRequestPolicy against processed CertificateRequests. This policy will only be evaluated against a CertificateRequest whose `spec.issuerRef` field matches `spec.selector.issuerRef`. CertificateRequests will not be processed on unmatched `issuerRef`, regardless of whether the requestor is bound by RBAC. Accepts wildcards \"*\". Nil values are equivalent to \"*\", \n The following value will match _all_ `issuerRefs`: ``` issuerRef: {} ``` \n Required field.",
                          "type": "object",
                          "properties": {
                            "group": {
                              "description": "Group is the wildcard selector to match the `spec.issuerRef.group` field on requests. Accepts wildcards \"*\". An omitted field or value of `nil` matches all.",
                              "type": "string"
                            },
                            "kind": {
                              "description": "Kind is the wildcard selector to match the `spec.issuerRef.kind` field on requests. Accepts wildcards \"*\". An omitted field or value of `nil` matches all.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is the wildcard selector to match the `spec.issuerRef.name` field on requests. Accepts wildcards \"*\". An omitted field or value of `nil` matches all.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "status": {
                  "description": "CertificateRequestPolicyStatus defines the observed state of the CertificateRequestPolicy.",
                  "type": "object",
                  "properties": {
                    "conditions": {
                      "description": "List of status conditions to indicate the status of the CertificateRequestPolicy. Known condition types are `Ready`.",
                      "type": "array",
                      "items": {
                        "description": "CertificateRequestPolicyCondition contains condition information for a CertificateRequestPolicyStatus.",
                        "type": "object",
                        "required": [
                          "status",
                          "type"
                        ],
                        "properties": {
                          "lastTransitionTime": {
                            "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                            "type": "string",
                            "format": "date-time"
                          },
                          "message": {
                            "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                            "type": "string"
                          },
                          "observedGeneration": {
                            "description": "If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the CertificateRequestPolicy.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "reason": {
                            "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                            "type": "string"
                          },
                          "status": {
                            "description": "Status of the condition, one of ('True', 'False', 'Unknown').",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of the condition, known values are (`Ready`).",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "served": true,
          "storage": true,
          "subresources": {
            "status": {}
          }
        }
      ]
    },
    "status": {
      "acceptedNames": {
        "kind": "",
        "plural": ""
      },
      "conditions": [],
      "storedVersions": []
    }
  },
  {
    "kind": "ClusterRole",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "labels": {
        "app.kubernetes.io/name": "cert-manager-approver-policy",
        "helm.sh/chart": "cert-manager-approver-policy-v0.3.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.3.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "name": "cert-manager-approver-policy"
    },
    "rules": [
      {
        "apiGroups": [
          "policy.cert-manager.io"
        ],
        "resources": [
          "certificaterequestpolicies"
        ],
        "verbs": [
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "policy.cert-manager.io"
        ],
        "resources": [
          "certificaterequestpolicies/status"
        ],
        "verbs": [
          "update"
        ]
      },
      {
        "apiGroups": [
          "cert-manager.io"
        ],
        "resources": [
          "certificaterequests"
        ],
        "verbs": [
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "cert-manager.io"
        ],
        "resources": [
          "certificaterequests/status"
        ],
        "verbs": [
          "update"
        ]
      },
      {
        "apiGroups": [
          "cert-manager.io"
        ],
        "resources": [
          "signers"
        ],
        "verbs": [
          "approve"
        ],
        "resourceNames": [
          "issuers.cert-manager.io/*",
          "clusterissuers.cert-manager.io/*"
        ]
      },
      {
        "apiGroups": [
          "rbac.authorization.k8s.io"
        ],
        "resources": [
          "roles",
          "clusterroles",
          "rolebindings",
          "clusterrolebindings"
        ],
        "verbs": [
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create",
          "patch"
        ]
      },
      {
        "apiGroups": [
          "authorization.k8s.io"
        ],
        "resources": [
          "subjectaccessreviews"
        ],
        "verbs": [
          "create"
        ]
      }
    ]
  },
  {
    "kind": "ClusterRoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "labels": {
        "app.kubernetes.io/name": "cert-manager-approver-policy",
        "helm.sh/chart": "cert-manager-approver-policy-v0.3.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.3.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "name": "cert-manager-approver-policy"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "cert-manager-approver-policy"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "cert-manager-approver-policy",
        "namespace": "default"
      }
    ]
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "cert-manager-approver-policy",
      "labels": {
        "app.kubernetes.io/name": "cert-manager-approver-policy",
        "helm.sh/chart": "cert-manager-approver-policy-v0.3.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.3.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "coordination.k8s.io"
        ],
        "resources": [
          "leases"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          "coordination.k8s.io"
        ],
        "resources": [
          "leases"
        ],
        "verbs": [
          "get",
          "update"
        ],
        "resourceNames": [
          "policy.cert-manager.io"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "update"
        ],
        "resourceNames": [
          "cert-manager-approver-policy-tls"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "cert-manager-approver-policy",
      "labels": {
        "app.kubernetes.io/name": "cert-manager-approver-policy",
        "helm.sh/chart": "cert-manager-approver-policy-v0.3.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.3.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "cert-manager-approver-policy"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "cert-manager-approver-policy",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "cert-manager-approver-policy-metrics",
      "labels": {
        "app": "cert-manager-approver-policy",
        "app.kubernetes.io/name": "cert-manager-approver-policy",
        "helm.sh/chart": "cert-manager-approver-policy-v0.3.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.3.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 9402,
          "targetPort": 9402,
          "protocol": "TCP",
          "name": "metrics"
        }
      ],
      "selector": {
        "app": "cert-manager-approver-policy"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "cert-manager-approver-policy",
      "labels": {
        "app": "cert-manager-approver-policy",
        "app.kubernetes.io/name": "cert-manager-approver-policy",
        "helm.sh/chart": "cert-manager-approver-policy-v0.3.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.3.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 443,
          "targetPort": 6443,
          "protocol": "TCP",
          "name": "webhook"
        }
      ],
      "selector": {
        "app": "cert-manager-approver-policy"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "cert-manager-approver-policy",
      "labels": {
        "app.kubernetes.io/name": "cert-manager-approver-policy",
        "helm.sh/chart": "cert-manager-approver-policy-v0.3.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.3.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "cert-manager-approver-policy"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "cert-manager-approver-policy"
          }
        },
        "spec": {
          "serviceAccountName": "cert-manager-approver-policy",
          "containers": [
            {
              "name": "cert-manager-approver-policy",
              "image": "quay.io/jetstack/cert-manager-approver-policy:v0.3.0",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "containerPort": 6443
                },
                {
                  "containerPort": 9402
                }
              ],
              "readinessProbe": {
                "httpGet": {
                  "port": 6060,
                  "path": "/readyz"
                },
                "initialDelaySeconds": 3,
                "periodSeconds": 7
              },
              "command": [
                "cert-manager-approver-policy"
              ],
              "args": [
                "--log-level=1",
                "--metrics-bind-address=:9402",
                "--readiness-probe-bind-address=:6060",
                "--webhook-host=0.0.0.0",
                "--webhook-port=6443",
                "--webhook-service-name=cert-manager-approver-policy",
                "--webhook-ca-secret-namespace=default"
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "name": "cert-manager-approver-policy",
      "labels": {
        "app": "cert-manager-approver-policy",
        "app.kubernetes.io/name": "cert-manager-approver-policy",
        "helm.sh/chart": "cert-manager-approver-policy-v0.3.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v0.3.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "cert-manager.io/inject-ca-from-secret": "default/cert-manager-approver-policy-tls"
      }
    },
    "webhooks": [
      {
        "name": "policy.cert-manager.io",
        "rules": [
          {
            "apiGroups": [
              "policy.cert-manager.io"
            ],
            "apiVersions": [
              "*"
            ],
            "operations": [
              "CREATE",
              "UPDATE"
            ],
            "resources": [
              "*/*"
            ]
          }
        ],
        "admissionReviewVersions": [
          "v1",
          "v1beta1"
        ],
        "timeoutSeconds": 5,
        "failurePolicy": "Fail",
        "sideEffects": "None",
        "clientConfig": {
          "service": {
            "name": "cert-manager-approver-policy",
            "namespace": "default",
            "path": "/validate"
          }
        }
      }
    ]
  }
]