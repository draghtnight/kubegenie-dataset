apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-eventstore
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: scavenging
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-mongodb
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.6.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: release-name-mongodb
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-eventstore-admin
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admin
data:
  nginx.conf: |
    server {
        listen 2113;
        # set a variable so nginx will not check if host is available on startup
        # ref: https://stackoverflow.com/a/43341304/2108162
        resolver kube-dns.kube-system.svc.cluster.local valid=5s;
        set $eventstore http://release-name-eventstore.default.svc.cluster.local:2113;
        location = /_liveness {
            add_header Content-Type text/plain;
            return 200 'ok';
        }
        location = /_readiness {
            proxy_pass          $eventstore/stats;
        }
        location / {
            proxy_set_header    X-Real-IP $remote_addr;
            proxy_set_header    Host      $http_host;
            proxy_pass          $eventstore;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-eventstore-env
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: database
data:
  EVENTSTORE_INT_TCP_PORT: "1112"
  EVENTSTORE_EXT_TCP_PORT: "1113"
  EVENTSTORE_INT_HTTP_PORT: "2112"
  EVENTSTORE_EXT_HTTP_PORT: "2113"
  EVENTSTORE_CLUSTER_SIZE: "3"
  EVENTSTORE_CLUSTER_DNS: registry-backend-eventstore
  EVENTSTORE_CLUSTER_GOSSIP_PORT: "2113"
  EVENTSTORE_GOSSIP_ALLOWED_DIFFERENCE_MS: "600000"
  EVENTSTORE_ADD_INTERFACE_PREFIXES: "False"
  EVENTSTORE_INT_HTTP_PREFIXES: http://*:2112/
  EVENTSTORE_EXT_HTTP_PREFIXES: http://*:2113/
  EVENTSTORE_DISCOVER_VIA_DNS: "true"
  EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP: "true"
  EVENTSTORE_ENABLE_EXTERNAL_TCP: "true"
  EVENTSTORE_EXT_IP: 0.0.0.0
  EVENTSTORE_HTTP_PORT: "2113"
  EVENTSTORE_INSECURE: "true"
  EVENTSTORE_INT_IP: 0.0.0.0
  EVENTSTORE_RUN_PROJECTIONS: All
  EVENTSTORE_START_STANDARD_PROJECTIONS: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-eventstore-scavenging
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: scavenging
data:
  es-scavenging: |-
    #!/usr/bin/env sh
    set -e

    echo "[`date`] Start instructing all nodes to scavenge"
    pods=$(kubectl get pods -l app.kubernetes.io/name=eventstore,app.kubernetes.io/instance=release-name -o name)

    if [ -z "$pods" ]; then
      echo "[`date`] ERROR: Found no EventStore nodes. Is the EventStore up? Are we targeting the right pods?" >&2
      exit 1
    else
      for podname in $pods; do
        echo "[`date`] Instructing node ${podname##pod/} to scavenge"
        kubectl exec ${podname##pod/} -- \
          curl \
            -si \
            -d {} \
            -X POST \
            -u 'admin:changeit' \
            "http://localhost:2112/admin/scavenge"
      done

      echo "[`date`] Instructed all nodes to scavenge"
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mongodb-scripts
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.6.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  setup.sh: |-
    #!/bin/bash

    echo "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"

    if [[ "$MY_POD_NAME" = "release-name-mongodb-0" ]]; then
        echo "Pod name matches initial primary pod name, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    else
        echo "Pod name doesn't match initial primary pod name, configuring node as a secondary"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
        export MONGODB_ROOT_PASSWORD="" MONGODB_USERNAME="" MONGODB_DATABASE="" MONGODB_PASSWORD=""
    fi

    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-eventstore
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: scavenging
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods/exec
    verbs:
      - create
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-eventstore
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: scavenging
roleRef:
  kind: Role
  name: release-name-eventstore
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: release-name-eventstore
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-eventstore-admin
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admin
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: eventstore-admin
    app.kubernetes.io/instance: release-name
  ports:
    - name: http
      protocol: TCP
      port: 2113
      targetPort: 2113
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-eventstore
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: database
spec:
  selector:
    app.kubernetes.io/name: eventstore
    app.kubernetes.io/instance: release-name
  ports:
    - name: ext-tcp-port
      protocol: TCP
      port: 1113
      targetPort: 1113
    - name: ext-http-port
      protocol: TCP
      port: 2113
      targetPort: 2113
  clusterIP: None
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-mongodb-arbiter-headless
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.6.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arbiter
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-mongodb
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: arbiter
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-mongodb-headless
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.6.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mongo-service
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-registry-backend
  labels:
    helm.sh/chart: registry-backend-0.6.5
    app.kubernetes.io/name: registry-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.9.1
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: registry-backend
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-eventstore-admin
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admin
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: eventstore-admin
      app.kubernetes.io/instance: release-name
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: eventstore-admin
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: admin
    spec:
      containers:
        - name: proxy
          image: nginx:latest
          lifecycle:
            preStop:
              exec:
                command:
                  - /usr/sbin/nginx
                  - -s
                  - quit
          volumeMounts:
            - name: config
              mountPath: /etc/nginx/conf.d
              readOnly: true
          ports:
            - containerPort: 2113
          livenessProbe:
            httpGet:
              path: /_liveness
              port: 2113
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /_readiness
              port: 2113
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 15
      volumes:
        - name: config
          configMap:
            name: release-name-eventstore-admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-registry-backend
  labels:
    helm.sh/chart: registry-backend-0.6.5
    app.kubernetes.io/name: registry-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.9.1
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: registry-backend
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: registry-backend
        app.kubernetes.io/instance: release-name
    spec:
      securityContext:
        fsGroup: 2000
      containers:
        - name: registry-backend
          image: sensrnetnl/registry-backend:0.9.1
          imagePullPolicy: IfNotPresent
          env:
            - name: REQUIRE_AUTHENTICATION
              value: "true"
            - name: EVENT_STORE_HOST
              value: registry-backend-eventstore
            - name: EVENT_STORE_PORT
              value: ext-tcp-port
            - name: OIDC_ISSUER
              value: null
            - name: OIDC_JWKS_URL
              value: null
            - name: OIDC_AUDIENCE
              value: registry-frontend
            - name: MONGO_HOST
              value: registry-backend-mongodb-headless
            - name: MONGO_PORT
              value: "27017"
            - name: MONGO_DATABASE
              value: sensrnet
          ports:
            - name: http
              containerPort: 3000
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            seccompProfile:
              type: RuntimeDefault
      initContainers:
        - name: check-mongo-ready
          image: mongo:4.4.3
          command:
            - sh
            - -c
            - until mongo --host registry-backend-mongodb-headless:27017 --eval "printjson(db.serverStatus())"; do echo waiting for mongo; sleep 10; done;
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-eventstore
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: database
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: eventstore
      app.kubernetes.io/instance: release-name
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  serviceName: release-name-eventstore
  template:
    metadata:
      annotations:
        checksum/config: 741dcb46321bc2f4f306d48b5912cf4257aa64739a51e57d355ecc73bb7f2066
      labels:
        app.kubernetes.io/name: eventstore
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: database
    spec:
      nodeSelector: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - eventstore
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - database
              topologyKey: kubernetes.io/hostname
      tolerations: []
      initContainers:
        - name: chown-er
          image: busybox:latest
          command:
            - chown
            - -R
            - 1000:1000
            - /var/lib/eventstore
          volumeMounts:
            - name: data
              mountPath: /var/lib/eventstore
      containers:
        - name: eventstore
          image: eventstore/eventstore:20.10.2-buster-slim
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: release-name-eventstore-env
          env:
            - name: EVENTSTORE_INT_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: EVENTSTORE_EXT_IP
              value: 0.0.0.0
            - name: EVENTSTORE_EXT_IP_ADVERTISE_AS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 1112
            - containerPort: 1113
            - containerPort: 2112
            - containerPort: 2113
          livenessProbe:
            httpGet:
              path: /stats
              port: 2113
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /stats
              port: 2113
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 15
          resources:
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: data
              mountPath: /var/lib/eventstore
      volumes: null
  volumeClaimTemplates:
    - metadata:
        name: data
        namespace: default
        labels:
          app.kubernetes.io/name: eventstore
          helm.sh/chart: eventstore-0.2.5
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/managed-by: Helm
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 12Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-mongodb-arbiter
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.6.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arbiter
spec:
  serviceName: release-name-mongodb-arbiter-headless
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: arbiter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-10.6.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: arbiter
    spec:
      serviceAccountName: release-name-mongodb
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: arbiter
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
        sysctls: []
      initContainers: null
      containers:
        - name: mongodb-arbiter
          image: docker.io/bitnami/mongodb:4.4.3-debian-10-r31
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10773
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: release-name-mongodb-arbiter-headless
            - name: MONGODB_REPLICA_SET_MODE
              value: arbiter
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: release-name-mongodb-0.release-name-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local
            - name: MONGODB_REPLICA_SET_NAME
              value: rs0
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: $(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
          ports:
            - containerPort: 27017
              name: mongodb
          livenessProbe:
            tcpSocket:
              port: mongodb
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: mongodb
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-mongodb
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.6.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  serviceName: release-name-mongodb-headless
  podManagementPolicy: OrderedReady
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-10.6.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      serviceAccountName: release-name-mongodb
      affinity:
        podAffinity: null
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: mongodb
                  app.kubernetes.io/instance: release-name
                  app.kubernetes.io/component: mongodb
              namespaces:
                - default
              topologyKey: kubernetes.io/hostname
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
        sysctls: []
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:4.4.3-debian-10-r31
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 11074
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: release-name-mongodb-headless
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: release-name-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: MONGODB_REPLICA_SET_NAME
              value: rs0
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: $(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - containerPort: 27017
              name: mongodb
          livenessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - db.adminCommand('ping')
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: null
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
      volumes:
        - name: scripts
          configMap:
            name: release-name-mongodb-scripts
            defaultMode: 493
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: release-name-eventstore-scavenging
  namespace: vnj8ntT
  labels:
    app.kubernetes.io/name: eventstore
    helm.sh/chart: eventstore-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: scavenging
spec:
  schedule: 0 2 * * *
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          name: release-name-eventstore-scavenge
          labels:
            app.kubernetes.io/name: eventstore
        spec:
          serviceAccountName: release-name-eventstore
          restartPolicy: OnFailure
          containers:
            - name: eventstore-scavenge
              image: lachlanevenson/k8s-kubectl:latest
              volumeMounts:
                - name: config
                  mountPath: /usr/local/bin/es-scavenging
                  subPath: es-scavenging
                  readOnly: true
              resources:
                requests:
                  cpu: 100m
                  memory: 56Mi
                limits:
                  cpu: 200m
                  memory: 128Mi
              command:
                - es-scavenging
          volumes:
            - name: config
              configMap:
                name: release-name-eventstore-scavenging
                defaultMode: 484
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-registry-backend
  labels:
    helm.sh/chart: registry-backend-0.6.5
    app.kubernetes.io/name: registry-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.9.1
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: sensrnet.local
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: release-name-registry-backend
                port:
                  name: http
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-registry-backend-test-connection
  labels:
    helm.sh/chart: registry-backend-0.6.5
    app.kubernetes.io/name: registry-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.9.1
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-registry-backend:80
  restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-registry-backend-migration
  labels:
    helm.sh/chart: registry-backend-0.6.5
    app.kubernetes.io/name: registry-backend
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.9.1
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install,pre-upgrade
    helm.sh/hook-weight: "-1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: registry-backend-migration
          image: sensrnetnl/registry-backend:0.9.1
          imagePullPolicy: IfNotPresent
          env:
            - name: MONGO_HOST
              value: registry-backend-mongodb-headless
            - name: MONGO_PORT
              value: "27017"
            - name: MONGO_DATABASE
              value: sensrnet
          args:
            - migrate
      initContainers:
        - name: check-mongo-ready
          image: mongo:4.4.3
          command:
            - sh
            - -c
            - until mongo --host registry-backend-mongodb-headless:27017 --eval "printjson(db.serverStatus())"; do echo waiting for mongo; sleep 10; done;
