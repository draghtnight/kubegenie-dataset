kind: ServiceAccount
apiVersion: v1
metadata:
  name: release-name-rancher
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rancher
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
subjects:
  - kind: ServiceAccount
    name: release-name-rancher
    namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-rancher
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 443
      targetPort: 444
      protocol: TCP
      name: https-internal
  selector:
    app: release-name-rancher
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: release-name-rancher
  annotations: null
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
spec:
  replicas: 3
  selector:
    matchLabels:
      app: release-name-rancher
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: release-name-rancher
        release: release-name
    spec:
      serviceAccountName: release-name-rancher
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - release-name-rancher
                topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: NotIn
                    values:
                      - windows
      tolerations:
        - key: cattle.io/os
          value: linux
          effect: NoSchedule
          operator: Equal
      containers:
        - image: rancher/rancher:v2.6.5
          imagePullPolicy: IfNotPresent
          name: rancher
          ports:
            - containerPort: 80
              protocol: TCP
          args:
            - --http-listen-port=80
            - --https-listen-port=443
            - --add-local=true
          env:
            - name: CATTLE_NAMESPACE
              value: default
            - name: CATTLE_PEER_SERVICE
              value: release-name-rancher
          livenessProbe:
            httpGet:
              path: /healthz
              port: 80
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /healthz
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 30
          resources:
            seccompProfile:
              type: RuntimeDefault
          volumeMounts: null
      volumes: null
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-rancher
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
  annotations:
    cert-manager.io/issuer: release-name-rancher
    cert-manager.io/issuer-kind: Issuer
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
spec:
  rules:
    - host: null
      http:
        paths:
          - backend:
              service:
                name: release-name-rancher
                port:
                  number: 80
            pathType: ImplementationSpecific
  tls:
    - hosts:
        - null
      secretName: tls-rancher-ingress
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: release-name-rancher
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
spec:
  ca:
    secretName: tls-rancher
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: release-name-rancher-post-delete
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
spec:
  privileged: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
  volumes:
    - secret
    - configMap
  rule: MustRunAsNonRoot
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-rancher-post-delete
  namespace: 9g8jCPf
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rancher-post-delete
  namespace: 9g8jCPf
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
data:
  post-delete-hook.sh: |-
    #!/bin/bash

    set -e

    namespaces="${NAMESPACES}"
    rancher_namespace="${RANCHER_NAMESPACE}"
    timeout="${TIMEOUT}"
    ignoreTimeoutError="${IGNORETIMEOUTERROR}"

    if [[ -z ${namespaces} ]]; then
      echo "No namespace is provided."
      exit 1
    fi

    if [[ -z ${rancher_namespace} ]]; then
      echo "No rancher namespace is provided."
      exit 1
    fi

    if [[ -z ${timeout} ]]; then
      echo "No timeout value is provided."
      exit 1
    fi

    if [[ -z ${ignoreTimeoutError} ]]; then
      echo "No ignoreTimeoutError value is provided."
      exit 1
    fi

    succeeded=()
    failed=()

    get_pod_count() {
      kubectl get pods --selector app="${1}" -n "${2}" -o json | jq '.items | length'
    }

    echo "Uninstalling Rancher resources in the following namespaces: ${namespaces}"

    for namespace in ${namespaces}; do
      for app in $(helm list -n "${namespace}" -q); do
        if [[ ${app} =~ .crd$ ]]; then
          echo "--- Skip the app [${app}] in the namespace [${namespace}]"
          continue
        fi
        echo "--- Deleting the app [${app}] in the namespace [${namespace}]"
        if [[ ! $(helm uninstall "${app}" -n "${namespace}") ]]; then
          failed=("${failed[@]}" "${app}")
          continue
        fi

        t=0
        while true; do
          if [[ $(get_pod_count "${app}" "${namespace}") -eq 0 ]]; then
            echo "successfully uninstalled [${app}] in the namespace [${namespace}]"
            succeeded=("${succeeded[@]}" "${app}")
            break
          fi
          if [[ ${t} -ge ${timeout} ]]; then
            echo "timeout uninstalling [${app}] in the namespace [${namespace}]"
            failed=("${failed[@]}" "${app}")
            break
          fi
          # by default, wait 120 seconds in total for an app to be uninstalled
          echo "waiting 5 seconds for pods of [${app}] to be terminated ..."
          sleep 5
          t=$((t + 5))
        done
      done

      # delete the helm operator pods
      for pod in $(kubectl get pods -n "${namespace}" -o name); do
        if [[ ${pod} =~ ^pod\/helm-operation-* ]]; then
          echo "--- Deleting the pod [${pod}] in the namespace [${namespace}]"
          kubectl delete "${pod}" -n "${namespace}"
        fi
      done
    done

    echo "Removing Rancher bootstrap secret in the following namespace: ${rancher_namespace}"
    kubectl --ignore-not-found=true delete secret bootstrap-secret -n "${rancher_namespace}"

    echo "------ Summary ------"
    if [[ ${#succeeded[@]} -ne 0 ]]; then
      echo "Succeeded to uninstall the following apps:" "${succeeded[@]}"
    fi

    if [[ ${#failed[@]} -ne 0 ]]; then
      echo "Failed to uninstall the following apps:" "${failed[@]}"
      if [[ "${ignoreTimeoutError}" == "false" ]]; then
        exit 2
      fi
    else
      echo "Cleanup finished successfully."
    fi
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rancher-post-delete
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
rules:
  - apiGroups:
      - extensions
      - apps
    resources:
      - deployments
    verbs:
      - get
      - list
      - delete
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - get
      - list
      - watch
      - delete
      - create
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterroles
      - clusterrolebindings
      - roles
      - rolebindings
    verbs:
      - get
      - list
      - delete
      - create
  - apiGroups:
      - ""
    resources:
      - pods
      - secrets
      - services
      - configmaps
    verbs:
      - get
      - list
      - delete
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - get
      - list
      - delete
      - create
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - delete
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
      - mutatingwebhookconfigurations
    verbs:
      - get
      - list
      - delete
  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    verbs:
      - use
      - delete
      - create
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - delete
  - apiGroups:
      - cert-manager.io
    resources:
      - issuers
    verbs:
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-rancher-post-delete
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-weight: "2"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-rancher-post-delete
subjects:
  - kind: ServiceAccount
    name: release-name-rancher-post-delete
    namespace: default
---
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-rancher-post-delete
  namespace: 9g8jCPf
  labels:
    app: release-name-rancher
    chart: rancher-2.6.5
    heritage: Helm
    release: release-name
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-weight: "3"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  backoffLimit: 3
  template:
    metadata:
      name: release-name-rancher-post-delete
      labels:
        app: release-name-rancher
        chart: rancher-2.6.5
        heritage: Helm
        release: release-name
    spec:
      serviceAccountName: release-name-rancher-post-delete
      restartPolicy: OnFailure
      containers:
        - name: rancher-post-delete
          image: rancher/shell:v0.1.16
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10505
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /scripts/post-delete-hook.sh
          volumeMounts:
            - mountPath: /scripts
              name: config-volume
          env:
            - name: NAMESPACES
              value: cattle-fleet-system cattle-system rancher-operator-system
            - name: RANCHER_NAMESPACE
              value: default
            - name: TIMEOUT
              value: "120"
            - name: IGNORETIMEOUTERROR
              value: "false"
      volumes:
        - name: config-volume
          configMap:
            name: release-name-rancher-post-delete
            defaultMode: 511
