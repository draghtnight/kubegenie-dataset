apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-cluster-wait
  namespace: vnW4VcKXxuMsI4
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-test
  namespace: vnW4VcKXxuMsI4
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-rabbitmq
  namespace: vnW4VcKXxuMsI4
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-erlang-cookie
type: Opaque
data:
  erlang_cookie: b3BlbnN0YWNrLWNvb2tpZQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-admin-user
type: Opaque
data:
  RABBITMQ_ADMIN_USERNAME: cmFiYml0bXE=
  RABBITMQ_ADMIN_PASSWORD: cGFzc3dvcmQ=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rabbitmq-bin
data:
  rabbitmq-test.sh: |
    #!/bin/bash



    set -ex

    # Extract connection details
    RABBIT_HOSTNAME=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $2}' \
      | awk -F'[:/]' '{print $1}'`
    RABBIT_PORT=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $2}' \
      | awk -F'[:/]' '{print $2}'`

    set +x
    # Extract Admin User creadential
    RABBITMQ_ADMIN_USERNAME=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $1}' \
      | awk -F'[//:]' '{print $4}'`
    RABBITMQ_ADMIN_PASSWORD=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $1}' \
      | awk -F'[//:]' '{print $5}'`
    set -x

    function rabbitmqadmin_authed () {
      set +x
      rabbitmqadmin \
        --host="${RABBIT_HOSTNAME}" \
        --port="${RABBIT_PORT}" \
        --username="${RABBITMQ_ADMIN_USERNAME}" \
        --password="${RABBITMQ_ADMIN_PASSWORD}" \
        $@
      set -x
    }

    function rabbit_check_node_count () {
      echo "Checking node count "
      NODES_IN_CLUSTER=$(rabbitmqadmin_authed list nodes -f bash | wc -w)
      if [ "$NODES_IN_CLUSTER" -eq "$RABBIT_REPLICA_COUNT" ]; then
        echo "Number of nodes in cluster ($NODES_IN_CLUSTER) match number of desired pods ($NODES_IN_CLUSTER)"
      else
        echo "Number of nodes in cluster ($NODES_IN_CLUSTER) does not match number of desired pods ($RABBIT_REPLICA_COUNT)"
        exit 1
      fi
    }
    # Check node count
    rabbit_check_node_count

    function rabbit_find_partitions () {
      NODE_INFO=$(mktemp)
      rabbitmqadmin_authed list nodes -f pretty_json | tee "${NODE_INFO}"
      cat "${NODE_INFO}" | python -c "
    import json, sys, traceback
    print('Checking cluster partitions')
    obj=json.load(sys.stdin)
    for num, node in enumerate(obj):
      try:
        partition = node['partitions']
        if partition:
          raise Exception('cluster partition found: %s' % partition)
      except KeyError:
        print('Error: partition key not found for node %s' % node)
    print('No cluster partitions found')
      "
      rm -vf "${NODE_INFO}"
    }
    rabbit_find_partitions

    function rabbit_check_users_match () {
      echo "Checking users match on all nodes"
      NODES=$(rabbitmqadmin_authed list nodes -f bash)
      USER_LIST=$(mktemp --directory)
      echo "Found the following nodes: ${NODES}"
      for NODE in ${NODES}; do
        echo "Checking Node: ${NODE#*@}"
        rabbitmqadmin_authed list users -f bash > ${USER_LIST}/${NODE#*@}
      done
      cd ${USER_LIST}; diff -q --from-file $(ls ${USER_LIST})
      echo "User lists match for all nodes"
    }
    # Check users match on all nodes
    rabbit_check_users_match
  rabbitmq-liveness.sh: |
    #!/usr/bin/env bash



    set -e

    if [ -f /tmp/rabbit-disable-liveness-probe ]; then
       exit 0
    else
       timeout 5 bash -c "true &>/dev/null </dev/tcp/${MY_POD_IP}/${PORT_AMPQ}"
       exec rabbitmqctl status
    fi
  rabbitmq-readiness.sh: |
    #!/usr/bin/env bash



    set -e

    if [ -f /tmp/rabbit-disable-readiness ]; then
       exit 1
    else
       exec rabbitmqctl status
    fi
  rabbitmq-start.sh: |
    #!/bin/bash



    set -ex

    function check_if_open () {
      HOST=$1
      PORT=$2
      timeout 10 bash -c "true &>/dev/null </dev/tcp/${HOST}/${PORT}"
    }

    function check_rabbit_node_health () {
      CLUSTER_SEED_NAME=$1
      rabbitmq-diagnostics node_health_check -n "${CLUSTER_SEED_NAME}" -t 10 &>/dev/null
    }

    get_node_name () {
      TARGET_POD=$1
      POD_NAME_PREFIX="$(echo "${MY_POD_NAME}" | awk 'BEGIN{FS=OFS="-"}{NF--; print}')"
      echo "${RABBITMQ_NODENAME}" | awk -F "@${MY_POD_NAME}." "{ print \$1 \"@${POD_NAME_PREFIX}-${TARGET_POD}.\" \$2 }"
    }

    function check_rabbit_node_ready () {
      TARGET_POD=$1
      CLUSTER_SEED_NAME="$(get_node_name ${TARGET_POD})"
      CLUSTER_SEED_HOST="$(echo "${CLUSTER_SEED_NAME}" | awk -F '@' '{ print $NF }')"
      check_rabbit_node_health "${CLUSTER_SEED_NAME}" && \
      check_if_open "${CLUSTER_SEED_HOST}" "${PORT_HTTP}" && \
      check_if_open "${CLUSTER_SEED_HOST}" "${PORT_AMPQ}" && \
      check_if_open "${CLUSTER_SEED_HOST}" "${PORT_CLUSTERING}"
    }

    POD_INCREMENT=$(echo "${MY_POD_NAME}" | awk -F '-' '{print $NF}')
    if ! [ "${POD_INCREMENT}" -eq "0" ] && ! [ -d "/var/lib/rabbitmq/mnesia" ] ; then
      echo 'This is not the 1st rabbit pod & has not been initialised'
      # disable liveness probe as it may take some time for the pod to come online.
      touch /tmp/rabbit-disable-liveness-probe
      POD_NAME_PREFIX="$(echo "${MY_POD_NAME}" | awk 'BEGIN{FS=OFS="-"}{NF--; print}')"
      for TARGET_POD in $(seq 0 +1 $((POD_INCREMENT - 1 ))); do
        END=$(($(date +%s) + 900))
        while ! check_rabbit_node_ready "${TARGET_POD}"; do
          sleep 5
          if [ "$(date +%s)" -gt "$END" ]; then
            echo "RabbitMQ pod ${TARGET_POD} not ready in time"
            exit 1
          fi
        done
      done

      function reset_rabbit () {
        rabbitmqctl shutdown || true
        find /var/lib/rabbitmq/* ! -name 'definitions.json' ! -name '.erlang.cookie' -exec rm -rf {} +
        exit 1
      }

      # Start RabbitMQ, but disable readiness from being reported so the pod is not
      # marked as up prematurely.
      touch /tmp/rabbit-disable-readiness
      rabbitmq-server &

      # Wait for server to start, and reset if it does not
      END=$(($(date +%s) + 180))
      while ! rabbitmqctl -q cluster_status; do
          sleep 5
          NOW=$(date +%s)
          [ $NOW -gt $END ] && reset_rabbit
      done

      # Wait for server to join cluster, reset if it does not
      POD_INCREMENT=$(echo "${MY_POD_NAME}" | awk -F '-' '{print $NF}')
      END=$(($(date +%s) + 180))
      while ! rabbitmqctl -l --node $(get_node_name 0) -q cluster_status | grep -q "$(get_node_name ${POD_INCREMENT})"; do
        sleep 5
        NOW=$(date +%s)
        [ $NOW -gt $END ] && reset_rabbit
      done

      # Shutdown the inital server
      rabbitmqctl shutdown

      rm -fv /tmp/rabbit-disable-readiness /tmp/rabbit-disable-liveness-probe
    fi

    exec rabbitmq-server
  rabbitmq-cookie.sh: |
    #!/bin/bash



    set -ex

    cp -vf /run/lib/rabbitmq/.erlang.cookie /var/lib/rabbitmq/.erlang.cookie
    chown "rabbitmq" /var/lib/rabbitmq/.erlang.cookie
    chmod 0600 /var/lib/rabbitmq/.erlang.cookie
  rabbitmq-password-hash.py: |
    #!/usr/bin/env python



    from __future__ import print_function
    import base64
    import json
    import os
    import hashlib
    import struct

    user = os.environ['RABBITMQ_ADMIN_USERNAME']
    password = os.environ['RABBITMQ_ADMIN_PASSWORD']
    output_file = os.environ['RABBITMQ_DEFINITION_FILE']

    salt = os.urandom(4)

    tmp0 = salt + password.encode('utf-8')

    tmp1 = hashlib.sha512(tmp0).digest()

    salted_hash = salt + tmp1

    pass_hash = base64.b64encode(salted_hash)

    output = {
        "users": [{
            "name": user,
            "password_hash": pass_hash.decode("utf-8"),
            "hashing_algorithm": "rabbit_password_hashing_sha512",
            "tags": "administrator"
        }]
    }
    with open(output_file, 'w') as f:
        f.write(json.dumps(output))
        f.close()
  rabbitmq-wait-for-cluster.sh: |
    #!/bin/bash



    set -e

    # Extract connection details
    RABBIT_HOSTNAME=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $2}' \
      | awk -F'[:/]' '{print $1}'`
    RABBIT_PORT=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $2}' \
      | awk -F'[:/]' '{print $2}'`

    # Extract Admin User creadential
    RABBITMQ_ADMIN_USERNAME=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $1}' \
      | awk -F'[//:]' '{print $4}'`
    RABBITMQ_ADMIN_PASSWORD=`echo $RABBITMQ_ADMIN_CONNECTION | awk -F'[@]' '{print $1}' \
      | awk -F'[//:]' '{print $5}'`

    set -ex

    function rabbitmqadmin_authed () {
      set +x
      rabbitmqadmin \
        --host="${RABBIT_HOSTNAME}" \
        --port="${RABBIT_PORT}" \
        --username="${RABBITMQ_ADMIN_USERNAME}" \
        --password="${RABBITMQ_ADMIN_PASSWORD}" \
        $@
      set -x
    }

    function active_rabbit_nodes () {
      rabbitmqadmin_authed list nodes -f bash | wc -w
    }

    until test "$(active_rabbit_nodes)" -ge "$RABBIT_REPLICA_COUNT"; do
        echo "Waiting for number of nodes in cluster to meet or exceed number of desired pods ($RABBIT_REPLICA_COUNT)"
        sleep 10
    done

    function sorted_node_list () {
      rabbitmqadmin_authed list nodes -f bash | tr ' ' '\n' | sort | tr '\n' ' '
    }

    if test "$(active_rabbit_nodes)" -gt "$RABBIT_REPLICA_COUNT"; then
        echo "There are more nodes registed in the cluster than desired, pruning the cluster"
        PRIMARY_NODE="$(sorted_node_list | awk '{ print $1; exit }')"
        until rabbitmqctl -l -n "${PRIMARY_NODE}" cluster_status >/dev/null 2>&1 ; do
          echo "Waiting for primary node to return cluster status"
          sleep 10
        done
        echo "Current cluster:"
        rabbitmqctl -l -n "${PRIMARY_NODE}" cluster_status
        NODES_TO_REMOVE="$(sorted_node_list | awk "{print substr(\$0, index(\$0,\$$((RABBIT_REPLICA_COUNT+1))))}")"
        for NODE in ${NODES_TO_REMOVE}; do
          rabbitmqctl -l -n "${NODE}" stop_app || true
          rabbitmqctl -l -n "${PRIMARY_NODE}" forget_cluster_node "${NODE}"
        done
        echo "Updated cluster:"
        rabbitmqctl -l -n "${PRIMARY_NODE}" cluster_status
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rabbitmq-etc
data:
  enabled_plugins: |2

    [rabbitmq_management,rabbitmq_peer_discovery_k8s].
  rabbitmq.conf: |
    cluster_formation.k8s.address_type = hostname
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
    cluster_partition_handling = autoheal
    listeners.tcp.1 = 0.0.0.0:5672
    loopback_users.guest = false
    management.load_definitions = /var/lib/rabbitmq/definitions.json
    queue_master_locator = min-masters
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: release-name-default-release-name-cluster-wait
  namespace: vnW4VcKXxuMsI4
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: release-name-default-release-name-test
  namespace: vnW4VcKXxuMsI4
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: release-name-rabbitmq
  namespace: vnW4VcKXxuMsI4
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: release-name-release-name-cluster-wait
  namespace: vnW4VcKXxuMsI4
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-release-name-cluster-wait
subjects:
  - kind: ServiceAccount
    name: release-name-cluster-wait
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: release-name-release-name-test
  namespace: vnW4VcKXxuMsI4
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-release-name-test
subjects:
  - kind: ServiceAccount
    name: release-name-test
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: release-name-rabbitmq
  namespace: vnW4VcKXxuMsI4
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-rabbitmq
subjects:
  - kind: ServiceAccount
    name: release-name-rabbitmq
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-mgr-90b19a
spec:
  ports:
    - name: http
      port: 80
    - name: https
      port: 443
  selector:
    app: ingress-api
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
spec:
  clusterIP: None
  ports:
    - port: 5672
      name: amqp
    - port: 25672
      name: clustering
    - port: 15672
      name: http
  selector:
    release_group: release-name
    application: rabbitmq
    component: server
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-rabbitmq
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
  labels:
    release_group: release-name
    application: rabbitmq
    component: server
spec:
  serviceName: rabbitmq
  replicas: 2
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      release_group: release-name
      application: rabbitmq
      component: server
  template:
    metadata:
      labels:
        release_group: release-name
        application: rabbitmq
        component: server
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
        configmap-bin-hash: 0d07c5311e14b81dd7fd33a45c19fb10e839b05b47d9527cbf7b8bffce05cea0
        configmap-etc-hash: 2f325879f2f3dc45297630f246c3e1cc362a602e991221a7582365bdd82b27f7
        secret-rabbit-admin-hash: e665593b36b9c35863a8a89e4e289b70718aef283e03121a782dce38e8d3345a
        secret-erlang-cookie-hash: 66f510c3557ef83206715e1e9fa19076de38ad2a530a6bcb02a0eb310ce723ea
    spec:
      securityContext:
        runAsUser: 999
      serviceAccountName: release-name-rabbitmq
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: release_group
                      operator: In
                      values:
                        - release-name
                    - key: application
                      operator: In
                      values:
                        - rabbitmq
                    - key: component
                      operator: In
                      values:
                        - server
                topologyKey: kubernetes.io/hostname
              weight: 10
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: ""
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
        - name: rabbitmq-password
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 0
          command:
            - /tmp/rabbitmq-password-hash.py
          env:
            - name: RABBITMQ_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: release-name-admin-user
                  key: RABBITMQ_ADMIN_USERNAME
            - name: RABBITMQ_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-admin-user
                  key: RABBITMQ_ADMIN_PASSWORD
            - name: RABBITMQ_DEFINITION_FILE
              value: /var/lib/rabbitmq/definitions.json
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
            - name: rabbitmq-bin
              mountPath: /tmp/rabbitmq-password-hash.py
              subPath: rabbitmq-password-hash.py
              readOnly: true
        - name: rabbitmq-cookie
          image: docker.io/rabbitmq:3.7.13
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 0
          command:
            - /tmp/rabbitmq-cookie.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: rabbitmq-bin
              mountPath: /tmp/rabbitmq-cookie.sh
              subPath: rabbitmq-cookie.sh
              readOnly: true
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
            - name: rabbitmq-erlang-cookie
              mountPath: /var/run/lib/rabbitmq/.erlang.cookie
              subPath: erlang_cookie
              readOnly: true
        - name: rabbitmq-perms
          image: docker.io/rabbitmq:3.7.13
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 0
          command:
            - chown
            - -R
            - 'rabbitmq:'
            - /var/lib/rabbitmq
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
      containers:
        - name: rabbitmq
          image: docker.io/rabbitmq:3.7.13
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10005
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
          command:
            - /tmp/rabbitmq-start.sh
          ports:
            - name: http
              protocol: TCP
              containerPort: 15672
            - name: amqp
              protocol: TCP
              containerPort: 5672
            - name: clustering
              protocol: TCP
              containerPort: 25672
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_NODENAME
              value: rabbit@$(MY_POD_NAME).rabbitmq.default.svc.cluster.local
            - name: K8S_SERVICE_NAME
              value: rabbitmq
            - name: K8S_HOSTNAME_SUFFIX
              value: .rabbitmq.default.svc.cluster.local
            - name: RABBITMQ_ERLANG_COOKIE
              value: openstack-cookie
            - name: PORT_HTTP
              value: "15672"
            - name: PORT_AMPQ
              value: "5672"
            - name: PORT_CLUSTERING
              value: "25672"
          readinessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 10
            exec:
              command:
                - /tmp/rabbitmq-readiness.sh
          livenessProbe:
            initialDelaySeconds: 30
            timeoutSeconds: 10
            exec:
              command:
                - /tmp/rabbitmq-liveness.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
            - name: rabbitmq-bin
              mountPath: /tmp/rabbitmq-start.sh
              subPath: rabbitmq-start.sh
              readOnly: true
            - name: rabbitmq-bin
              mountPath: /tmp/rabbitmq-readiness.sh
              subPath: rabbitmq-readiness.sh
              readOnly: true
            - name: rabbitmq-bin
              mountPath: /tmp/rabbitmq-liveness.sh
              subPath: rabbitmq-liveness.sh
              readOnly: true
            - name: rabbitmq-etc
              mountPath: /etc/rabbitmq/enabled_plugins
              subPath: enabled_plugins
              readOnly: true
            - name: rabbitmq-etc
              mountPath: /etc/rabbitmq/rabbitmq.conf
              subPath: rabbitmq.conf
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: rabbitmq-bin
          configMap:
            name: release-name-rabbitmq-bin
            defaultMode: 365
        - name: rabbitmq-etc
          configMap:
            name: release-name-rabbitmq-etc
            defaultMode: 292
        - name: rabbitmq-erlang-cookie
          secret:
            secretName: release-name-erlang-cookie
            defaultMode: 292
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 256Mi
        storageClassName: general
---
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-cluster-wait
  labels:
    release_group: release-name
    application: rabbitmq
    component: cluster-wait
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
spec:
  template:
    metadata:
      labels:
        release_group: release-name
        application: rabbitmq
        component: cluster-wait
    spec:
      securityContext:
        runAsUser: 999
      serviceAccountName: release-name-cluster-wait
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:rabbitmq
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
        - name: rabbitmq-cookie
          image: docker.io/rabbitmq:3.7.13-management
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          command:
            - /tmp/rabbitmq-cookie.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: rabbitmq-bin
              mountPath: /tmp/rabbitmq-cookie.sh
              subPath: rabbitmq-cookie.sh
              readOnly: true
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
            - name: rabbitmq-erlang-cookie
              mountPath: /var/run/lib/rabbitmq/.erlang.cookie
              subPath: erlang_cookie
              readOnly: true
      containers:
        - name: release-name-rabbitmq-cluster-wait
          image: docker.io/rabbitmq:3.7.13-management
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                "": NET_RAW
          env:
            - name: RABBITMQ_ADMIN_CONNECTION
              value: rabbit://rabbitmq:password@rabbitmq.default.svc.cluster.local:15672/
            - name: RABBIT_REPLICA_COUNT
              value: "2"
          command:
            - /tmp/rabbitmq-wait-for-cluster.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: rabbitmq-bin
              mountPath: /tmp/rabbitmq-wait-for-cluster.sh
              subPath: rabbitmq-wait-for-cluster.sh
              readOnly: true
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: rabbitmq-data
          emptyDir: {}
        - name: rabbitmq-bin
          configMap:
            name: release-name-rabbitmq-bin
            defaultMode: 365
        - name: rabbitmq-erlang-cookie
          secret:
            secretName: release-name-erlang-cookie
            defaultMode: 292
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: release-name-mgr-90b19a
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: release-name-mgr-90b19a
      http:
        paths:
          - path: /
            backend:
              serviceName: rabbitmq
              servicePort: http
    - host: release-name-mgr-90b19a.default
      http:
        paths:
          - path: /
            backend:
              serviceName: rabbitmq
              servicePort: http
    - host: release-name-mgr-90b19a.default.svc.cluster.local
      http:
        paths:
          - path: /
            backend:
              serviceName: rabbitmq
              servicePort: http
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-test
  labels:
    release_group: release-name
    application: rabbitmq
    component: test
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
    helm.sh/hook: test-success
spec:
  securityContext:
    runAsUser: 999
  serviceAccountName: release-name-test
  nodeSelector:
    openstack-control-plane: enabled
  restartPolicy: Never
  initContainers:
    - name: init
      image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
      imagePullPolicy: IfNotPresent
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsUser: 65534
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INTERFACE_NAME
          value: eth0
        - name: PATH
          value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
        - name: DEPENDENCY_SERVICE
          value: default:rabbitmq
        - name: DEPENDENCY_JOBS
          value: release-name-cluster-wait
        - name: DEPENDENCY_DAEMONSET
          value: ""
        - name: DEPENDENCY_CONTAINER
          value: ""
        - name: DEPENDENCY_POD_JSON
          value: ""
        - name: DEPENDENCY_CUSTOM_RESOURCE
          value: ""
      command:
        - kubernetes-entrypoint
      volumeMounts: []
  containers:
    - name: release-name-rabbitmq-test
      image: docker.io/rabbitmq:3.7.13-management
      imagePullPolicy: IfNotPresent
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      env:
        - name: RABBITMQ_ADMIN_CONNECTION
          value: rabbit://rabbitmq:password@rabbitmq.default.svc.cluster.local:15672/
        - name: RABBIT_REPLICA_COUNT
          value: "2"
      command:
        - /tmp/rabbitmq-test.sh
      volumeMounts:
        - name: pod-tmp
          mountPath: /tmp
        - name: rabbitmq-bin
          mountPath: /tmp/rabbitmq-test.sh
          subPath: rabbitmq-test.sh
          readOnly: true
  volumes:
    - name: pod-tmp
      emptyDir: {}
    - name: rabbitmq-bin
      configMap:
        name: release-name-rabbitmq-bin
        defaultMode: 365
