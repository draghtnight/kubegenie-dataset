[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-redis-ha",
      "namespace": "F69Mwmcd",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0",
        "app": "release-name-redis-ha"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-ha-configmap",
      "namespace": "F69Mwmcd",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0",
        "app": "release-name-redis-ha"
      }
    },
    "data": {
      "redis.conf": "dir \"/data\"\nport 6379\nmaxmemory 0\nmaxmemory-policy volatile-lru\nmin-replicas-max-lag 5\nmin-replicas-to-write 1\nrdbchecksum yes\nrdbcompression yes\nrepl-diskless-sync yes\nsave 900 1\n",
      "sentinel.conf": "dir \"/data\"\nport 26379\n    sentinel down-after-milliseconds mymaster 10000\n    sentinel failover-timeout mymaster 180000\n    maxclients 10000\n    sentinel parallel-syncs mymaster 5\n",
      "init.sh": "echo \"$(date) Start...\"\nHOSTNAME=\"$(hostname)\"\nINDEX=\"${HOSTNAME##*-}\"\nSENTINEL_PORT=26379\nANNOUNCE_IP=''\nMASTER=''\nMASTER_GROUP=\"mymaster\"\nQUORUM=\"2\"\nREDIS_CONF=/data/conf/redis.conf\nREDIS_PORT=6379\nREDIS_TLS_PORT=\nSENTINEL_CONF=/data/conf/sentinel.conf\nSENTINEL_TLS_PORT=\nSERVICE=release-name-redis-ha\nSENTINEL_TLS_REPLICATION_ENABLED=false\nREDIS_TLS_REPLICATION_ENABLED=false\n\nset -eu\nsentinel_get_master() {\nset +e\n    if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n        redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_TLS_PORT}\"   --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key sentinel get-master-addr-by-name \"${MASTER_GROUP}\" |\\\n        grep -E '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    else\n        redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_PORT}\"  sentinel get-master-addr-by-name \"${MASTER_GROUP}\" |\\\n        grep -E '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    fi\nset -e\n}\n\nsentinel_get_master_retry() {\n    master=''\n    retry=${1}\n    sleep=3\n    for i in $(seq 1 \"${retry}\"); do\n        master=$(sentinel_get_master)\n        if [ -n \"${master}\" ]; then\n            break\n        fi\n        sleep $((sleep + i))\n    done\n    echo \"${master}\"\n}\n\nidentify_master() {\n    echo \"Identifying redis master (get-master-addr-by-name)..\"\n    echo \"  using sentinel (release-name-redis-ha), sentinel group name (mymaster)\"\n    echo \"  $(date)..\"\n    MASTER=\"$(sentinel_get_master_retry 3)\"\n    if [ -n \"${MASTER}\" ]; then\n        echo \"  $(date) Found redis master (${MASTER})\"\n    else\n        echo \"  $(date) Did not find redis master (${MASTER})\"\n    fi\n}\n\nsentinel_update() {\n    echo \"Updating sentinel config..\"\n    echo \"  evaluating sentinel id (\\${SENTINEL_ID_${INDEX}})\"\n    eval MY_SENTINEL_ID=\"\\$SENTINEL_ID_${INDEX}\"\n    echo \"  sentinel id (${MY_SENTINEL_ID}), sentinel grp (${MASTER_GROUP}), quorum (${QUORUM})\"\n    sed -i \"1s/^/sentinel myid ${MY_SENTINEL_ID}\\\\n/\" \"${SENTINEL_CONF}\"\n    if [ \"$SENTINEL_TLS_REPLICATION_ENABLED\" = true ]; then\n        echo \"  redis master (${1}:${REDIS_TLS_PORT})\"\n        sed -i \"2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_TLS_PORT} ${QUORUM} \\\\n/\" \"${SENTINEL_CONF}\"\n    else\n        echo \"  redis master (${1}:${REDIS_PORT})\"\n        sed -i \"2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_PORT} ${QUORUM} \\\\n/\" \"${SENTINEL_CONF}\"\n    fi\n    echo \"sentinel announce-ip ${ANNOUNCE_IP}\" >> ${SENTINEL_CONF}\n    if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n        echo \"  announce (${ANNOUNCE_IP}:${SENTINEL_TLS_PORT})\"\n        echo \"sentinel announce-port ${SENTINEL_TLS_PORT}\" >> ${SENTINEL_CONF}\n    else\n        echo \"  announce (${ANNOUNCE_IP}:${SENTINEL_PORT})\"\n        echo \"sentinel announce-port ${SENTINEL_PORT}\" >> ${SENTINEL_CONF}\n    fi\n}\n\nredis_update() {\n    echo \"Updating redis config..\"\n    if [ \"$REDIS_TLS_REPLICATION_ENABLED\" = true ]; then\n        echo \"  we are slave of redis master (${1}:${REDIS_TLS_PORT})\"\n        echo \"slaveof ${1} ${REDIS_TLS_PORT}\" >> \"${REDIS_CONF}\"\n        echo \"slave-announce-port ${REDIS_TLS_PORT}\" >> ${REDIS_CONF}\n    else\n        echo \"  we are slave of redis master (${1}:${REDIS_PORT})\"\n        echo \"slaveof ${1} ${REDIS_PORT}\" >> \"${REDIS_CONF}\"\n        echo \"slave-announce-port ${REDIS_PORT}\" >> ${REDIS_CONF}\n    fi\n    echo \"slave-announce-ip ${ANNOUNCE_IP}\" >> ${REDIS_CONF}\n}\n\ncopy_config() {\n    echo \"Copying default redis config..\"\n    echo \"  to '${REDIS_CONF}'\"\n    cp /readonly-config/redis.conf \"${REDIS_CONF}\"\n    echo \"Copying default sentinel config..\"\n    echo \"  to '${SENTINEL_CONF}'\"\n    cp /readonly-config/sentinel.conf \"${SENTINEL_CONF}\"\n}\n\nsetup_defaults() {\n    echo \"Setting up defaults..\"\n    echo \"  using statefulset index (${INDEX})\"\n    if [ \"${INDEX}\" = \"0\" ]; then\n        echo \"Setting this pod as master for redis and sentinel..\"\n        echo \"  using announce (${ANNOUNCE_IP})\"\n        redis_update \"${ANNOUNCE_IP}\"\n        sentinel_update \"${ANNOUNCE_IP}\"\n        echo \"  make sure ${ANNOUNCE_IP} is not a slave (slaveof no one)\"\n        sed -i \"s/^.*slaveof.*//\" \"${REDIS_CONF}\"\n    else\n        echo \"Getting redis master ip..\"\n        echo \"  blindly assuming (${SERVICE}-announce-0) or (${SERVICE}-server-0) are master\"\n        DEFAULT_MASTER=\"$(getent_hosts 0 | awk '{ print $1 }')\"\n        echo \"  identified redis (may be redis master) ip (${DEFAULT_MASTER})\"\n        if [ -z \"${DEFAULT_MASTER}\" ]; then\n            echo \"Error: Unable to resolve redis master (getent hosts).\"\n            exit 1\n        fi\n        echo \"Setting default slave config for redis and sentinel..\"\n        echo \"  using master ip (${DEFAULT_MASTER})\"\n        redis_update \"${DEFAULT_MASTER}\"\n        sentinel_update \"${DEFAULT_MASTER}\"\n    fi\n}\n\nredis_ping() {\nset +e\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        redis-cli -h \"${MASTER}\" -p \"${REDIS_TLS_PORT}\"  --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key ping\n    else\n        redis-cli -h \"${MASTER}\" -p \"${REDIS_PORT}\" ping\n    fi\nset -e\n}\n\nredis_ping_retry() {\n    ping=''\n    retry=${1}\n    sleep=3\n    for i in $(seq 1 \"${retry}\"); do\n        if [ \"$(redis_ping)\" = \"PONG\" ]; then\n           ping='PONG'\n           break\n        fi\n        sleep $((sleep + i))\n        MASTER=$(sentinel_get_master)\n    done\n    echo \"${ping}\"\n}\n\nfind_master() {\n    echo \"Verifying redis master..\"\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        echo \"  ping (${MASTER}:${REDIS_TLS_PORT})\"\n    else\n        echo \"  ping (${MASTER}:${REDIS_PORT})\"\n    fi\n    echo \"  $(date)..\"\n    if [ \"$(redis_ping_retry 3)\" != \"PONG\" ]; then\n        echo \"  $(date) Can't ping redis master (${MASTER})\"\n        echo \"Attempting to force failover (sentinel failover)..\"\n\n        if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n            echo \"  on sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel grp (${MASTER_GROUP})\"\n            echo \"  $(date)..\"\n            if redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_TLS_PORT}\"   --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key sentinel failover \"${MASTER_GROUP}\" | grep -q 'NOGOODSLAVE' ; then\n                echo \"  $(date) Failover returned with 'NOGOODSLAVE'\"\n                echo \"Setting defaults for this pod..\"\n                setup_defaults\n                return 0\n            fi\n        else\n            echo \"  on sentinel (${SERVICE}:${SENTINEL_PORT}), sentinel grp (${MASTER_GROUP})\"\n            echo \"  $(date)..\"\n            if redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_PORT}\"  sentinel failover \"${MASTER_GROUP}\" | grep -q 'NOGOODSLAVE' ; then\n                echo \"  $(date) Failover returned with 'NOGOODSLAVE'\"\n                echo \"Setting defaults for this pod..\"\n                setup_defaults\n                return 0\n            fi\n        fi\n\n        echo \"Hold on for 10sec\"\n        sleep 10\n        echo \"We should get redis master's ip now. Asking (get-master-addr-by-name)..\"\n        if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n            echo \"  sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel grp (${MASTER_GROUP})\"\n        else\n            echo \"  sentinel (${SERVICE}:${SENTINEL_PORT}), sentinel grp (${MASTER_GROUP})\"\n        fi\n        echo \"  $(date)..\"\n        MASTER=\"$(sentinel_get_master)\"\n        if [ \"${MASTER}\" ]; then\n            echo \"  $(date) Found redis master (${MASTER})\"\n            echo \"Updating redis and sentinel config..\"\n            sentinel_update \"${MASTER}\"\n            redis_update \"${MASTER}\"\n        else\n            echo \"$(date) Error: Could not failover, exiting...\"\n            exit 1\n        fi\n    else\n        echo \"  $(date) Found reachable redis master (${MASTER})\"\n        echo \"Updating redis and sentinel config..\"\n        sentinel_update \"${MASTER}\"\n        redis_update \"${MASTER}\"\n    fi\n}\n\nredis_ro_update() {\n    echo \"Updating read-only redis config..\"\n    echo \"  redis.conf set 'replica-priority 0'\"\n    echo \"replica-priority 0\" >> ${REDIS_CONF}\n}\n\ngetent_hosts() {\n    index=${1:-${INDEX}}\n    service=\"${SERVICE}-announce-${index}\"\n    pod=\"${SERVICE}-server-${index}\"\n    host=$(getent hosts \"${service}\")\n    if [ -z \"${host}\" ]; then\n        host=$(getent hosts \"${pod}\")\n    fi\n    echo \"${host}\"\n}\n\nidentify_announce_ip() {\n    echo \"Identify announce ip for this pod..\"\n    echo \"  using (${SERVICE}-announce-${INDEX}) or (${SERVICE}-server-${INDEX})\"\n    ANNOUNCE_IP=$(getent_hosts | awk '{ print $1 }')\n    echo \"  identified announce (${ANNOUNCE_IP})\"\n}\n\nmkdir -p /data/conf/\n\necho \"Initializing config..\"\ncopy_config\n\n# where is redis master\nidentify_master\n\nidentify_announce_ip\n\nif [ -z \"${ANNOUNCE_IP}\" ]; then\n    \"Error: Could not resolve the announce ip for this pod.\"\n    exit 1\nelif [ \"${MASTER}\" ]; then\n    find_master\nelse\n    setup_defaults\nfi\n\nif [ \"${AUTH:-}\" ]; then\n    echo \"Setting redis auth values..\"\n    ESCAPED_AUTH=$(echo \"${AUTH}\" | sed -e 's/[\\/&]/\\\\&/g');\n    sed -i \"s/replace-default-auth/${ESCAPED_AUTH}/\" \"${REDIS_CONF}\" \"${SENTINEL_CONF}\"\nfi\n\nif [ \"${SENTINELAUTH:-}\" ]; then\n    echo \"Setting sentinel auth values\"\n    ESCAPED_AUTH_SENTINEL=$(echo \"$SENTINELAUTH\" | sed -e 's/[\\/&]/\\\\&/g');\n    sed -i \"s/replace-default-sentinel-auth/${ESCAPED_AUTH_SENTINEL}/\" \"$SENTINEL_CONF\"\nfi\n\necho \"$(date) Ready...\"\n",
      "fix-split-brain.sh": "HOSTNAME=\"$(hostname)\"\nINDEX=\"${HOSTNAME##*-}\"\nSENTINEL_PORT=26379\nANNOUNCE_IP=''\nMASTER=''\nMASTER_GROUP=\"mymaster\"\nQUORUM=\"2\"\nREDIS_CONF=/data/conf/redis.conf\nREDIS_PORT=6379\nREDIS_TLS_PORT=\nSENTINEL_CONF=/data/conf/sentinel.conf\nSENTINEL_TLS_PORT=\nSERVICE=release-name-redis-ha\nSENTINEL_TLS_REPLICATION_ENABLED=false\nREDIS_TLS_REPLICATION_ENABLED=false\n\nROLE=''\nREDIS_MASTER=''\n\nset -eu\nsentinel_get_master() {\nset +e\n    if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n        redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_TLS_PORT}\"   --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key sentinel get-master-addr-by-name \"${MASTER_GROUP}\" |\\\n        grep -E '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    else\n        redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_PORT}\"  sentinel get-master-addr-by-name \"${MASTER_GROUP}\" |\\\n        grep -E '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    fi\nset -e\n}\n\nsentinel_get_master_retry() {\n    master=''\n    retry=${1}\n    sleep=3\n    for i in $(seq 1 \"${retry}\"); do\n        master=$(sentinel_get_master)\n        if [ -n \"${master}\" ]; then\n            break\n        fi\n        sleep $((sleep + i))\n    done\n    echo \"${master}\"\n}\n\nidentify_master() {\n    echo \"Identifying redis master (get-master-addr-by-name)..\"\n    echo \"  using sentinel (release-name-redis-ha), sentinel group name (mymaster)\"\n    echo \"  $(date)..\"\n    MASTER=\"$(sentinel_get_master_retry 3)\"\n    if [ -n \"${MASTER}\" ]; then\n        echo \"  $(date) Found redis master (${MASTER})\"\n    else\n        echo \"  $(date) Did not find redis master (${MASTER})\"\n    fi\n}\n\nsentinel_update() {\n    echo \"Updating sentinel config..\"\n    echo \"  evaluating sentinel id (\\${SENTINEL_ID_${INDEX}})\"\n    eval MY_SENTINEL_ID=\"\\$SENTINEL_ID_${INDEX}\"\n    echo \"  sentinel id (${MY_SENTINEL_ID}), sentinel grp (${MASTER_GROUP}), quorum (${QUORUM})\"\n    sed -i \"1s/^/sentinel myid ${MY_SENTINEL_ID}\\\\n/\" \"${SENTINEL_CONF}\"\n    if [ \"$SENTINEL_TLS_REPLICATION_ENABLED\" = true ]; then\n        echo \"  redis master (${1}:${REDIS_TLS_PORT})\"\n        sed -i \"2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_TLS_PORT} ${QUORUM} \\\\n/\" \"${SENTINEL_CONF}\"\n    else\n        echo \"  redis master (${1}:${REDIS_PORT})\"\n        sed -i \"2s/^/sentinel monitor ${MASTER_GROUP} ${1} ${REDIS_PORT} ${QUORUM} \\\\n/\" \"${SENTINEL_CONF}\"\n    fi\n    echo \"sentinel announce-ip ${ANNOUNCE_IP}\" >> ${SENTINEL_CONF}\n    if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n        echo \"  announce (${ANNOUNCE_IP}:${SENTINEL_TLS_PORT})\"\n        echo \"sentinel announce-port ${SENTINEL_TLS_PORT}\" >> ${SENTINEL_CONF}\n    else\n        echo \"  announce (${ANNOUNCE_IP}:${SENTINEL_PORT})\"\n        echo \"sentinel announce-port ${SENTINEL_PORT}\" >> ${SENTINEL_CONF}\n    fi\n}\n\nredis_update() {\n    echo \"Updating redis config..\"\n    if [ \"$REDIS_TLS_REPLICATION_ENABLED\" = true ]; then\n        echo \"  we are slave of redis master (${1}:${REDIS_TLS_PORT})\"\n        echo \"slaveof ${1} ${REDIS_TLS_PORT}\" >> \"${REDIS_CONF}\"\n        echo \"slave-announce-port ${REDIS_TLS_PORT}\" >> ${REDIS_CONF}\n    else\n        echo \"  we are slave of redis master (${1}:${REDIS_PORT})\"\n        echo \"slaveof ${1} ${REDIS_PORT}\" >> \"${REDIS_CONF}\"\n        echo \"slave-announce-port ${REDIS_PORT}\" >> ${REDIS_CONF}\n    fi\n    echo \"slave-announce-ip ${ANNOUNCE_IP}\" >> ${REDIS_CONF}\n}\n\ncopy_config() {\n    echo \"Copying default redis config..\"\n    echo \"  to '${REDIS_CONF}'\"\n    cp /readonly-config/redis.conf \"${REDIS_CONF}\"\n    echo \"Copying default sentinel config..\"\n    echo \"  to '${SENTINEL_CONF}'\"\n    cp /readonly-config/sentinel.conf \"${SENTINEL_CONF}\"\n}\n\nsetup_defaults() {\n    echo \"Setting up defaults..\"\n    echo \"  using statefulset index (${INDEX})\"\n    if [ \"${INDEX}\" = \"0\" ]; then\n        echo \"Setting this pod as master for redis and sentinel..\"\n        echo \"  using announce (${ANNOUNCE_IP})\"\n        redis_update \"${ANNOUNCE_IP}\"\n        sentinel_update \"${ANNOUNCE_IP}\"\n        echo \"  make sure ${ANNOUNCE_IP} is not a slave (slaveof no one)\"\n        sed -i \"s/^.*slaveof.*//\" \"${REDIS_CONF}\"\n    else\n        echo \"Getting redis master ip..\"\n        echo \"  blindly assuming (${SERVICE}-announce-0) or (${SERVICE}-server-0) are master\"\n        DEFAULT_MASTER=\"$(getent_hosts 0 | awk '{ print $1 }')\"\n        echo \"  identified redis (may be redis master) ip (${DEFAULT_MASTER})\"\n        if [ -z \"${DEFAULT_MASTER}\" ]; then\n            echo \"Error: Unable to resolve redis master (getent hosts).\"\n            exit 1\n        fi\n        echo \"Setting default slave config for redis and sentinel..\"\n        echo \"  using master ip (${DEFAULT_MASTER})\"\n        redis_update \"${DEFAULT_MASTER}\"\n        sentinel_update \"${DEFAULT_MASTER}\"\n    fi\n}\n\nredis_ping() {\nset +e\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        redis-cli -h \"${MASTER}\" -p \"${REDIS_TLS_PORT}\"  --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key ping\n    else\n        redis-cli -h \"${MASTER}\" -p \"${REDIS_PORT}\" ping\n    fi\nset -e\n}\n\nredis_ping_retry() {\n    ping=''\n    retry=${1}\n    sleep=3\n    for i in $(seq 1 \"${retry}\"); do\n        if [ \"$(redis_ping)\" = \"PONG\" ]; then\n           ping='PONG'\n           break\n        fi\n        sleep $((sleep + i))\n        MASTER=$(sentinel_get_master)\n    done\n    echo \"${ping}\"\n}\n\nfind_master() {\n    echo \"Verifying redis master..\"\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        echo \"  ping (${MASTER}:${REDIS_TLS_PORT})\"\n    else\n        echo \"  ping (${MASTER}:${REDIS_PORT})\"\n    fi\n    echo \"  $(date)..\"\n    if [ \"$(redis_ping_retry 3)\" != \"PONG\" ]; then\n        echo \"  $(date) Can't ping redis master (${MASTER})\"\n        echo \"Attempting to force failover (sentinel failover)..\"\n\n        if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n            echo \"  on sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel grp (${MASTER_GROUP})\"\n            echo \"  $(date)..\"\n            if redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_TLS_PORT}\"   --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key sentinel failover \"${MASTER_GROUP}\" | grep -q 'NOGOODSLAVE' ; then\n                echo \"  $(date) Failover returned with 'NOGOODSLAVE'\"\n                echo \"Setting defaults for this pod..\"\n                setup_defaults\n                return 0\n            fi\n        else\n            echo \"  on sentinel (${SERVICE}:${SENTINEL_PORT}), sentinel grp (${MASTER_GROUP})\"\n            echo \"  $(date)..\"\n            if redis-cli -h \"${SERVICE}\" -p \"${SENTINEL_PORT}\"  sentinel failover \"${MASTER_GROUP}\" | grep -q 'NOGOODSLAVE' ; then\n                echo \"  $(date) Failover returned with 'NOGOODSLAVE'\"\n                echo \"Setting defaults for this pod..\"\n                setup_defaults\n                return 0\n            fi\n        fi\n\n        echo \"Hold on for 10sec\"\n        sleep 10\n        echo \"We should get redis master's ip now. Asking (get-master-addr-by-name)..\"\n        if [ \"$SENTINEL_PORT\" -eq 0 ]; then\n            echo \"  sentinel (${SERVICE}:${SENTINEL_TLS_PORT}), sentinel grp (${MASTER_GROUP})\"\n        else\n            echo \"  sentinel (${SERVICE}:${SENTINEL_PORT}), sentinel grp (${MASTER_GROUP})\"\n        fi\n        echo \"  $(date)..\"\n        MASTER=\"$(sentinel_get_master)\"\n        if [ \"${MASTER}\" ]; then\n            echo \"  $(date) Found redis master (${MASTER})\"\n            echo \"Updating redis and sentinel config..\"\n            sentinel_update \"${MASTER}\"\n            redis_update \"${MASTER}\"\n        else\n            echo \"$(date) Error: Could not failover, exiting...\"\n            exit 1\n        fi\n    else\n        echo \"  $(date) Found reachable redis master (${MASTER})\"\n        echo \"Updating redis and sentinel config..\"\n        sentinel_update \"${MASTER}\"\n        redis_update \"${MASTER}\"\n    fi\n}\n\nredis_ro_update() {\n    echo \"Updating read-only redis config..\"\n    echo \"  redis.conf set 'replica-priority 0'\"\n    echo \"replica-priority 0\" >> ${REDIS_CONF}\n}\n\ngetent_hosts() {\n    index=${1:-${INDEX}}\n    service=\"${SERVICE}-announce-${index}\"\n    pod=\"${SERVICE}-server-${index}\"\n    host=$(getent hosts \"${service}\")\n    if [ -z \"${host}\" ]; then\n        host=$(getent hosts \"${pod}\")\n    fi\n    echo \"${host}\"\n}\n\nidentify_announce_ip() {\n    echo \"Identify announce ip for this pod..\"\n    echo \"  using (${SERVICE}-announce-${INDEX}) or (${SERVICE}-server-${INDEX})\"\n    ANNOUNCE_IP=$(getent_hosts | awk '{ print $1 }')\n    echo \"  identified announce (${ANNOUNCE_IP})\"\n}\n\nredis_role() {\nset +e\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        ROLE=$(redis-cli  -p \"${REDIS_TLS_PORT}\"  --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key info | grep role | sed 's/role://' | sed 's/\\r//')\n    else\n        ROLE=$(redis-cli  -p \"${REDIS_PORT}\" info | grep role | sed 's/role://' | sed 's/\\r//')\n    fi\nset -e\n}\n\nidentify_redis_master() {\nset +e\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        REDIS_MASTER=$(redis-cli  -p \"${REDIS_TLS_PORT}\"  --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key info | grep master_host | sed 's/master_host://' | sed 's/\\r//')\n    else\n        REDIS_MASTER=$(redis-cli  -p \"${REDIS_PORT}\" info | grep master_host | sed 's/master_host://' | sed 's/\\r//')\n    fi\nset -e\n}\n\nreinit() {\nset +e\n    sh /readonly-config/init.sh\n\n    if [ \"$REDIS_PORT\" -eq 0 ]; then\n        echo \"shutdown\" | redis-cli  -p \"${REDIS_TLS_PORT}\"  --tls --cacert /tls-certs/ca.crt --cert /tls-certs/redis.crt --key /tls-certs/redis.key\n    else\n        echo \"shutdown\" | redis-cli  -p \"${REDIS_PORT}\"\n    fi\nset -e\n}\n\nidentify_announce_ip\n\nwhile true; do\n    sleep 60\n\n    # where is redis master\n    identify_master\n\n    if [ \"$MASTER\" == \"$ANNOUNCE_IP\" ]; then\n        redis_role\n        if [ \"$ROLE\" != \"master\" ]; then\n            reinit\n        fi\n    else\n        identify_redis_master\n        if [ \"$REDIS_MASTER\" != \"$MASTER\" ]; then\n            reinit\n        fi\n    fi\ndone\n",
      "haproxy_init.sh": "HAPROXY_CONF=/data/haproxy.cfg\ncp /readonly/haproxy.cfg \"$HAPROXY_CONF\"\nfor loop in $(seq 1 10); do\n  getent hosts release-name-redis-ha-announce-0 && break\n  echo \"Waiting for service release-name-redis-ha-announce-0 to be ready ($loop) ...\" && sleep 1\ndone\nANNOUNCE_IP0=$(getent hosts \"release-name-redis-ha-announce-0\" | awk '{ print $1 }')\nif [ -z \"$ANNOUNCE_IP0\" ]; then\n  echo \"Could not resolve the announce ip for release-name-redis-ha-announce-0\"\n  exit 1\nfi\nsed -i \"s/REPLACE_ANNOUNCE0/$ANNOUNCE_IP0/\" \"$HAPROXY_CONF\"\nfor loop in $(seq 1 10); do\n  getent hosts release-name-redis-ha-announce-1 && break\n  echo \"Waiting for service release-name-redis-ha-announce-1 to be ready ($loop) ...\" && sleep 1\ndone\nANNOUNCE_IP1=$(getent hosts \"release-name-redis-ha-announce-1\" | awk '{ print $1 }')\nif [ -z \"$ANNOUNCE_IP1\" ]; then\n  echo \"Could not resolve the announce ip for release-name-redis-ha-announce-1\"\n  exit 1\nfi\nsed -i \"s/REPLACE_ANNOUNCE1/$ANNOUNCE_IP1/\" \"$HAPROXY_CONF\"\nfor loop in $(seq 1 10); do\n  getent hosts release-name-redis-ha-announce-2 && break\n  echo \"Waiting for service release-name-redis-ha-announce-2 to be ready ($loop) ...\" && sleep 1\ndone\nANNOUNCE_IP2=$(getent hosts \"release-name-redis-ha-announce-2\" | awk '{ print $1 }')\nif [ -z \"$ANNOUNCE_IP2\" ]; then\n  echo \"Could not resolve the announce ip for release-name-redis-ha-announce-2\"\n  exit 1\nfi\nsed -i \"s/REPLACE_ANNOUNCE2/$ANNOUNCE_IP2/\" \"$HAPROXY_CONF\"\n",
      "trigger-failover-if-master.sh": "get_redis_role() {\n  is_master=$(\n    redis-cli \\\n      -h localhost \\\n      -p 6379 \\\n      info | grep -c 'role:master' || true\n  )\n}\nget_redis_role\nif [[ \"$is_master\" -eq 1 ]]; then\n  echo \"This node is currently master, we trigger a failover.\"\n  response=$(\n    redis-cli \\\n      -h localhost \\\n      -p 26379 \\\n      SENTINEL failover mymaster\n  )\n  if [[ \"$response\" != \"OK\" ]] ; then\n    echo \"$response\"\n    exit 1\n  fi\n  timeout=30\n  while [[ \"$is_master\" -eq 1 && $timeout -gt 0 ]]; do\n    sleep 1\n    get_redis_role\n    timeout=$((timeout - 1))\n  done\n  echo \"Failover successful\"\nfi\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-ha-health-configmap",
      "namespace": "F69Mwmcd",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0",
        "app": "release-name-redis-ha"
      }
    },
    "data": {
      "redis_liveness.sh": "response=$(\n  redis-cli \\\n    -h localhost \\\n    -p 6379 \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] && [ \"${response:0:7}\" != \"LOADING\" ] ; then\n  echo \"$response\"\n  exit 1\nfi\necho \"response=$response\"\n",
      "redis_readiness.sh": "response=$(\n  redis-cli \\\n    -h localhost \\\n    -p 6379 \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] ; then\n  echo \"$response\"\n  exit 1\nfi\necho \"response=$response\"\n",
      "sentinel_liveness.sh": "response=$(\n  redis-cli \\\n    -h localhost \\\n    -p 26379 \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi\necho \"response=$response\"\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-redis-ha",
      "namespace": "F69Mwmcd",
      "labels": {
        "app": "redis-ha",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "get"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-redis-ha",
      "namespace": "F69Mwmcd",
      "labels": {
        "app": "redis-ha",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-redis-ha"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-redis-ha"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-ha-announce-0",
      "namespace": "F69Mwmcd",
      "labels": {
        "app": "redis-ha",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0"
      },
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "publishNotReadyAddresses": true,
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-server",
          "port": 6379,
          "protocol": "TCP",
          "targetPort": "redis"
        },
        {
          "name": "tcp-sentinel",
          "port": 26379,
          "protocol": "TCP",
          "targetPort": "sentinel"
        }
      ],
      "selector": {
        "release": "release-name",
        "app": "redis-ha",
        "statefulset.kubernetes.io/pod-name": "release-name-redis-ha-server-0"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-ha-announce-1",
      "namespace": "F69Mwmcd",
      "labels": {
        "app": "redis-ha",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0"
      },
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "publishNotReadyAddresses": true,
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-server",
          "port": 6379,
          "protocol": "TCP",
          "targetPort": "redis"
        },
        {
          "name": "tcp-sentinel",
          "port": 26379,
          "protocol": "TCP",
          "targetPort": "sentinel"
        }
      ],
      "selector": {
        "release": "release-name",
        "app": "redis-ha",
        "statefulset.kubernetes.io/pod-name": "release-name-redis-ha-server-1"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-ha-announce-2",
      "namespace": "F69Mwmcd",
      "labels": {
        "app": "redis-ha",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0"
      },
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "publishNotReadyAddresses": true,
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-server",
          "port": 6379,
          "protocol": "TCP",
          "targetPort": "redis"
        },
        {
          "name": "tcp-sentinel",
          "port": 26379,
          "protocol": "TCP",
          "targetPort": "sentinel"
        }
      ],
      "selector": {
        "release": "release-name",
        "app": "redis-ha",
        "statefulset.kubernetes.io/pod-name": "release-name-redis-ha-server-2"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-ha",
      "namespace": "F69Mwmcd",
      "labels": {
        "app": "redis-ha",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-server",
          "port": 6379,
          "protocol": "TCP",
          "targetPort": "redis"
        },
        {
          "name": "tcp-sentinel",
          "port": 26379,
          "protocol": "TCP",
          "targetPort": "sentinel"
        }
      ],
      "selector": {
        "release": "release-name",
        "app": "redis-ha"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-redis-ha-server",
      "namespace": "F69Mwmcd",
      "labels": {
        "release-name-redis-ha": "replica",
        "app": "redis-ha",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0"
      },
      "annotations": {}
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "release": "release-name",
          "app": "redis-ha"
        }
      },
      "serviceName": "release-name-redis-ha",
      "replicas": 3,
      "podManagementPolicy": "OrderedReady",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/init-config": "61787e62effbb27df6be6b9bf65a77a5693d2b851c559bf0c0254d18d1e96a38"
          },
          "labels": {
            "release": "release-name",
            "app": "redis-ha",
            "release-name-redis-ha": "replica"
          }
        },
        "spec": {
          "terminationGracePeriodSeconds": 60,
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchLabels": {
                      "app": "redis-ha",
                      "release": "release-name",
                      "release-name-redis-ha": "replica"
                    }
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              ]
            }
          },
          "securityContext": {
            "fsGroup": 1000,
            "runAsNonRoot": true,
            "runAsUser": 1000
          },
          "serviceAccountName": "release-name-redis-ha",
          "automountServiceAccountToken": false,
          "initContainers": [
            {
              "name": "config-init",
              "image": "redis:6.2.5-alpine",
              "imagePullPolicy": "IfNotPresent",
              "resources": {},
              "command": [
                "sh"
              ],
              "args": [
                "/readonly-config/init.sh"
              ],
              "env": [
                {
                  "name": "SENTINEL_ID_0",
                  "value": "9942b44090ff59a3a1b9fb7b43a411ed4104d734"
                },
                {
                  "name": "SENTINEL_ID_1",
                  "value": "17c89c97289988e3fff73b7950ccdea44fc3c6df"
                },
                {
                  "name": "SENTINEL_ID_2",
                  "value": "7409cb0eb3a6d3ac137cf151172e810f3c237307"
                }
              ],
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/readonly-config",
                  "readOnly": true
                },
                {
                  "name": "data",
                  "mountPath": "/data"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "redis",
              "image": "redis:6.2.5-alpine",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "redis-server"
              ],
              "args": [
                "/data/conf/redis.conf"
              ],
              "livenessProbe": {
                "initialDelaySeconds": 30,
                "periodSeconds": 15,
                "timeoutSeconds": 15,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/redis_liveness.sh"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 30,
                "periodSeconds": 15,
                "timeoutSeconds": 15,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/redis_readiness.sh"
                  ]
                }
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "ports": [
                {
                  "name": "redis",
                  "containerPort": 6379
                }
              ],
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/readonly-config",
                  "readOnly": true
                },
                {
                  "mountPath": "/data",
                  "name": "data"
                },
                {
                  "mountPath": "/health",
                  "name": "health"
                }
              ],
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/bin/sh",
                      "/readonly-config/trigger-failover-if-master.sh"
                    ]
                  }
                }
              }
            },
            {
              "name": "sentinel",
              "image": "redis:6.2.5-alpine",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "redis-sentinel"
              ],
              "args": [
                "/data/conf/sentinel.conf"
              ],
              "livenessProbe": {
                "initialDelaySeconds": 30,
                "periodSeconds": 15,
                "timeoutSeconds": 15,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/sentinel_liveness.sh"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 30,
                "periodSeconds": 15,
                "timeoutSeconds": 15,
                "successThreshold": 3,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/sentinel_liveness.sh"
                  ]
                }
              },
              "resources": {},
              "ports": [
                {
                  "name": "sentinel",
                  "containerPort": 26379
                }
              ],
              "volumeMounts": [
                {
                  "mountPath": "/data",
                  "name": "data"
                },
                {
                  "mountPath": "/health",
                  "name": "health"
                }
              ],
              "lifecycle": {}
            },
            {
              "name": "split-brain-fix",
              "image": "redis:6.2.5-alpine",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sh"
              ],
              "args": [
                "/readonly-config/fix-split-brain.sh"
              ],
              "env": [
                {
                  "name": "SENTINEL_ID_0",
                  "value": "9942b44090ff59a3a1b9fb7b43a411ed4104d734"
                },
                {
                  "name": "SENTINEL_ID_1",
                  "value": "17c89c97289988e3fff73b7950ccdea44fc3c6df"
                },
                {
                  "name": "SENTINEL_ID_2",
                  "value": "7409cb0eb3a6d3ac137cf151172e810f3c237307"
                }
              ],
              "resources": {},
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/readonly-config",
                  "readOnly": true
                },
                {
                  "mountPath": "/data",
                  "name": "data"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-redis-ha-configmap"
              }
            },
            {
              "name": "health",
              "configMap": {
                "name": "release-name-redis-ha-health-configmap",
                "defaultMode": 493
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "annotations": null
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "10Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-redis-ha-configmap-test",
      "labels": {
        "app": "redis-ha",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "redis-ha-4.16.0"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "check-init",
          "image": "koalaman/shellcheck:v0.5.0",
          "args": [
            "--shell=sh",
            "/readonly-config/init.sh"
          ],
          "volumeMounts": [
            {
              "name": "config",
              "mountPath": "/readonly-config",
              "readOnly": true
            }
          ]
        }
      ],
      "restartPolicy": "Never",
      "volumes": [
        {
          "name": "config",
          "configMap": {
            "name": "release-name-redis-ha-configmap"
          }
        }
      ]
    }
  }
]