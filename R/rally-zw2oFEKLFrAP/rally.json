[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "rally-db-init",
      "namespace": "zw2oFEKLFrAP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "rally-ks-endpoints",
      "namespace": "zw2oFEKLFrAP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "rally-ks-service",
      "namespace": "zw2oFEKLFrAP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "rally-ks-user",
      "namespace": "zw2oFEKLFrAP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "rally-manage-db",
      "namespace": "zw2oFEKLFrAP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "rally-run-task",
      "namespace": "zw2oFEKLFrAP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "rally-etc"
    },
    "type": "Opaque",
    "data": {
      "rally.conf": "W2RhdGFiYXNlXQpjb25uZWN0aW9uID0gbXlzcWwrcHlteXNxbDovL3JhbGx5OnBhc3N3b3JkQG1hcmlhZGIuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDozMzA2L3JhbGx5CltrZXlzdG9uZV9hdXRodG9rZW5dCmF1dGhfdHlwZSA9IHBhc3N3b3JkCmF1dGhfdXJpID0gaHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjMKYXV0aF91cmwgPSBodHRwOi8va2V5c3RvbmUtYXBpLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6NTAwMC92MwphdXRoX3ZlcnNpb24gPSB2MwptZW1jYWNoZV9zZWNyZXRfa2V5ID0gN0pvUEFNSjNoSGJjVWNWdGJDR2Z5QkJQRHF4N2pzQkZLb2w1aG45SW9leDliZUlmMElxaTdOM2NTYWlhWGxMcwptZW1jYWNoZWRfc2VydmVycyA9IG1lbWNhY2hlZC5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjExMjExCnBhc3N3b3JkID0gcGFzc3dvcmQKcHJvamVjdF9kb21haW5fbmFtZSA9IHNlcnZpY2UKcHJvamVjdF9uYW1lID0gc2VydmljZQpyZWdpb25fbmFtZSA9IFJlZ2lvbk9uZQp1c2VyX2RvbWFpbl9uYW1lID0gc2VydmljZQp1c2VybmFtZSA9IHJhbGx5CltyYWxseV9hcGldCmJpbmRfcG9ydCA9IDkzMTIK"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "rally-db-admin"
    },
    "type": "Opaque",
    "data": {
      "DB_CONNECTION": "bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvcmFsbHk="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "rally-db-user"
    },
    "type": "Opaque",
    "data": {
      "DB_CONNECTION": "bXlzcWwrcHlteXNxbDovL3JhbGx5OnBhc3N3b3JkQG1hcmlhZGIuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDozMzA2L3JhbGx5"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "rally-keystone-admin"
    },
    "type": "Opaque",
    "data": {
      "OS_AUTH_URL": "aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=",
      "OS_REGION_NAME": "UmVnaW9uT25l",
      "OS_INTERFACE": "aW50ZXJuYWw=",
      "OS_PROJECT_DOMAIN_NAME": "ZGVmYXVsdA==",
      "OS_PROJECT_NAME": "YWRtaW4=",
      "OS_USER_DOMAIN_NAME": "ZGVmYXVsdA==",
      "OS_USERNAME": "YWRtaW4=",
      "OS_PASSWORD": "cGFzc3dvcmQ=",
      "OS_DEFAULT_DOMAIN": "ZGVmYXVsdA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "rally-keystone-user"
    },
    "type": "Opaque",
    "data": {
      "OS_AUTH_URL": "aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=",
      "OS_REGION_NAME": "UmVnaW9uT25l",
      "OS_INTERFACE": "aW50ZXJuYWw=",
      "OS_PROJECT_DOMAIN_NAME": "c2VydmljZQ==",
      "OS_PROJECT_NAME": "c2VydmljZQ==",
      "OS_USER_DOMAIN_NAME": "c2VydmljZQ==",
      "OS_USERNAME": "cmFsbHk=",
      "OS_PASSWORD": "cGFzc3dvcmQ=",
      "OS_DEFAULT_DOMAIN": "ZGVmYXVsdA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "rally-bin"
    },
    "data": {
      "db-init.py": "#!/usr/bin/env python\n\n# Creates db and user for an OpenStack Service:\n# Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain\n# SQLAlchemy strings for the root connection to the database and the one you\n# wish the service to use. Alternatively, you can use an ini formatted config\n# at the location specified by OPENSTACK_CONFIG_FILE, and extract the string\n# from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by\n# OPENSTACK_CONFIG_DB_SECTION.\n\nimport os\nimport sys\ntry:\n    import ConfigParser\n    PARSER_OPTS = {}\nexcept ImportError:\n    import configparser as ConfigParser\n    PARSER_OPTS = {\"strict\": False}\nimport logging\nfrom sqlalchemy import create_engine\n\n# Create logger, console handler and formatter\nlogger = logging.getLogger('OpenStack-Helm DB Init')\nlogger.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n# Set the formatter and add the handler\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\n\n# Get the connection string for the service db root user\nif \"ROOT_DB_CONNECTION\" in os.environ:\n    db_connection = os.environ['ROOT_DB_CONNECTION']\n    logger.info('Got DB root connection')\nelse:\n    logger.critical('environment variable ROOT_DB_CONNECTION not set')\n    sys.exit(1)\n\nmysql_x509 = os.getenv('MARIADB_X509', \"\")\nssl_args = {}\nif mysql_x509:\n    ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',\n                'key': '/etc/mysql/certs/tls.key',\n                'cert': '/etc/mysql/certs/tls.crt'}}\n\n# Get the connection string for the service db\nif \"OPENSTACK_CONFIG_FILE\" in os.environ:\n    os_conf = os.environ['OPENSTACK_CONFIG_FILE']\n    if \"OPENSTACK_CONFIG_DB_SECTION\" in os.environ:\n        os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']\n    else:\n        logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')\n        sys.exit(1)\n    if \"OPENSTACK_CONFIG_DB_KEY\" in os.environ:\n        os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']\n    else:\n        logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')\n        sys.exit(1)\n    try:\n        config = ConfigParser.RawConfigParser(**PARSER_OPTS)\n        logger.info(\"Using {0} as db config source\".format(os_conf))\n        config.read(os_conf)\n        logger.info(\"Trying to load db config from {0}:{1}\".format(\n            os_conf_section, os_conf_key))\n        user_db_conn = config.get(os_conf_section, os_conf_key)\n        logger.info(\"Got config from {0}\".format(os_conf))\n    except:\n        logger.critical(\"Tried to load config from {0} but failed.\".format(os_conf))\n        raise\nelif \"DB_CONNECTION\" in os.environ:\n    user_db_conn = os.environ['DB_CONNECTION']\n    logger.info('Got config from DB_CONNECTION env var')\nelse:\n    logger.critical('Could not get db config, either from config file or env var')\n    sys.exit(1)\n\n# Root DB engine\ntry:\n    root_engine_full = create_engine(db_connection)\n    root_user = root_engine_full.url.username\n    root_password = root_engine_full.url.password\n    drivername = root_engine_full.url.drivername\n    host = root_engine_full.url.host\n    port = root_engine_full.url.port\n    root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])\n    root_engine = create_engine(root_engine_url, connect_args=ssl_args)\n    connection = root_engine.connect()\n    connection.close()\n    logger.info(\"Tested connection to DB @ {0}:{1} as {2}\".format(\n        host, port, root_user))\nexcept:\n    logger.critical('Could not connect to database as root user')\n    raise\n\n# User DB engine\ntry:\n    user_engine = create_engine(user_db_conn, connect_args=ssl_args)\n    # Get our user data out of the user_engine\n    database = user_engine.url.database\n    user = user_engine.url.username\n    password = user_engine.url.password\n    logger.info('Got user db config')\nexcept:\n    logger.critical('Could not get user database config')\n    raise\n\n# Create DB\ntry:\n    root_engine.execute(\"CREATE DATABASE IF NOT EXISTS {0}\".format(database))\n    logger.info(\"Created database {0}\".format(database))\nexcept:\n    logger.critical(\"Could not create database {0}\".format(database))\n    raise\n\n# Create DB User\ntry:\n    root_engine.execute(\n        \"GRANT ALL ON `{0}`.* TO \\'{1}\\'@\\'%%\\' IDENTIFIED BY \\'{2}\\' {3}\".format(\n            database, user, password, mysql_x509))\n    logger.info(\"Created user {0} for {1}\".format(user, database))\nexcept:\n    logger.critical(\"Could not create user {0} for {1}\".format(user, database))\n    raise\n\n# Test connection\ntry:\n    connection = user_engine.connect()\n    connection.close()\n    logger.info(\"Tested connection to DB @ {0}:{1}/{2} as {3}\".format(\n        host, port, database, user))\nexcept:\n    logger.critical('Could not connect to database as user')\n    raise\n\nlogger.info('Finished DB Management')\n",
      "ks-service.sh": "#!/bin/bash\n\n# Copyright 2017 Pete Birley\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -ex\n\n# Service boilerplate description\nOS_SERVICE_DESC=\"${OS_REGION_NAME}: ${OS_SERVICE_NAME} (${OS_SERVICE_TYPE}) service\"\n\n# Get Service ID if it exists\nunset OS_SERVICE_ID\n\n# FIXME - There seems to be an issue once in a while where the\n# openstack service list fails and encounters an error message such as:\n#   Unable to establish connection to\n#   https://keystone-api.openstack.svc.cluster.local:5000/v3/auth/tokens:\n#   ('Connection aborted.', OSError(\"(104, 'ECONNRESET')\",))\n# During an upgrade scenario, this would cause the OS_SERVICE_ID to be blank\n# and it would attempt to create a new service when it was not needed.\n# This duplciate service would sometimes be used by other services such as\n# Horizon and would give an 'Invalid Service Catalog' error.\n# This loop allows for a 'retry' of the openstack service list in an\n# attempt to get the service list as expected if it does ecounter an error.\n# This loop and recheck can be reverted once the underlying issue is addressed.\n\n# If OS_SERVICE_ID is blank then wait a few seconds to give it\n# additional time and try again\nfor i in $(seq 3)\ndo\n  OS_SERVICE_ID=$( openstack service list -f csv --quote none | \\\n                   grep \",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$\" | \\\n                   sed -e \"s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g\" )\n\n  # If the service was found, go ahead and exit successfully.\n  if [[ -n \"${OS_SERVICE_ID}\" ]]; then\n    exit 0\n  fi\n\n  sleep 2\ndone\n\n# If we've reached this point and a Service ID was not found,\n# then create the service\nOS_SERVICE_ID=$(openstack service create -f value -c id \\\n                --name=\"${OS_SERVICE_NAME}\" \\\n                --description \"${OS_SERVICE_DESC}\" \\\n                --enable \\\n                \"${OS_SERVICE_TYPE}\")\n",
      "ks-endpoints.sh": "#!/bin/bash\n\n# Copyright 2017 Pete Birley\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -ex\n\n# Get Service ID\nOS_SERVICE_ID=$( openstack service list -f csv --quote none | \\\n                  grep \",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$\" | \\\n                    sed -e \"s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g\" )\n\n# Get Endpoint ID if it exists\nOS_ENDPOINT_ID=$( openstack endpoint list  -f csv --quote none | \\\n                  grep \"^[a-z0-9]*,${OS_REGION_NAME},${OS_SERVICE_NAME},${OS_SERVICE_TYPE},True,${OS_SVC_ENDPOINT},\" | \\\n                  awk -F ',' '{ print $1 }' )\n\n# Making sure only a single endpoint exists for a service within a region\nif [ \"$(echo $OS_ENDPOINT_ID | wc -w)\" -gt \"1\" ]; then\n  echo \"More than one endpoint found, cleaning up\"\n  for ENDPOINT_ID in $OS_ENDPOINT_ID; do\n    openstack endpoint delete ${ENDPOINT_ID}\n  done\n  unset OS_ENDPOINT_ID\nfi\n\n# Determine if Endpoint needs updated\nif [[ ${OS_ENDPOINT_ID} ]]; then\n  OS_ENDPOINT_URL_CURRENT=$(openstack endpoint show ${OS_ENDPOINT_ID} -f value -c url)\n  if [ \"${OS_ENDPOINT_URL_CURRENT}\" == \"${OS_SERVICE_ENDPOINT}\" ]; then\n    echo \"Endpoints Match: no action required\"\n    OS_ENDPOINT_UPDATE=\"False\"\n  else\n    echo \"Endpoints Dont Match: removing existing entries\"\n    openstack endpoint delete ${OS_ENDPOINT_ID}\n    OS_ENDPOINT_UPDATE=\"True\"\n  fi\nelse\n  OS_ENDPOINT_UPDATE=\"True\"\nfi\n\n# Update Endpoint if required\nif [[ \"${OS_ENDPOINT_UPDATE}\" == \"True\" ]]; then\n  OS_ENDPOINT_ID=$( openstack endpoint create -f value -c id \\\n    --region=\"${OS_REGION_NAME}\" \\\n    \"${OS_SERVICE_ID}\" \\\n    ${OS_SVC_ENDPOINT} \\\n    \"${OS_SERVICE_ENDPOINT}\" )\nfi\n\n# Display the Endpoint\nopenstack endpoint show ${OS_ENDPOINT_ID}\n",
      "ks-user.sh": "#!/bin/bash\n\n# Copyright 2017 Pete Birley\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -ex\n\nshopt -s nocasematch\n\nif [[ \"${SERVICE_OS_PROJECT_DOMAIN_NAME}\" == \"Default\" ]]\nthen\n  PROJECT_DOMAIN_ID=\"default\"\nelse\n  # Manage project domain\n  PROJECT_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \\\n    --description=\"Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}\" \\\n    \"${SERVICE_OS_PROJECT_DOMAIN_NAME}\")\nfi\n\nif [[ \"${SERVICE_OS_USER_DOMAIN_NAME}\" == \"Default\" ]]\nthen\n  USER_DOMAIN_ID=\"default\"\nelse\n  # Manage user domain\n  USER_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \\\n    --description=\"Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}\" \\\n    \"${SERVICE_OS_USER_DOMAIN_NAME}\")\nfi\n\nshopt -u nocasematch\n\n# Manage user project\nUSER_PROJECT_DESC=\"Service Project for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}\"\nUSER_PROJECT_ID=$(openstack project create --or-show --enable -f value -c id \\\n    --domain=\"${PROJECT_DOMAIN_ID}\" \\\n    --description=\"${USER_PROJECT_DESC}\" \\\n    \"${SERVICE_OS_PROJECT_NAME}\");\n\n# Manage user\nUSER_DESC=\"Service User for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}/${SERVICE_OS_SERVICE_NAME}\"\nUSER_ID=$(openstack user create --or-show --enable -f value -c id \\\n    --domain=\"${USER_DOMAIN_ID}\" \\\n    --project-domain=\"${PROJECT_DOMAIN_ID}\" \\\n    --project=\"${USER_PROJECT_ID}\" \\\n    --description=\"${USER_DESC}\" \\\n    \"${SERVICE_OS_USERNAME}\");\n\n# Manage user password (we do this in a seperate step to ensure the password is updated if required)\nset +x\necho \"Setting user password via: openstack user set --password=xxxxxxx ${USER_ID}\"\nopenstack user set --password=\"${SERVICE_OS_PASSWORD}\" \"${USER_ID}\"\nset -x\n\nfunction ks_assign_user_role () {\n  if [[ \"$SERVICE_OS_ROLE\" == \"admin\" ]]\n  then\n    USER_ROLE_ID=\"$SERVICE_OS_ROLE\"\n  else\n    USER_ROLE_ID=$(openstack role create --or-show -f value -c id \"${SERVICE_OS_ROLE}\");\n  fi\n\n  # Manage user role assignment\n  openstack role add \\\n      --user=\"${USER_ID}\" \\\n      --user-domain=\"${USER_DOMAIN_ID}\" \\\n      --project-domain=\"${PROJECT_DOMAIN_ID}\" \\\n      --project=\"${USER_PROJECT_ID}\" \\\n      \"${USER_ROLE_ID}\"\n}\n\n# Manage user service role\nIFS=','\nfor SERVICE_OS_ROLE in ${SERVICE_OS_ROLES}; do\n  ks_assign_user_role\ndone\n\n# Manage user member role\n: ${MEMBER_OS_ROLE:=\"member\"}\nexport USER_ROLE_ID=$(openstack role create --or-show -f value -c id \\\n    \"${MEMBER_OS_ROLE}\");\nks_assign_user_role\n",
      "manage-db.sh": "#!/bin/bash\n\n\n\nset -ex\n\nfunction create_or_update_db () {\n  revisionResults=$(rally db revision)\n  if [ $revisionResults = \"None\"  ]\n  then\n    rally db create\n  else\n    rally db upgrade\n  fi\n}\n\ncreate_or_update_db\n",
      "run-task.sh": "#!/bin/bash\n\n\n\nset -ex\n\n\n: ${RALLY_ENV_NAME:=\"openstack-helm\"}\n\nfunction run_rally () {\n  CURRENT_TEST=$1\n  rally deployment use ${RALLY_ENV_NAME}\n  rally deployment check\n  rally task validate /tasks/rally/${CURRENT_TEST}.yaml\n  rally task start /tasks/rally/${CURRENT_TEST}.yaml\n  rally task list\n  rally task report --out /var/lib/rally/data/${CURRENT_TEST}.html\n  rally task sla-check\n\n}\n\nfunction create_deployment () {\n  listResults=$(rally deployment list)\n\n  if [ $(echo $listResults | awk '{print $1;}') = \"There\"  ]\n  then\n    rally deployment create --fromenv --name ${RALLY_ENV_NAME}\n  fi\n}\n\ncreate_deployment\n\nIFS=','; for TEST in $ENABLED_TESTS; do\n  run_rally $TEST\ndone\n\nexit 0\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "rally-tasks"
    },
    "data": {
      "authenticate.yaml": "Authenticate.keystone:\n- context:\n    users:\n      tenants: 3\n      users_per_tenant: 50\n  runner:\n    concurrency: 5\n    times: 100\n    type: constant\nAuthenticate.validate_cinder:\n- args:\n    repetitions: 2\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 5\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nAuthenticate.validate_glance:\n- args:\n    repetitions: 2\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 5\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nAuthenticate.validate_heat:\n- args:\n    repetitions: 2\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 5\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nAuthenticate.validate_neutron:\n- args:\n    repetitions: 2\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 5\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nAuthenticate.validate_nova:\n- args:\n    repetitions: 2\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 5\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\n",
      "ceilometer.yaml": "CeilometerAlarms.create_alarm:\n- args:\n    alarm_actions:\n    - http://localhost:8776/alarm\n    insufficient_data_actions:\n    - http://localhost:8776/notok\n    meter_name: ram_util\n    ok_actions:\n    - http://localhost:8776/ok\n    statistic: avg\n    threshold: 10\n    type: threshold\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nCeilometerAlarms.create_alarm_and_get_history:\n- args:\n    alarm_actions:\n    - http://localhost:8776/alarm\n    insufficient_data_actions:\n    - http://localhost:8776/notok\n    meter_name: ram_util\n    ok_actions:\n    - http://localhost:8776/ok\n    state: ok\n    statistic: avg\n    threshold: 10\n    type: threshold\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nCeilometerAlarms.create_and_delete_alarm:\n- args:\n    alarm_actions:\n    - http://localhost:8776/alarm\n    insufficient_data_actions:\n    - http://localhost:8776/notok\n    meter_name: ram_util\n    ok_actions:\n    - http://localhost:8776/ok\n    statistic: avg\n    threshold: 10\n    type: threshold\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nCeilometerAlarms.create_and_get_alarm:\n- args:\n    alarm_actions:\n    - http://localhost:8776/alarm\n    insufficient_data_actions:\n    - http://localhost:8776/notok\n    meter_name: ram_util\n    ok_actions:\n    - http://localhost:8776/ok\n    statistic: avg\n    threshold: 10\n    type: threshold\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nCeilometerAlarms.create_and_list_alarm:\n- args:\n    alarm_actions:\n    - http://localhost:8776/alarm\n    insufficient_data_actions:\n    - http://localhost:8776/notok\n    meter_name: ram_util\n    ok_actions:\n    - http://localhost:8776/ok\n    statistic: avg\n    threshold: 10\n    type: threshold\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nCeilometerAlarms.create_and_update_alarm:\n- args:\n    alarm_actions:\n    - http://localhost:8776/alarm\n    insufficient_data_actions:\n    - http://localhost:8776/notok\n    meter_name: ram_util\n    ok_actions:\n    - http://localhost:8776/ok\n    statistic: avg\n    threshold: 10\n    type: threshold\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nCeilometerAlarms.list_alarms:\n- context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nCeilometerEvents.create_user_and_get_event:\n- context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 10\n    times: 10\n    type: constant\nCeilometerEvents.create_user_and_list_event_types:\n- context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 10\n    times: 10\n    type: constant\nCeilometerEvents.create_user_and_list_events:\n- context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 10\n    times: 10\n    type: constant\nCeilometerMeters.list_matched_meters:\n- args:\n    filter_by_project_id: true\n    filter_by_resource_id: true\n    filter_by_user_id: true\n    limit: 50\n    metadata_query:\n      status: terminated\n  context:\n    ceilometer:\n      counter_name: benchmark_meter\n      counter_type: gauge\n      counter_unit: '%'\n      counter_volume: 100\n      metadata_list:\n      - deleted: \"false\"\n        name: rally benchmark on\n        status: active\n      - deleted: \"true\"\n        name: rally benchmark off\n        status: terminated\n      resources_per_tenant: 100\n      samples_per_resource: 100\n      timestamp_interval: 10\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nCeilometerMeters.list_meters:\n- args:\n    limit: 50\n    metadata_query:\n      status: terminated\n  context:\n    ceilometer:\n      counter_name: benchmark_meter\n      counter_type: gauge\n      counter_unit: '%'\n      counter_volume: 100\n      metadata_list:\n      - deleted: \"false\"\n        name: rally benchmark on\n        status: active\n      - deleted: \"true\"\n        name: rally benchmark off\n        status: terminated\n      resources_per_tenant: 100\n      samples_per_resource: 100\n      timestamp_interval: 10\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nCeilometerQueries.create_and_query_alarm_history:\n- args:\n    alarm_actions:\n    - http://localhost:8776/alarm\n    insufficient_data_actions:\n    - http://localhost:8776/notok\n    limit: null\n    meter_name: ram_util\n    ok_actions:\n    - http://localhost:8776/ok\n    orderby: null\n    statistic: avg\n    threshold: 10\n    type: threshold\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nCeilometerQueries.create_and_query_alarms:\n- args:\n    alarm_actions:\n    - http://localhost:8776/alarm\n    filter:\n      and:\n      - '!=':\n          state: dummy_state\n      - =:\n          type: threshold\n    insufficient_data_actions:\n    - http://localhost:8776/notok\n    limit: 10\n    meter_name: ram_util\n    ok_actions:\n    - http://localhost:8776/ok\n    orderby: null\n    statistic: avg\n    threshold: 10\n    type: threshold\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nCeilometerQueries.create_and_query_samples:\n- args:\n    counter_name: cpu_util\n    counter_type: gauge\n    counter_unit: instance\n    counter_volume: 1\n    filter:\n      =:\n        counter_unit: instance\n    limit: 10\n    orderby: null\n    resource_id: resource_id\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nCeilometerResource.get_tenant_resources:\n- context:\n    ceilometer:\n      counter_name: cpu_util\n      counter_type: gauge\n      counter_unit: instance\n      counter_volume: 1\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nCeilometerResource.list_matched_resources:\n- args:\n    filter_by_project_id: true\n    filter_by_user_id: true\n    limit: 50\n    metadata_query:\n      status: terminated\n  context:\n    ceilometer:\n      counter_name: benchmark_meter\n      counter_type: gauge\n      counter_unit: '%'\n      counter_volume: 100\n      metadata_list:\n      - deleted: \"false\"\n        name: rally benchmark on\n        status: active\n      - deleted: \"true\"\n        name: rally benchmark off\n        status: terminated\n      resources_per_tenant: 100\n      samples_per_resource: 100\n      timestamp_interval: 10\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nCeilometerResource.list_resources:\n- args:\n    limit: 50\n    metadata_query:\n      status: terminated\n  context:\n    ceilometer:\n      counter_name: benchmark_meter\n      counter_type: gauge\n      counter_unit: '%'\n      counter_volume: 100\n      metadata_list:\n      - deleted: \"false\"\n        name: rally benchmark on\n        status: active\n      - deleted: \"true\"\n        name: rally benchmark off\n        status: terminated\n      resources_per_tenant: 100\n      samples_per_resource: 100\n      timestamp_interval: 10\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nCeilometerSamples.list_matched_samples:\n- args:\n    filter_by_project_id: true\n    filter_by_resource_id: true\n    filter_by_user_id: true\n    limit: 50\n    metadata_query:\n      status: not_active\n  context:\n    ceilometer:\n      counter_name: cpu_util\n      counter_type: gauge\n      counter_unit: instance\n      counter_volume: 1\n      metadata_list:\n      - created_at: 2015-09-04T12:34:19.000000\n        deleted: \"False\"\n        name: fake_resource\n        status: active\n      - created_at: 2015-09-10T06:55:12.000000\n        deleted: \"False\"\n        name: fake_resource_1\n        status: not_active\n      resources_per_tenant: 100\n      samples_per_resource: 100\n      timestamp_interval: 60\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nCeilometerSamples.list_samples:\n- args:\n    limit: 50\n    metadata_query:\n      status: not_active\n  context:\n    ceilometer:\n      batch_size: 5\n      counter_name: cpu_util\n      counter_type: gauge\n      counter_unit: instance\n      counter_volume: 1\n      metadata_list:\n      - created_at: 2015-09-04T12:34:19.000000\n        deleted: \"False\"\n        name: fake_resource\n        status: active\n      - created_at: 2015-09-10T06:55:12.000000\n        deleted: \"False\"\n        name: fake_resource_1\n        status: not_active\n      resources_per_tenant: 100\n      samples_per_resource: 100\n      timestamp_interval: 60\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nCeilometerStats.create_meter_and_get_stats:\n- args:\n    counter_type: cumulative\n    counter_unit: \"\"\n    counter_volume: 1\n    resource_id: resource-id\n    user_id: user-id\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 5\n    times: 200\n    type: constant\nCeilometerStats.get_stats:\n- args:\n    filter_by_project_id: true\n    filter_by_resource_id: true\n    filter_by_user_id: true\n    groupby: resource_id\n    metadata_query:\n      status: terminated\n    meter_name: benchmark_meter\n    period: 300\n  context:\n    ceilometer:\n      counter_name: benchmark_meter\n      counter_type: gauge\n      counter_unit: '%'\n      counter_volume: 100\n      metadata_list:\n      - deleted: \"false\"\n        name: rally benchmark on\n        status: active\n      - deleted: \"true\"\n        name: rally benchmark off\n        status: terminated\n      resources_per_tenant: 100\n      samples_per_resource: 100\n      timestamp_interval: 10\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nCeilometerTraits.create_user_and_list_trait_descriptions:\n- context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 10\n    times: 10\n    type: constant\nCeilometerTraits.create_user_and_list_traits:\n- context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 10\n    times: 10\n    type: constant\n",
      "cinder.yaml": "CinderVolumeBackups.create_incremental_volume_backup:\n- args:\n    create_backup_kwargs: {}\n    create_volume_kwargs: {}\n    size: 1\n  context:\n    roles:\n    - admin\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nCinderVolumeTypes.create_and_delete_volume_type:\n- args: {}\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nCinderVolumeTypes.create_and_list_encryption_type:\n- args:\n    specs:\n      cipher: aes-xts-plain64\n      control_location: front-end\n      key_size: 512\n      provider: LuksEncryptor\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 4\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nCinderVolumeTypes.create_volume_type_and_encryption_type:\n- args:\n    specs:\n      cipher: aes-xts-plain64\n      control_location: front-end\n      key_size: 512\n      provider: LuksEncryptor\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nCinderVolumes.create_and_accept_transfer:\n- args:\n    size: 1\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 3\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nCinderVolumes.create_and_attach_volume:\n- args:\n    create_volume_params:\n      availability_zone: nova\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    size: 10\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 5\n    type: constant\n- args:\n    create_volume_params:\n      availability_zone: nova\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    size:\n      max: 5\n      min: 1\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 5\n    type: constant\nCinderVolumes.create_and_delete_snapshot:\n- args:\n    force: false\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n    volumes:\n      size: 1\n  runner:\n    concurrency: 2\n    times: 3\n    type: constant\nCinderVolumes.create_and_delete_volume:\n- args:\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    size: 1\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\nCinderVolumes.create_and_extend_volume:\n- args:\n    new_size: 2\n    size: 1\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\n- args:\n    new_size:\n      max: 10\n      min: 6\n    size:\n      max: 5\n      min: 1\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\nCinderVolumes.create_and_get_volume:\n- args:\n    size: 1\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\n- args:\n    size:\n      max: 5\n      min: 1\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nCinderVolumes.create_and_list_snapshots:\n- args:\n    detailed: true\n    force: false\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n    volumes:\n      size: 1\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\nCinderVolumes.create_and_list_volume:\n- args:\n    detailed: true\n    size: 1\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 3\n    type: constant\n- args:\n    detailed: true\n    size:\n      max: 5\n      min: 1\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 3\n    type: constant\nCinderVolumes.create_and_list_volume_backups:\n- args:\n    create_backup_kwargs: {}\n    create_volume_kwargs: {}\n    detailed: true\n    do_delete: true\n    size: 1\n  context:\n    roles:\n    - member\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\nCinderVolumes.create_and_restore_volume_backup:\n- args:\n    create_backup_kwargs: {}\n    create_volume_kwargs: {}\n    do_delete: true\n    size: 1\n  context:\n    roles:\n    - member\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 2\n    type: constant\nCinderVolumes.create_and_update_volume:\n- args:\n    create_volume_kwargs: {}\n    size: 1\n    update_volume_kwargs:\n      display_description: desc_updated\n      display_name: name_updated\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 3\n    type: constant\nCinderVolumes.create_and_upload_volume_to_image:\n- args:\n    container_format: bare\n    disk_format: raw\n    do_delete: true\n    force: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    size: 1\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 3\n    type: constant\n- args:\n    container_format: bare\n    disk_format: raw\n    do_delete: true\n    force: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    size:\n      max: 5\n      min: 1\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 3\n    type: constant\nCinderVolumes.create_from_volume_and_delete_volume:\n- args:\n    size: 1\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n    volumes:\n      size: 1\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\n- args:\n    size:\n      max: 5\n      min: 1\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n    volumes:\n      size: 1\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\nCinderVolumes.create_nested_snapshots_and_attach_volume:\n- args:\n    nested_level: 5\n    size:\n      max: 5\n      min: 1\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    servers:\n      flavor:\n        name: m1.tiny\n      image:\n        name: cirros-0.3.5-x86_64-disk.img\n      servers_per_tenant: 2\n    users:\n      tenants: 2\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\nCinderVolumes.create_snapshot_and_attach_volume:\n- args:\n    size:\n      max: 5\n      min: 1\n    volume_type: false\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    servers:\n      flavor:\n        name: m1.tiny\n      image:\n        name: cirros-0.3.5-x86_64-disk.img\n      servers_per_tenant: 2\n    users:\n      tenants: 2\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 4\n    type: constant\n- args:\n    size:\n      max: 5\n      min: 1\n    volume_type: true\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    servers:\n      flavor:\n        name: m1.tiny\n      image:\n        name: cirros-0.3.5-x86_64-disk.img\n      servers_per_tenant: 2\n    users:\n      tenants: 2\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 4\n    type: constant\nCinderVolumes.create_volume_and_clone:\n- args:\n    size: 1\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 3\n    type: constant\n- args:\n    nested_level: 3\n    size:\n      max: 5\n      min: 1\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 3\n    type: constant\nCinderVolumes.create_volume_and_update_readonly_flag:\n- args:\n    read_only: true\n    size: 1\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 3\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nCinderVolumes.create_volume_backup:\n- args:\n    create_backup_kwargs: {}\n    create_volume_kwargs: {}\n    do_delete: true\n    size: 1\n  context:\n    roles:\n    - member\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 2\n    type: constant\nCinderVolumes.create_volume_from_snapshot:\n- args:\n    do_delete: true\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n    volumes:\n      size: 1\n  runner:\n    concurrency: 2\n    times: 3\n    type: constant\nCinderVolumes.list_transfers:\n- args:\n    detailed: true\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 3\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nCinderVolumes.list_types:\n- args:\n    is_public: true\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nCinderVolumes.list_volumes:\n- args:\n    detailed: true\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n    volumes:\n      size: 1\n      volumes_per_tenant: 4\n  runner:\n    concurrency: 1\n    times: 100\n    type: constant\nCinderVolumes.modify_volume_metadata:\n- args: {}\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n    volumes:\n      size: 1\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n",
      "glance.yaml": "GlanceImages.create_and_delete_image:\n- args:\n    container_format: bare\n    disk_format: qcow2\n    image_location: http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nGlanceImages.create_and_list_image:\n- args:\n    container_format: bare\n    disk_format: qcow2\n    image_location: http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nGlanceImages.create_image_and_boot_instances:\n- args:\n    container_format: bare\n    disk_format: qcow2\n    flavor:\n      name: m1.tiny\n    image_location: http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img\n    number_instances: 2\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 5\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nGlanceImages.list_images:\n- context:\n    images:\n      image_container: bare\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img\n      images_per_tenant: 4\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\n",
      "heat.yaml": "HeatStacks.create_and_delete_stack:\n- args:\n    template_path: /tmp/tasks/test-templates/server-with-ports.yaml\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nHeatStacks.create_and_list_stack:\n- args:\n    template_path: /tmp/tasks/test-templates/default.yaml\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nHeatStacks.create_check_delete_stack:\n- args:\n    template_path: /tmp/tasks/test-templates/random-strings.yaml\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nHeatStacks.create_snapshot_restore_delete_stack:\n- args:\n    template_path: /tmp/tasks/test-templates/random-strings.yaml\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nHeatStacks.create_stack_and_list_output:\n- args:\n    template_path: /tmp/tasks/test-templates/resource-group-with-outputs.yaml\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\nHeatStacks.create_stack_and_list_output_via_API:\n- args:\n    template_path: /tmp/tasks/test-templates/resource-group-with-outputs.yaml\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\nHeatStacks.create_stack_and_scale:\n- args:\n    delta: 1\n    output_key: scaling_url\n    template_path: /tmp/tasks/test-templates/autoscaling-group.yaml\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 3\n    type: constant\nHeatStacks.create_stack_and_show_output:\n- args:\n    output_key: val1\n    template_path: /tmp/tasks/test-templates/resource-group-with-outputs.yaml\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\nHeatStacks.create_stack_and_show_output_via_API:\n- args:\n    output_key: val1\n    template_path: /tmp/tasks/test-templates/resource-group-with-outputs.yaml\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 5\n    type: constant\nHeatStacks.create_suspend_resume_delete_stack:\n- args:\n    template_path: /tmp/tasks/test-templates/random-strings.yaml\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nHeatStacks.create_update_delete_stack:\n- args:\n    template_path: /tmp/tasks/test-templates/resource-group.yaml\n    updated_template_path: /tmp/tasks/test-templates/updated-resource-group-reduce.yaml\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nHeatStacks.list_stacks_and_events:\n- context:\n    stacks:\n      resources_per_stack: 10\n      stacks_per_tenant: 2\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nHeatStacks.list_stacks_and_resources:\n- context:\n    stacks:\n      resources_per_stack: 10\n      stacks_per_tenant: 2\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\n",
      "keystone.yaml": "KeystoneBasic.add_and_remove_user_role:\n- context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.authenticate_user_and_validate_token:\n- args: {}\n  runner:\n    concurrency: 5\n    times: 20\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nKeystoneBasic.create_add_and_list_user_roles:\n- context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.create_and_delete_ec2credential:\n- context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nKeystoneBasic.create_and_delete_role:\n- runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.create_and_delete_service:\n- args:\n    description: test_description\n    service_type: Rally_test_type\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.create_and_get_role:\n- args: {}\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nKeystoneBasic.create_and_list_ec2credentials:\n- context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nKeystoneBasic.create_and_list_services:\n- args:\n    description: test_description\n    service_type: Rally_test_type\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.create_and_list_tenants:\n- args: {}\n  runner:\n    concurrency: 1\n    times: 10\n    type: constant\nKeystoneBasic.create_and_list_users:\n- args: {}\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.create_delete_user:\n- args: {}\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.create_tenant:\n- args: {}\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.create_tenant_with_users:\n- args:\n    users_per_tenant: 10\n  runner:\n    concurrency: 10\n    times: 10\n    type: constant\nKeystoneBasic.create_update_and_delete_tenant:\n- args: {}\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.create_user:\n- args: {}\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.create_user_set_enabled_and_delete:\n- args:\n    enabled: true\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\n- args:\n    enabled: false\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.create_user_update_password:\n- args: {}\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nKeystoneBasic.get_entities:\n- runner:\n    concurrency: 10\n    times: 100\n    type: constant\n",
      "magnum.yaml": "MagnumClusterTemplates.list_cluster_templates:\n- context:\n    cluster_templates:\n      coe: kubernetes\n      dns_nameserver: 8.8.8.8\n      docker_volume_size: 5\n      external_network_id: public\n      flavor_id: m1.small\n      image_id: fedora-atomic-latest\n      network_driver: flannel\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\n- context:\n    cluster_templates:\n      coe: swarm\n      dns_nameserver: 8.8.8.8\n      docker_volume_size: 5\n      external_network_id: public\n      flavor_id: m1.small\n      image_id: fedora-atomic-latest\n      network_driver: docker\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\n- context:\n    cluster_templates:\n      coe: mesos\n      dns_nameserver: 8.8.8.8\n      external_network_id: public\n      flavor_id: m1.small\n      image_id: ubuntu-mesos\n      network_driver: docker\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\nMagnumClusters.create_and_list_clusters:\n- args:\n    node_count: 1\n  context:\n    cluster_templates:\n      coe: kubernetes\n      dns_nameserver: 8.8.8.8\n      docker_volume_size: 5\n      external_network_id: public\n      flavor_id: m1.small\n      image_id: fedora-atomic-latest\n      network_driver: flannel\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\n- args:\n    node_count: 1\n  context:\n    cluster_templates:\n      coe: swarm\n      dns_nameserver: 8.8.8.8\n      docker_volume_size: 5\n      external_network_id: public\n      flavor_id: m1.small\n      image_id: fedora-atomic-latest\n      network_driver: docker\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\n- args:\n    node_count: 1\n  context:\n    cluster_templates:\n      coe: mesos\n      dns_nameserver: 8.8.8.8\n      external_network_id: public\n      flavor_id: m1.small\n      image_id: ubuntu-mesos\n      network_driver: docker\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\nMagnumClusters.list_clusters:\n- context:\n    cluster_templates:\n      coe: kubernetes\n      dns_nameserver: 8.8.8.8\n      docker_volume_size: 5\n      external_network_id: public\n      flavor_id: m1.small\n      image_id: fedora-atomic-latest\n      network_driver: flannel\n    clusters:\n      node_count: 2\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\n- context:\n    cluster_templates:\n      coe: swarm\n      dns_nameserver: 8.8.8.8\n      docker_volume_size: 5\n      external_network_id: public\n      flavor_id: m1.small\n      image_id: fedora-atomic-latest\n      network_driver: docker\n    clusters:\n      node_count: 2\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\n- context:\n    cluster_templates:\n      coe: mesos\n      dns_nameserver: 8.8.8.8\n      external_network_id: public\n      flavor_id: m1.small\n      image_id: ubuntu-mesos\n      network_driver: docker\n    clusters:\n      node_count: 2\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\n",
      "neutron.yaml": "NeutronNetworks.create_and_delete_floating_ips:\n- args:\n    floating_ip_args: {}\n    floating_network: public\n  context:\n    quotas:\n      neutron:\n        floatingip: -1\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nNeutronNetworks.create_and_delete_networks:\n- args:\n    network_create_args: {}\n  context:\n    quotas:\n      neutron:\n        network: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nNeutronNetworks.create_and_delete_ports:\n- args:\n    network_create_args: {}\n    port_create_args: {}\n    ports_per_network: 10\n  context:\n    network: {}\n    quotas:\n      neutron:\n        network: -1\n        port: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nNeutronNetworks.create_and_delete_routers:\n- args:\n    network_create_args: {}\n    router_create_args: {}\n    subnet_cidr_start: 1.1.0.0/30\n    subnet_create_args: {}\n    subnets_per_network: 2\n  context:\n    network: {}\n    quotas:\n      neutron:\n        network: -1\n        router: -1\n        subnet: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 30\n    type: constant\nNeutronNetworks.create_and_delete_subnets:\n- args:\n    network_create_args: {}\n    subnet_cidr_start: 1.1.0.0/30\n    subnet_create_args: {}\n    subnets_per_network: 2\n  context:\n    network: {}\n    quotas:\n      neutron:\n        network: -1\n        subnet: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nNeutronNetworks.create_and_list_floating_ips:\n- args:\n    floating_ip_args: {}\n    floating_network: public\n  context:\n    quotas:\n      neutron:\n        floatingip: -1\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nNeutronNetworks.create_and_list_networks:\n- args:\n    network_create_args: {}\n  context:\n    quotas:\n      neutron:\n        network: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\n- args:\n    network_create_args:\n      provider:network_type: vxlan\n  context:\n    quotas:\n      neutron:\n        network: -1\n    roles:\n    - admin\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNeutronNetworks.create_and_list_ports:\n- args:\n    network_create_args: {}\n    port_create_args: {}\n    ports_per_network: 10\n  context:\n    network: {}\n    quotas:\n      neutron:\n        network: -1\n        port: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nNeutronNetworks.create_and_list_routers:\n- args:\n    network_create_args: {}\n    router_create_args: {}\n    subnet_cidr_start: 1.1.0.0/30\n    subnet_create_args: {}\n    subnets_per_network: 2\n  context:\n    network: {}\n    quotas:\n      neutron:\n        network: -1\n        router: -1\n        subnet: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nNeutronNetworks.create_and_list_subnets:\n- args:\n    network_create_args: {}\n    subnet_cidr_start: 1.1.0.0/30\n    subnet_create_args: {}\n    subnets_per_network: 2\n  context:\n    network: {}\n    quotas:\n      neutron:\n        network: -1\n        subnet: -1\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nNeutronNetworks.create_and_show_network:\n- args:\n    network_create_args: {}\n  context:\n    quotas:\n      neutron:\n        network: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNeutronNetworks.create_and_update_networks:\n- args:\n    network_create_args: {}\n    network_update_args:\n      admin_state_up: false\n      name: _updated\n  context:\n    quotas:\n      neutron:\n        network: -1\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nNeutronNetworks.create_and_update_ports:\n- args:\n    network_create_args: {}\n    port_create_args: {}\n    port_update_args:\n      admin_state_up: false\n      device_id: dummy_id\n      device_owner: dummy_owner\n      name: _port_updated\n    ports_per_network: 5\n  context:\n    network: {}\n    quotas:\n      neutron:\n        network: -1\n        port: -1\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nNeutronNetworks.create_and_update_routers:\n- args:\n    network_create_args: {}\n    router_create_args: {}\n    router_update_args:\n      admin_state_up: false\n      name: _router_updated\n    subnet_cidr_start: 1.1.0.0/30\n    subnet_create_args: {}\n    subnets_per_network: 2\n  context:\n    network: {}\n    quotas:\n      neutron:\n        network: -1\n        router: -1\n        subnet: -1\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nNeutronNetworks.create_and_update_subnets:\n- args:\n    network_create_args: {}\n    subnet_cidr_start: 1.4.0.0/16\n    subnet_create_args: {}\n    subnet_update_args:\n      enable_dhcp: false\n      name: _subnet_updated\n    subnets_per_network: 2\n  context:\n    network: {}\n    quotas:\n      neutron:\n        network: -1\n        subnet: -1\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nNeutronNetworks.list_agents:\n- args:\n    agent_args: {}\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 3\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNeutronSecurityGroup.create_and_delete_security_groups:\n- args:\n    security_group_create_args: {}\n  context:\n    quotas:\n      neutron:\n        security_group: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nNeutronSecurityGroup.create_and_list_security_groups:\n- args:\n    security_group_create_args: {}\n  context:\n    quotas:\n      neutron:\n        security_group: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\nNeutronSecurityGroup.create_and_update_security_groups:\n- args:\n    security_group_create_args: {}\n    security_group_update_args: {}\n  context:\n    quotas:\n      neutron:\n        security_group: -1\n    users:\n      tenants: 3\n      users_per_tenant: 3\n  runner:\n    concurrency: 10\n    times: 100\n    type: constant\n",
      "nova.yaml": "NovaAgents.list_agents:\n- runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaAggregates.create_aggregate_add_and_remove_host:\n- args:\n    availability_zone: nova\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaAggregates.create_aggregate_add_host_and_boot_server:\n- args:\n    availability_zone: nova\n    boot_server_kwargs: {}\n    disk: 1\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    metadata:\n      test_metadata: \"true\"\n    ram: 512\n    vcpus: 1\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaAggregates.create_and_delete_aggregate:\n- args:\n    availability_zone: nova\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaAggregates.create_and_get_aggregate_details:\n- args:\n    availability_zone: nova\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaAggregates.create_and_list_aggregates:\n- args:\n    availability_zone: nova\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaAggregates.create_and_update_aggregate:\n- args:\n    availability_zone: nova\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaAggregates.list_aggregates:\n- runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaAvailabilityZones.list_availability_zones:\n- args:\n    detailed: true\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaFlavors.create_and_delete_flavor:\n- args:\n    disk: 1\n    ram: 500\n    vcpus: 1\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaFlavors.create_and_get_flavor:\n- args:\n    disk: 1\n    ram: 500\n    vcpus: 1\n  context:\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaFlavors.create_and_list_flavor_access:\n- args:\n    disk: 1\n    ram: 500\n    vcpus: 1\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaFlavors.create_flavor:\n- args:\n    disk: 1\n    ram: 500\n    vcpus: 1\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaFlavors.create_flavor_and_add_tenant_access:\n- args:\n    disk: 1\n    ram: 500\n    vcpus: 1\n  context:\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaFlavors.create_flavor_and_set_keys:\n- args:\n    disk: 1\n    extra_specs:\n      quota:disk_read_bytes_sec: 10240\n    ram: 500\n    vcpus: 1\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaFlavors.list_flavors:\n- args:\n    detailed: true\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaHypervisors.list_and_get_hypervisors:\n- args:\n    detailed: true\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaHypervisors.list_and_get_uptime_hypervisors:\n- args:\n    detailed: true\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaHypervisors.list_and_search_hypervisors:\n- args:\n    detailed: true\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaHypervisors.list_hypervisors:\n- args:\n    detailed: true\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaHypervisors.statistics_hypervisors:\n- args: {}\n  context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaKeypair.boot_and_delete_server_with_keypair:\n- args:\n    boot_server_kwargs: {}\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    network:\n      start_cidr: 100.1.0.0/26\n    users:\n      tenants: 2\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\nNovaKeypair.create_and_delete_keypair:\n- context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaKeypair.create_and_list_keypairs:\n- context:\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_and_associate_floating_ip:\n- args:\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    network: {}\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\nNovaServers.boot_and_bounce_server:\n- args:\n    actions:\n    - hard_reboot: 1\n    - soft_reboot: 1\n    - stop_start: 1\n    - rescue_unrescue: 1\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_and_delete_multiple_servers:\n- args:\n    count: 5\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\nNovaServers.boot_and_delete_server:\n- args:\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\n- args:\n    auto_assign_nic: true\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    network:\n      networks_per_tenant: 2\n      start_cidr: 10.2.0.0/24\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_and_get_console_output:\n- args:\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\nNovaServers.boot_and_list_server:\n- args:\n    detailed: true\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\nNovaServers.boot_and_live_migrate_server:\n- args:\n    block_migration: false\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_and_migrate_server:\n- args:\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_and_rebuild_server:\n- args:\n    flavor:\n      name: m1.tiny\n    from_image:\n      name: cirros-0.3.5-x86_64-disk.img\n    to_image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\nNovaServers.boot_and_show_server:\n- args:\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\nNovaServers.boot_and_update_server:\n- args:\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_lock_unlock_and_delete:\n- args:\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_server:\n- args:\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_server_associate_and_dissociate_floating_ip:\n- args:\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    network: {}\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 5\n    type: constant\n  sla:\n    failure_rate:\n      max: 0\nNovaServers.boot_server_attach_created_volume_and_live_migrate:\n- args:\n    block_migration: false\n    boot_server_kwargs: {}\n    create_volume_kwargs: {}\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    size: 10\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 2\n      users_per_tenant: 2\n  runner:\n    concurrency: 1\n    times: 5\n    type: constant\nNovaServers.boot_server_attach_created_volume_and_resize:\n- args:\n    boot_server_kwargs: {}\n    confirm: true\n    create_volume_kwargs: {}\n    do_delete: true\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    to_flavor:\n      name: m1.small\n    volume_size: 1\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_server_from_volume:\n- args:\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    volume_size: 10\n    volume_type: \"\"\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_server_from_volume_and_delete:\n- args:\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    volume_size: 10\n    volume_type: \"\"\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_server_from_volume_and_live_migrate:\n- args:\n    block_migration: false\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    volume_size: 10\n    volume_type: \"\"\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_server_from_volume_and_resize:\n- args:\n    boot_server_kwargs: {}\n    confirm: true\n    create_volume_kwargs: {}\n    do_delete: true\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    to_flavor:\n      name: m1.small\n    volume_size: 1\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.boot_server_from_volume_snapshot:\n- args:\n    flavor:\n      name: m1.tiny\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    volume_size: 10\n    volume_type: \"\"\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.list_servers:\n- args:\n    detailed: true\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    servers:\n      flavor:\n        name: m1.tiny\n      image:\n        name: cirros-0.3.5-x86_64-disk.img\n      servers_per_tenant: 2\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 1\n    type: constant\nNovaServers.pause_and_unpause_server:\n- args:\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.resize_server:\n- args:\n    confirm: true\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n    to_flavor:\n      name: m1.small\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 5\n    times: 10\n    type: constant\nNovaServers.shelve_and_unshelve_server:\n- args:\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.snapshot_server:\n- args:\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServers.suspend_and_resume_server:\n- args:\n    flavor:\n      name: m1.tiny\n    force_delete: false\n    image:\n      name: cirros-0.3.5-x86_64-disk.img\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    users:\n      tenants: 3\n      users_per_tenant: 2\n  runner:\n    concurrency: 2\n    times: 10\n    type: constant\nNovaServices.list_services:\n- runner:\n    concurrency: 2\n    times: 10\n    type: constant\n",
      "senlin.yaml": "SenlinClusters.create_and_delete_cluster:\n- args:\n    desired_capacity: 3\n    max_size: 5\n    min_size: 0\n  context:\n    images:\n      image_container: bare\n      image_name: cirros-0.3.5-x86_64-disk.img\n      image_type: qcow2\n      image_url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img\n      images_per_tenant: 1\n    profiles:\n      properties:\n        flavor: 1\n        image: cirros-0.3.4-x86_64-uec\n        name: cirros_server\n        networks:\n        - network: private\n      type: os.nova.server\n      version: \"1.0\"\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 1\n    times: 3\n    type: constant\n",
      "swift.yaml": "SwiftObjects.create_container_and_object_then_delete_all:\n- args:\n    object_size: 102400\n    objects_per_container: 5\n  context:\n    roles:\n    - admin\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 4\n    type: constant\nSwiftObjects.create_container_and_object_then_download_object:\n- args:\n    object_size: 1024\n    objects_per_container: 5\n  context:\n    roles:\n    - admin\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 3\n    times: 6\n    type: constant\nSwiftObjects.create_container_and_object_then_list_objects:\n- args:\n    object_size: 5120\n    objects_per_container: 2\n  context:\n    roles:\n    - admin\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\nSwiftObjects.list_and_download_objects_in_containers:\n- context:\n    roles:\n    - admin\n    swift_objects:\n      containers_per_tenant: 2\n      object_size: 10240\n      objects_per_container: 5\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 2\n    times: 2\n    type: constant\nSwiftObjects.list_objects_in_containers:\n- context:\n    roles:\n    - admin\n    swift_objects:\n      containers_per_tenant: 1\n      object_size: 1024\n      objects_per_container: 10\n    users:\n      tenants: 1\n      users_per_tenant: 1\n  runner:\n    concurrency: 3\n    times: 6\n    type: constant\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "heat-tasks-test-templates"
    },
    "data": {
      "autoscaling-group.yaml": "heat_template_version: \"2013-05-23\"\noutputs:\n  scaling_url:\n    value:\n      get_attr:\n      - scaling_policy\n      - alarm_url\nparameters:\n  flavor:\n    constraints:\n    - custom_constraint: nova.flavor\n    default: m1.tiny\n    type: string\n  image:\n    constraints:\n    - custom_constraint: glance.image\n    default: cirros-0.3.4-x86_64-uec\n    type: string\n  max_size:\n    constraints:\n    - range:\n        min: 1\n    default: 5\n    type: number\n  scaling_adjustment:\n    default: 1\n    type: number\nresources:\n  asg:\n    properties:\n      desired_capacity: 3\n      max_size:\n        get_param: max_size\n      min_size: 1\n      resource:\n        properties:\n          flavor:\n            get_param: flavor\n          image:\n            get_param: image\n        type: OS::Nova::Server\n    type: OS::Heat::AutoScalingGroup\n  scaling_policy:\n    properties:\n      adjustment_type: change_in_capacity\n      auto_scaling_group_id:\n        get_resource: asg\n      scaling_adjustment:\n        get_param: scaling_adjustment\n    type: OS::Heat::ScalingPolicy  \n",
      "autoscaling-policy.yaml": "heat_template_version: \"2013-05-23\"\nresources:\n  test_group:\n    properties:\n      desired_capacity: 0\n      max_size: 0\n      min_size: 0\n      resource:\n        type: OS::Heat::RandomString\n    type: OS::Heat::AutoScalingGroup\n  test_policy:\n    properties:\n      adjustment_type: change_in_capacity\n      auto_scaling_group_id:\n        get_resource: test_group\n      scaling_adjustment: 1\n    type: OS::Heat::ScalingPolicy  \n",
      "default.yaml": "heat_template_version: \"2014-10-16\"  \n",
      "random-strings.yaml": "description: Test template for rally create-update-delete scenario\nheat_template_version: \"2014-10-16\"\nresources:\n  test_string_one:\n    properties:\n      length: 20\n    type: OS::Heat::RandomString\n  test_string_two:\n    properties:\n      length: 20\n    type: OS::Heat::RandomString  \n",
      "resource-group.yaml": "description: Test template for rally create-update-delete scenario\nheat_template_version: \"2014-10-16\"\nresources:\n  test_group:\n    properties:\n      count: 2\n      resource_def:\n        properties:\n          length: 20\n        type: OS::Heat::RandomString\n    type: OS::Heat::ResourceGroup  \n",
      "resource-group-server-with-volume.yaml": "description: |\n  Test template that creates a resource group with servers and volumes.\n  The template allows to create a lot of nested stacks with standard configuration:\n  nova instance, cinder volume attached to that instance\nheat_template_version: \"2014-10-16\"\nparameters:\n  instance_availability_zone:\n    default: nova\n    description: The Availability Zone to launch the instance.\n    type: string\n  instance_flavor:\n    default: m1.tiny\n    description: Type of the instance to be created.\n    type: string\n  instance_image:\n    default: cirros-0.3.4-x86_64-uec\n    type: string\n  instance_volume_size:\n    constraints:\n    - range:\n        max: 1024\n        min: 1\n    default: 1\n    description: Size of volume to attach to instance\n    type: number\n  num_instances:\n    constraints:\n    - range:\n        min: 1\n    description: number of instances that should be created in resource group\n    type: number\nresources:\n  group_of_volumes:\n    properties:\n      count:\n        get_param: num_instances\n      resource_def:\n        properties:\n          availability_zone:\n            get_param: instance_availability_zone\n          flavor:\n            get_param: instance_flavor\n          image:\n            get_param: instance_image\n          volume_size:\n            get_param: instance_volume_size\n        type: templates/server-with-volume.yaml.template\n    type: OS::Heat::ResourceGroup  \n",
      "resource-group-with-constraint.yaml": "description: Template for testing caching.\nheat_template_version: \"2013-05-23\"\nparameters:\n  count:\n    default: 40\n    type: number\n  delay:\n    default: 0.1\n    type: number\nresources:\n  rg:\n    properties:\n      count:\n        get_param: count\n      resource_def:\n        properties:\n          constraint_prop_secs:\n            get_param: delay\n        type: OS::Heat::TestResource\n    type: OS::Heat::ResourceGroup  \n",
      "resource-group-with-outputs.yaml": "heat_template_version: \"2013-05-23\"\noutputs:\n  val1:\n    value:\n      get_attr:\n      - rg\n      - resource.0.output\n  val2:\n    value:\n      get_attr:\n      - rg\n      - resource.1.output\n  val3:\n    value:\n      get_attr:\n      - rg\n      - resource.2.output\n  val4:\n    value:\n      get_attr:\n      - rg\n      - resource.3.output\n  val5:\n    value:\n      get_attr:\n      - rg\n      - resource.4.output\n  val6:\n    value:\n      get_attr:\n      - rg\n      - resource.5.output\n  val7:\n    value:\n      get_attr:\n      - rg\n      - resource.6.output\n  val8:\n    value:\n      get_attr:\n      - rg\n      - resource.7.output\n  val9:\n    value:\n      get_attr:\n      - rg\n      - resource.8.output\n  val10:\n    value:\n      get_attr:\n      - rg\n      - resource.9.output\nparameters:\n  attr_wait_secs:\n    default: 0.5\n    type: number\nresources:\n  rg:\n    properties:\n      count: 10\n      resource_def:\n        properties:\n          attr_wait_secs:\n            get_param: attr_wait_secs\n        type: OS::Heat::TestResource\n    type: OS::Heat::ResourceGroup  \n",
      "server-with-ports.yaml": "heat_template_version: \"2013-05-23\"\nparameters:\n  cidr:\n    default: 11.11.11.0/24\n    type: string\n  flavor:\n    default: m1.tiny\n    type: string\n  image:\n    default: cirros-0.3.4-x86_64-uec\n    type: string\n  public_net:\n    default: public\n    type: string\nresources:\n  port_security_group:\n    properties:\n      description: |\n        Default security group assigned to port. The neutron default group\n        is not used because neutron creates several groups with the same name=default\n        and nova cannot chooses which one should it use.\n      name: default_port_security_group\n    type: OS::Neutron::SecurityGroup\n  private_net:\n    type: OS::Neutron::Net\n  private_subnet:\n    properties:\n      cidr:\n        get_param: cidr\n      network:\n        get_resource: private_net\n    type: OS::Neutron::Subnet\n  router:\n    properties:\n      external_gateway_info:\n        network:\n          get_param: public_net\n    type: OS::Neutron::Router\n  router_interface:\n    properties:\n      router_id:\n        get_resource: router\n      subnet_id:\n        get_resource: private_subnet\n    type: OS::Neutron::RouterInterface\n  server:\n    properties:\n      flavor:\n        get_param: flavor\n      image:\n        get_param: image\n      networks:\n      - port:\n          get_resource: server_port\n    type: OS::Nova::Server\n  server_port:\n    properties:\n      fixed_ips:\n      - subnet:\n          get_resource: private_subnet\n      network:\n        get_resource: private_net\n      security_groups:\n      - get_resource: port_security_group\n    type: OS::Neutron::Port  \n",
      "server-with-volume.yaml": "heat_template_version: \"2013-05-23\"\nparameters:\n  availability_zone:\n    default: nova\n    description: The Availability Zone to launch the instance.\n    type: string\n  flavor:\n    default: m1.tiny\n    type: string\n  image:\n    default: cirros-0.3.4-x86_64-uec\n    type: string\n  volume_size:\n    constraints:\n    - description: must be between 1 and 1024 Gb.\n      range:\n        max: 1024\n        min: 1\n    default: 1\n    description: Size of the volume to be created.\n    type: number\nresources:\n  cinder_volume:\n    properties:\n      availability_zone:\n        get_param: availability_zone\n      size:\n        get_param: volume_size\n    type: OS::Cinder::Volume\n  server:\n    properties:\n      flavor:\n        get_param: flavor\n      image:\n        get_param: image\n    type: OS::Nova::Server\n  volume_attachment:\n    properties:\n      instance_uuid:\n        get_resource: server\n      mountpoint: /dev/vdc\n      volume_id:\n        get_resource: cinder_volume\n    type: OS::Cinder::VolumeAttachment  \n",
      "updated-random-strings-add.yaml": "description: |\n  Test template for create-update-delete-stack scenario in rally. The\n  template updates the stack defined by random-strings.yaml.template with additional\n  resource.\nheat_template_version: \"2014-10-16\"\nresources:\n  test_string_one:\n    properties:\n      length: 20\n    type: OS::Heat::RandomString\n  test_string_three:\n    properties:\n      length: 20\n    type: OS::Heat::RandomString\n  test_string_two:\n    properties:\n      length: 20\n    type: OS::Heat::RandomString  \n",
      "updated-random-strings-delete.yaml": "description: |\n  Test template for create-update-delete-stack scenario in rally. The\n  template deletes one resource from the stack defined by random-strings.yaml.template.\nheat_template_version: \"2014-10-16\"\nresources:\n  test_string_one:\n    properties:\n      length: 20\n    type: OS::Heat::RandomString  \n",
      "updated-random-strings-replace.yaml": "description: |\n  Test template for create-update-delete-stack scenario in rally. The\n  template deletes one resource from the stack defined by random-strings.yaml.template\n  and re-creates it with the updated parameters (so-called update-replace). That happens\n  because some parameters cannot be changed without resource re-creation. The template\n  allows to measure performance of update-replace operation.\nheat_template_version: \"2014-10-16\"\nresources:\n  test_string_one:\n    properties:\n      length: 20\n    type: OS::Heat::RandomString\n  test_string_two:\n    properties:\n      length: 40\n    type: OS::Heat::RandomString  \n",
      "updated-resource-group-increase.yaml": "description: |\n  Test template for create-update-delete-stack scenario in rally. The\n  template updates one resource from the stack defined by resource-group.yaml.template\n  and adds children resources to that resource.\nheat_template_version: \"2014-10-16\"\nresources:\n  test_group:\n    properties:\n      count: 3\n      resource_def:\n        properties:\n          length: 20\n        type: OS::Heat::RandomString\n    type: OS::Heat::ResourceGroup  \n",
      "updated-resource-group-reduce.yaml": "description: |\n  Test template for create-update-delete-stack scenario in rally.\n  The template updates one resource from the stack defined by resource-group.yaml.template\n  and deletes children resources from that resource.\nheat_template_version: \"2014-10-16\"\nresources:\n  test_group:\n    properties:\n      count: 1\n      resource_def:\n        properties:\n          length: 20\n        type: OS::Heat::RandomString\n    type: OS::Heat::ResourceGroup\n"
    }
  },
  {
    "kind": "PersistentVolumeClaim",
    "apiVersion": "v1",
    "metadata": {
      "name": "pvc-rally"
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "2Gi"
        }
      },
      "storageClassName": "general"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-rally-db-init",
      "namespace": "zw2oFEKLFrAP"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-rally-ks-endpoints",
      "namespace": "zw2oFEKLFrAP"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-rally-ks-service",
      "namespace": "zw2oFEKLFrAP"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-rally-ks-user",
      "namespace": "zw2oFEKLFrAP"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-rally-manage-db",
      "namespace": "zw2oFEKLFrAP"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-rally-run-task",
      "namespace": "zw2oFEKLFrAP"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-rally-db-init",
      "namespace": "zw2oFEKLFrAP"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-rally-db-init"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "rally-db-init",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-rally-ks-endpoints",
      "namespace": "zw2oFEKLFrAP"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-rally-ks-endpoints"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "rally-ks-endpoints",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-rally-ks-service",
      "namespace": "zw2oFEKLFrAP"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-rally-ks-service"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "rally-ks-service",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-rally-ks-user",
      "namespace": "zw2oFEKLFrAP"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-rally-ks-user"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "rally-ks-user",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-rally-manage-db",
      "namespace": "zw2oFEKLFrAP"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-rally-manage-db"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "rally-manage-db",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-rally-run-task",
      "namespace": "zw2oFEKLFrAP"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-rally-run-task"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "rally-run-task",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "rally-db-init",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "spec": {
      "backoffLimit": 1000,
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "rally",
            "component": "db-init"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": ""
          }
        },
        "spec": {
          "serviceAccountName": "rally-db-init",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "rally-db-init-0",
              "image": "docker.io/xrally/xrally-openstack:2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "ROOT_DB_CONNECTION",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-db-admin",
                      "key": "DB_CONNECTION"
                    }
                  }
                },
                {
                  "name": "OPENSTACK_CONFIG_FILE",
                  "value": "/etc/rally/rally.conf"
                },
                {
                  "name": "OPENSTACK_CONFIG_DB_SECTION",
                  "value": "database"
                },
                {
                  "name": "OPENSTACK_CONFIG_DB_KEY",
                  "value": "connection"
                }
              ],
              "command": [
                "/tmp/db-init.py"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "db-init-sh",
                  "mountPath": "/tmp/db-init.py",
                  "subPath": "db-init.py",
                  "readOnly": true
                },
                {
                  "name": "etc-service",
                  "mountPath": "/etc/rally"
                },
                {
                  "name": "db-init-conf",
                  "mountPath": "/etc/rally/rally.conf",
                  "subPath": "rally.conf",
                  "readOnly": true
                },
                {
                  "name": "db-init-conf",
                  "mountPath": "/etc/rally/logging.conf",
                  "subPath": "logging.conf",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "db-init-sh",
              "configMap": {
                "name": "rally-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "etc-service",
              "emptyDir": {}
            },
            {
              "name": "db-init-conf",
              "secret": {
                "secretName": "rally-etc",
                "defaultMode": 292
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "rally-ks-endpoints",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "rally",
            "component": "ks-endpoints"
          }
        },
        "spec": {
          "serviceAccountName": "rally-ks-endpoints",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:keystone-api"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "rally-ks-service"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "benchmark-ks-endpoints-admin",
              "image": "docker.io/openstackhelm/heat:ocata-ubuntu_xenial",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/tmp/ks-endpoints.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "ks-endpoints-sh",
                  "mountPath": "/tmp/ks-endpoints.sh",
                  "subPath": "ks-endpoints.sh",
                  "readOnly": true
                }
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "OS_SVC_ENDPOINT",
                  "value": "admin"
                },
                {
                  "name": "OS_SERVICE_NAME",
                  "value": "rally"
                },
                {
                  "name": "OS_SERVICE_TYPE",
                  "value": "benchmark"
                },
                {
                  "name": "OS_SERVICE_ENDPOINT",
                  "value": "http://rally-api.default.svc.cluster.local:9312/v1"
                }
              ]
            },
            {
              "name": "benchmark-ks-endpoints-internal",
              "image": "docker.io/openstackhelm/heat:ocata-ubuntu_xenial",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/tmp/ks-endpoints.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "ks-endpoints-sh",
                  "mountPath": "/tmp/ks-endpoints.sh",
                  "subPath": "ks-endpoints.sh",
                  "readOnly": true
                }
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "OS_SVC_ENDPOINT",
                  "value": "internal"
                },
                {
                  "name": "OS_SERVICE_NAME",
                  "value": "rally"
                },
                {
                  "name": "OS_SERVICE_TYPE",
                  "value": "benchmark"
                },
                {
                  "name": "OS_SERVICE_ENDPOINT",
                  "value": "http://rally-api.default.svc.cluster.local:9312/v1"
                }
              ]
            },
            {
              "name": "benchmark-ks-endpoints-public",
              "image": "docker.io/openstackhelm/heat:ocata-ubuntu_xenial",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/tmp/ks-endpoints.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "ks-endpoints-sh",
                  "mountPath": "/tmp/ks-endpoints.sh",
                  "subPath": "ks-endpoints.sh",
                  "readOnly": true
                }
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "OS_SVC_ENDPOINT",
                  "value": "public"
                },
                {
                  "name": "OS_SERVICE_NAME",
                  "value": "rally"
                },
                {
                  "name": "OS_SERVICE_TYPE",
                  "value": "benchmark"
                },
                {
                  "name": "OS_SERVICE_ENDPOINT",
                  "value": "http://rally.default.svc.cluster.local/v1"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "ks-endpoints-sh",
              "configMap": {
                "name": "rally-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "rally-ks-service",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "rally",
            "component": "ks-service"
          }
        },
        "spec": {
          "serviceAccountName": "rally-ks-service",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:keystone-api"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "benchmark-ks-service-registration",
              "image": "docker.io/openstackhelm/heat:ocata-ubuntu_xenial",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/tmp/ks-service.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "ks-service-sh",
                  "mountPath": "/tmp/ks-service.sh",
                  "subPath": "ks-service.sh",
                  "readOnly": true
                }
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "OS_SERVICE_NAME",
                  "value": "rally"
                },
                {
                  "name": "OS_SERVICE_TYPE",
                  "value": "benchmark"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "ks-service-sh",
              "configMap": {
                "name": "rally-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "rally-ks-user",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "spec": {
      "backoffLimit": 1000,
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "rally",
            "component": "ks-user"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": ""
          }
        },
        "spec": {
          "serviceAccountName": "rally-ks-user",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:keystone-api"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "ks-user",
              "image": "docker.io/openstackhelm/heat:ocata-ubuntu_xenial",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/ks-user.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "ks-user-sh",
                  "mountPath": "/tmp/ks-user.sh",
                  "subPath": "ks-user.sh",
                  "readOnly": true
                }
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_SERVICE_NAME",
                  "value": "rally"
                },
                {
                  "name": "SERVICE_OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-user",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-user",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-user",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-user",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-user",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-user",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_ROLES",
                  "value": "admin"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "ks-user-sh",
              "configMap": {
                "name": "rally-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "rally-manage-db",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "rally",
            "component": "manage-db"
          }
        },
        "spec": {
          "serviceAccountName": "rally-manage-db",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb,default:keystone-api"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "rally-ks-user,rally-ks-endpoints,rally-db-init"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "rally-manage-db",
              "image": "docker.io/xrally/xrally-openstack:2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/tmp/manage-db.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "rally-bin",
                  "mountPath": "/tmp/manage-db.sh",
                  "subPath": "manage-db.sh",
                  "readOnly": true
                },
                {
                  "name": "etcrally",
                  "mountPath": "/etc/rally"
                },
                {
                  "name": "rally-etc",
                  "mountPath": "/etc/rally/rally.conf",
                  "subPath": "rally.conf",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "etcrally",
              "emptyDir": {}
            },
            {
              "name": "rally-etc",
              "secret": {
                "secretName": "rally-etc",
                "defaultMode": 292
              }
            },
            {
              "name": "rally-bin",
              "configMap": {
                "name": "rally-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "rally-run-task",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "rally",
            "component": "run-task"
          }
        },
        "spec": {
          "serviceAccountName": "rally-run-task",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb,default:keystone-api"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "rally-manage-db"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            },
            {
              "name": "rally-run-task-init",
              "image": "docker.io/xrally/xrally-openstack:2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 0
              },
              "command": [
                "chown",
                "-R",
                "rally:",
                "/var/lib/rally/data"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "rally-reports",
                  "mountPath": "/var/lib/rally/data"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "rally-run-task",
              "image": "docker.io/xrally/xrally-openstack:2.0.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/tmp/run-task.sh"
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "rally-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "ENABLED_TESTS",
                  "value": "cinder,glance,heat,keystone,magnum,nova,senlin"
                }
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "rally-bin",
                  "mountPath": "/tmp/run-task.sh",
                  "subPath": "run-task.sh",
                  "readOnly": true
                },
                {
                  "name": "etcrally",
                  "mountPath": "/etc/rally"
                },
                {
                  "name": "rally-etc",
                  "mountPath": "/etc/rally/rally.conf",
                  "subPath": "rally.conf",
                  "readOnly": true
                },
                {
                  "name": "rally-tasks",
                  "mountPath": "/tasks/rally",
                  "readOnly": true
                },
                {
                  "name": "heat-tasks-test-templates",
                  "mountPath": "/tmp/tasks/test-templates",
                  "readOnly": true
                },
                {
                  "name": "rally-reports",
                  "mountPath": "/var/lib/rally/data"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "etcrally",
              "emptyDir": {}
            },
            {
              "name": "rally-etc",
              "secret": {
                "secretName": "rally-etc",
                "defaultMode": 292
              }
            },
            {
              "name": "rally-tasks",
              "configMap": {
                "name": "rally-tasks",
                "defaultMode": 292
              }
            },
            {
              "name": "rally-bin",
              "configMap": {
                "name": "rally-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "heat-tasks-test-templates",
              "configMap": {
                "name": "heat-tasks-test-templates"
              }
            },
            {
              "name": "rally-reports",
              "persistentVolumeClaim": {
                "claimName": "pvc-rally"
              }
            }
          ]
        }
      }
    }
  }
]