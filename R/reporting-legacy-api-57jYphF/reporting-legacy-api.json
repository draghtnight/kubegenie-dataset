[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-reporting-legacy-api",
      "namespace": "57jYphF",
      "labels": {
        "app.kubernetes.io/name": "reporting-legacy-api",
        "helm.sh/chart": "reporting-legacy-api-2.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "reporting-legacy-api"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-reporting-legacy-api-config",
      "labels": {
        "app.kubernetes.io/name": "reporting-legacy-api",
        "helm.sh/chart": "reporting-legacy-api-2.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "reporting-legacy-api"
      }
    },
    "data": null
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-reporting-legacy-api",
      "namespace": "57jYphF",
      "labels": {
        "app.kubernetes.io/name": "reporting-legacy-api",
        "helm.sh/chart": "reporting-legacy-api-2.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "reporting-legacy-api"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "mojaloop.io"
        ],
        "resources": [
          "mojaloopreports"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "mojaloop.io"
        ],
        "resources": [
          "mojaloopreports/status"
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "create",
          "update"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-reporting-legacy-api",
      "namespace": "57jYphF",
      "labels": {
        "app.kubernetes.io/name": "reporting-legacy-api",
        "helm.sh/chart": "reporting-legacy-api-2.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "reporting-legacy-api"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-reporting-legacy-api"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-reporting-legacy-api",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-reporting-legacy-api",
      "namespace": "57jYphF",
      "labels": {
        "app.kubernetes.io/name": "reporting-legacy-api",
        "helm.sh/chart": "reporting-legacy-api-2.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "reporting-legacy-api"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http",
          "port": 80,
          "targetPort": 3000,
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "reporting-legacy-api",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "reporting-legacy-api"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-reporting-legacy-api",
      "namespace": "57jYphF",
      "labels": {
        "app.kubernetes.io/name": "reporting-legacy-api",
        "helm.sh/chart": "reporting-legacy-api-2.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "reporting-legacy-api"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "reporting-legacy-api",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "reporting-legacy-api"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "c8b92ffc5d609d8aa5b7094c9ba8e37bb090d1f519d4ae145b2067fc4550ca3b",
            "prometheus.io/port": "3000",
            "prometheus.io/scrape": "true"
          },
          "labels": {
            "app.kubernetes.io/name": "reporting-legacy-api",
            "helm.sh/chart": "reporting-legacy-api-2.0.3",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "reporting-legacy-api",
            "app.kubernetes.io/version": "2.0.3"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-reporting-legacy-api",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "reporting-legacy-api",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "reporting-legacy-api"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "initContainers": null,
          "containers": [
            {
              "name": "reporting-legacy-api",
              "image": "docker.io/mojaloop/reporting:v11.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 11586,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "npm",
                "start"
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 3000
                }
              ],
              "env": [
                {
                  "name": "DB_HOST",
                  "value": "centralledger-mysql"
                },
                {
                  "name": "DB_PORT",
                  "value": "3306"
                },
                {
                  "name": "DB_DATABASE",
                  "value": "central_ledger"
                },
                {
                  "name": "DB_USER",
                  "value": "central_ledger"
                },
                {
                  "name": "DB_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "centralledger-mysql",
                      "key": "mysql-password"
                    }
                  }
                },
                {
                  "name": "WATCH_RESOURCE_GROUP",
                  "value": "mojaloop.io"
                },
                {
                  "name": "WATCH_RESOURCE_VERSION",
                  "value": "v1"
                },
                {
                  "name": "WATCH_RESOURCE_PLURAL",
                  "value": "mojaloopreports"
                },
                {
                  "name": "WATCH_NAMESPACE",
                  "value": "default"
                },
                {
                  "name": "VALIDATION_RETRY_COUNT",
                  "value": "10"
                },
                {
                  "name": "VALIDATION_RETRY_INTERVAL_MS",
                  "value": "5000"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "release-name-reporting-legacy-api",
      "namespace": "57jYphF",
      "labels": {
        "app.kubernetes.io/name": "reporting-legacy-api",
        "helm.sh/chart": "reporting-legacy-api-2.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "reporting-legacy-api"
      }
    },
    "spec": {
      "rules": [
        {
          "host": "reporting-legacy-api.local",
          "http": {
            "paths": [
              {
                "path": "/",
                "pathType": "ImplementationSpecific",
                "backend": {
                  "service": {
                    "name": "release-name-reporting-legacy-api",
                    "port": {
                      "name": "http"
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "mojaloop.io/v1",
    "kind": "MojaloopReport",
    "metadata": {
      "name": "release-name-dfsp-settlement"
    },
    "spec": {
      "permission": "report-dfsp-settlement",
      "endpoint": {
        "path": "/dfspSettlement",
        "params": [
          {
            "name": "settlementId",
            "required": true
          },
          {
            "name": "dfspId",
            "required": true
          }
        ]
      },
      "queries": [
        {
          "name": "dfspInfo",
          "query": "SELECT participantId, name FROM participant WHERE name = :dfspId AND name != 'Hub'\n"
        },
        {
          "name": "report",
          "query": "SELECT settlementId,\n       settlementWindowId,\n       p.participantId,\n       p.name,\n       currencyId,\n       currencyScale,\n       sentAmount,\n       sentVolume,\n       receivedAmount,\n       receivedVolume,\n       (sentAmount + receivedAmount) as totalAmount,\n       (sentVolume + receivedVolume) as totalVolume,\n       receivedAmount - sentAmount as netAmount,\n       s3.createdDate,\n        lastActionDate\nFROM participant p INNER JOIN\n     (\n         SELECT settlementId,\n                settlementWindowId,\n                MAX(currencyId) as currencyId,\n                MAX(currencyScale) as currencyScale,\n                participantId,\n                SUM(sentAmount)     as sentAmount,\n                SUM(sentVolume)     as sentVolume,\n                SUM(receivedAmount) as receivedAmount,\n                SUM(receivedVolume) as receivedVolume,\n                MAX(createdDate) as createdDate,\n                MAX(lastActionDate) as lastActionDate\n         FROM (\n                  SELECT settlementId,\n                         settlementWindowId,\n                         MAX(createdDate) as createdDate,\n                         MAX(lastActionDate) as lastActionDate,\n                         MAX(currencyId) as currencyId,\n                         MAX(currencyScale) as currencyScale,\n                         IF(senderName != :dfspId, senderId, receiverId) as participantId,\n                         SUM(IF(senderName = :dfspId, amount, 0))       as sentAmount,\n                         SUM(IF(senderName = :dfspId, volume, 0))       as sentVolume,\n                         SUM(IF(receiverName = :dfspId, amount, 0))     as receivedAmount,\n                         SUM(IF(receiverName = :dfspId, volume, 0))     as receivedVolume\n                  FROM (\n                           SELECT MAX(CASE WHEN tP.amount > 0 THEN p.participantId END) as senderId,\n                                  MAX(CASE WHEN tP.amount < 0 THEN p.participantId END) as receiverId,\n                                  MAX(CASE WHEN tP.amount > 0 THEN p.name END)          as senderName,\n                                  MAX(CASE WHEN tP.amount < 0 THEN p.name END)          as receiverName,\n                                  MAX(tP.amount)                                        as amount,\n                                  MAX(c.currencyId)                                     as currencyId,\n                                  MAX(c.scale)                                          as currencyScale,\n                                  COUNT(DISTINCT (tF.transferId))                       as volume,\n                                  s.settlementId,\n                                  sSW.settlementWindowId,\n                                  MAX(s.createdDate) as createdDate,\n                                  MAX(tF.completedDate)                        as lastActionDate\n                           FROM transferParticipant tP\n                                    INNER JOIN transferFulfilment tF on tP.transferId = tF.transferId\n                                    INNER JOIN settlementSettlementWindow sSW\n                                               on tF.settlementWindowId = sSW.settlementWindowId\n                                    INNER JOIN settlementWindowStateChange sWSC\n                                               on sSW.settlementWindowId = sWSC.settlementWindowId\n                                    INNER JOIN settlement s on sSW.settlementId = s.settlementId\n                                    INNER JOIN participantCurrency pC\n                                               on tP.participantCurrencyId = pC.participantCurrencyId\n                                    INNER JOIN currency c on c.currencyId = pC.currencyId\n                                    INNER JOIN participant p on pC.participantId = p.participantId\n                           WHERE tF.isValid\n                             AND sWSC.settlementWindowStateId = 'CLOSED'\n                             AND s.settlementId = :settlementId\n                           GROUP BY tF.transferId, s.settlementId\n                       ) s\n                  WHERE s.senderName = :dfspId\n                     OR s.receiverName = :dfspId\n                  GROUP BY settlementId, settlementWindowId, senderId, receiverId, senderName, receiverName\n              ) s2\n\n         GROUP BY settlementId, settlementWindowId, participantId\n     ) s3 ON p.participantId = s3.participantId\nWHERE p.name != 'Hub'\nORDER BY p.name, settlementWindowId\n"
        }
      ],
      "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <style>\n        table {\n            font-family: Calibri;\n            font-size: 11pt;\n            border-collapse: collapse;\n            width: 100%;\n            display: block;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n\n        th {\n            border: 1px solid black;\n            text-align: left;\n            padding: 8px;\n        }\n\n        td {\n            border: 1px solid black;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n//            background-color: #efefef;\n        }\n\n        td > span {\n            font-weight: bold;\n        }\n        tr.noborder td {\n            border: none;\n        }\n    </style>\n    <title>FSP Settlement Report</title>\n</head>\n<body>\n\n<%\nconst formatAmount = (amount, currency, scale) => {\n  const v = parseFloat(amount).toLocaleString('en-US', { minimumFractionDigits: scale });\n  return `${v} ${currency}`;\n}\nconst formatNetPosition = (amount, currency, scale) => {\n    const v = parseFloat(amount);\n    const vf = Math.abs(v).toLocaleString('en-US', { minimumFractionDigits: scale });\n    return v >= 0 ? `${vf} ${currency}` : `(${vf}) ${currency}`;\n}\n%>\n\n<table data-json=\"<%= JSON.stringify(report) %>\" data-sheet-name=\"DFSPSettlementReport\">\n    <tr>\n        <td><span>Report for:</span></td>\n        <td><span>FSP ID</span></td>\n        <td><%= dfspInfo[0]?.name %></td>\n        <td><span>Settlement ID</span></td>\n        <td style=\"text-align: right\"><%= report[0]?.settlementId %></td>\n        <td></td>\n        <td></td>\n        <td><span>Created Date</span></td>\n        <td colspan=\"2\" style=\"text-align: right\"><%= report[0] && (d = report[0].createdDate, `${d.toLocaleDateString('en-ZA')} ${d.toLocaleTimeString('en-US')}`)%></td>\n    </tr>\n    <tr class = \"noborder\">\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td style=\"border: 1px solid black\"><span>Last Action Date</span></td>\n        <td colspan=\"2\" style=\"text-align: right;border: 1px solid black\"><%=\n            report[0] &&\n            (d = report\n                    .filter(a => a.lastActionDate)\n                    .reduce((a,b) => a.lastActionDate.getTime() > b.lastActionDate.getTime() ? a : b).lastActionDate,\n                    `${d.toLocaleDateString('en-ZA')} ${d.toLocaleTimeString('en-US')}`)\n            %></td>\n    </tr>\n    <tr class = \"noborder\">\n        <td colspan=\"100%\" style=\"padding-top: 20px\"></td>\n    </tr>\n    <tr>\n        <th>Window ID</th>\n        <th>FSP ID</th>\n        <th>Sent to FSP</th>\n        <th></th>\n        <th>Received from FSP</th>\n        <th></th>\n        <th>Total</th>\n        <th>Total Value of All Transactions</th>\n        <th>Net Position vs. Each DFSP</th>\n    </tr>\n    <tr>\n        <th></th>\n        <th></th>\n        <th>Volume</th>\n        <th>Value</th>\n        <th>Volume</th>\n        <th>Value</th>\n        <th>Volume</th>\n        <th></th>\n        <th></th>\n    </tr>\n    <% for(let entry of report) { %>\n        <tr style=\"text-align: right\">\n            <td><%= entry.settlementWindowId %></td>\n            <td style=\"text-align: left\"><%= entry.name %></td>\n            <td><%= entry.sentVolume %></td>\n            <td><%= formatAmount(entry.sentAmount, entry.currencyId, entry.currencyScale) %></td>\n            <td><%= entry.receivedVolume %></td>\n            <td><%= formatAmount(entry.receivedAmount, entry.currencyId, entry.currencyScale) %></td>\n            <td><%= entry.totalVolume %></td>\n            <td><%= formatAmount(entry.totalAmount, entry.currencyId, entry.currencyScale) %></td>\n            <td><%= formatNetPosition(entry.netAmount, entry.currencyId, entry.currencyScale) %></td>\n        </tr>\n    <% } %>\n\n    <tr>\n        <td colspan=\"8\" style=\"padding-top: 15px\"><span>Aggregated Net Positions</span></td>\n        <td style=\"text-align: right\"><%= report[0] && formatNetPosition(report.reduce((a, b) => a + (parseFloat(b.netAmount) || 0), 0), report[0]?.currencyId, report[0]?.currencyScale) %></td>\n    </tr>\n</table>\n</body>\n</html>\n"
    }
  },
  {
    "apiVersion": "mojaloop.io/v1",
    "kind": "MojaloopReport",
    "metadata": {
      "name": "release-name-dfsp-settlement-detail"
    },
    "spec": {
      "permission": "report-dfsp-settlement-detail",
      "endpoint": {
        "path": "/dfspSettlementDetail",
        "params": [
          {
            "name": "settlementId",
            "required": true
          },
          {
            "name": "fspid",
            "required": true
          }
        ]
      },
      "queries": [
        {
          "name": "dfspInfo",
          "query": "SELECT participantId, name FROM participant WHERE name = :fspid AND name != 'Hub'\n"
        },
        {
          "name": "report",
          "query": "SELECT\n        pCPayer.participantId as payerFspid,\n        pPayer.name as payerFspName,\n        pCPayee.participantId as payeeFspid,\n        pPayee.name as payeeFspName,\n        tF.transferId,\n        tS.name as transactionType,\n        tSS.name as transactionNature,\n        tF.completedDate as lastModifiedDate,\n        pITPayer.name as payerIdentifierType,\n        qpPayer.partyIdentifierValue as payerIdentifierValue,\n        pITPayee.name as payeeIdentifierType,\n        qpPayee.partyIdentifierValue as payeeIdentifierValue,\n        IF(pPayee.name = :fspid, t.amount, 0) as receivedAmount,\n        IF(pPayer.name = :fspid, t.amount, 0) as sentAmount,\n        c.currencyId,\n        s.settlementId,\n        s.createdDate as settlementCreatedDate,\n        sSW.settlementWindowId\n    FROM\n        transferFulfilment tF\n        INNER JOIN transfer t ON t.transferId = tF.transferId\n        INNER JOIN transferParticipant tPPayer ON tPPayer.transferId = tF.transferId\n            AND tPPayer.transferParticipantRoleTypeId = (SELECT transferParticipantRoleTypeId from transferParticipantRoleType WHERE name = 'PAYER_DFSP')\n            INNER JOIN participantCurrency pCPayer ON pCPayer.participantCurrencyId = tPPayer.participantCurrencyId\n            INNER JOIN participant pPayer ON pPayer.participantId = pCPayer.participantId\n        INNER JOIN transferParticipant tPPayee ON tPPayee.transferId = tF.transferId\n            AND tPPayee.transferParticipantRoleTypeId = (SELECT transferParticipantRoleTypeId from transferParticipantRoleType WHERE name = 'PAYEE_DFSP')\n            INNER JOIN participantCurrency pCPayee ON pCPayee.participantCurrencyId = tPPayee.participantCurrencyId\n            INNER JOIN participant pPayee ON pPayee.participantId = pCPayee.participantId\n        INNER JOIN settlementWindow sW on sW.settlementWindowId = tF.settlementWindowId\n        INNER JOIN settlementSettlementWindow sSW on tF.settlementWindowId = sSW.settlementWindowId\n        INNER JOIN settlementWindowStateChange sWSC on sW.currentStateChangeId = sWSC.settlementWindowStateChangeId\n        INNER JOIN settlement s on sSW.settlementId = s.settlementId\n        INNER JOIN settlementModel sM ON sM.settlementModelId = s.settlementModelId\n        INNER JOIN currency c ON c.currencyId = sM.currencyId\n        INNER JOIN quote q on q.transactionReferenceId = tF.transferId\n        INNER JOIN quoteParty qpPayer on qpPayer.quoteId = q.quoteId AND qpPayer.partyTypeId = (SELECT partyTypeId FROM partyType WHERE name = 'PAYER')\n            INNER JOIN partyIdentifierType pITPayer ON pITPayer.partyIdentifierTypeId = qpPayer.partyIdentifierTypeId\n        INNER JOIN quoteParty qpPayee on qpPayee.quoteId = q.quoteId AND qpPayee.partyTypeId = (SELECT partyTypeId FROM partyType WHERE name = 'PAYEE')\n            INNER JOIN partyIdentifierType pITPayee ON pITPayee.partyIdentifierTypeId = qpPayee.partyIdentifierTypeId\n        INNER JOIN transactionScenario tS on tS.transactionScenarioId = q.transactionScenarioId\n        LEFT JOIN transactionSubScenario tSS on tSS.transactionSubScenarioId = q.transactionSubScenarioId\n    WHERE\n        tF.isValid\n        AND s.settlementId = :settlementId\n        AND (pPayee.name = :fspid OR pPayer.name = :fspid)\n"
        }
      ],
      "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <style>\n        table {\n            font-family: Calibri;\n            font-size: 11pt;\n            border-collapse: collapse;\n            width: 100%;\n            display: block;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n        th {\n        //            border: 1px solid #efefef;\n            text-align: left;\n            padding: 0 8px;\n        }\n\n        td {\n            border: 1px solid black;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n//            background-color: #efefef;\n        }\n\n        td > span {\n            font-weight: bold;\n        }\n        tr.noborder td {\n            border: none;\n        }            \n    </style>\n    <title>FSP Settlement Report</title>\n</head>\n<body>\n\n<%\n    const formatAmount = (amount) => parseFloat(amount).toLocaleString('en-US');\n%>\n\n<table data-json=\"<%= JSON.stringify(report) %>\" data-sheet-name=\"DFSPSettlementDetailReport\">\n     <tr>\n        <td>Participant ID</td>\n        <td style=\"text-align: right\"><%= dfspInfo[0]?.participantId %></td>\n        <td>FSP ID</td>\n        <td style=\"text-align: right\"><%= dfspInfo[0]?.name %></td>\n        <td>Settlement ID</td>\n        <td style=\"text-align: right\"><%= report[0]?.settlementId %></td>\n        <td style=\"width: 20px\"></td>\n        <td>Created Date</td>\n        <td colspan=\"2\" style=\"text-align: right\"><%= report[0]?.settlementCreatedDate.toISOString() %></td>\n        <td style=\"wisth: 20px\"></td>\n        <td>Currency</td>\n        <td><%= report[0]?.currencyId %></td>\n    </tr>\n    <tr class = \"noborder\">\n        <td colspan=\"14\" style=\"padding-top: 20px\"></td>\n    </tr>\n    <tr>\n        <td>Sender Participant ID</td>\n        <td>Sender FSP ID</td>\n        <td>Receiver Participant ID</td>\n        <td>Receiver FSP ID</td>\n        <td>Transfer ID</td>\n        <td>Tx Type</td>\n        <td>Tx Nature</td>\n        <td>Last Modified</td>\n        <td>Sender ID Type</td>\n        <td>Sender ID</td>\n        <td>Receiver ID Type</td>\n        <td>Receiver ID</td>\n        <td>Received Amount</td>\n        <td>Sent Amount</td>\n        <td>Fee</td>\n    </tr>\n    <% for(let e of report) { %>\n        <tr>\n            <td><%= e.payerFspid %></td>\n            <td><%= e.payerFspName %></td>\n            <td><%= e.payeeFspid %></td>\n            <td><%= e.payeeFspName %></td>\n            <td><%= e.transferId %></td>\n            <td><%= e.transactionType %></td>\n            <td><%= e.transactionNature %></td>\n            <td><%= e.lastModifiedDate.toISOString() %></td>\n            <td><%= e.payerIdentifierType %></td>\n            <td><%= e.payerIdentifierValue %></td>\n            <td><%= e.payeeIdentifierType %></td>\n            <td><%= e.payeeIdentifierValue %></td>\n            <td><%= formatAmount(e.receivedAmount) %></td>\n            <td><%= formatAmount(e.sentAmount) %></td>\n            <td>-</td>\n        </tr>\n    <% } %>\n</table>\n</body>\n</html>\n"
    }
  },
  {
    "apiVersion": "mojaloop.io/v1",
    "kind": "MojaloopReport",
    "metadata": {
      "name": "release-name-dfsp-settlement-statement"
    },
    "spec": {
      "permission": "report-dfsp-settlement-statement",
      "endpoint": {
        "path": "/dfspSettlementStatement",
        "params": [
          {
            "name": "dfspId",
            "required": true
          },
          {
            "name": "startDate",
            "required": true
          },
          {
            "name": "endDate",
            "required": true
          }
        ]
      },
      "queries": [
        {
          "name": "dfspInfo",
          "query": "SELECT \n    p.participantId, \n    p.name, \n    :startDate AS startDate, \n    :endDate AS endDate,\n    pc.currencyId,\n    pc.participantCurrencyId,\n    lat.name AS accountType\nFROM participant p\nINNER JOIN participantCurrency pc on pc.participantId = p.participantId\nINNER JOIN ledgerAccountType lat on lat.ledgerAccountTypeId = pc.ledgerAccountTypeId\nWHERE p.name = :dfspId AND p.name != 'Hub' AND lat.name = 'SETTLEMENT'\n"
        },
        {
          "name": "report",
          "query": "SELECT participantId, name, currencyId, participantCurrencyId, transferId, createdDate, status, description, fundsIn, fundsOut, balance, currencyScale, accountType FROM (\n  SELECT\n    p.participantId AS participantId,\n    p.name AS name,\n    pc.currencyId AS currencyId,\n    pc.participantCurrencyId AS participantCurrencyId,\n    tp.transferId AS transferId, \n    tp.createdDate AS createdDate, \n    (CASE WHEN COALESCE(tsIn.enumeration, tsOut.enumeration) != 'ABORTED' THEN 'SUCCESS' ELSE tsOut.enumeration END) AS status,\n    COALESCE(tscIn.reason, tscOut.reason) AS description,\n    (CASE WHEN tp.amount < 0 THEN -tp.amount ELSE NULL END) AS fundsIn,\n    (CASE WHEN tp.amount > 0 THEN tp.amount ELSE NULL END) AS fundsOut,\n    ppc.value AS balance,\n    c.scale AS  currencyScale,\n    lat.name AS accountType\n  FROM participant p \n  INNER JOIN participantCurrency pc ON p.participantId = pc.participantId \n  INNER JOIN ledgerAccountType lat ON lat.ledgerAccountTypeId = pc.ledgerAccountTypeId\n  INNER JOIN transferParticipant tp ON tp.participantCurrencyId = pc.participantCurrencyId\n  INNER JOIN transferParticipantRoleType tpr ON tpr.transferParticipantRoleTypeId = tp.transferParticipantRoleTypeId  \n  LEFT JOIN transferStateChange tscOut ON tp.transferId = tscOut.transferId AND tscOut.transferStateChangeId = (SELECT MAX(transferStateChangeId) FROM transferStateChange tscOut1 WHERE tscOut1.transferId = tp.transferId\n    AND tscOut1.transferStateId in ('RESERVED', 'ABORTED_REJECTED'))\n  LEFT JOIN transferState tsOut ON tscOut.transferStateId = tsOut.transferStateId\n  LEFT JOIN transferStateChange tscIn ON tp.transferId = tscIn.transferId AND tscIn.transferStateChangeId = (SELECT MAX(transferStateChangeId) FROM transferStateChange tscIn1 WHERE tscIn1.transferId = tp.transferId\n    AND tscIn1.transferStateId in ('COMMITTED', 'ABORTED_REJECTED'))\n  LEFT JOIN transferState tsIn ON tscIn.transferStateId = tsIn.transferStateId\n  INNER JOIN participantPosition pp ON pp.participantCurrencyId = pc.participantCurrencyId\n  INNER JOIN participantPositionChange ppc ON ppc.participantPositionId = pp.participantPositionId\n  INNER JOIN currency c ON c.currencyId = pc.currencyId\n  WHERE tpr.name = 'DFSP_SETTLEMENT' \n  AND p.name = :dfspId\n  AND (tscIn.transferStateChangeId = ppc.transferStateChangeId OR tscOut.transferStateChangeId = ppc.transferStateChangeId)\n  AND ( tp.createdDate BETWEEN STR_TO_DATE(:startDate, '%Y-%m-%dT%T') AND STR_TO_DATE(:endDate, '%Y-%m-%dT%T'))\n  ORDER BY p.name, pc.currencyId, pc.participantCurrencyId, tp.createdDate) AS result\nWHERE result.status != 'ABORTED'\n"
        }
      ],
      "template": "<!DOCTYPE html>\n\n<html lang=\"en\">\n\n<head>\n    <style>\n        table {\n            font-family: arial, sans-serif;\n            border-collapse: collapse;\n            width: 100%;\n            display: block;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n\n        td, th {\n//            border: 1px solid #efefef;\n            text-align: left;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n//            background-color: #efefef;\n        }\n\n        td > span {\n            font-weight: bold;\n        }\n    </style>\n    <title> DFSP Settlement Statement</title>\n</head>\n\n<body>\n\n\n<%\n\n\nconst formatAmount = (amount) => {\n  if(amount){\n    return parseFloat(amount).toLocaleString('en-US',\n      { minimumFractionDigits: report[0]?.currencyScale });\n  } else {\n    return '';\n  }\n}\n\n%>\n\n\n<% dfspInfo.forEach(element => { // Loop Through all the currency accounts\n    const reportData = report.filter( record => record.participantId === element.participantId && record.currencyId === element.currencyId && record.participantCurrencyId === element.participantCurrencyId);\n%>\n\n\n    <table name=<%= `${element?.name}-${element?.currencyId}` %>>\n        <tr>\n            <th><span>DFSP </span></th>\n            <td style=\"text-align: left\"><%= element?.name %></td>\n        </tr>\n        <tr>\n            <th><span>Account Type</span></th>\n            <td style=\"text-align: left\"><%= element?.accountType %></td>\n        </tr>\n        <tr>\n            <th><span>Date From</span></th>\n            <td style=\"text-align: left\"><%= element?.startDate %></td>\n        </tr>\n        <tr>\n            <th><span>Date To</span></th>\n            <td style=\"text-align: left\"><%= element?.endDate %></td>\n        </tr>\n        <tr>\n            <th><span>Currency</span></th>\n            <td style=\"text-align: left\"><%= element?.currencyId %></td>\n        </tr>\n\n        <tr><td></td><td></td></tr>\n\n        <tr>\n            <th>Transfer Id</th>\n            <th>Date Time</th>\n            <th>Process Description</th>\n            <th>Funds In</th>\n            <th>Funds Out</th>\n            <th>Balance</th>\n        </tr>\n        <% for (const { name, currencyId, transferId, createdDate, description, fundsIn, fundsOut, balance } of reportData) { %>\n            <tr>\n                <td><%= `${transferId}` %></td>\n                <td style=\"text-align: right\"><%= createdDate && (d = createdDate, `${d.toLocaleDateString('en-ZA')} ${d.toLocaleTimeString('en-US')}`)%></td>\n                <td><%= `${description}` %></td>\n                <td style=\"text-align: right\"><%= formatAmount(fundsIn) %></td>\n                <td style=\"text-align: right\"><%= formatAmount(fundsOut) %></td>\n                <td style=\"text-align: right\"><%= formatAmount(balance) %></td>\n            </tr>\n        <% } %>\n    </table>\n\n    <br /><br />\n\n<% }) %>\n</body>\n\n</html>\n"
    }
  },
  {
    "apiVersion": "mojaloop.io/v1",
    "kind": "MojaloopReport",
    "metadata": {
      "name": "release-name-reconciliation-amount"
    },
    "spec": {
      "permission": "report-reconciliation-amount",
      "endpoint": {
        "path": "/reconciliationAmount",
        "params": [
          {
            "name": "settlementWindowId",
            "required": true
          },
          {
            "name": "dfspId",
            "required": true
          }
        ]
      },
      "queries": [
        {
          "name": "report",
          "query": "SELECT\n  fromName,\n  fromId,\n  toName,\n  toId,\n  currency,\n  numTransactions,\n  TRIM(TRAILING '.' FROM TRIM(TRAILING '0' FROM sent)) AS sent,\n  TRIM(TRAILING '.' FROM TRIM(TRAILING '0' FROM received)) AS received,\n  TRIM(TRAILING '.' FROM TRIM(TRAILING '0' FROM net)) AS net,\n  settlementWindowOpen,\n  settlementWindowClose\nFROM (\n  SELECT\n    payer.name AS fromName,\n    payer.participantId AS fromId,\n    payee.name AS toName,\n    payee.participantId AS toId,\n    pcPayer.currencyId AS currency,\n    COUNT(txpPayer.transferId) AS numTransactions,\n    CASE WHEN payer.participantId = :dfspId THEN sum(txpPayer.amount) ELSE 0 END AS sent,\n    CASE WHEN payer.participantId = :dfspId THEN 0 ELSE sum(txpPayer.amount) END AS received,\n    CASE WHEN payer.participantId = :dfspId THEN -sum(txpPayer.amount) ELSE sum(txpPayer.amount) END AS net,\n    swOpen.createdDate AS settlementWindowOpen,\n    swClose.createdDate AS settlementWindowClose\n  FROM\n    transferParticipant txpPayer\n  INNER JOIN\n    transferParticipant txpPayee\n    ON txpPayer.transferId = txpPayee.transferId\n    AND txpPayer.transferParticipantId != txpPayee.transferParticipantId\n  INNER JOIN\n    transferFulfilment txf\n    ON txf.transferId = txpPayer.transferId\n  INNER JOIN\n    transferParticipantRoleType txprt\n    ON txprt.transferParticipantRoleTypeId = txpPayer.transferParticipantRoleTypeId\n    AND txprt.name = 'PAYER_DFSP'\n  INNER JOIN\n    participantCurrency pcPayer\n    ON pcPayer.participantCurrencyId = txpPayer.participantCurrencyId\n  INNER JOIN\n    participantCurrency pcPayee\n    ON pcPayee.participantCurrencyId = txpPayee.participantCurrencyId\n  INNER JOIN\n    participant payer\n    ON pcPayer.participantId = payer.participantId\n  INNER JOIN\n    participant payee\n    ON pcPayee.participantId = payee.participantId\n  INNER JOIN\n    settlementWindow sw\n    ON sw.settlementWindowId = txf.settlementWindowId\n  INNER JOIN\n    settlementWindowStateChange swOpen\n    ON swOpen.settlementWindowId = sw.settlementWindowId\n  INNER JOIN\n    settlementWindowStateChange swClose\n    ON swClose.settlementWindowId = sw.settlementWindowId\n  WHERE\n    sw.settlementWindowId = :settlementWindowId\n    AND swOpen.settlementWindowStateId = 'OPEN'\n    AND swClose.settlementWindowStateId = 'CLOSED'\n    AND (payer.participantId = :dfspId OR payee.participantId = :dfspId)\n  GROUP BY\n    payer.participantId,\n    payee.participantId,\n    currency,\n    swOpen.createdDate,\n    swClose.createdDate\n) AS result\n"
        }
      ],
      "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <style>\n        table {\n            font-family: arial, sans-serif;\n            border-collapse: collapse;\n            width: 100%;\n            display: block;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n\n        th {\n        //            border: 1px solid #efefef;\n            text-align: left;\n            padding: 0 8px;\n        }\n\n        td {\n//            border: 1px solid #efefef;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n//            background-color: #efefef;\n        }\n\n        td > span {\n            font-weight: bold;\n        }\n    </style>\n    <title>FSP Settlement Report</title>\n</head>\n<body>\n\n<%\n    const formatAmount = (amount) => parseFloat(amount).toLocaleString('en-US');\n%>\n\n<table>\n    <tr>\n        <td>fromName</td>\n        <td>fromId</td>\n        <td>toName</td>\n        <td>toId</td>\n        <td>currency</td>\n        <td>numTransactions</td>\n        <td>sent</td>\n        <td>received</td>\n        <td>net</td>\n        <td>settlementWindowOpen</td>\n        <td>settlementWindowClose</td>\n    </tr>\n    <% for(let e of report) { %>\n        <tr>\n            <td><%= e.fromName %></td>\n            <td><%= e.fromId %></td>\n            <td><%= e.toName %></td>\n            <td><%= e.toId %></td>\n            <td><%= e.currency %></td>\n            <td><%= e.numTransactions %></td>\n            <td><%= e.sent %></td>\n            <td><%= e.received %></td>\n            <td><%= e.net %></td>\n            <td><%= e.settlementWindowOpen.toISOString() %></td>\n            <td><%= e.settlementWindowClose.toISOString() %></td>\n        </tr>\n    <% } %>\n</table>\n</body>\n</html>\n"
    }
  },
  {
    "apiVersion": "mojaloop.io/v1",
    "kind": "MojaloopReport",
    "metadata": {
      "name": "release-name-settlement"
    },
    "spec": {
      "permission": "report-settlement",
      "endpoint": {
        "path": "/settlement",
        "params": [
          {
            "name": "settlementId",
            "required": true
          },
          {
            "name": "currency"
          }
        ]
      },
      "queries": [
        {
          "name": "settlementId",
          "query": "SELECT :settlementId"
        },
        {
          "name": "transfers",
          "query": "SELECT\n    p2.name as sender,\n    p2.participantId as senderId,\n    receiverId,\n    SUM(amount) as amount,\n    settlementId,\n    ss.createdDate,\n    MAX(lastActionDate) as lastActionDate,\n    currencyId,\n    MAX(currencyScale) as currencyScale\n  FROM\n      participant p2 LEFT JOIN\n      (\n          SELECT settlementId,\n                 createdDate,\n                 MAX(lastActionDate) as lastActionDate,\n                 senderId,\n                 receiverId,\n                 SUM(amount)         as amount,\n                 currencyId,\n                 MAX(currencyScale) as currencyScale\n          FROM (\n                   SELECT MAX(CASE WHEN tP.amount > 0 THEN p.participantId END) as senderId,\n                          MAX(CASE WHEN tP.amount < 0 THEN p.participantId END) as receiverId,\n                          MAX(tP.amount)                               as amount,\n                          MAX(tF.completedDate)                        as lastActionDate,\n                          s.settlementId,\n                          s.createdDate,\n                          c.currencyId as currencyId,\n                          MAX(c.scale) as currencyScale\n                   FROM transferParticipant tP\n                            INNER JOIN transferFulfilment tF on tP.transferId = tF.transferId\n                            INNER JOIN settlementSettlementWindow sSW\n                                       on tF.settlementWindowId = sSW.settlementWindowId\n                            INNER JOIN settlementWindowStateChange sWSC\n                                       on sSW.settlementWindowId = sWSC.settlementWindowId\n                            INNER JOIN settlement s on sSW.settlementId = s.settlementId\n                            INNER JOIN participantCurrency pC\n                                       on tP.participantCurrencyId = pC.participantCurrencyId\n                            INNER JOIN currency c on c.currencyId = pC.currencyId\n                            INNER JOIN participant p on pC.participantId = p.participantId\n                   WHERE tF.isValid\n                     AND sWSC.settlementWindowStateId = 'CLOSED'\n                     AND s.settlementId = :settlementId\n                     AND CASE WHEN :currency IS NOT NULL THEN c.currencyId = :currency ELSE TRUE END\n                   GROUP BY tF.transferId, s.settlementId, c.currencyId\n               ) s\n          GROUP BY senderId, receiverId, settlementId, currencyId\n      ) ss ON p2.participantId = ss.senderId\n\n  WHERE p2.name != 'Hub'\n  GROUP BY settlementId, p2.participantId, receiverId, currencyId\n  ORDER BY settlementId DESC, p2.name\n"
        }
      ],
      "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <style>\n        table {\n            font-family: arial, sans-serif;\n            border-collapse: collapse;\n            width: 100%;\n            display: block;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n\n        td, th {\n//            border: 1px solid #efefef;\n            text-align: left;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n//            background-color: #efefef;\n        }\n\n        td > span {\n            font-weight: bold;\n        }\n    </style>\n    <title>Settlement Bank Report</title>\n</head>\n<body>\n\n<%\nconst senders = [];\nconst receivers = [];\nconst amounts = {};\nconst totalSent = {};\nconst totalReceived = {};\nconst participants = {};\nlet netTotal = 0;\nconst netPositionsPretty = {};\nconst defaultCurrency = transfers[0]?.currencyId;\nfor (let t of transfers) {\n    participants[t.senderId] = t.sender;\n    if (!senders.includes(t.senderId)) {\n        senders.push(t.senderId);\n    }\n    if (t.receiverId && t.currencyId === defaultCurrency) {\n        amounts[`${t.senderId}:${t.receiverId}`] = parseFloat(t.amount);\n        totalSent[t.senderId] = (totalSent[t.senderId] || 0) + parseFloat(t.amount);\n        totalReceived[t.receiverId] = (totalReceived[t.receiverId] || 0) + parseFloat(t.amount);\n        if (!receivers.includes(t.receiverId)) {\n            receivers.push(t.receiverId);\n        }\n    }\n}\nconst participantEntries = Object.entries(participants).sort((a, b) => a[1].localeCompare(b[1]));\n\nconst formatAmount = (amount) => {\n      const v = parseFloat(amount).toLocaleString('en-US', { minimumFractionDigits: transfers[0]?.currencyScale });\n      return `${v} ${transfers[0]?.currencyId}`;\n}\n\nfor(let [id] of participantEntries) {\n    let v = ((totalSent[id] || 0) - (totalReceived[id] || 0));\n    netTotal += v;\n    let vf = Math.abs(v).toLocaleString('en-US', { minimumFractionDigits: transfers[0]?.currencyScale });\n    netPositionsPretty[id] = v >= 0 ? `${vf} ${transfers[0]?.currencyId}` : `(${vf}) ${transfers[0]?.currencyId}`;\n}\n\nconst lastActionDate = transfers.reduce((a,b) => a.lastActionDate?.getTime() > b.lastActionDate?.getTime() ? a : b, 0)?.lastActionDate;\n\nconst jsonOutput = {\n  settlementId: transfers[0]?.settlementId,\n  currency: transfers[0]?.currencyId,\n  createdDate:transfers[0]?.createdDate,\n  lastActionDate,\n  totalSent: participantEntries\n              .reduce((acc, [id, name]) => Object.assign(acc, { [name]: totalSent[id] || 0 }), {}),\n  totalReceived,\n  netPositions: netPositionsPretty,\n  participants: participantEntries,\n};\n%>\n\n<table data-json=\"<%= JSON.stringify(transfers) %>\" >\n    <tr>\n        <td><span>Settlement ID</span></td>\n        <td style=\"text-align: right\"><%= transfers[0]?.settlementId %></td>\n        <td></td>\n        <td><span>Created Date</span></td>\n        <td colspan=\"2\" style=\"text-align: right\"><%= transfers[0]?.createdDate && (d = transfers[0].createdDate, `${d.toLocaleDateString('en-ZA')} ${d.toLocaleTimeString('en-US')}`)%></td>\n    </tr>\n    <tr>\n        <td><span>Currency</span></td>\n        <td style=\"text-align: right\"><%= transfers[0]?.currencyId %></td>\n        <td></td>\n        <td><span>Last Action Date</span></td>\n        <td colspan=\"2\" style=\"text-align: right\"><%=\n            `${lastActionDate?.toLocaleDateString('en-ZA')} ${lastActionDate?.toLocaleTimeString('en-US')}`\n            %></td>\n    </tr>\n    <tr>\n        <td colspan=\"100%\" style=\"padding-top: 20px\"><div style=\"font-weight: bold\">Multilateral Net Positions</div></td>\n    </tr>\n    <tr>\n        <th></th>\n        <th></th>\n        <% for(let i = 0; i < participantEntries.length; i++) { %>\n        <th><span>Received by</span></th>\n        <% } %>\n        <th>TOTAL SENT</th>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <% for(let [id, name] of participantEntries) { %>\n            <td><%= `${id} ${name}` %></td>\n        <% } %>\n        <td></td>\n    </tr>\n    <% for(let [senderId, senderName] of participantEntries) { %>\n        <tr>\n            <td><span>Sent by</span></td>\n            <td><%= `${senderId} ${senderName}` %></td>\n            <% for(let [receiverId] of participantEntries) { %>\n                <% if (senderId === receiverId) { %>\n                    <td style=\"background-color: #cccccc\"></td>\n                <% } else if (amounts[`${senderId}:${receiverId}`]) { %>\n                    <td style=\"text-align: right\"><%= formatAmount(amounts[`${senderId}:${receiverId}`]) %></td>\n                <% } else { %>\n                    <td style=\"text-align: right\">-</td>\n                <% } %>\n            <% } %>\n            <td style=\"text-align: right\"><%= totalSent[senderId] ? formatAmount(totalSent[senderId]) : '-' %></td>\n        </tr>\n    <% } %>\n    <tr>\n        <td colspan=\"100%\" style=\"padding-top: 10px\"></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td><span>Total Received</span></td>\n        <% for(let [id] of participantEntries) { %>\n            <td style=\"text-align: right\"><%= totalReceived[id] ? totalReceived[id].toLocaleString('en-US') : '-' %></td>\n        <% } %>\n    </tr>\n    <tr>\n        <td colspan=\"100%\" style=\"padding-top: 30px\"><div style=\"font-weight: bold\">Aggregated Net Positions</div></td>\n    </tr>\n    <% for(let [id, name] of participantEntries) { %>\n        <tr>\n            <td><%= `${id} ${name}` %></td>\n            <td style=\"text-align: right\"><%= netPositionsPretty[id] %></td>\n            <td></td>\n        </tr>\n    <% } %>\n    <tr>\n        <td style=\"padding-top: 30px\">Check value</td>\n        <td style=\"text-align: right\"><%= netTotal %></td>\n        <td>(should be zero)</td>\n    </tr>\n</table>\n</body>\n</html>\n"
    }
  },
  {
    "apiVersion": "mojaloop.io/v1",
    "kind": "MojaloopReport",
    "metadata": {
      "name": "release-name-settlement-audit"
    },
    "spec": {
      "permission": "report-settlement-audit",
      "endpoint": {
        "path": "/settlementAudit",
        "params": [
          {
            "name": "startDate",
            "required": true
          },
          {
            "name": "endDate",
            "required": true
          }
        ]
      },
      "queries": [
        {
          "name": "dfspInfo",
          "query": "SELECT \n    p.participantId, \n    p.name, \n    :startDate AS startDate, \n    :endDate AS endDate,\n    pc.currencyId,\n    pc.participantCurrencyId,\n    lat.name AS accountType\nFROM participant p\nINNER JOIN participantCurrency pc on pc.participantId = p.participantId\nINNER JOIN ledgerAccountType lat on lat.ledgerAccountTypeId = pc.ledgerAccountTypeId\nWHERE p.name != 'Hub' AND lat.name = 'SETTLEMENT'\n"
        },
        {
          "name": "report",
          "query": "SELECT\n    p.participantId AS participantId,\n    p.name AS name,\n    pc.currencyId AS currencyId,\n    pc.participantCurrencyId AS participantCurrencyId,\n    tp.transferId AS transferId, \n    tp.createdDate AS createdDate,\n    COALESCE(tscIn.transferStateChangeId, tscOut.transferStateChangeId) as transferStateChangeId,\n    (CASE WHEN COALESCE(tsIn.enumeration, tsOut.enumeration) != 'ABORTED' THEN 'SUCCESS' ELSE tsOut.enumeration END) AS status,\n    COALESCE(tscIn.reason, tscOut.reason) AS description,\n    COALESCE(tex1.value, '') AS user,\n    COALESCE(tex2.value, '') AS reference,\n    (CASE WHEN tp.amount < 0 THEN -tp.amount ELSE NULL END) AS fundsIn,\n    (CASE WHEN tp.amount > 0 THEN tp.amount ELSE NULL END) AS fundsOut,\n    ppc.value AS balance,\n    c.scale AS  currencyScale,\n    lat.name AS accountType\nFROM participant p \nINNER JOIN participantCurrency pc ON p.participantId = pc.participantId \nINNER JOIN ledgerAccountType lat ON lat.ledgerAccountTypeId = pc.ledgerAccountTypeId\nINNER JOIN transferParticipant tp ON tp.participantCurrencyId = pc.participantCurrencyId\nINNER JOIN transferParticipantRoleType tpr ON tpr.transferParticipantRoleTypeId = tp.transferParticipantRoleTypeId\nLEFT JOIN transferStateChange tscOut ON tp.transferId = tscOut.transferId AND tscOut.transferStateChangeId = (SELECT MAX(transferStateChangeId) FROM transferStateChange tscOut1 WHERE tscOut1.transferId = tp.transferId\nAND tscOut1.transferStateId in ('RESERVED', 'ABORTED_REJECTED'))\nLEFT JOIN transferState tsOut ON tscOut.transferStateId = tsOut.transferStateId       \nLEFT JOIN transferStateChange tscIn ON tp.transferId = tscIn.transferId AND tscIn.transferStateChangeId = (SELECT MAX(transferStateChangeId) FROM transferStateChange tscIn1 WHERE tscIn1.transferId = tp.transferId\nAND tscIn1.transferStateId in ('COMMITTED', 'ABORTED_REJECTED'))\nLEFT JOIN transferState tsIn ON tscIn.transferStateId = tsIn.transferStateId   \nINNER JOIN participantPosition pp ON pp.participantCurrencyId = pc.participantCurrencyId\nINNER JOIN participantPositionChange ppc ON ppc.participantPositionId = pp.participantPositionId\nINNER JOIN currency c ON c.currencyId = pc.currencyId\nLEFT JOIN transferExtension tex1 ON tex1.transferId = tp.transferId AND tex1.key = 'user'\nLEFT JOIN transferExtension tex2 ON tex2.transferId = tp.transferId AND tex2.key = 'externalReference'\n\nWHERE tpr.name = 'DFSP_SETTLEMENT'\nAND (tscIn.transferStateChangeId = ppc.transferStateChangeId OR tscOut.transferStateChangeId = ppc.transferStateChangeId)\nAND tex1.transferExtensionId = (SELECT MAX(transferExtensionId) FROM transferExtension tex1u WHERE tex1u.transferId = tp.transferId AND tex1u.key = 'user')\nAND tex2.transferExtensionId = (SELECT MAX(transferExtensionId) FROM transferExtension tex2u WHERE tex2u.transferId = tp.transferId AND tex2u.key = 'externalReference')\nAND ( tp.createdDate BETWEEN STR_TO_DATE(:startDate, '%Y-%m-%dT%T') AND STR_TO_DATE(:endDate, '%Y-%m-%dT%T'))\nORDER BY p.name, pc.currencyId, pc.participantCurrencyId,  tp.createdDate\n"
        }
      ],
      "template": "<!DOCTYPE html>\n\n<html lang=\"en\">\n\n<head>\n    <style>\n        table {\n            font-family: arial, sans-serif;\n            border-collapse: collapse;\n            width: 100%;\n            display: block;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n\n        td, th {\n//            border: 1px solid #efefef;\n            text-align: left;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n//            background-color: #efefef;\n        }\n\n        td > span {\n            font-weight: bold;\n        }\n    </style>\n    <title> DFSP Settlement Statement</title>\n</head>\n\n<body>\n\n\n<%\n\n\nconst formatAmount = (amount) => {\n  if(amount){\n    return parseFloat(amount).toLocaleString('en-US',\n      { minimumFractionDigits: report[0]?.currencyScale });\n  } else {\n    return '';\n  }\n}\n\n%>\n\n\n<% dfspInfo.forEach(element => { // Loop Through all the currency accounts\n    const reportData = report.filter( record => record.participantId === element.participantId && record.currencyId === element.currencyId && record.participantCurrencyId === element.participantCurrencyId);\n%>\n\n\n    <table name=<%= `${element?.name}-${element?.currencyId}` %>>\n        <tr>\n            <th><span>DFSP </span></th>\n            <td style=\"text-align: left\"><%= element?.name %></td>\n        </tr>\n        <tr>\n            <th><span>Account Type</span></th>\n            <td style=\"text-align: left\"><%= element?.accountType %></td>\n        </tr>\n        <tr>\n            <th><span>Date From</span></th>\n            <td style=\"text-align: left\"><%= element?.startDate %></td>\n        </tr>\n        <tr>\n            <th><span>Date To</span></th>\n            <td style=\"text-align: left\"><%= element?.endDate %></td>\n        </tr>\n        <tr>\n            <th><span>Currency</span></th>\n            <td style=\"text-align: left\"><%= element?.currencyId %></td>\n        </tr>\n\n        <tr><td></td><td></td></tr>\n\n        <tr>\n            <th>Transfer Id</th>\n            <th>Date Time</th>\n            <th>Transfer Status</th>\n            <th>Process Description</th>\n            <th>User</th>\n            <th>Reference</th>\n            <th>Funds In</th>\n            <th>Funds Out</th>\n            <th>Balance</th>\n        </tr>\n        <% for (const { name, currencyId, transferId, createdDate, status, description, user, reference, fundsIn, fundsOut, balance } of reportData) { %>\n            <tr>\n                <td><%= `${transferId}` %></td>\n                <td style=\"text-align: right\"><%= createdDate && (d = createdDate, `${d.toLocaleDateString('en-ZA')} ${d.toLocaleTimeString('en-US')}`)%></td>\n                <td><%= `${status}` %></td>\n                <td><%= `${description}` %></td>\n                <td><%= `${user}` %></td>\n                <td><%= `${reference}` %></td>\n                <td style=\"text-align: right\"><%= formatAmount(fundsIn) %></td>\n                <td style=\"text-align: right\"><%= formatAmount(fundsOut) %></td>\n                <td style=\"text-align: right\"><%= formatAmount(balance) %></td>\n            </tr>\n        <% } %>\n    </table>\n\n    <br /><br />\n\n<% }) %>\n</body>\n\n</html>\n"
    }
  },
  {
    "apiVersion": "mojaloop.io/v1",
    "kind": "MojaloopReport",
    "metadata": {
      "name": "release-name-settlement-initiation"
    },
    "spec": {
      "permission": "report-settlement-initiation",
      "endpoint": {
        "path": "/settlementInitiation",
        "params": [
          {
            "name": "settlementId",
            "required": true
          }
        ]
      },
      "queries": [
        {
          "name": "settlementId",
          "query": "SELECT :settlementId AS settlementId"
        },
        {
          "name": "adjustments",
          "query": "SELECT\n    SUM(tp.amount)            AS  amount,\n    p.name                    AS  name,\n    p.participantId           AS  participantId,\n    pc.participantCurrencyId  AS  accountId,\n    pc.currencyId             AS  currencyId,\n    MAX(c.scale)              AS  currencyScale\nFROM settlement s\nINNER JOIN settlementSettlementWindow ssw  ON  ssw.settlementId = s.settlementId\nINNER JOIN transferFulfilment tf           ON  tf.settlementWindowId = ssw.settlementWindowId\nINNER JOIN transferParticipant tp          ON  tp.transferId = tf.transferId\nINNER JOIN participantCurrency pc          ON  tp.participantCurrencyId = pc.participantCurrencyId\nINNER JOIN currency c                      ON  c.currencyId = pc.currencyId\nINNER JOIN participant p                   ON  p.participantId = pc.participantId\nINNER JOIN ledgerAccountType lat           ON  lat.ledgerAccountTypeId = pc.ledgerAccountTypeId\nWHERE s.settlementId = :settlementId AND lat.name = 'POSITION'\nGROUP BY p.name, pc.participantCurrencyId\n"
        }
      ],
      "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <style>\n        table {\n            font-family: Calibri;\n            font-size: 11pt;\n            border-collapse: collapse;\n            width: 100%;\n            display: block;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n        td, th {\n            border: 1px solid black;\n            text-align: left;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n//            background-color: #efefef;\n        }\n\n        td > span {\n            font-weight: bold;\n        }\n        tr.noborder td {\n            border: none;\n        }\n    </style>\n    <title>Settlement Bank Report</title>\n</head>\n<body>\n\n<%\nconst bankId = {\n    demomfi: 'demomfi placeholder\\n0000 0000 0000 0000',\n    demowallet: 'demowallet placeholder\\n0000 0000 0000 0000',\n    noresponsepayeefsp: 'noresponsepayeefsp placeholder\\n0000 0000 0000 0000',\n    payeefsp: 'payeefsp placeholder\\n0000 0000 0000 0000',\n    payerfsp: 'payerfsp placeholder\\n0000 0000 0000 0000',\n    pm4mlreceiverfsp: 'pm4mlreceiverfsp placeholder\\n0000 0000 0000 0000',\n    pm4mlsenderfsp: 'pm4mlsenderfsp placeholder\\n0000 0000 0000 0000',\n    testfsp1: 'testfsp1 placeholder\\n0000 0000 0000 0000',\n    testfsp2: 'testfsp2 placeholder\\n0000 0000 0000 0000',\n};\n\nconst formatAmount = (amount) => parseFloat(amount).toLocaleString('en-US', { minimumFractionDigits: adjustments[0]?.currencyScale });\n\n// Because no currency has more than four decimal places, we can have quite a large epsilon value\nconst EPSILON = 1e-5;\n// We use parseFloat because it returns NaN for parseFloat(null)\nconst transfersSum = adjustments.reduce((sum, adj) => sum + parseFloat(adj.amount), 0);\nif (Number.isNaN(transfersSum) || (transfersSum > EPSILON)) {\n  throw new Error(`Expected settlement initiation report transfers to sum to zero. Sum: ${transfersSum}. Report data: ${JSON.stringify(adjustments)}.`);\n}\n%>\n\n<table data-sheet-name=\"SettlementBankReport\">\n    <tr> \n        <td><span>Settlement ID</span></td>\n        <td style=\"text-align: right\"><%= settlementId[0].settlementId %></td>\n    </tr>\n    <tr>\n        <td><span>Settlement Completed Date</span></td>\n        <td style=\"text-align: right\"></td>\n    </tr>\n    <tr>\n        <td><span>Settlement Completed Time</span></td>\n        <td style=\"text-align: right\"></td>\n    </tr>\n    <tr>\n        <td><span>Timezone</span></td>\n        <td style=\"text-align: right\">MMT</td>\n    </tr>\n    <tr class = \"noborder\">\n        <td colspan=\"100%\" style=\"padding-top: 20px\"></td>\n    </tr>\n    <tr>\n        <td>Participant (PayerFSP Identifier)</td>\n        <td>Participant (Bank Identifier)</td>\n        <td>Balance</td>\n        <td>Settlement Transfer</td>\n        <td>Currency</td>\n    </tr>\n    <% for (const { name, participantId, accountId, currencyId, amount } of adjustments) { %>\n        <tr>\n            <td><%= `${participantId} ${accountId} ${name}` %></td>\n            <td><%= `${bankId[name]}` %></td>\n            <td></td>\n            <td style=\"text-align: right\"><%= formatAmount(amount) %></td>\n            <td><%= `${currencyId}` %></td>\n        </tr>\n    <% } %>\n</table>\n</body>\n</html>\n"
    }
  },
  {
    "apiVersion": "mojaloop.io/v1",
    "kind": "MojaloopReport",
    "metadata": {
      "name": "release-name-settlement-window"
    },
    "spec": {
      "permission": "report-settlement-window",
      "endpoint": {
        "path": "/settlementWindow"
      },
      "queries": [
        {
          "name": "report",
          "query": "SELECT sq.*, swOpen.createdDate AS windowOpen, swClose.createdDate as windowClose\nFROM\n  (\n      SELECT\n          qp.fspId,\n          sw.settlementWindowId,\n          swsc.settlementWindowStateId AS state,\n          COUNT(qp.amount) AS numTransactions,\n          SUM(qp.amount) AS netPosition\n      FROM\n          central_ledger.settlementWindow AS sw\n      LEFT JOIN\n           central_ledger.transferFulfilment AS tf\n           ON tf.settlementWindowId = sw.settlementWindowId\n      LEFT JOIN\n           central_ledger.transactionReference AS tr\n           ON tf.transferId = tr.transactionReferenceId\n      INNER JOIN\n           central_ledger.transferParticipant AS tp\n           ON tp.transferId = tf.transferId\n      INNER JOIN\n           central_ledger.transferParticipantRoleType AS trpt\n           ON trpt.transferParticipantRoleTypeId = tp.transferParticipantRoleTypeId\n      INNER JOIN\n           central_ledger.settlementWindowStateChange AS swsc\n           ON swsc.settlementWindowStateChangeId = sw.currentStateChangeId\n      LEFT JOIN\n           central_ledger.quoteParty AS qp\n           ON qp.quoteId = tr.quoteId AND qp.transferParticipantRoleTypeId = tp.transferParticipantRoleTypeId\n      GROUP BY qp.fspId, sw.settlementWindowId\n  ) AS sq\nINNER JOIN\n  central_ledger.settlementWindowStateChange AS swOpen\n  ON swOpen.settlementWindowId = sq.settlementWindowId\nLEFT OUTER JOIN\n  central_ledger.settlementWindowStateChange AS swClose\n  ON swClose.settlementWindowId = sq.settlementWindowId AND swClose.settlementWindowStateId = 'CLOSED'\nWHERE\nswOpen.settlementWindowStateId = 'OPEN'\n"
        }
      ],
      "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <style>\n        table {\n            font-family: arial, sans-serif;\n            border-collapse: collapse;\n            width: 100%;\n            display: block;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n\n        th {\n        //            border: 1px solid #efefef;\n            text-align: left;\n            padding: 0 8px;\n        }\n\n        td {\n//            border: 1px solid #efefef;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n//            background-color: #efefef;\n        }\n\n        td > span {\n            font-weight: bold;\n        }\n    </style>\n    <title>FSP Settlement Report</title>\n</head>\n<body>\n\n<%\n    const formatAmount = (amount) => parseFloat(amount).toLocaleString('en-US');\n%>\n\n<table>\n        <tr>\n            <td>fspId</td>\n            <td>settlementWindowId</td>\n            <td>state</td>\n            <td>numTransactions</td>\n            <td>netPosition</td>\n            <td>windowOpen</td>\n        </tr>\n        <% for(let e of report) { %>\n            <tr>\n                <td><%= e.fspId %></td>\n                <td><%= e.settlementWindowId %></td>\n                <td><%= e.state %></td>\n                <td><%= e.numTransactions %></td>\n                <td><%= e.netPosition %></td>\n                <td><%= e.windowOpen.toISOString() %></td>\n            </tr>\n        <% } %>\n    </table>\n</body>\n</html>\n"
    }
  },
  {
    "apiVersion": "mojaloop.io/v1",
    "kind": "MojaloopReport",
    "metadata": {
      "name": "release-name-tx-reconciliation"
    },
    "spec": {
      "permission": "report-tx-reconciliation",
      "endpoint": {
        "path": "/transactionReconciliation",
        "params": [
          {
            "name": "settlementWindowId"
          },
          {
            "name": "dfspId",
            "required": true
          },
          {
            "name": "startDate",
            "required": true
          },
          {
            "name": "endDate",
            "required": true
          }
        ]
      },
      "queries": [
        {
          "name": "report",
          "query": "SELECT DISTINCT\n  qt.quoteId AS quoteId,\n  payerPart.name AS senderDFSPId,\n  payerPart.name AS senderDFSPName,\n  payeeQp.fspId AS receiverDFSPId,\n  payeePart.name AS receiverDFSPName,\n  tfr.transferId AS hubTxnID,\n  IF(txnSce.name = 'TRANSFER', 'P2P', (IF(txnSce.name = 'TRANSFER', 'MP', NULL))) AS transactionType,\n  IF(qt.transactionRequestId IS NULL, 'Original', 'Reversal') AS natureOfTxnType,\n  qt.createdDate AS requestDate,\n  tfr.createdDate AS createdDate,\n  IF(ssc.settlementStateId = 'SETTLED', ssc.createdDate, Cast(NULL as datetime)) AS settlementDate,\n  payerQp.currencyId AS senderCountryCurrencyCode,\n  payeeQp.currencyId AS receiverCountryCurrencyCode,\n  payerQp.partyIdentifierValue AS senderId,\n  payeeQp.partyIdentifierValue AS receiverId,\n  tfr.amount AS reconciliationAmount,\n  IF((payeeParty.firstName <> NULL && payeeParty.lastName <> NULL), 'RNR', 'RNND') AS receiverNameStatus,\n  '' AS pricingOption,\n  '' AS receiverKYCLevelStatus,\n  ts.transferStateId AS status,\n  ts.createdDate as modificationDate, '' AS errorCode,\n  tfr.transferId AS senderDFSPTxnID,\n  tfr.transferId AS receiverDFSPTxnID,\n  IF(xfrFul.settlementWindowId IS NULL, '', Cast(xfrFul.settlementWindowId as char)) AS settlementWindowId,\n  ssc.settlementStateId AS settlementState,\n  ssc.createdDate AS settlementStateChangeDate\nFROM\n  quote qt\nINNER JOIN\n  transactionReference txnref\n  ON qt.quoteId = txnref.quoteId\nINNER JOIN\n  transactionScenario txnSce\n  ON qt.transactionScenarioId = txnSce.transactionScenarioId\nINNER JOIN\n  quoteParty payerQp\n  ON qt.quoteId = payerQp.quoteId AND payerQp.partyTypeId = '1'\nINNER JOIN\n  quoteParty payeeQp\n  ON qt.quoteId = payeeQp.quoteId AND payeeQp.partyTypeId = '2'\nINNER JOIN\n  participant payerPart\n  ON payerQp.participantId = payerPart.participantId\nINNER JOIN\n  participant payeePart\n  ON payeeQp.participantId = payeePart.participantId\nINNER JOIN\n  quoteResponse qr\n  ON qr.quoteId = qt.quoteId\nINNER JOIN\n  transfer tfr\n  ON tfr.transferId = txnref.transactionReferenceId\nLEFT JOIN\n  transferFulfilment xfrFul\n  ON xfrFul.transferId = tfr.transferId\nLEFT JOIN\n  party payerParty\n  ON payerQp.partyTypeId = payerParty.partyId\nLEFT JOIN\n  party payeeParty\n  ON payerQp.partyTypeId = payeeParty.partyId\nLEFT JOIN\n  settlementSettlementWindow ssw\n  ON ssw.settlementWindowId = xfrFul.settlementWindowId\nLEFT JOIN\n  settlement sett\n  ON sett.settlementId = ssw.settlementId\nLEFT JOIN\n  settlementStateChange ssc\n  ON ssc.settlementStateChangeId = sett.currentStateChangeId\nLEFT JOIN\n  (\n      SELECT tsc.transferId, tsc.transferStateId, tsc.createdDate\n      FROM\n          transferStateChange tsc\n      INNER JOIN\n          (\n              SELECT\n                  MAX(tsc.transferStateChangeId) AS transferStateChangeId,\n                  tsc.transferId\n              FROM\n                  transferStateChange tsc\n              GROUP BY transferId\n          ) mtsc\n          ON mtsc.transferId = tsc.transferId AND tsc.transferStateChangeId = mtsc.transferStateChangeID\n  ) ts\n  ON ts.transferId = tfr.transferId\nWHERE\n  (payerPart.name = :dfspId OR payeePart.name = :dfspId)\nAND\n  (xfrFul.settlementWindowId = :settlementWindowId OR :settlementWindowId IS NULL)\nAND\n  qt.createdDate BETWEEN STR_TO_DATE(:startDate, '%Y-%m-%dT%T') AND STR_TO_DATE(:endDate, '%Y-%m-%dT%T')\n"
        }
      ],
      "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <style>\n        table {\n            font-family: arial, sans-serif;\n            border-collapse: collapse;\n            width: 100%;\n            display: block;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n\n        th {\n        //            border: 1px solid #efefef;\n            text-align: left;\n            padding: 0 8px;\n        }\n\n        td {\n//            border: 1px solid #efefef;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n//            background-color: #efefef;\n        }\n\n        td > span {\n            font-weight: bold;\n        }\n    </style>\n    <title>FSP Settlement Report</title>\n</head>\n<body>\n\n<%\n    const formatAmount = (amount) => parseFloat(amount).toLocaleString('en-US');\n%>\n\n<table>\n        <tr>\n            <% for(let k of Object.keys(report[0] || {})) { %>\n              <td><%= k %></td>\n            <% } %>\n        </tr>\n\n        <% for(let r of report) { %>\n        <tr>\n          <% for(let k of Object.keys(r)) { %>\n\n                <td><%= r[k] %></td>\n          <% } %>\n        </tr>\n        <% } %>\n\n    </table>\n</body>\n</html>\n"
    }
  }
]