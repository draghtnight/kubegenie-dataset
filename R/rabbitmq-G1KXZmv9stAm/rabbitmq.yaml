apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-rabbitmq
  labels:
    helm.sh/chart: rabbitmq-0.5.4
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.10.5
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: release-name-rabbitmq
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rabbitmq-plugins
  labels:
    helm.sh/chart: rabbitmq-0.5.4
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.10.5
    app.kubernetes.io/managed-by: Helm
data:
  enabled_plugins: |
    [rabbitmq_management].
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rabbitmq-config
  labels:
    helm.sh/chart: rabbitmq-0.5.4
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.10.5
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |
    ## Initial login user
    default_user = guest
    default_pass = guest
    loopback_users.guest = false
    ## RabbitMQ options
    listeners.tcp.default = 5672
    ## Memory options

    ## Management UI plugin options
    management.tcp.port = 15672
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rabbitmq-scripts
  labels:
    helm.sh/chart: rabbitmq-0.5.4
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.10.5
    app.kubernetes.io/managed-by: Helm
data:
  init.sh: |
    #!/bin/sh
    echo "Initializing RabbitMQ instance..."
    echo "Copy configuration"
    cp /temp/rabbitmq/* /etc/rabbitmq
    if [ -d /extraconfigs ]; then
      echo "Add extra configs to rabbitmq config"
      cat /extraconfigs/* >>/etc/rabbitmq/rabbitmq.conf
    fi
    if [ -d /extraadvancedconfigs ]; then
      echo "Add extra advanced configs to rabbitmq advanced config"
      cat /extraadvancedconfigs/* >>/etc/rabbitmq/advanced.conf
    fi
    if [ -d /temp/plugins ]; then
      echo "Copy plugin configuration"
      cp /temp/plugins/* /etc/rabbitmq
    else
      echo "No plugins configured."
    fi
    mkdir -p /etc/rabbitmq/conf.d
    if [ ! -f /var/lib/rabbitmq/.erlang.cookie ]; then
      echo "Copy erlang cookie"
      echo $ERLANG_COOKIE >/var/lib/rabbitmq/.erlang.cookie
    else
      echo "Erlang cookie already exists."
    fi
    chmod 600 /var/lib/rabbitmq/.erlang.cookie
    echo "Finished."
  startup.sh: |
    until rabbitmqctl cluster_status >/dev/null; do
      echo "PostStart: Waiting for cluster readiness..." >/proc/1/fd/1
      sleep 5
    done
    echo "PostStart: Rebalancing all queues.." >/proc/1/fd/1
    rabbitmq-queues rebalance "all" >/proc/1/fd/1
  shutdown.sh: |
    if rabbitmqctl cluster_status; then
        echo "PreStop: Will wait up to 50 seconds for node to make sure cluster is healthy after node shutdown" >/proc/1/fd/1
        timeout 50 /scripts/safeshutdown.sh
    fi
    echo "PreStop: Stopping RabbitMQ" >/proc/1/fd/1
    rabbitmqctl stop_app
    echo "PreStop: RabbitMQ stopped" >/proc/1/fd/1
    sleep 5
  safeshutdown.sh: |
    while true; do
        waiting="false"
        if ! rabbitmq-diagnostics -q check_if_node_is_mirror_sync_critical >/proc/1/fd/1; then
            echo "PreStop: check_if_node_is_mirror_sync_critical returns error. Continuing to wait" >/proc/1/fd/1
            waiting="true"
        else
            echo "PreStop: check_if_node_is_mirror_sync_critical returns o.k." >/proc/1/fd/1
        fi
        if ! rabbitmq-diagnostics -q check_if_node_is_quorum_critical >/proc/1/fd/1; then
            echo "PreStop: check_if_node_is_quorum_critical returns error. Continuing to wait" >/proc/1/fd/1
            waiting="true"
        else
            echo "PreStop: check_if_node_is_quorum_critical returns o.k." >/proc/1/fd/1
        fi
        if [ $waiting = "true" ]; then
            sleep 1
        else
            break
        fi
    done
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rabbitmq-endpoint-reader
  labels:
    helm.sh/chart: rabbitmq-0.5.4
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.10.5
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rabbitmq-endpoint-reader
  labels:
    helm.sh/chart: rabbitmq-0.5.4
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.10.5
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: release-name-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-rabbitmq-endpoint-reader
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-rabbitmq-internal
  labels:
    helm.sh/chart: rabbitmq-0.5.4
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.10.5
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 5672
      targetPort: amqp
      name: amqp
    - port: 15672
      targetPort: mgmt
      name: mgmt
    - port: 4369
      targetPort: epmd
      name: epmd
    - port: 25672
      targetPort: dist
      name: dist
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-rabbitmq
  labels:
    helm.sh/chart: rabbitmq-0.5.4
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.10.5
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - port: 5672
      targetPort: amqp
      name: amqp
    - port: 15672
      targetPort: mgmt
      name: mgmt
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-rabbitmq
  labels:
    helm.sh/chart: rabbitmq-0.5.4
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 3.10.5
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: release-name
  serviceName: release-name-rabbitmq-internal
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/rabbit-config: 293bc8d839716810db30638da50f6d70ed8575e49ad2d10739c2a78765dc333c
        checksum/plugins-config: a0e850afa138bac7a83be91943156b8e7510e296ba134374861a01cacc548753
        checksum/scripts: bb71ffebebf423cdd16aec1e39ffcadae4f3b7845f35a52fbeffe3ff6c8c9e77
        checksum/certs: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app.kubernetes.io/name: rabbitmq
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-rabbitmq
      securityContext:
        fsGroup: 999
      initContainers:
        - name: rabbitmq-init
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          env: null
          volumeMounts:
            - name: config
              mountPath: /etc/rabbitmq
            - name: rabbitconfig
              mountPath: /temp/rabbitmq
            - name: rabbitmq-volume
              mountPath: /var/lib/rabbitmq
            - name: scripts
              mountPath: /scripts
            - name: plugins
              mountPath: /temp/plugins
          command:
            - /scripts/init.sh
      terminationGracePeriodSeconds: 60
      containers:
        - name: rabbitmq
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 10177
            capabilities:
              drop:
                "": NET_RAW
          image: rabbitmq:3.10.5
          imagePullPolicy: IfNotPresent
          ports:
            - name: amqp
              containerPort: 5672
            - name: mgmt
              containerPort: 15672
            - name: epmd
              containerPort: 4369
            - name: dist
              containerPort: 25672
          startupProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
            periodSeconds: 10
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: 60
            timeoutSeconds: 20
            periodSeconds: 30
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: 60
            timeoutSeconds: 20
            periodSeconds: 30
            failureThreshold: 5
            successThreshold: 1
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -ec
                  - /scripts/shutdown.sh
          env:
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: RABBITMQ_NODENAME
              value: rabbit@$(NODE_NAME).release-name-rabbitmq-internal.default.svc.cluster.local
          envFrom: null
          volumeMounts:
            - name: logs
              mountPath: /var/log/rabbitmq
            - name: tmp
              mountPath: /tmp
            - name: rabbitmq-volume
              mountPath: /var/lib/rabbitmq
            - name: config
              mountPath: /etc/rabbitmq
            - name: scripts
              mountPath: /scripts
      volumes:
        - name: tmp
          emptyDir: {}
        - name: logs
          emptyDir: {}
        - name: config
          emptyDir: {}
        - name: rabbitconfig
          configMap:
            name: release-name-rabbitmq-config
        - name: scripts
          configMap:
            name: release-name-rabbitmq-scripts
            defaultMode: 365
        - name: plugins
          configMap:
            name: release-name-rabbitmq-plugins
        - name: rabbitmq-volume
          emptyDir: {}
