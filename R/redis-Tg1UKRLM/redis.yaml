apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis
  namespace: Tg1UKRLM
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-test
  namespace: Tg1UKRLM
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-bin
data:
  image-repo-sync.sh: |
    #!/bin/sh
    set -ex

    IFS=','; for IMAGE in ${IMAGE_SYNC_LIST}; do
      docker pull ${IMAGE}
      docker tag ${IMAGE} ${LOCAL_REPO}/${IMAGE}
      docker push ${LOCAL_REPO}/${IMAGE}
    done
  redis-test.sh: |
    #!/bin/bash
    set -ex

    echo "Start Redis Test"
    echo "Print Environmental variables"
    echo $REDIS_HOST
    echo $REDIS_PORT
    echo $REDIS_DB

    python /tmp/python-tests.py
  python-tests.py: |
    import os
    import redis


    class RedisTest(object):

        def __init__(self):
            host = os.environ.get('REDIS_HOST', 'redis')
            port = os.environ.get('REDIS_PORT', 6379)
            db = os.environ.get('REDIS_DB', 0)
            self.redis_conn = redis.Redis(host, port, db)

        def test_connection(self):
            ping = self.redis_conn.ping()
            if not ping: raise Exception('No connection to database')
            print("Successfully connected to database")

        def database_info(self):
            ip_port = []
            for client in self.redis_conn.client_list():
                ip_port.append(client["addr"])
            print(ip_port)
            if not self.redis_conn.client_list():
                raise Exception('Database client list is null')
            return ip_port

        def test_insert_delete_data(self):
            key = "test"
            value = "it's working"
            result_set = self.redis_conn.set(key, value)
            if not result_set: raise Exception('ERROR: SET command failed')
            print("Successfully SET keyvalue pair")
            result_get = self.redis_conn.get(key)
            if not result_get: raise Exception('ERROR: GET command failed')
            print("Successfully GET keyvalue pair")
            db_size = self.redis_conn.dbsize()
            if db_size <= 0: raise Exception("Database size not valid")
            result_delete = self.redis_conn.delete(key)
            if not result_delete == 1: raise Exception("Error: Delete command failed")
            print("Successfully DELETED keyvalue pair")

        def test_client_kill(self, client_ip_port_list):
            for client_ip_port in client_ip_port_list:
                result = self.redis_conn.client_kill(client_ip_port)
                if not result: raise Exception('Client failed to be removed')
                print("Successfully DELETED client")


    client_ip_port = []
    redis_client = RedisTest()
    redis_client.test_connection()
    client_ip_port = redis_client.database_info()
    redis_client.test_insert_delete_data()
    redis_client.test_client_kill(client_ip_port)
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  clusterIP: None
  ports:
    - port: 6379
  selector:
    release_group: release-name
    application: redis
    component: server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
  labels:
    release_group: release-name
    application: redis
    component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      release_group: release-name
      application: redis
      component: server
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 3
  template:
    metadata:
      labels:
        release_group: release-name
        application: redis
        component: server
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
        configmap-bin-hash: ff4936e0592295fb32e5719a7eaa3d94bed438494c4cc377abfb3512f3483716
    spec:
      serviceAccountName: redis
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: release_group
                      operator: In
                      values:
                        - release-name
                    - key: application
                      operator: In
                      values:
                        - redis
                    - key: component
                      operator: In
                      values:
                        - server
                topologyKey: kubernetes.io/hostname
              weight: 10
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: ""
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: redis
          image: docker.io/redis:4.0.1
          imagePullPolicy: IfNotPresent
          command:
            - redis-server
            - --port
            - "6379"
          ports:
            - containerPort: 6379
          readinessProbe:
            tcpSocket:
              port: 6379
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-test
  labels:
    release_group: release-name
    application: redis
    component: test
  annotations:
    helm.sh/hook: test-success
    openstackhelm.openstack.org/release_uuid: ""
spec:
  serviceAccountName: release-name-test
  nodeSelector:
    openstack-control-plane: enabled
  restartPolicy: Never
  containers:
    - name: release-name-helm-tests
      image: docker.io/redislabs/redis-py:latest
      imagePullPolicy: IfNotPresent
      command:
        - /tmp/redis-test.sh
      env:
        - name: REDIS_HOST
          value: redis
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
      volumeMounts:
        - name: pod-tmp
          mountPath: /tmp
        - name: redis-test
          mountPath: /tmp/redis-test.sh
          subPath: redis-test.sh
        - name: redis-python
          mountPath: /tmp/python-tests.py
          subPath: python-tests.py
  volumes:
    - name: pod-tmp
      emptyDir: {}
    - name: redis-test
      configMap:
        name: redis-bin
        defaultMode: 365
    - name: redis-python
      configMap:
        name: redis-bin
        defaultMode: 365
