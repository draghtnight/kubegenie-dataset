apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-redis-ha
  labels:
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
    app: release-name-redis-ha
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-ha-configmap
  labels:
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
    app: release-name-redis-ha
data:
  redis.conf: |
    dir "/data"
    maxmemory 0
    maxmemory-policy volatile-lru
    min-slaves-max-lag 5
    min-slaves-to-write 1
    rdbchecksum yes
    rdbcompression yes
    repl-diskless-sync yes
    save 900 1
  sentinel.conf: |
    dir "/data"
    sentinel down-after-milliseconds mymaster 10000
    sentinel failover-timeout mymaster 180000
    sentinel parallel-syncs mymaster 5
  init.sh: "HOSTNAME=\"$(hostname)\"\nINDEX=\"${HOSTNAME##*-}\"\nMASTER=\"$(redis-cli -h release-name-redis-ha -p 26379 sentinel get-master-addr-by-name mymaster | grep -E '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}')\"\nMASTER_GROUP=\"mymaster\"\nQUORUM=\"2\"\nREDIS_CONF=/data/conf/redis.conf\nREDIS_PORT=6379\nSENTINEL_CONF=/data/conf/sentinel.conf\nSENTINEL_PORT=26379\nSERVICE=release-name-redis-ha\nset -eu\n\nsentinel_update() {\n    echo \"Updating sentinel config\"\n    eval MY_SENTINEL_ID=\"\\${SENTINEL_ID_$INDEX}\"\n    sed -i \"1s/^/sentinel myid $MY_SENTINEL_ID\\\\n/\" \"$SENTINEL_CONF\"\n    sed -i \"2s/^/sentinel monitor $MASTER_GROUP $1 $REDIS_PORT $QUORUM \\\\n/\" \"$SENTINEL_CONF\"\n    echo \"sentinel announce-ip $ANNOUNCE_IP\" >> $SENTINEL_CONF\n    echo \"sentinel announce-port $SENTINEL_PORT\" >> $SENTINEL_CONF\n}\n\nredis_update() {\n    echo \"Updating redis config\"\n    echo \"slaveof $1 $REDIS_PORT\" >> \"$REDIS_CONF\"\n    echo \"slave-announce-ip $ANNOUNCE_IP\" >> $REDIS_CONF\n    echo \"slave-announce-port $REDIS_PORT\" >> $REDIS_CONF\n}\n\ncopy_config() {\n    cp /readonly-config/redis.conf \"$REDIS_CONF\"\n    cp /readonly-config/sentinel.conf \"$SENTINEL_CONF\"\n}\n\nsetup_defaults() {\n    echo \"Setting up defaults\"\n    if [ \"$INDEX\" = \"0\" ]; then\n        echo \"Setting this pod as the default master\"\n        redis_update \"$ANNOUNCE_IP\"\n        sentinel_update \"$ANNOUNCE_IP\"\n        sed -i \"s/^.*slaveof.*//\" \"$REDIS_CONF\"\n    else\n        DEFAULT_MASTER=\"$(getent hosts \"$SERVICE-announce-0\" | awk '{ print $1 }')\"\n        if [ -z \"$DEFAULT_MASTER\" ]; then\n            echo \"Unable to resolve host\"\n            exit 1\n        fi\n        echo \"Setting default slave config..\"\n        redis_update \"$DEFAULT_MASTER\"\n        sentinel_update \"$DEFAULT_MASTER\"\n    fi\n}\n\nfind_master() {\n    echo \"Attempting to find master\"\n    if [ \"$(redis-cli -h \"$MASTER\" ping)\" != \"PONG\" ]; then\n       echo \"Can't ping master, attempting to force failover\"\n       if redis-cli -h \"$SERVICE\" -p \"$SENTINEL_PORT\" sentinel failover \"$MASTER_GROUP\" | grep -q 'NOGOODSLAVE' ; then \n           setup_defaults\n           return 0\n       fi\n       sleep 10\n       MASTER=\"$(redis-cli -h $SERVICE -p $SENTINEL_PORT sentinel get-master-addr-by-name $MASTER_GROUP | grep -E '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}')\"\n       if [ \"$MASTER\" ]; then\n           sentinel_update \"$MASTER\"\n           redis_update \"$MASTER\"\n       else\n          echo \"Could not failover, exiting...\"\n          exit 1\n       fi\n    else\n        echo \"Found reachable master, updating config\"\n        sentinel_update \"$MASTER\"\n        redis_update \"$MASTER\"\n    fi\n}\n\nmkdir -p /data/conf/\n\necho \"Initializing config..\"\ncopy_config\n\nANNOUNCE_IP=$(getent hosts \"$SERVICE-announce-$INDEX\" | awk '{ print $1 }')\nif [ -z \"$ANNOUNCE_IP\" ]; then\n    \"Could not resolve the announce ip for this pod\"\n    exit 1\nelif [ \"$MASTER\" ]; then\n    find_master\nelse\n    setup_defaults\nfi\n\nif [ \"${AUTH:-}\" ]; then\n    echo \"Setting auth values\"\n    ESCAPED_AUTH=$(echo \"$AUTH\" | sed -e 's/[\\/&]/\\\\&/g');\n    sed -i \"s/replace-default-auth/${ESCAPED_AUTH}/\" \"$REDIS_CONF\" \"$SENTINEL_CONF\"\nfi\n\necho \"Ready...\"\n"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-ha-probes
  labels:
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
    app: release-name-redis-ha
data:
  check-quorum.sh: |
    #!/bin/sh
    set -eu
    MASTER_GROUP="mymaster"
    SENTINEL_PORT=26379
    REDIS_PORT=6379
    NUM_SLAVES=$(redis-cli -p "$SENTINEL_PORT" sentinel master mymaster | awk '/num-slaves/{getline; print}')
    MIN_SLAVES=1

    if [ "$1" = "$SENTINEL_PORT" ]; then
        if redis-cli -p "$SENTINEL_PORT" sentinel ckquorum "$MASTER_GROUP" | grep -q NOQUORUM ; then
            echo "ERROR: NOQUORUM. Sentinel quorum check failed, not enough sentinels found"
            exit 1
        fi
    elif [ "$1" = "$REDIS_PORT" ]; then
        if [ "$MIN_SLAVES" -gt "$NUM_SLAVES" ]; then
            echo "Could not find enough replicating slaves. Needed $MIN_SLAVES but found $NUM_SLAVES"
            exit 1
        fi
    fi
    sh /probes/readiness.sh "$1"
  readiness.sh: |
    #!/bin/sh
    set -eu
    CHECK_SERVER="$(redis-cli -p "$1" ping)"

    if [ "$CHECK_SERVER" != "PONG" ]; then
        echo "Server check failed with: $CHECK_SERVER"
        exit 1
    fi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-redis-ha
  labels:
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
    app: release-name-redis-ha
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-redis-ha
  labels:
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
    app: release-name-redis-ha
subjects:
  - kind: ServiceAccount
    name: release-name-redis-ha
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-redis-ha
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-ha-announce-0
  labels:
    app: redis-ha
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
    - name: server
      port: 6379
      protocol: TCP
      targetPort: redis
    - name: sentinel
      port: 26379
      protocol: TCP
      targetPort: sentinel
  selector:
    release: release-name
    app: redis-ha
    statefulset.kubernetes.io/pod-name: release-name-redis-ha-server-0
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-ha-announce-1
  labels:
    app: redis-ha
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
    - name: server
      port: 6379
      protocol: TCP
      targetPort: redis
    - name: sentinel
      port: 26379
      protocol: TCP
      targetPort: sentinel
  selector:
    release: release-name
    app: redis-ha
    statefulset.kubernetes.io/pod-name: release-name-redis-ha-server-1
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-ha-announce-2
  labels:
    app: redis-ha
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
    - name: server
      port: 6379
      protocol: TCP
      targetPort: redis
    - name: sentinel
      port: 26379
      protocol: TCP
      targetPort: sentinel
  selector:
    release: release-name
    app: redis-ha
    statefulset.kubernetes.io/pod-name: release-name-redis-ha-server-2
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-ha
  labels:
    app: redis-ha
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
  annotations: null
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: server
      port: 6379
      protocol: TCP
      targetPort: redis
    - name: sentinel
      port: 26379
      protocol: TCP
      targetPort: sentinel
  selector:
    release: release-name
    app: redis-ha
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-ha-server
  labels:
    app: redis-ha
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
spec:
  selector:
    matchLabels:
      release: release-name
      app: redis-ha
  serviceName: release-name-redis-ha
  replicas: 3
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/init-config: 393c89b5642cb4f586853551fcf212ca6b56892bf829451ec995f8e3c712ac2d
        checksum/probe-config: b3798a94e02f994cfcf416e19b87aadb842ee64afd67a6b0005b6e5a39a4037e
      labels:
        release: release-name
        app: redis-ha
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: redis-ha
                  release: release-name
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: redis-ha
                    release: release-name
                topologyKey: failure-domain.beta.kubernetes.io/zone
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: release-name-redis-ha
      initContainers:
        - name: config-init
          image: redis:5.0.3-alpine
          imagePullPolicy: IfNotPresent
          resources: {}
          command:
            - sh
          args:
            - /readonly-config/init.sh
          env:
            - name: SENTINEL_ID_0
              value: e15229a06c5f0e9a4dd308152670a9e2242e728c
            - name: SENTINEL_ID_1
              value: 164afa3af0de56e73991db5663ba4f94e1475cad
            - name: SENTINEL_ID_2
              value: 5b68b03b989dc9bf5e9508182a452929c4b9a839
          volumeMounts:
            - name: config
              mountPath: /readonly-config
              readOnly: true
            - name: data
              mountPath: /data
      containers:
        - name: redis
          image: redis:5.0.3-alpine
          imagePullPolicy: IfNotPresent
          command:
            - redis-server
          args:
            - /data/conf/redis.conf
          livenessProbe:
            exec:
              command:
                - sh
                - /probes/readiness.sh
                - "6379"
            initialDelaySeconds: 15
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
                - sh
                - /probes/readiness.sh
                - "6379"
            initialDelaySeconds: 15
            periodSeconds: 5
          resources:
            seccompProfile:
              type: RuntimeDefault
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          ports:
            - name: redis
              containerPort: 6379
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /probes
              name: probes
        - name: sentinel
          image: redis:5.0.3-alpine
          imagePullPolicy: IfNotPresent
          command:
            - redis-sentinel
          args:
            - /data/conf/sentinel.conf
          livenessProbe:
            exec:
              command:
                - sh
                - /probes/readiness.sh
                - "26379"
            initialDelaySeconds: 15
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
                - sh
                - /probes/readiness.sh
                - "26379"
            initialDelaySeconds: 15
            periodSeconds: 5
          resources: {}
          ports:
            - name: sentinel
              containerPort: 26379
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /probes
              name: probes
      volumes:
        - name: config
          configMap:
            name: release-name-redis-ha-configmap
        - name: probes
          configMap:
            name: release-name-redis-ha-probes
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-redis-ha-configmap-test
  labels:
    app: redis-ha
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: check-init
      image: koalaman/shellcheck:v0.5.0
      args:
        - --shell=sh
        - /readonly-config/init.sh
      volumeMounts:
        - name: config
          mountPath: /readonly-config
          readOnly: true
    - name: check-probes
      image: koalaman/shellcheck:v0.5.0
      args:
        - --shell=sh
        - /probes/check-quorum.sh
      volumeMounts:
        - name: probes
          mountPath: /probes
          readOnly: true
  volumes:
    - name: config
      configMap:
        name: release-name-redis-ha-configmap
    - name: probes
      configMap:
        name: release-name-redis-ha-probes
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-redis-ha-service-test
  labels:
    app: redis-ha
    heritage: Helm
    release: release-name
    chart: redis-ha-3.4.2
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: release-name-service-test
      image: redis:5.0.3-alpine
      command:
        - sh
        - -c
        - redis-cli -h release-name-redis-ha -p 6379 info server
  restartPolicy: Never
