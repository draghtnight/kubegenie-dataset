[
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "elasticsearch-master-pdb"
    },
    "spec": {
      "maxUnavailable": 1,
      "selector": {
        "matchLabels": {
          "app": "elasticsearch-master"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-release-name-zeebe-gateway",
      "labels": {
        "app.kubernetes.io/name": "zeebe-cluster-helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "gateway"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-zeebe-cluster-helm",
      "labels": {
        "app.kubernetes.io/name": "zeebe-cluster-helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "broker",
        "app": "zeebe"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-zeebe-operate-helm",
      "labels": {
        "app": "release-name-zeebe-operate-helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx-controller"
    },
    "data": null
  },
  {
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-zeebe-cluster-helm",
      "labels": {
        "app.kubernetes.io/name": "zeebe-cluster-helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "apiVersion": "v1",
    "data": {
      "startup.sh": "#!/usr/bin/env bash\nset -eux -o pipefail\n\nexport ZEEBE_BROKER_NETWORK_ADVERTISEDHOST=${ZEEBE_BROKER_NETWORK_ADVERTISEDHOST:-$(hostname -f)}\nexport ZEEBE_BROKER_CLUSTER_NODEID=${ZEEBE_BROKER_CLUSTER_NODEID:-${K8S_POD_NAME##*-}}\n\n# As the number of replicas or the DNS is not obtainable from the downward API yet,\n# defined them here based on conventions\nexport ZEEBE_BROKER_CLUSTER_CLUSTERSIZE=${ZEEBE_BROKER_CLUSTER_CLUSTERSIZE:-1}\ncontactPointPrefix=${K8S_POD_NAME%-*}\ncontactPoints=${ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS:-\"\"}\nif [[ -z \"${contactPoints}\" ]]; then\n  for ((i=0; i<${ZEEBE_BROKER_CLUSTER_CLUSTERSIZE}; i++))\n  do\n    contactPoints=\"${contactPoints},${contactPointPrefix}-$i.$(hostname -d):26502\"\n  done\n\n  export ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS=\"${contactPoints}\"\nfi\n\nif [ \"$(ls -A /exporters/)\" ]; then\n  mkdir /usr/local/zeebe/exporters/\n  cp -a /exporters/*.jar /usr/local/zeebe/exporters/\nelse  \n  echo \"No exporters available.\"\nfi\n\nexec /usr/local/zeebe/bin/broker\n",
      "application.yaml": "",
      "broker-log4j2.xml": "",
      "gateway-log4j2.xml": ""
    }
  },
  {
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-zeebe-operate-helm"
    },
    "apiVersion": "v1",
    "data": {
      "application.yml": "# Operate configuration file\ncamunda.operate:\n  # ELS instance to store Operate data\n  elasticsearch:\n    # Cluster name\n    clusterName: elasticsearch\n    # Host\n    host: elasticsearch-master\n    # Transport port\n    port: 9200\n  # Zeebe instance\n  zeebe:\n    # Broker contact point\n    brokerContactPoint: release-name-zeebe-gateway:26500\n  # ELS instance to export Zeebe data to\n  zeebeElasticsearch:\n    # Cluster name\n    clusterName: elasticsearch\n    # Host\n    host: elasticsearch-master\n    # Transport port\n    port: 9200\n    # Index prefix, configured in Zeebe Elasticsearch exporter\n    prefix: zeebe-record\nlogging:\n  level:\n    ROOT: INFO\n    org.camunda.operate: DEBUG\n#Spring Boot Actuator endpoints to be exposed\nmanagement.endpoints.web.exposure.include: health,info,conditions,configprops,prometheus\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "name": "release-name-ingress-nginx"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps",
          "endpoints",
          "nodes",
          "pods",
          "secrets"
        ],
        "verbs": [
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "nodes"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "services"
        ],
        "verbs": [
          "get",
          "list",
          "update",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "extensions",
          "networking.k8s.io"
        ],
        "resources": [
          "ingresses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create",
          "patch"
        ]
      },
      {
        "apiGroups": [
          "extensions",
          "networking.k8s.io"
        ],
        "resources": [
          "ingresses/status"
        ],
        "verbs": [
          "update"
        ]
      },
      {
        "apiGroups": [
          "networking.k8s.io"
        ],
        "resources": [
          "ingressclasses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "name": "release-name-ingress-nginx"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-ingress-nginx"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-ingress-nginx",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "namespaces"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps",
          "pods",
          "secrets",
          "endpoints"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "services"
        ],
        "verbs": [
          "get",
          "list",
          "update",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "extensions",
          "networking.k8s.io"
        ],
        "resources": [
          "ingresses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          "extensions",
          "networking.k8s.io"
        ],
        "resources": [
          "ingresses/status"
        ],
        "verbs": [
          "update"
        ]
      },
      {
        "apiGroups": [
          "networking.k8s.io"
        ],
        "resources": [
          "ingressclasses"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps"
        ],
        "resourceNames": [
          "ingress-controller-leader-nginx"
        ],
        "verbs": [
          "get",
          "update"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "create",
          "get",
          "update"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create",
          "patch"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-ingress-nginx"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-ingress-nginx",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx-controller-admission"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "https-webhook",
          "port": 443,
          "targetPort": "webhook"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "controller"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "annotations": null,
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx-controller"
    },
    "spec": {
      "type": "LoadBalancer",
      "ports": [
        {
          "name": "http",
          "port": 80,
          "protocol": "TCP",
          "targetPort": "http"
        },
        {
          "name": "https",
          "port": 443,
          "protocol": "TCP",
          "targetPort": "https"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "controller"
      }
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "elasticsearch-master",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {}
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "ports": [
        {
          "name": "http",
          "protocol": "TCP",
          "port": 9200
        },
        {
          "name": "transport",
          "protocol": "TCP",
          "port": 9300
        }
      ]
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "elasticsearch-master-headless",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "selector": {
        "app": "elasticsearch-master"
      },
      "ports": [
        {
          "name": "http",
          "port": 9200
        },
        {
          "name": "transport",
          "port": 9300
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-zeebe-gateway",
      "labels": {
        "app.kubernetes.io/name": "zeebe-cluster-helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "gateway"
      },
      "annotations": {}
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "app.kubernetes.io/name": "zeebe-cluster-helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "gateway"
      },
      "ports": [
        {
          "port": 9600,
          "protocol": "TCP",
          "name": "http"
        },
        {
          "port": 26500,
          "protocol": "TCP",
          "name": "gateway"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-zeebe",
      "labels": {
        "app.kubernetes.io/name": "zeebe-cluster-helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "broker",
        "app": "zeebe"
      },
      "annotations": {}
    },
    "spec": {
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "type": "ClusterIP",
      "ports": [
        {
          "port": 9600,
          "protocol": "TCP",
          "name": "http"
        },
        {
          "port": 26502,
          "protocol": "TCP",
          "name": "internal"
        },
        {
          "port": 26501,
          "protocol": "TCP",
          "name": "command"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "zeebe-cluster-helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "broker"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-zeebe-operate-helm",
      "labels": {
        "app": "release-name-zeebe-operate-helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 80,
          "name": "http",
          "targetPort": 8080,
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app": "release-name-zeebe-operate-helm"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "controller"
      },
      "name": "release-name-ingress-nginx-controller"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "ingress-nginx",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "controller"
        }
      },
      "replicas": 1,
      "revisionHistoryLimit": 10,
      "minReadySeconds": 0,
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "ingress-nginx",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "controller"
          }
        },
        "spec": {
          "dnsPolicy": "ClusterFirst",
          "containers": [
            {
              "name": "controller",
              "image": "k8s.gcr.io/ingress-nginx/controller:v0.43.0@sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713",
              "imagePullPolicy": "IfNotPresent",
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/wait-shutdown"
                    ]
                  }
                }
              },
              "args": [
                "/nginx-ingress-controller",
                "--publish-service=$(POD_NAMESPACE)/release-name-ingress-nginx-controller",
                "--election-id=ingress-controller-leader",
                "--ingress-class=nginx",
                "--configmap=$(POD_NAMESPACE)/release-name-ingress-nginx-controller",
                "--validating-webhook=:8443",
                "--validating-webhook-certificate=/usr/local/certificates/cert",
                "--validating-webhook-key=/usr/local/certificates/key"
              ],
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ],
                  "add": [
                    "NET_BIND_SERVICE"
                  ]
                },
                "runAsUser": 11334,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "LD_PRELOAD",
                  "value": "/usr/local/lib/libmimalloc.so"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 1,
                "successThreshold": 1,
                "failureThreshold": 5
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": 10254,
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "timeoutSeconds": 1,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "ports": [
                {
                  "name": "http",
                  "containerPort": 80,
                  "protocol": "TCP"
                },
                {
                  "name": "https",
                  "containerPort": 443,
                  "protocol": "TCP"
                },
                {
                  "name": "webhook",
                  "containerPort": 8443,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "webhook-cert",
                  "mountPath": "/usr/local/certificates/",
                  "readOnly": true
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "90Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "nodeSelector": {
            "kubernetes.io/os": "linux"
          },
          "serviceAccountName": "release-name-ingress-nginx",
          "terminationGracePeriodSeconds": 300,
          "volumes": [
            {
              "name": "webhook-cert",
              "secret": {
                "secretName": "release-name-ingress-nginx-admission"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-zeebe-gateway",
      "labels": {
        "app.kubernetes.io/name": "zeebe-cluster-helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "gateway"
      },
      "annotations": null
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "zeebe-cluster-helm",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/managed-by": "Helm",
          "app.kubernetes.io/component": "gateway"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "zeebe-cluster-helm",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "gateway"
          },
          "annotations": null
        },
        "spec": {
          "containers": [
            {
              "name": "zeebe-cluster-helm",
              "image": "camunda/zeebe:1.3.4",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "containerPort": 9600,
                  "name": "http"
                },
                {
                  "containerPort": 26500,
                  "name": "gateway"
                },
                {
                  "containerPort": 26502,
                  "name": "internal"
                }
              ],
              "env": [
                {
                  "name": "ZEEBE_STANDALONE_GATEWAY",
                  "value": "true"
                },
                {
                  "name": "ZEEBE_GATEWAY_CLUSTER_CLUSTERNAME",
                  "value": "release-name-zeebe"
                },
                {
                  "name": "ZEEBE_GATEWAY_CLUSTER_MEMBERID",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "ZEEBE_LOG_LEVEL",
                  "value": "info"
                },
                {
                  "name": "JAVA_TOOL_OPTIONS",
                  "value": "-XX:MaxRAMPercentage=25.0 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/zeebe/data -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError"
                },
                {
                  "name": "ZEEBE_GATEWAY_CLUSTER_CONTACTPOINT",
                  "value": "release-name-zeebe:26502"
                },
                {
                  "name": "ZEEBE_GATEWAY_NETWORK_HOST",
                  "value": "0.0.0.0"
                },
                {
                  "name": "ZEEBE_GATEWAY_NETWORK_PORT",
                  "value": "26500"
                },
                {
                  "name": "ZEEBE_GATEWAY_CLUSTER_HOST",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "ZEEBE_GATEWAY_CLUSTER_PORT",
                  "value": "26502"
                },
                {
                  "name": "ZEEBE_GATEWAY_MONITORING_HOST",
                  "value": "0.0.0.0"
                },
                {
                  "name": "ZEEBE_GATEWAY_MONITORING_PORT",
                  "value": "9600"
                }
              ],
              "volumeMounts": null,
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "readinessProbe": {
                "tcpSocket": {
                  "port": "gateway"
                },
                "initialDelaySeconds": 20,
                "periodSeconds": 5
              }
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-zeebe-cluster-helm",
                "defaultMode": 484
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-zeebe-operate-helm",
      "labels": {
        "app": "release-name-zeebe-operate-helm"
      },
      "annotations": null
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "release-name-zeebe-operate-helm"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-zeebe-operate-helm"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "zeebe-operate-helm",
              "image": "camunda/operate:1.3.4",
              "resources": {
                "limits": {
                  "cpu": "1000m",
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": "500m",
                  "memory": "1Gi"
                }
              },
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "http",
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/usr/local/operate/config/application.yml",
                  "subPath": "application.yml"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-zeebe-operate-helm",
                "defaultMode": 484
              }
            }
          ],
          "securityContext": null
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "elasticsearch-master",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {
        "esMajorVersion": "7"
      }
    },
    "spec": {
      "serviceName": "elasticsearch-master-headless",
      "selector": {
        "matchLabels": {
          "app": "elasticsearch-master"
        }
      },
      "replicas": 3,
      "podManagementPolicy": "Parallel",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "elasticsearch-master"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "30Gi"
              }
            }
          }
        }
      ],
      "template": {
        "metadata": {
          "name": "elasticsearch-master",
          "labels": {
            "release": "release-name",
            "chart": "elasticsearch",
            "app": "elasticsearch-master"
          },
          "annotations": null
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1000,
            "runAsUser": 1000
          },
          "automountServiceAccountToken": true,
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "app",
                        "operator": "In",
                        "values": [
                          "elasticsearch-master"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              ]
            }
          },
          "terminationGracePeriodSeconds": 120,
          "volumes": null,
          "enableServiceLinks": true,
          "initContainers": [
            {
              "name": "configure-sysctl",
              "securityContext": {
                "runAsUser": 10487,
                "privileged": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "image": "docker.elastic.co/elasticsearch/elasticsearch:7.16.2",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sysctl",
                "-w",
                "vm.max_map_count=262144"
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "containers": [
            {
              "name": "elasticsearch",
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "runAsNonRoot": true,
                "runAsUser": 10556,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "image": "docker.elastic.co/elasticsearch/elasticsearch:7.16.2",
              "imagePullPolicy": "IfNotPresent",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "bash",
                    "-c",
                    "set -e\n# If the node is starting up wait for the cluster to be ready (request params: \"wait_for_status=green&timeout=1s\" )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\n# Disable nss cache to avoid filling dentry cache when calling curl\n# This is required with Elasticsearch Docker using nss < 3.52\nexport NSS_SDB_USE_CACHE=no\n\nhttp () {\n  local path=\"${1}\"\n  local args=\"${2}\"\n  set -- -XGET -s\n\n  if [ \"$args\" != \"\" ]; then\n    set -- \"$@\" $args\n  fi\n\n  if [ -n \"${ELASTIC_PASSWORD}\" ]; then\n    set -- \"$@\" -u \"elastic:${ELASTIC_PASSWORD}\"\n  fi\n\n  curl --output /dev/null -k \"$@\" \"http://127.0.0.1:9200${path}\"\n}\n\nif [ -f \"${START_FILE}\" ]; then\n  echo 'Elasticsearch is already running, lets check the node is healthy'\n  HTTP_CODE=$(http \"/\" \"-w %{http_code}\")\n  RC=$?\n  if [[ ${RC} -ne 0 ]]; then\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}\"\n    exit ${RC}\n  fi\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\n  if [[ ${HTTP_CODE} == \"200\" ]]; then\n    exit 0\n  elif [[ ${HTTP_CODE} == \"503\" && \"7\" == \"6\" ]]; then\n    exit 0\n  else\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\"\n    exit 1\n  fi\n\nelse\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \"wait_for_status=green&timeout=1s\" )'\n  if http \"/_cluster/health?wait_for_status=green&timeout=1s\" \"--fail\" ; then\n    touch ${START_FILE}\n    exit 0\n  else\n    echo 'Cluster is not yet ready (request params: \"wait_for_status=green&timeout=1s\" )'\n    exit 1\n  fi\nfi\n"
                  ]
                },
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 3,
                "timeoutSeconds": 5
              },
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9200
                },
                {
                  "name": "transport",
                  "containerPort": 9300
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "1000m",
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": "1000m",
                  "memory": "2Gi"
                }
              },
              "env": [
                {
                  "name": "node.name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "cluster.initial_master_nodes",
                  "value": "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
                },
                {
                  "name": "discovery.seed_hosts",
                  "value": "elasticsearch-master-headless"
                },
                {
                  "name": "cluster.name",
                  "value": "elasticsearch"
                },
                {
                  "name": "network.host",
                  "value": "0.0.0.0"
                },
                {
                  "name": "cluster.deprecation_indexing.enabled",
                  "value": "false"
                },
                {
                  "name": "node.data",
                  "value": "true"
                },
                {
                  "name": "node.ingest",
                  "value": "true"
                },
                {
                  "name": "node.master",
                  "value": "true"
                },
                {
                  "name": "node.ml",
                  "value": "true"
                },
                {
                  "name": "node.remote_cluster_client",
                  "value": "true"
                }
              ],
              "volumeMounts": [
                {
                  "name": "elasticsearch-master",
                  "mountPath": "/usr/share/elasticsearch/data"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-zeebe",
      "labels": {
        "app.kubernetes.io/name": "zeebe-cluster-helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "broker",
        "app": "zeebe"
      },
      "annotations": null
    },
    "spec": {
      "replicas": 3,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "zeebe-cluster-helm",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/managed-by": "Helm",
          "app.kubernetes.io/component": "broker"
        }
      },
      "serviceName": "release-name-zeebe",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "podManagementPolicy": "Parallel",
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "zeebe-cluster-helm",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "broker"
          },
          "annotations": null
        },
        "spec": {
          "initContainers": null,
          "containers": [
            {
              "name": "zeebe-cluster-helm",
              "image": "camunda/zeebe:1.3.4",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "LC_ALL",
                  "value": "C.UTF-8"
                },
                {
                  "name": "ZEEBE_BROKER_CLUSTER_CLUSTERNAME",
                  "value": "release-name-zeebe"
                },
                {
                  "name": "ZEEBE_LOG_LEVEL",
                  "value": "info"
                },
                {
                  "name": "ZEEBE_BROKER_CLUSTER_PARTITIONSCOUNT",
                  "value": "3"
                },
                {
                  "name": "ZEEBE_BROKER_CLUSTER_CLUSTERSIZE",
                  "value": "3"
                },
                {
                  "name": "ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR",
                  "value": "3"
                },
                {
                  "name": "ZEEBE_BROKER_THREADS_CPUTHREADCOUNT",
                  "value": "2"
                },
                {
                  "name": "ZEEBE_BROKER_THREADS_IOTHREADCOUNT",
                  "value": "2"
                },
                {
                  "name": "ZEEBE_BROKER_GATEWAY_ENABLE",
                  "value": "false"
                },
                {
                  "name": "ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME",
                  "value": "io.camunda.zeebe.exporter.ElasticsearchExporter"
                },
                {
                  "name": "ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL",
                  "value": "http://elasticsearch-master:9200"
                },
                {
                  "name": "ZEEBE_BROKER_NETWORK_COMMANDAPI_PORT",
                  "value": "26501"
                },
                {
                  "name": "ZEEBE_BROKER_NETWORK_INTERNALAPI_PORT",
                  "value": "26502"
                },
                {
                  "name": "ZEEBE_BROKER_NETWORK_MONITORINGAPI_PORT",
                  "value": "9600"
                },
                {
                  "name": "K8S_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "JAVA_TOOL_OPTIONS",
                  "value": "-XX:MaxRAMPercentage=25.0 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/zeebe/data -XX:ErrorFile=/usr/local/zeebe/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError"
                }
              ],
              "ports": [
                {
                  "containerPort": 9600,
                  "name": "http"
                },
                {
                  "containerPort": 26501,
                  "name": "command"
                },
                {
                  "containerPort": 26502,
                  "name": "internal"
                }
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": 9600
                },
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1
              },
              "resources": {
                "limits": {
                  "cpu": "1000m",
                  "memory": "4Gi"
                },
                "requests": {
                  "cpu": "500m",
                  "memory": "2Gi"
                }
              },
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/usr/local/zeebe/config/application.yaml",
                  "subPath": "application.yaml"
                },
                {
                  "name": "config",
                  "mountPath": "/usr/local/bin/startup.sh",
                  "subPath": "startup.sh"
                },
                {
                  "name": "data",
                  "mountPath": "/usr/local/zeebe/data"
                },
                {
                  "name": "exporters",
                  "mountPath": "/exporters"
                }
              ],
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-zeebe-cluster-helm",
                "defaultMode": 484
              }
            },
            {
              "name": "exporters",
              "emptyDir": {}
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "storageClassName": null,
            "resources": {
              "requests": {
                "storage": "10Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "release-name-zeebe-operate-helm",
      "labels": {
        "app.kubernetes.io/name": "zeebe-operate-helm",
        "helm.sh/chart": "zeebe-operate-helm-1.3.4",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.3.4",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "ingress.kubernetes.io/rewrite-target": "/",
        "nginx.ingress.kubernetes.io/ssl-redirect": "false"
      }
    },
    "spec": {
      "ingressClassName": "nginx",
      "rules": [
        {
          "host": null,
          "http": {
            "paths": [
              {
                "path": "/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "release-name-zeebe-operate-helm",
                    "port": {
                      "number": 80
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  {
    "apiVersion": "admissionregistration.k8s.io/v1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": {
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      },
      "name": "release-name-ingress-nginx-admission"
    },
    "webhooks": [
      {
        "name": "validate.nginx.ingress.kubernetes.io",
        "matchPolicy": "Equivalent",
        "rules": [
          {
            "apiGroups": [
              "networking.k8s.io"
            ],
            "apiVersions": [
              "v1beta1"
            ],
            "operations": [
              "CREATE",
              "UPDATE"
            ],
            "resources": [
              "ingresses"
            ]
          }
        ],
        "failurePolicy": "Fail",
        "sideEffects": "None",
        "admissionReviewVersions": [
          "v1",
          "v1beta1"
        ],
        "clientConfig": {
          "service": {
            "namespace": "default",
            "name": "release-name-ingress-nginx-controller-admission",
            "path": "/networking/v1beta1/ingresses"
          }
        }
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-ingress-nginx-admission",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade,post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "name": "release-name-ingress-nginx-admission",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade,post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "admissionregistration.k8s.io"
        ],
        "resources": [
          "validatingwebhookconfigurations"
        ],
        "verbs": [
          "get",
          "update"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "name": "release-name-ingress-nginx-admission",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade,post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-ingress-nginx-admission"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-ingress-nginx-admission",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-ingress-nginx-admission",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade,post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "get",
          "create"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-ingress-nginx-admission",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade,post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-ingress-nginx-admission"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-ingress-nginx-admission",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-yzjsj-test",
      "annotations": {
        "helm.sh/hook": "test",
        "helm.sh/hook-delete-policy": "hook-succeeded"
      }
    },
    "spec": {
      "securityContext": {
        "fsGroup": 1000,
        "runAsUser": 1000
      },
      "containers": [
        {
          "name": "release-name-adbxs-test",
          "image": "docker.elastic.co/elasticsearch/elasticsearch:7.16.2",
          "imagePullPolicy": "IfNotPresent",
          "command": [
            "sh",
            "-c",
            "#!/usr/bin/env bash -e\ncurl -XGET --fail 'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'\n"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-zeebe-test-connection",
      "labels": {
        "app.kubernetes.io/name": "zeebe-cluster-helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "wget",
          "image": "busybox",
          "command": [
            "wget"
          ],
          "args": [
            "release-name-zeebe:9600"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-zeebe-operate-helm-test-connection",
      "labels": {
        "app.kubernetes.io/name": "zeebe-operate-helm",
        "helm.sh/chart": "zeebe-operate-helm-1.3.4",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.3.4",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "wget",
          "image": "busybox",
          "command": [
            "wget"
          ],
          "args": [
            "release-name-zeebe-operate-helm:80"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-ingress-nginx-admission-create",
      "annotations": {
        "helm.sh/hook": "pre-install,pre-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "name": "release-name-ingress-nginx-admission-create",
          "labels": {
            "helm.sh/chart": "ingress-nginx-3.19.0",
            "app.kubernetes.io/name": "ingress-nginx",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/version": "0.43.0",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "admission-webhook"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "create",
              "image": "docker.io/jettech/kube-webhook-certgen:v1.5.0",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "create",
                "--host=release-name-ingress-nginx-controller-admission,release-name-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc",
                "--namespace=$(POD_NAMESPACE)",
                "--secret-name=release-name-ingress-nginx-admission"
              ],
              "env": [
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                }
              ]
            }
          ],
          "restartPolicy": "OnFailure",
          "serviceAccountName": "release-name-ingress-nginx-admission",
          "securityContext": {
            "runAsNonRoot": true,
            "runAsUser": 2000
          }
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-ingress-nginx-admission-patch",
      "annotations": {
        "helm.sh/hook": "post-install,post-upgrade",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      },
      "labels": {
        "helm.sh/chart": "ingress-nginx-3.19.0",
        "app.kubernetes.io/name": "ingress-nginx",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "0.43.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "admission-webhook"
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "name": "release-name-ingress-nginx-admission-patch",
          "labels": {
            "helm.sh/chart": "ingress-nginx-3.19.0",
            "app.kubernetes.io/name": "ingress-nginx",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/version": "0.43.0",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "admission-webhook"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "patch",
              "image": "docker.io/jettech/kube-webhook-certgen:v1.5.0",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "patch",
                "--webhook-name=release-name-ingress-nginx-admission",
                "--namespace=$(POD_NAMESPACE)",
                "--patch-mutating=false",
                "--secret-name=release-name-ingress-nginx-admission",
                "--patch-failure-policy=Fail"
              ],
              "env": [
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                }
              ]
            }
          ],
          "restartPolicy": "OnFailure",
          "serviceAccountName": "release-name-ingress-nginx-admission",
          "securityContext": {
            "runAsNonRoot": true,
            "runAsUser": 2000
          }
        }
      }
    }
  }
]