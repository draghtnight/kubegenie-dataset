[
  {
    "kind": "ServiceAccount",
    "apiVersion": "v1",
    "metadata": {
      "name": "release-name-pubsubplus-sa",
      "labels": {
        "app.kubernetes.io/name": "pubsubplus",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "pubsubplus-3.1.0"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-pubsubplus-secrets",
      "labels": {
        "app.kubernetes.io/name": "pubsubplus",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "pubsubplus-3.1.0"
      }
    },
    "type": "Opaque",
    "data": {
      "username_admin_password": "a1ViSXJaaWJzYQ=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-pubsubplus",
      "labels": {
        "app.kubernetes.io/name": "pubsubplus",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "pubsubplus-3.1.0"
      }
    },
    "data": {
      "init.sh": "export username_admin_passwordfilepath=\"/mnt/disks/secrets/username_admin_password\"\nexport username_admin_globalaccesslevel=admin\nexport service_ssh_port='2222'\nexport service_webtransport_port='8008'\nexport service_webtransport_tlsport='1443'\nexport service_semp_tlsport='1943'\nexport logging_debug_output=all\nexport system_scaling_maxconnectioncount=\"100\"",
      "startup-broker.sh": "#!/bin/bash\nAPP=`basename \"$0\"`\nIFS='-' read -ra host_array <<< $(hostname)\nnode_ordinal=${host_array[-1]}\necho \"`date` INFO: ${APP}-Node ordinal: ${node_ordinal}\"\necho \"`date` INFO: ${APP}-Waiting for management API to become available\"\npassword=`cat /mnt/disks/secrets/username_admin_password`\nloop_guard=60\npause=10\ncount=0\nwhile [ ${count} -lt ${loop_guard} ]; do \n  if /mnt/disks/solace/semp_query.sh -n admin -p ${password} -u http://localhost:8080 -t ; then\n    break\n  fi\n  run_time=$((${count} * ${pause}))\n  ((count++))\n  echo \"`date` INFO: ${APP}-Waited ${run_time} seconds, Management API not yet accessible\"\n  sleep ${pause}\ndone\nif [ ${count} -eq ${loop_guard} ]; then\n  echo \"`date` ERROR: ${APP}-Solace Management API never came up\"  >&2\n  exit 1 \nfi\necho \"`date` INFO: ${APP}-PubSub+ Event Broker bringup is complete for this node.\"\nexit 0",
      "readiness_check.sh": "#!/bin/bash\nAPP=`basename \"$0\"`\nLOG_FILE=/usr/sw/var/k8s_readiness_check.log # STDOUT/STDERR goes to k8s event logs but gets cleaned out eventually. This will also persist it.\ntail -n 1000 ${LOG_FILE} > ${LOG_FILE}.tmp; mv -f ${LOG_FILE}.tmp ${LOG_FILE} || :  # Limit logs size\nexec > >(tee -a ${LOG_FILE}) 2>&1 # Setup logging\nFINAL_ACTIVITY_LOGGED_TRACKING_FILE=/tmp/final_activity_state_logged\n\n# Function to read Kubernetes metadata labels\nget_label () {\n  # Params: $1 label name\n  echo $(cat /etc/podinfo/labels | awk -F= '$1==\"'${1}'\"{print $2}' | xargs);\n}\n\n# Function to set Kubernetes metadata labels\nset_label () {\n  # Params: $1 label name, $2 label set value\n  #Prevent overdriving Kubernetes infra, don't set activity state to same as previous state\n  previous_state=$(get_label \"active\")\n  if [ \"${2}\" = \"${previous_state}\" ]; then\n    #echo \"`date` INFO: ${APP}-Current and Previous state match (${2}), not updating pod label\"\n    :\n  else\n    echo \"`date` INFO: ${APP}-Updating pod label using K8s API from ${previous_state} to ${2}\"\n    echo \"[{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/metadata/labels/${1}\\\", \\\"value\\\": \\\"${2}\\\" }]\" > /tmp/patch_label.json\n    K8S=https://kubernetes.default.svc.cluster.local:$KUBERNETES_SERVICE_PORT\n    KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token)\n    CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    NAMESPACE=$(</var/run/secrets/kubernetes.io/serviceaccount/namespace)\n    if ! curl -sS --output /dev/null --cacert $CACERT --connect-timeout 5 \\\n        --request PATCH --data \"$(cat /tmp/patch_label.json)\" \\\n        -H \"Authorization: Bearer $KUBE_TOKEN\" -H \"Content-Type:application/json-patch+json\" \\\n        $K8S/api/v1/namespaces/$NAMESPACE/pods/$HOSTNAME ; then\n      # Label update didn't work this way, fall back to alternative legacy method to update label\n      if ! curl -sSk --output /dev/null -H \"Authorization: Bearer $KUBE_TOKEN\" --request PATCH --data \"$(cat /tmp/patch_label.json)\" \\\n        -H \"Content-Type:application/json-patch+json\" \\\n        https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$STATEFULSET_NAMESPACE/pods/$HOSTNAME ; then\n        echo \"`date` ERROR: ${APP}-Unable to update pod label, check access from pod to K8s API or RBAC authorization\" >&2\n        rm -f ${FINAL_ACTIVITY_LOGGED_TRACKING_FILE}; exit 1\n      fi\n    fi\n  fi\n}\n\n# Main logic: note that there are no re-tries here, if check fails then return not ready.\n# nonHA config\nhealth_result=`curl -s -o /dev/null -w \"%{http_code}\"  http://localhost:5550/health-check/guaranteed-active`\ncase \"${health_result}\" in\n  \"200\")\n    if [ ! -f ${FINAL_ACTIVITY_LOGGED_TRACKING_FILE} ]; then\n      echo \"`date` INFO: ${APP}-nonHA Event Broker health check reported 200, message spool is up\"\n      touch ${FINAL_ACTIVITY_LOGGED_TRACKING_FILE}\n    fi\n    set_label \"active\" \"true\"\n    exit 0\n    ;;\n  \"503\")\n    if [[ $(get_label \"active\") = \"true\" ]]; then echo \"`date` INFO: ${APP}-nonHA Event Broker health check reported 503, message spool is down\"; fi\n    set_label \"active\" \"false\"\n    # Fail readiness check\n    rm -f ${FINAL_ACTIVITY_LOGGED_TRACKING_FILE}; exit 1\n    ;;\n  *)\n    echo \"`date` WARN: ${APP}-nonHA Event Broker health check reported ${health_result}\"\n    set_label \"active\" \"false\"\n    # Fail readiness check\n    rm -f ${FINAL_ACTIVITY_LOGGED_TRACKING_FILE}; exit 1\nesac",
      "semp_query.sh": "#!/bin/bash\nAPP=`basename \"$0\"`\nOPTIND=1         # Reset in case getopts has been used previously in the shell.\n# Initialize our own variables:\ncount_search=\"\"\nname=\"\"\npassword=\"\"\nquery=\"\"\nurl=\"\"\nvalue_search=\"\"\ntest_connection_only=false\nscript_name=$0\nverbose=0\nwhile getopts \"c:n:p:q:u:v:t\" opt; do\n    case \"$opt\" in\n    c)  count_search=$OPTARG\n        ;;\n    n)  username=$OPTARG\n        ;;\n    p)  password=$OPTARG\n        ;;\n    q)  query=$OPTARG\n        ;;\n    u)  url=$OPTARG\n        ;;\n    v)  value_search=$OPTARG\n        ;;\n    t)  test_connection_only=true\n        ;;\n    esac\ndone\nshift $((OPTIND-1))\n[ \"$1\" = \"--\" ] && shift\nverbose=1\n#echo \"`date` INFO: ${APP}-${script_name}: count_search=${count_search} ,username=${username} ,password=xxx query=${query} \\\n#            ,url=${url} ,value_search=${value_search} ,Leftovers: $@\" >&2\nif [[ ${url} = \"\" || ${username} = \"\" || ${password} = \"\" ]]; then\n  echo \"`date` ERROR: ${APP}-${script_name}: url, username, password are madatory fields\" >&2\n  echo  '<returnInfo><errorInfo>missing parameter</errorInfo></returnInfo>'\n  exit 1\nfi\nif [ \"`curl --write-out '%{http_code}' --silent --output /dev/null -u ${username}:${password} ${url}/SEMP`\" != \"200\" ] ; then\n  echo  \"<returnInfo><errorInfo>management host is not responding</errorInfo></returnInfo>\"\n  exit 1\nfi\nif [ \"$test_connection_only\" = true ] ; then\n  exit 0      # done here, connection is up\nfi\nquery_response=`curl -sS -u ${username}:${password} ${url}/SEMP -d \"${query}\"`\n# Validate first char of response is \"<\", otherwise no hope of being valid xml\nif [[ ${query_response:0:1} != \"<\" ]] ; then \n  echo  \"<returnInfo><errorInfo>no valid xml returned</errorInfo></returnInfo>\"\n  exit 1\nfi\nquery_response_code=`echo $query_response | xmllint -xpath 'string(/rpc-reply/execute-result/@code)' -`\n\nif [[ -z ${query_response_code} && ${query_response_code} != \"ok\" ]]; then\n    echo  \"<returnInfo><errorInfo>query failed -${query_response_code}-</errorInfo></returnInfo>\"\n    exit 1\nfi\n#echo \"`date` INFO: ${APP}-${script_name}: query passed ${query_response_code}\" >&2\nif [[ ! -z $value_search ]]; then\n    value_result=`echo $query_response | xmllint -xpath \"string($value_search)\" -`\n    echo  \"<returnInfo><errorInfo></errorInfo><valueSearchResult>${value_result}</valueSearchResult></returnInfo>\"\n    exit 0\nfi\nif [[ ! -z $count_search ]]; then\n    count_line=`echo $query_response | xmllint -xpath \"$count_search\" -`\n    count_string=`echo $count_search | cut -d '\"' -f 2`\n    count_result=`echo ${count_line} | tr \"><\" \"\\n\" | grep -c ${count_string}`\n    echo  \"<returnInfo><errorInfo></errorInfo><countSearchResult>${count_result}</countSearchResult></returnInfo>\"\n    exit 0\nfi"
    }
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-pubsubplus-podtagupdater"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "pods"
        ],
        "verbs": [
          "patch"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-pubsubplus-serviceaccounts-to-podtagupdater"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-pubsubplus-podtagupdater"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-pubsubplus-sa"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-pubsubplus",
      "labels": {
        "app.kubernetes.io/name": "pubsubplus",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "pubsubplus-3.1.0"
      }
    },
    "spec": {
      "type": "LoadBalancer",
      "ports": [
        {
          "port": 2222,
          "targetPort": 2222,
          "protocol": "TCP",
          "name": "tcp-ssh"
        },
        {
          "port": 8080,
          "targetPort": 8080,
          "protocol": "TCP",
          "name": "tcp-semp"
        },
        {
          "port": 1943,
          "targetPort": 1943,
          "protocol": "TCP",
          "name": "tls-semp"
        },
        {
          "port": 55555,
          "targetPort": 55555,
          "protocol": "TCP",
          "name": "tcp-smf"
        },
        {
          "port": 55003,
          "targetPort": 55003,
          "protocol": "TCP",
          "name": "tcp-smfcomp"
        },
        {
          "port": 55443,
          "targetPort": 55443,
          "protocol": "TCP",
          "name": "tls-smf"
        },
        {
          "port": 55556,
          "targetPort": 55556,
          "protocol": "TCP",
          "name": "tcp-smfroute"
        },
        {
          "port": 8008,
          "targetPort": 8008,
          "protocol": "TCP",
          "name": "tcp-web"
        },
        {
          "port": 1443,
          "targetPort": 1443,
          "protocol": "TCP",
          "name": "tls-web"
        },
        {
          "port": 9000,
          "targetPort": 9000,
          "protocol": "TCP",
          "name": "tcp-rest"
        },
        {
          "port": 9443,
          "targetPort": 9443,
          "protocol": "TCP",
          "name": "tls-rest"
        },
        {
          "port": 5672,
          "targetPort": 5672,
          "protocol": "TCP",
          "name": "tcp-amqp"
        },
        {
          "port": 5671,
          "targetPort": 5671,
          "protocol": "TCP",
          "name": "tls-amqp"
        },
        {
          "port": 1883,
          "targetPort": 1883,
          "protocol": "TCP",
          "name": "tcp-mqtt"
        },
        {
          "port": 8883,
          "targetPort": 8883,
          "protocol": "TCP",
          "name": "tls-mqtt"
        },
        {
          "port": 8000,
          "targetPort": 8000,
          "protocol": "TCP",
          "name": "tcp-mqttweb"
        },
        {
          "port": 8443,
          "targetPort": 8443,
          "protocol": "TCP",
          "name": "tls-mqttweb"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "pubsubplus",
        "app.kubernetes.io/instance": "release-name",
        "active": "true"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-pubsubplus",
      "labels": {
        "app.kubernetes.io/name": "pubsubplus",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "pubsubplus-3.1.0"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "pubsubplus",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "serviceName": "release-name-pubsubplus-discovery",
      "replicas": 1,
      "podManagementPolicy": "Parallel",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "pubsubplus",
            "app.kubernetes.io/instance": "release-name"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1000002,
            "runAsUser": 1000001
          },
          "serviceAccountName": "release-name-pubsubplus-sa",
          "terminationGracePeriodSeconds": 1200,
          "containers": [
            {
              "name": "pubsubplus",
              "image": "solace/solace-pubsub-standard:latest",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "2",
                  "memory": "4025Mi"
                },
                "limits": {
                  "cpu": "2",
                  "memory": "4025Mi"
                }
              },
              "livenessProbe": {
                "tcpSocket": {
                  "port": 8080
                },
                "initialDelaySeconds": 300,
                "timeoutSeconds": 5
              },
              "readinessProbe": {
                "initialDelaySeconds": 30,
                "periodSeconds": 5,
                "exec": {
                  "command": [
                    "/mnt/disks/solace/readiness_check.sh"
                  ]
                }
              },
              "securityContext": {
                "privileged": false,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "STATEFULSET_NAME",
                  "value": "release-name-pubsubplus"
                },
                {
                  "name": "STATEFULSET_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "TZ",
                  "value": ":/usr/share/zoneinfo/UTC"
                },
                {
                  "name": "UMASK",
                  "value": "0022"
                }
              ],
              "command": [
                "bash",
                "-ec",
                "source /mnt/disks/solace/init.sh\n# not using postinstall hooks because of order dependencies\n# launch config check - readiness check script will be launched by readinessProbe\nnohup /mnt/disks/solace/startup-broker.sh &\n/usr/sbin/boot.sh\n"
              ],
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "bash",
                      "-ec",
                      "while ! pgrep solacedaemon ; do sleep 1; done\nkillall solacedaemon; \nwhile [ !