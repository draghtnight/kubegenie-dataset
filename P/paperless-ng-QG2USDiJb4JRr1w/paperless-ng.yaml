apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql-credentials
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 14.3.0
    helm-revision: "1"
    helm.sh/chart: postgresql-8.0.5
stringData:
  postgresql-password: testpass
  postgresql-postgres-password: testroot
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis-credentials
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.1
    helm-revision: "1"
    helm.sh/chart: redis-3.0.5
stringData:
  redis-password: testpass
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: paperless-ng-4.0.1
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 1.7.1
    app.kubernetes.io/managed-by: Helm
  name: dbcreds
data:
  postgresql-password: MW1NWWdld0Vhb3kyUnRxd2tDQTM1MW5NSTRJbnJLbFBXQTVmWmpqREZCQzVLQVk2VlE=
  postgresql-postgres-password: SDVDbzdHU1BQV3U4aDlPZVZ4d0VpYll6dDFiR2M2VmlXdkVwbGRGUnRYb0JrVm45bkw=
  url: cG9zdGdyZXNxbDovL3BhcGVybGVzcy1uZzoxbU1ZZ2V3RWFveTJSdHF3a0NBMzUxbk1JNElucktsUFdBNWZaampERkJDNUtBWTZWUUByZWxlYXNlLW5hbWUtcG9zdGdyZXNxbDo1NDMyL3BhcGVybGVzcy1uZw==
  url-noql: cG9zdGdyZXM6Ly9wYXBlcmxlc3Mtbmc6MW1NWWdld0Vhb3kyUnRxd2tDQTM1MW5NSTRJbnJLbFBXQTVmWmpqREZCQzVLQVk2VlFAcmVsZWFzZS1uYW1lLXBvc3RncmVzcWw6NTQzMi9wYXBlcmxlc3Mtbmc=
  urlnossl: cG9zdGdyZXNxbDovL3BhcGVybGVzcy1uZzoxbU1ZZ2V3RWFveTJSdHF3a0NBMzUxbk1JNElucktsUFdBNWZaampERkJDNUtBWTZWUUByZWxlYXNlLW5hbWUtcG9zdGdyZXNxbDo1NDMyL3BhcGVybGVzcy1uZz9zc2xtb2RlPWRpc2FibGU=
  plainporthost: cmVsZWFzZS1uYW1lLXBvc3RncmVzcWw=
  plainhost: cmVsZWFzZS1uYW1lLXBvc3RncmVzcWw=
  jdbc: amRiYzpwb3N0Z3Jlc3FsOi8vcmVsZWFzZS1uYW1lLXBvc3RncmVzcWw6NTQzMi9wYXBlcmxlc3Mtbmc=
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: paperless-ng-4.0.1
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 1.7.1
    app.kubernetes.io/managed-by: Helm
  name: rediscreds
data:
  redis-password: QkhrN2R3cVhKclhNVGx2MEkxMXB6NEFLd3BERDBJa2duOGhOZ2lyTG42bldUNWc4bDM=
  url: cmVkaXM6Ly9kZWZhdWx0OkJIazdkd3FYSnJYTVRsdjBJMTFwejRBS3dwREQwSWtnbjhoTmdpckxuNm5XVDVnOGwzQHJlbGVhc2UtbmFtZS1yZWRpczo2Mzc5LzA=
  plainporthost: cmVsZWFzZS1uYW1lLXJlZGlzOjYzNzk=
  plainhost: cmVsZWFzZS1uYW1lLXJlZGlz
type: Opaque
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: paperlessng-secrets
data:
  PAPERLESS_SECRET_KEY: bnNHckxGMTJ3TG1TTmhQTXBrd0RqMzhrVjF1c2JYZUc=
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-paperless-ng
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/version: 1.7.1
    helm-revision: "1"
    helm.sh/chart: paperless-ng-4.0.1
stringData:
  PAPERLESS_ADMIN_MAIL: admin@admin.com
  PAPERLESS_ADMIN_PASSWORD: admin
  PAPERLESS_ADMIN_USER: admin
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.1
    helm-revision: "1"
    helm.sh/chart: redis-3.0.5
data:
  ping_liveness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "failed to connect using password: $REDIS_PASSWORD response: $response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-paperless-ng-consume
  labels:
    helm.sh/chart: paperless-ng-4.0.1
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 1.7.1
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 999Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-paperless-ng-data
  labels:
    helm.sh/chart: paperless-ng-4.0.1
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 1.7.1
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 999Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-paperless-ng-media
  labels:
    helm.sh/chart: paperless-ng-4.0.1
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 1.7.1
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 999Gi
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 14.3.0
    helm-revision: "1"
    helm.sh/chart: postgresql-8.0.5
  annotations: null
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: main
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.1
    helm-revision: "1"
    helm.sh/chart: redis-3.0.5
  annotations: null
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
      name: main
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-paperless-ng
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/version: 1.7.1
    helm-revision: "1"
    helm.sh/chart: paperless-ng-4.0.1
  annotations: null
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  ports:
    - port: 10140
      targetPort: 8000
      protocol: TCP
      name: main
  selector:
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-paperless-ng
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: paperless-ng
    app.kubernetes.io/version: 1.7.1
    helm-revision: "1"
    helm.sh/chart: paperless-ng-4.0.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: paperless-ng
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations: null
      labels:
        app.kubernetes.io/name: paperless-ng
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 0
        supplementalGroups:
          - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: autopermissions
          image: ghcr.io/truecharts/alpine:v3.15.2@sha256:29ed3480a0ee43f7af681fed5d4fc215516abf1c41eade6938b26d8c9c2c7583
          securityContext:
            runAsUser: 11564
            privileged: true
            allowPrivilegeEscalation: false
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - /bin/sh
            - -c
            - |
              /bin/bash <<'EOF'
              echo "Automatically correcting permissions..."
              echo "increasing inotify limits..."
              ( sysctl -w fs.inotify.max_user_watches=524288 || echo "error setting inotify") && ( sysctl -w fs.inotify.max_user_instances=512 || echo "error setting inotify")
              EOF
          volumeMounts: null
        - name: postgresql-init
          image: ghcr.io/truecharts/postgresql:v14.3.0@sha256:a05700459c7d20acebb13edfe713174cccbdb63c727f8a6cd421be8592b172a4
          securityContext:
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - sh
            - -c
            - until pg_isready -U paperless-ng -h release-name-postgresql; do sleep 2 ; done
          imagePullPolicy: IfNotPresent
      containers:
        - name: release-name-paperless-ng
          image: tccr.io/truecharts/paperless-ng:v1.7.1@sha256:3cf778235059abdebd321bc886dff741355d1698b38f6da5c6519f2afe375bea
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PUID
              value: "568"
            - name: USER_ID
              value: "568"
            - name: UID
              value: "568"
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: PGID
              value: "568"
            - name: GROUP_ID
              value: "568"
            - name: GID
              value: "568"
            - name: NVIDIA_VISIBLE_DEVICES
              value: void
            - name: TZ
              value: UTC
            - name: PAPERLESS_CONSUMPTION_DIR
              value: /consume/
            - name: PAPERLESS_DATA_DIR
              value: /data/
            - name: PAPERLESS_DBHOST
              valueFrom:
                secretKeyRef:
                  key: plainhost
                  name: dbcreds
            - name: PAPERLESS_DBNAME
              value: paperless-ng
            - name: PAPERLESS_DBPASS
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: dbcreds
            - name: PAPERLESS_DBPORT
              value: "5432"
            - name: PAPERLESS_DBUSER
              value: paperless-ng
            - name: PAPERLESS_MEDIA_ROOT
              value: /media/
            - name: PAPERLESS_PORT
              value: "8000"
            - name: PAPERLESS_REDIS
              valueFrom:
                secretKeyRef:
                  key: url
                  name: rediscreds
            - name: PAPERLESS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: PAPERLESS_SECRET_KEY
                  name: paperlessng-secrets
            - name: PAPERLESS_TIME_ZONE
              value: UTC
            - name: PAPERLESS_WEBSERVER_WORKERS
              value: "2"
            - name: USERMAP_GID
              value: "568"
            - name: USERMAP_UID
              value: "568"
          envFrom:
            - secretRef:
                name: release-name-paperless-ng
          ports:
            - name: main
              containerPort: 8000
              protocol: TCP
          volumeMounts:
            - mountPath: /consume
              name: consume
            - mountPath: /data
              name: data
            - mountPath: /media
              name: media
            - mountPath: /shared
              name: shared
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
          livenessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 10
            failureThreshold: 60
            timeoutSeconds: 2
            periodSeconds: 5
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: consume
          persistentVolumeClaim:
            claimName: release-name-paperless-ng-consume
        - name: data
          persistentVolumeClaim:
            claimName: release-name-paperless-ng-data
        - name: media
          persistentVolumeClaim:
            claimName: release-name-paperless-ng-media
        - name: shared
          emptyDir: {}
        - name: temp
          emptyDir:
            medium: Memory
        - name: varlogs
          emptyDir: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 14.3.0
    helm-revision: "1"
    helm.sh/chart: postgresql-8.0.5
spec:
  revisionHistoryLimit: 3
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
  serviceName: release-name-postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 568
        supplementalGroups:
          - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: autopermissions
          image: ghcr.io/truecharts/alpine:v3.15.2@sha256:29ed3480a0ee43f7af681fed5d4fc215516abf1c41eade6938b26d8c9c2c7583
          securityContext:
            runAsUser: 11589
            privileged: true
            allowPrivilegeEscalation: false
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - /bin/sh
            - -c
            - |
              /bin/bash <<'EOF'
              echo "Automatically correcting permissions..."
              echo "increasing inotify limits..."
              ( sysctl -w fs.inotify.max_user_watches=524288 || echo "error setting inotify") && ( sysctl -w fs.inotify.max_user_instances=512 || echo "error setting inotify")
              EOF
          volumeMounts: null
      containers:
        - name: release-name-postgresql
          image: ghcr.io/truecharts/postgresql:v14.3.0@sha256:a05700459c7d20acebb13edfe713174cccbdb63c727f8a6cd421be8592b172a4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PUID
              value: "568"
            - name: USER_ID
              value: "568"
            - name: UID
              value: "568"
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: PGID
              value: "568"
            - name: GROUP_ID
              value: "568"
            - name: GID
              value: "568"
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: NVIDIA_VISIBLE_DEVICES
              value: void
            - name: TZ
              value: UTC
            - name: POSTGRESQL_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgresql-postgres-password
                  name: dbcreds
            - name: POSTGRES_DB
              value: paperless-ng
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: dbcreds
            - name: POSTGRES_USER
              value: paperless-ng
          envFrom: null
          ports:
            - name: main
              containerPort: 5432
              protocol: TCP
          volumeMounts:
            - mountPath: /shared
              name: shared
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /bitnami/postgresql
              name: db
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done
            failureThreshold: 60
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: shared
          emptyDir: {}
        - name: temp
          emptyDir:
            medium: Memory
        - name: varlogs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: db
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 999Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.1
    helm-revision: "1"
    helm.sh/chart: redis-3.0.5
spec:
  revisionHistoryLimit: 3
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
  serviceName: release-name-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 568
        supplementalGroups:
          - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: autopermissions
          image: ghcr.io/truecharts/alpine:v3.15.2@sha256:29ed3480a0ee43f7af681fed5d4fc215516abf1c41eade6938b26d8c9c2c7583
          securityContext:
            runAsUser: 11015
            privileged: true
            allowPrivilegeEscalation: false
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - /bin/sh
            - -c
            - |
              /bin/bash <<'EOF'
              echo "Automatically correcting permissions..."
              echo "increasing inotify limits..."
              ( sysctl -w fs.inotify.max_user_watches=524288 || echo "error setting inotify") && ( sysctl -w fs.inotify.max_user_instances=512 || echo "error setting inotify")
              EOF
          volumeMounts: null
      containers:
        - name: release-name-redis
          image: ghcr.io/truecharts/redis:v7.0.1@sha256:70d9d52b81f61be9507fd3e2e3a79eb3642b29cf5a5b7a650f3473509f195f19
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PUID
              value: "568"
            - name: USER_ID
              value: "568"
            - name: UID
              value: "568"
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: PGID
              value: "568"
            - name: GROUP_ID
              value: "568"
            - name: GID
              value: "568"
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: NVIDIA_VISIBLE_DEVICES
              value: void
            - name: TZ
              value: UTC
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: redis-password
                  name: rediscreds
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_REPLICATION_MODE
              value: master
          envFrom: null
          ports:
            - name: main
              containerPort: 6379
              protocol: TCP
          volumeMounts:
            - mountPath: /health
              name: redis-health
            - mountPath: /shared
              name: shared
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /bitnami/redis
              name: data
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 2
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 2
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 2
            failureThreshold: 60
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: redis-health
          configMap:
            defaultMode: 493
            name: release-name-redis-health
        - name: shared
          emptyDir: {}
        - name: temp
          emptyDir:
            medium: Memory
        - name: varlogs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 999Gi
