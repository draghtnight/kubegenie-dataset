apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-postgres-scripts
  labels:
    helm.sh/chart: postgres-0.3.9
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "14.3"
    app.kubernetes.io/managed-by: Helm
data:
  01-init-userdb.sh: |
    #!/bin/sh
    create_user()
    {
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" -v USERDBNAME="$POSTGRES_DB" -v USERDBUSER="$USERDB_USER" -v USERDBPASSWORD="'$USERDB_PASSWORD'" <<-EOSQL
      CREATE USER :USERDBUSER WITH PASSWORD :USERDBPASSWORD;
      GRANT ALL PRIVILEGES ON DATABASE :USERDBNAME TO :USERDBUSER;
    EOSQL
    }
    set -e
    if [ ! -z "$POSTGRES_DB" ] && [ ! -z "$USERDB_USER" ] && [ ! -z "$USERDB_PASSWORD" ]; then
      create_user
    fi
  init.sh: "#!/bin/sh\necho \"Start initialization\"\necho \"Copy init-userdb script\"\ncp /initscripts/01-init-userdb.sh /scripts\nif [ -d /extrascripts ]; then\n  echo \"Copy extra scripts\"\n  cp /extrascripts/* /scripts\nfi\nif [ -d /customconfig ]; then\n  echo \"Create postgres config\"\n  cat /customconfig/* >>/configs/postgresql.conf\nfi    \nif [ -d /extraconfigs ]; then\n  echo \"Add extra configs to postgres config\"\n  cat /extraconfigs/* >>/configs/postgresql.conf\nfi\necho \"Initialization done.\"\n"
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgres
  labels:
    helm.sh/chart: postgres-0.3.9
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "14.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: postgres
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgres
  labels:
    helm.sh/chart: postgres-0.3.9
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "14.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: release-name-postgres
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/customconfig: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secureconfig: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/scripts: b090bdcf5985eb8503ff5510ba5337678c34791d1678ff1ee78396f0850431a2
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 999
      initContainers:
        - name: postgres-init
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999
          image: postgres:14.3
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /initscripts
              name: initscripts
            - mountPath: /scripts
              name: scripts
            - mountPath: /configs
              name: configs
          command:
            - /initscripts/init.sh
      containers:
        - name: postgres
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 11103
            capabilities:
              drop:
                "": NET_RAW
          image: postgres:14.3
          imagePullPolicy: IfNotPresent
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pg
          envFrom: null
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -h localhost
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
            periodSeconds: 10
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -h localhost
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -h localhost
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /var/run
              name: run
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
            - mountPath: /docker-entrypoint-initdb.d
              name: scripts
            - mountPath: /etc/postgresql
              name: configs
      volumes:
        - name: run
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: scripts
          emptyDir: {}
        - name: configs
          emptyDir: {}
        - name: initscripts
          configMap:
            name: release-name-postgres-scripts
            defaultMode: 365
        - name: postgres-data
          emptyDir: {}
