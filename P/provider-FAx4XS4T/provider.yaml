apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
  namespace: default
spec:
  podSelector:
    matchLabels: {}
  policyTypes:
    - Ingress
    - Egress
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-provider
  namespace: FAx4XS4T
  labels:
    helm.sh/chart: provider-0.172.0
    app.kubernetes.io/name: provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.16.4-rc2
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-provider-keys
  namespace: FAx4XS4T
type: Opaque
data:
  key.txt: null
  key-pass.txt: null
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-provider-bidscripts
  namespace: FAx4XS4T
data:
  dummy: |
    dummy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-provider-boot
  namespace: FAx4XS4T
data:
  run.sh: |
    #!/bin/bash

    if $AKASH_DEBUG == "true"; then sleep 5000; fi

    set -x

    ##
    # Import key
    ##
    cat "$AKASH_BOOT_KEYS/key-pass.txt" | { cat ; echo ; } | /bin/akash --home="$AKASH_HOME" keys import --keyring-backend="$AKASH_KEYRING_BACKEND"  "$AKASH_FROM" "$AKASH_BOOT_KEYS/key.txt"

    ##
    # Check the Akash Node is working
    ##
    apt update && apt -yqq install curl jq bc netcat
    solo_ip=$(echo $AKASH_NODE | cut -d":" -f2 | cut -d "/" -f3) ; port=$(echo $AKASH_NODE | cut -d":" -f3-)
    if [[ $AKASH_NODE != "http://akash-node-1:26657" ]]; then
      nc -z -v -w5 $solo_ip $port
    fi
    until [[ $(curl -s $AKASH_NODE/status | jq -r .result.sync_info.catching_up) == "false" ]]; do sleep 15; echo "Akash node not ready. Retrying";  done

    # Check Akash RPC node isn't running behind too much and abort if it does.
    DATE_AKASH=$(akash status | jq -r '.SyncInfo.latest_block_time')
    TS_AKASH=$(date +%s --date "$DATE_AKASH")
    TS=$(date +%s)
    DIFF=$(echo "$TS - $TS_AKASH" | bc)
    if [[ "$DIFF" -gt 30 ]]; then
      echo "Akash RPC $AKASH_NODE is running $DIFF seconds behind."
      echo "ACTION: Make sure your system time in synchronized and/or check your Akash RPC node."
      exit 1
    elif [[ "$DIFF" -lt -30 ]]; then
      echo "Akash RPC $AKASH_NODE is running $DIFF seconds ahead."
      echo "ACTION: Make sure your system time in synchronized and/or check your Akash RPC node."
      exit 1
    else
      echo "Last block Akash RPC $AKASH_NODE seen was $DIFF seconds ago => OK"
    fi

    ##
    # Create Provider
    ##

    cat <<EOT > provider.yaml
    host: https://provider.:8443
    attributes:
    EOT

    # Figure the provider address in case the user passes `--from=<key_name>` instead of `--from=<akash1...>` address.
    PROVIDER_ADDRESS="$(/bin/akash keys show $AKASH_FROM -a)"
    if [[ -z "$PROVIDER_ADDRESS" ]]; then
      echo "PROVIDER_ADDRESS variable is empty. Something went wrong"
      exit 1
    fi

    /bin/akash query provider get $PROVIDER_ADDRESS -o json
    if [[ $? -ne 0 ]]; then
      echo "Could not find provider: $PROVIDER_ADDRES on the blockchain when querying Akash RPC node: $AKASH_NODE"
      echo "Attempting to create a new provider ..."
      /bin/akash tx provider create provider.yaml >deploy.log 2>&1
      DEPLOY=$(cat deploy.log)
    fi

    if [[ $DEPLOY == *"incorrect account sequence"* ]]; then
      echo "Provider has issue talking to the node, check NODE is synced."
      exit 1
    fi

    if [[ $DEPLOY == *"already exists"* ]]; then
      echo "Provider already exists, continue..."
    elif [[ $DEPLOY == *"Error"* ]]; then
      echo "Error creating provider : $DEPLOY"
      exit 1
    fi

    echo "Checking whether provider.yaml needs to be updated on the chain ..."
    REMOTE_PROVIDER="$(akash query provider get $PROVIDER_ADDRESS -o json | jq | sha1sum | awk '{print $1}')"
    LOCAL_PROVIDER="$(/bin/akash tx provider update provider.yaml --offline --generate-only --from $PROVIDER_ADDRESS | jq -r '.body.messages[]' | jq -r 'del(."@type")' | sha1sum | awk '{print $1}')"
    if [[ "$REMOTE_PROVIDER" != "$LOCAL_PROVIDER" ]]; then
      echo "Updating provider in the blockchain ..."
      /bin/akash tx provider update provider.yaml >deploy.log 2>&1
      DEPLOY=$(cat deploy.log)

      if [[ $DEPLOY == *"insufficient fees"* ]]; then
        echo "Insufficient fees!  Change the fee settings."
        exit 1
      fi

      if [[ $DEPLOY == *"out of gas in location"* ]]; then
        echo "Out of gas!  Change gas/fee settings."
        exit 1
      fi

      if [[ $DEPLOY == *"incorrect account sequence"* ]]; then
        echo "Provider has issue talking to the node, check NODE is synced."
        exit 1
      fi

      if [[ $DEPLOY == *"Error"* ]]; then
        echo "Error creating provider : $DEPLOY"
        exit 1
      fi
    fi

    CERT_PATH="${AKASH_HOME}/${PROVIDER_ADDRESS}.pem"
    # 0 = yes; otherwise do not (re-)generate new provider certificate, unless
    GEN_NEW_CERT=1
    LAST_CERT_STATUS="$(akash query cert list --owner $PROVIDER_ADDRESS --state valid -o json | jq -r '.certificates[-1].certificate.state')"
    # Check whether the last broadcasted certificate is valid
    if [[ "valid" != "$LAST_CERT_STATUS" ]]; then
      echo "No valid certificate found for provider: $PROVIDER_ADDRESS"
      GEN_NEW_CERT=0

      echo "It might as well be that the current certificate was expired, thus, it should be safe to delete it locally"
      # It's also a good idea to delete it as otherwise, we'd have to add `--overwrite` to `akash tx cert generate server` command later.
      if [[ -f "${CERT_PATH}" ]]; then
        rm -vf "${CERT_PATH}"
      fi
    fi

    # Check whether the local certificate matches the one on the blockchain
    if [[ -f "${CERT_PATH}" ]]; then
      LOCAL_CERT_SN="$(cat "${CERT_PATH}" | openssl x509 -serial -noout)"
      REMOTE_CERT_SN="$(akash query cert list --owner $PROVIDER_ADDRESS --state valid | jq -r '.certificates[-1].certificate.cert' | openssl base64 -A -d | openssl x509 -serial -noout)"
    else
      echo "${CERT_PATH} file is missing."
      GEN_NEW_CERT=0
    fi
    if [[ -z "$LOCAL_CERT_SN" ]]; then
      echo "LOCAL_CERT_SN variable is empty. Most likely ${CERT_PATH} file is empty or malformed."
      GEN_NEW_CERT=0
    fi
    if [[ -z "$REMOTE_CERT_SN" ]]; then
      echo "REMOTE_CERT_SN variable is empty. Most likely the cert hasn't been broadcasted to the blockchain yet."
      GEN_NEW_CERT=0
    elif [[ "$LOCAL_CERT_SN" != "$REMOTE_CERT_SN" ]]; then
      echo "Local certificate SN does not match the one on the blockchain"
      GEN_NEW_CERT=0
    fi

    if [[ $GEN_NEW_CERT ]]; then
      echo "Generating new provider certificate"
      /bin/akash tx cert generate server provider.
      echo "Publishing new provider certificate"
      /bin/akash tx cert publish server
    fi

    ##
    # Run daemon
    ##
    /bin/akash provider run --cluster-k8s
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: manifests.akash.network
  annotations:
    helm.sh/resource-policy: keep
spec:
  group: akash.network
  scope: Namespaced
  names:
    plural: manifests
    singular: manifest
    kind: Manifest
    shortNames:
      - mani
  versions:
    - name: v2beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                lease_id:
                  type: object
                  properties:
                    owner:
                      type: string
                    dseq:
                      type: string
                      format: uint64
                    gseq:
                      type: integer
                    oseq:
                      type: integer
                    provider:
                      type: string
                group:
                  type: object
                  properties:
                    name:
                      type: string
                    services:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          image:
                            type: string
                          args:
                            type: array
                            items:
                              type: string
                          env:
                            type: array
                            items:
                              type: string
                          unit:
                            type: object
                            properties:
                              cpu:
                                type: number
                                format: uint32
                              memory:
                                type: string
                                format: uint64
                              storage:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    size:
                                      type: string
                                      format: uint64
                                    name:
                                      type: string
                          count:
                            type: number
                            format: uint64
                          expose:
                            type: array
                            items:
                              type: object
                              properties:
                                port:
                                  type: integer
                                  format: uint16
                                external_port:
                                  type: integer
                                  format: uint16
                                proto:
                                  type: string
                                service:
                                  type: string
                                global:
                                  type: boolean
                                http_options:
                                  type: object
                                  properties:
                                    max_body_size:
                                      type: integer
                                    read_timeout:
                                      type: integer
                                    send_timeout:
                                      type: integer
                                    next_tries:
                                      type: integer
                                    next_timeout:
                                      type: integer
                                    next_cases:
                                      type: array
                                      items:
                                        type: string
                                hosts:
                                  type: array
                                  items:
                                    type: string
                          params:
                            type: object
                            nullable: true
                            properties:
                              storage:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    name:
                                      type: string
                                    readOnly:
                                      type: boolean
                                    mount:
                                      type: string
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: providerhosts.akash.network
  annotations:
    helm.sh/resource-policy: keep
spec:
  group: akash.network
  scope: Namespaced
  names:
    plural: providerhosts
    singular: providerhost
    kind: ProviderHost
    shortNames:
      - ph
  versions:
    - name: v2beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                service_name:
                  type: string
                external_port:
                  type: integer
                hostname:
                  type: string
                owner:
                  type: string
                provider:
                  type: string
                dseq:
                  type: integer
                gseq:
                  type: integer
                oseq:
                  type: integer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-provider-admin
  namespace: default
subjects:
  - kind: ServiceAccount
    name: release-name-provider
    namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-provider
  namespace: FAx4XS4T
  labels:
    akash.network: "true"
    app.kubernetes.io/name: provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: operator
    helm.sh/chart: provider-0.172.0
    app.kubernetes.io/version: 0.16.4-rc2
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: api
      protocol: TCP
      port: 8443
      targetPort: api
  selector:
    app: release-name-provider
    app.kubernetes.io/name: provider
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-provider
  namespace: FAx4XS4T
  labels:
    app: release-name-provider
    helm.sh/chart: provider-0.172.0
    app.kubernetes.io/name: provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 0.16.4-rc2
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: release-name-provider
      app.kubernetes.io/name: provider
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/cm-boot: 507ae039d5c5f00ef9e993947b8469d02a3162cb0ed297071ffc474a245f1e40
        checksum/cm-bidscripts: 7bb873d893b66963340eb19a7d2f581c73126a04bb27e9926170d9e9ebb76701
      labels:
        app: release-name-provider
        app.kubernetes.io/name: provider
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-provider
      securityContext: {}
      containers:
        - name: provider
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          image: ghcr.io/ovrclk/akash:0.16.4-rc2
          command:
            - /bin/bash
            - /boot/run.sh
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          env:
            - name: AKASH_DEBUG
              value: "false"
            - name: AKASH_BOOT_KEYS
              value: /boot-keys
            - name: AKASH_HOME
              value: /root/.akash
            - name: AKASH_FROM
              value: ""
            - name: AKASH_NODE
              value: http://akash.c29r3.xyz:80/rpc
            - name: AKASH_CHAIN_ID
              value: akashnet-2
            - name: AKASH_KEYRING_BACKEND
              value: test
            - name: AKASH_TRUST_NODE
              value: "true"
            - name: AKASH_BROADCAST_MODE
              value: block
            - name: AKASH_VERSION
              value: 0.16.4-rc2
            - name: AKASH_CLUSTER_WAIT_READY_DURATION
              value: 30s
            - name: AKASH_DEPLOYMENT_INGRESS_DOMAIN
              value: ingress.
            - name: DEPLOYMENT_NETWORK_POLICIES_ENABLED
              value: "false"
            - name: AKASH_YES
              value: "true"
            - name: AKASH_GAS_PRICES
              value: 0.025uakt
            - name: AKASH_GAS
              value: auto
            - name: AKASH_GAS_ADJUSTMENT
              value: "1.25"
            - name: AKASH_DEPLOYMENT_INGRESS_STATIC_HOSTS
              value: "true"
            - name: AKASH_DEPLOYMENT_BLOCKED_HOSTNAMES
              value: ""
            - name: AKASH_CLUSTER_NODE_PORT_QUANTITY
              value: "2500"
            - name: AKASH_CLUSTER_PUBLIC_HOSTNAME
              value: provider.
            - name: AKASH_BID_PRICE_STRATEGY
              value: scale
            - name: AKASH_BID_PRICE_CPU_SCALE
              value: "0.004"
            - name: AKASH_BID_PRICE_MEMORY_SCALE
              value: "0.0016"
            - name: AKASH_BID_PRICE_ENDPOINT_SCALE
              value: ""
            - name: AKASH_BID_PRICE_STORAGE_SCALE
              value: 0.00016,beta2=0.00016
            - name: AKASH_OVERCOMMIT_PCT_CPU
              value: "0"
            - name: AKASH_OVERCOMMIT_PCT_MEM
              value: "0"
            - name: AKASH_OVERCOMMIT_PCT_STORAGE
              value: "0"
            - name: AKASH_LOG_LEVEL
              value: info
            - name: AKASH_CLUSTER_K8S
              value: "true"
            - name: KUBE_CONFIG
              value: /root/.akash/.kube/config
            - name: AKASH_DEPLOYMENT_RUNTIME_CLASS
              value: none
            - name: AKASH_WITHDRAWAL_PERIOD
              value: 1h
            - name: AKASH_MINIMUM_BALANCE
              value: "10000000"
            - name: AKASH_BID_DEPOSIT
              value: 5000000uakt
          ports:
            - name: api
              containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: boot
              mountPath: /boot
              readOnly: true
            - name: bidscripts
              mountPath: /bidscripts
              readOnly: true
            - name: keys
              mountPath: /boot-keys
              readOnly: true
      volumes:
        - name: boot
          configMap:
            name: release-name-provider-boot
        - name: bidscripts
          configMap:
            name: release-name-provider-bidscripts
            defaultMode: 484
        - name: keys
          secret:
            secretName: release-name-provider-keys
