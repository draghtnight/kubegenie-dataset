apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-netpol
  namespace: default
spec:
  policyTypes:
    - Egress
    - Ingress
  podSelector:
    matchLabels:
      application: prometheus
  egress:
    - to:
        - podSelector:
            matchLabels:
              application: alerts
      ports:
        - port: 9093
          protocol: TCP
        - port: 80
          protocol: TCP
        - port: 9094
          protocol: TCP
    - to:
        - podSelector:
            matchLabels:
              application: ldap
      ports:
        - port: 389
          protocol: TCP
    - to:
        - namespaceSelector:
            matchLabels:
              name: docker-registry
      ports:
        - port: 5000
          protocol: TCP
    - to:
        - podSelector:
            matchLabels:
              application: prom
      ports:
        - port: 9090
          protocol: TCP
        - port: 80
          protocol: TCP
    - {}
  ingress:
    - {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-test
  namespace: HGr6hJyFE
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-prometheus
  namespace: HGr6hJyFE
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-prometheus-etc
type: Opaque
data:
  prometheus.yml: 
  httpd.conf: U2VydmVyUm9vdCAiL3Vzci9sb2NhbC9hcGFjaGUyIgoKTGlzdGVuIDgwCgpMb2FkTW9kdWxlIG1wbV9ldmVudF9tb2R1bGUgbW9kdWxlcy9tb2RfbXBtX2V2ZW50LnNvCkxvYWRNb2R1bGUgYXV0aG5fZmlsZV9tb2R1bGUgbW9kdWxlcy9tb2RfYXV0aG5fZmlsZS5zbwpMb2FkTW9kdWxlIGF1dGhuX2NvcmVfbW9kdWxlIG1vZHVsZXMvbW9kX2F1dGhuX2NvcmUuc28KTG9hZE1vZHVsZSBhdXRoel9ob3N0X21vZHVsZSBtb2R1bGVzL21vZF9hdXRoel9ob3N0LnNvCkxvYWRNb2R1bGUgYXV0aHpfZ3JvdXBmaWxlX21vZHVsZSBtb2R1bGVzL21vZF9hdXRoel9ncm91cGZpbGUuc28KTG9hZE1vZHVsZSBhdXRoel91c2VyX21vZHVsZSBtb2R1bGVzL21vZF9hdXRoel91c2VyLnNvCkxvYWRNb2R1bGUgYXV0aHpfY29yZV9tb2R1bGUgbW9kdWxlcy9tb2RfYXV0aHpfY29yZS5zbwpMb2FkTW9kdWxlIGFjY2Vzc19jb21wYXRfbW9kdWxlIG1vZHVsZXMvbW9kX2FjY2Vzc19jb21wYXQuc28KTG9hZE1vZHVsZSBhdXRoX2Jhc2ljX21vZHVsZSBtb2R1bGVzL21vZF9hdXRoX2Jhc2ljLnNvCkxvYWRNb2R1bGUgbGRhcF9tb2R1bGUgbW9kdWxlcy9tb2RfbGRhcC5zbwpMb2FkTW9kdWxlIGF1dGhuel9sZGFwX21vZHVsZSBtb2R1bGVzL21vZF9hdXRobnpfbGRhcC5zbwpMb2FkTW9kdWxlIHJlcXRpbWVvdXRfbW9kdWxlIG1vZHVsZXMvbW9kX3JlcXRpbWVvdXQuc28KTG9hZE1vZHVsZSBmaWx0ZXJfbW9kdWxlIG1vZHVsZXMvbW9kX2ZpbHRlci5zbwpMb2FkTW9kdWxlIHByb3h5X2h0bWxfbW9kdWxlIG1vZHVsZXMvbW9kX3Byb3h5X2h0bWwuc28KTG9hZE1vZHVsZSBsb2dfY29uZmlnX21vZHVsZSBtb2R1bGVzL21vZF9sb2dfY29uZmlnLnNvCkxvYWRNb2R1bGUgZW52X21vZHVsZSBtb2R1bGVzL21vZF9lbnYuc28KTG9hZE1vZHVsZSBoZWFkZXJzX21vZHVsZSBtb2R1bGVzL21vZF9oZWFkZXJzLnNvCkxvYWRNb2R1bGUgc2V0ZW52aWZfbW9kdWxlIG1vZHVsZXMvbW9kX3NldGVudmlmLnNvCkxvYWRNb2R1bGUgdmVyc2lvbl9tb2R1bGUgbW9kdWxlcy9tb2RfdmVyc2lvbi5zbwpMb2FkTW9kdWxlIHByb3h5X21vZHVsZSBtb2R1bGVzL21vZF9wcm94eS5zbwpMb2FkTW9kdWxlIHByb3h5X2Nvbm5lY3RfbW9kdWxlIG1vZHVsZXMvbW9kX3Byb3h5X2Nvbm5lY3Quc28KTG9hZE1vZHVsZSBwcm94eV9odHRwX21vZHVsZSBtb2R1bGVzL21vZF9wcm94eV9odHRwLnNvCkxvYWRNb2R1bGUgcHJveHlfYmFsYW5jZXJfbW9kdWxlIG1vZHVsZXMvbW9kX3Byb3h5X2JhbGFuY2VyLnNvCkxvYWRNb2R1bGUgc2xvdG1lbV9zaG1fbW9kdWxlIG1vZHVsZXMvbW9kX3Nsb3RtZW1fc2htLnNvCkxvYWRNb2R1bGUgc2xvdG1lbV9wbGFpbl9tb2R1bGUgbW9kdWxlcy9tb2Rfc2xvdG1lbV9wbGFpbi5zbwpMb2FkTW9kdWxlIHVuaXhkX21vZHVsZSBtb2R1bGVzL21vZF91bml4ZC5zbwpMb2FkTW9kdWxlIHN0YXR1c19tb2R1bGUgbW9kdWxlcy9tb2Rfc3RhdHVzLnNvCkxvYWRNb2R1bGUgYXV0b2luZGV4X21vZHVsZSBtb2R1bGVzL21vZF9hdXRvaW5kZXguc28KCjxJZk1vZHVsZSB1bml4ZF9tb2R1bGU+ClVzZXIgZGFlbW9uCkdyb3VwIGRhZW1vbgo8L0lmTW9kdWxlPgoKPERpcmVjdG9yeSAvPgogICAgQWxsb3dPdmVycmlkZSBub25lCiAgICBSZXF1aXJlIGFsbCBkZW5pZWQKPC9EaXJlY3Rvcnk+Cgo8RmlsZXMgIi5odCoiPgogICAgUmVxdWlyZSBhbGwgZGVuaWVkCjwvRmlsZXM+CgpFcnJvckxvZyAvZGV2L3N0ZGVycgoKTG9nTGV2ZWwgd2FybgoKPElmTW9kdWxlIGxvZ19jb25maWdfbW9kdWxlPgogICAgTG9nRm9ybWF0ICIlYSAlbCAldSAldCBcIiVyXCIgJT5zICViIFwiJXtSZWZlcmVyfWlcIiBcIiV7VXNlci1BZ2VudH1pXCIiIGNvbWJpbmVkCiAgICBMb2dGb3JtYXQgIiV7WC1Gb3J3YXJkZWQtRm9yfWkgJWwgJXUgJXQgXCIlclwiICU+cyAlYiBcIiV7UmVmZXJlcn1pXCIgXCIle1VzZXItQWdlbnR9aVwiIiBwcm94eQogICAgTG9nRm9ybWF0ICIlaCAlbCAldSAldCBcIiVyXCIgJT5zICViIiBjb21tb24KCiAgICA8SWZNb2R1bGUgbG9naW9fbW9kdWxlPgogICAgICBMb2dGb3JtYXQgIiVhICVsICV1ICV0IFwiJXJcIiAlPnMgJWIgXCIle1JlZmVyZXJ9aVwiIFwiJXtVc2VyLUFnZW50fWlcIiAlSSAlTyIgY29tYmluZWRpbwogICAgPC9JZk1vZHVsZT4KCiAgICBTZXRFbnZJZiBYLUZvcndhcmRlZC1Gb3IgIl4uKlwuLipcLi4qXC4uKiIgZm9yd2FyZGVkCiAgICBDdXN0b21Mb2cgL2Rldi9zdGRvdXQgY29tbW9uCiAgICBDdXN0b21Mb2cgL2Rldi9zdGRvdXQgY29tYmluZWQKICAgIEN1c3RvbUxvZyAvZGV2L3N0ZG91dCBwcm94eSBlbnY9Zm9yd2FyZGVkCjwvSWZNb2R1bGU+Cgo8RGlyZWN0b3J5ICIvdXNyL2xvY2FsL2FwYWNoZTIvY2dpLWJpbiI+CiAgICBBbGxvd092ZXJyaWRlIE5vbmUKICAgIE9wdGlvbnMgTm9uZQogICAgUmVxdWlyZSBhbGwgZ3JhbnRlZAo8L0RpcmVjdG9yeT4KCjxJZk1vZHVsZSBoZWFkZXJzX21vZHVsZT4KICAgIFJlcXVlc3RIZWFkZXIgdW5zZXQgUHJveHkgZWFybHkKPC9JZk1vZHVsZT4KCjxJZk1vZHVsZSBwcm94eV9odG1sX21vZHVsZT4KSW5jbHVkZSBjb25mL2V4dHJhL3Byb3h5LWh0bWwuY29uZgo8L0lmTW9kdWxlPgoKPFZpcnR1YWxIb3N0ICo6ODA+CiAgIyBFeHBvc2UgbWV0cmljcyB0byBhbGwgdXNlcnMsIGFzIHRoaXMgaXMgbm90IHNlbnNpdGl2ZSBpbmZvcm1hdGlvbiBhbmQKICAjIGNpcmN1bXZlbnRzIHRoZSBpbmFiaWxpdHkgb2YgUHJvbWV0aGV1cyB0byBpbnRlcnBvbGF0ZSBlbnZpcm9ubWVudCB2YXJzCiAgIyBpbiBpdHMgY29uZmlndXJhdGlvbiBmaWxlCiAgPExvY2F0aW9uIC9tZXRyaWNzPgogICAgICBQcm94eVBhc3MgaHR0cDovL2xvY2FsaG9zdDo5MDkwL21ldHJpY3MKICAgICAgUHJveHlQYXNzUmV2ZXJzZSBodHRwOi8vbG9jYWxob3N0OjkwOTAvbWV0cmljcwogICAgICBTYXRpc2Z5IEFueQogICAgICBBbGxvdyBmcm9tIGFsbAogIDwvTG9jYXRpb24+CiAgIyBFeHBvc2UgdGhlIC9mZWRlcmF0ZSBlbmRwb2ludCB0byBhbGwgdXNlcnMsIGFzIHRoaXMgaXMgYWxzbyBub3QKICAjIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbiBhbmQgY2lyY3VtdmVudHMgdGhlIGluYWJpbGl0eSBvZiBQcm9tZXRoZXVzIHRvCiAgIyBpbnRlcnBvbGF0ZSBlbnZpcm9ubWVudCB2YXJzIGluIGl0cyBjb25maWd1cmF0aW9uIGZpbGUKICA8TG9jYXRpb24gL2ZlZGVyYXRlPgogICAgICBQcm94eVBhc3MgaHR0cDovL2xvY2FsaG9zdDo5MDkwL21ldHJpY3MKICAgICAgUHJveHlQYXNzUmV2ZXJzZSBodHRwOi8vbG9jYWxob3N0OjkwOTAvbWV0cmljcwogICAgICBTYXRpc2Z5IEFueQogICAgICBBbGxvdyBmcm9tIGFsbAogIDwvTG9jYXRpb24+CiAgIyBSZXN0cmljdCBnZW5lcmFsIHVzZXIgKExEQVApIGFjY2VzcyB0byB0aGUgL2dyYXBoIGVuZHBvaW50LCBhcyBnZW5lcmFsIHRydXN0ZWQKICAjIHVzZXJzIHNob3VsZCBvbmx5IGJlIGFibGUgdG8gcXVlcnkgUHJvbWV0aGV1cyBmb3IgbWV0cmljcyBhbmQgbm90IGhhdmUgYWNjZXNzCiAgIyB0byBpbmZvcm1hdGlvbiBsaWtlIHRhcmdldHMsIGNvbmZpZ3VyYXRpb24sIGZsYWdzIG9yIGJ1aWxkIGluZm8gZm9yIFByb21ldGhldXMKICA8TG9jYXRpb24gLz4KICAgICAgUHJveHlQYXNzIGh0dHA6Ly9sb2NhbGhvc3Q6OTA5MC8KICAgICAgUHJveHlQYXNzUmV2ZXJzZSBodHRwOi8vbG9jYWxob3N0OjkwOTAvCiAgICAgIEF1dGhOYW1lICJQcm9tZXRoZXVzIgogICAgICBBdXRoVHlwZSBCYXNpYwogICAgICBBdXRoQmFzaWNQcm92aWRlciBmaWxlIGxkYXAKICAgICAgQXV0aFVzZXJGaWxlIC91c3IvbG9jYWwvYXBhY2hlMi9jb25mLy5odHBhc3N3ZAogICAgICBBdXRoTERBUEJpbmRETiBjbj1hZG1pbixkYz1jbHVzdGVyLGRjPWxvY2FsCiAgICAgIEF1dGhMREFQQmluZFBhc3N3b3JkIHBhc3N3b3JkCiAgICAgIEF1dGhMREFQVVJMICJsZGFwOi8vbGRhcC5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjM4OS9vdT1QZW9wbGUsZGM9Y2x1c3RlcixkYz1sb2NhbCIKICAgICAgUmVxdWlyZSB2YWxpZC11c2VyCiAgPC9Mb2NhdGlvbj4KICA8TG9jYXRpb24gL2dyYXBoPgogICAgICBQcm94eVBhc3MgaHR0cDovL2xvY2FsaG9zdDo5MDkwL2dyYXBoCiAgICAgIFByb3h5UGFzc1JldmVyc2UgaHR0cDovL2xvY2FsaG9zdDo5MDkwL2dyYXBoCiAgICAgIEF1dGhOYW1lICJQcm9tZXRoZXVzIgogICAgICBBdXRoVHlwZSBCYXNpYwogICAgICBBdXRoQmFzaWNQcm92aWRlciBmaWxlIGxkYXAKICAgICAgQXV0aFVzZXJGaWxlIC91c3IvbG9jYWwvYXBhY2hlMi9jb25mLy5odHBhc3N3ZAogICAgICBBdXRoTERBUEJpbmRETiBjbj1hZG1pbixkYz1jbHVzdGVyLGRjPWxvY2FsCiAgICAgIEF1dGhMREFQQmluZFBhc3N3b3JkIHBhc3N3b3JkCiAgICAgIEF1dGhMREFQVVJMICJsZGFwOi8vbGRhcC5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjM4OS9vdT1QZW9wbGUsZGM9Y2x1c3RlcixkYz1sb2NhbCIKICAgICAgUmVxdWlyZSB2YWxpZC11c2VyCiAgPC9Mb2NhdGlvbj4KICAjIFJlc3RyaWN0IGFjY2VzcyB0byB0aGUgL2NvbmZpZyAoZGFzaGJvYXJkKSBhbmQgL2FwaS92MS9zdGF0dXMvY29uZmlnIChodHRwKSBlbmRwb2ludHMKICAjIHRvIHRoZSBhZG1pbiB1c2VyCiAgPExvY2F0aW9uIC9jb25maWc+CiAgICAgIFByb3h5UGFzcyBodHRwOi8vbG9jYWxob3N0OjkwOTAvY29uZmlnCiAgICAgIFByb3h5UGFzc1JldmVyc2UgaHR0cDovL2xvY2FsaG9zdDo5MDkwL2NvbmZpZwogICAgICBBdXRoTmFtZSAiUHJvbWV0aGV1cyIKICAgICAgQXV0aFR5cGUgQmFzaWMKICAgICAgQXV0aEJhc2ljUHJvdmlkZXIgZmlsZQogICAgICBBdXRoVXNlckZpbGUgL3Vzci9sb2NhbC9hcGFjaGUyL2NvbmYvLmh0cGFzc3dkCiAgICAgIFJlcXVpcmUgdmFsaWQtdXNlcgogIDwvTG9jYXRpb24+CiAgPExvY2F0aW9uIC9hcGkvdjEvc3RhdHVzL2NvbmZpZz4KICAgICAgUHJveHlQYXNzIGh0dHA6Ly9sb2NhbGhvc3Q6OTA5MC9hcGkvdjEvc3RhdHVzL2NvbmZpZwogICAgICBQcm94eVBhc3NSZXZlcnNlIGh0dHA6Ly9sb2NhbGhvc3Q6OTA5MC9hcGkvdjEvc3RhdHVzL2NvbmZpZwogICAgICBBdXRoTmFtZSAiUHJvbWV0aGV1cyIKICAgICAgQXV0aFR5cGUgQmFzaWMKICAgICAgQXV0aEJhc2ljUHJvdmlkZXIgZmlsZQogICAgICBBdXRoVXNlckZpbGUgL3Vzci9sb2NhbC9hcGFjaGUyL2NvbmYvLmh0cGFzc3dkCiAgICAgIFJlcXVpcmUgdmFsaWQtdXNlcgogIDwvTG9jYXRpb24+CiAgIyBSZXN0cmljdCBhY2Nlc3MgdG8gdGhlIC9mbGFncyAoZGFzaGJvYXJkKSBhbmQgL2FwaS92MS9zdGF0dXMvZmxhZ3MgKGh0dHApIGVuZHBvaW50cwogICMgdG8gdGhlIGFkbWluIHVzZXIKICA8TG9jYXRpb24gL2ZsYWdzPgogICAgICBQcm94eVBhc3MgaHR0cDovL2xvY2FsaG9zdDo5MDkwL2ZsYWdzCiAgICAgIFByb3h5UGFzc1JldmVyc2UgaHR0cDovL2xvY2FsaG9zdDo5MDkwL2ZsYWdzCiAgICAgIEF1dGhOYW1lICJQcm9tZXRoZXVzIgogICAgICBBdXRoVHlwZSBCYXNpYwogICAgICBBdXRoQmFzaWNQcm92aWRlciBmaWxlCiAgICAgIEF1dGhVc2VyRmlsZSAvdXNyL2xvY2FsL2FwYWNoZTIvY29uZi8uaHRwYXNzd2QKICAgICAgUmVxdWlyZSB2YWxpZC11c2VyCiAgPC9Mb2NhdGlvbj4KICA8TG9jYXRpb24gL2FwaS92MS9zdGF0dXMvZmxhZ3M+CiAgICAgIFByb3h5UGFzcyBodHRwOi8vbG9jYWxob3N0OjkwOTAvYXBpL3YxL3N0YXR1cy9mbGFncwogICAgICBQcm94eVBhc3NSZXZlcnNlIGh0dHA6Ly9sb2NhbGhvc3Q6OTA5MC9hcGkvdjEvc3RhdHVzL2ZsYWdzCiAgICAgIEF1dGhOYW1lICJQcm9tZXRoZXVzIgogICAgICBBdXRoVHlwZSBCYXNpYwogICAgICBBdXRoQmFzaWNQcm92aWRlciBmaWxlCiAgICAgIEF1dGhVc2VyRmlsZSAvdXNyL2xvY2FsL2FwYWNoZTIvY29uZi8uaHRwYXNzd2QKICAgICAgUmVxdWlyZSB2YWxpZC11c2VyCiAgPC9Mb2NhdGlvbj4KICAjIFJlc3RyaWN0IGFjY2VzcyB0byB0aGUgL3N0YXR1cyAoZGFzaGJvYXJkKSBlbmRwb2ludCB0byB0aGUgYWRtaW4gdXNlcgogIDxMb2NhdGlvbiAvc3RhdHVzPgogICAgICBQcm94eVBhc3MgaHR0cDovL2xvY2FsaG9zdDo5MDkwL3N0YXR1cwogICAgICBQcm94eVBhc3NSZXZlcnNlIGh0dHA6Ly9sb2NhbGhvc3Q6OTA5MC9zdGF0dXMKICAgICAgQXV0aE5hbWUgIlByb21ldGhldXMiCiAgICAgIEF1dGhUeXBlIEJhc2ljCiAgICAgIEF1dGhCYXNpY1Byb3ZpZGVyIGZpbGUKICAgICAgQXV0aFVzZXJGaWxlIC91c3IvbG9jYWwvYXBhY2hlMi9jb25mLy5odHBhc3N3ZAogICAgICBSZXF1aXJlIHZhbGlkLXVzZXIKICA8L0xvY2F0aW9uPgogICMgUmVzdHJpY3QgYWNjZXNzIHRvIHRoZSAvcnVsZXMgKGRhc2hib2FyZCkgZW5kcG9pbnQgdG8gdGhlIGFkbWluIHVzZXIKICA8TG9jYXRpb24gL3J1bGVzPgogICAgICBQcm94eVBhc3MgaHR0cDovL2xvY2FsaG9zdDo5MDkwL3J1bGVzCiAgICAgIFByb3h5UGFzc1JldmVyc2UgaHR0cDovL2xvY2FsaG9zdDo5MDkwL3J1bGVzCiAgICAgIEF1dGhOYW1lICJQcm9tZXRoZXVzIgogICAgICBBdXRoVHlwZSBCYXNpYwogICAgICBBdXRoQmFzaWNQcm92aWRlciBmaWxlCiAgICAgIEF1dGhVc2VyRmlsZSAvdXNyL2xvY2FsL2FwYWNoZTIvY29uZi8uaHRwYXNzd2QKICAgICAgUmVxdWlyZSB2YWxpZC11c2VyCiAgPC9Mb2NhdGlvbj4KICAjIFJlc3RyaWN0IGFjY2VzcyB0byB0aGUgL3RhcmdldHMgKGRhc2hib2FyZCkgYW5kIC9hcGkvdjEvdGFyZ2V0cyAoaHR0cCkgZW5kcG9pbnRzCiAgIyB0byB0aGUgYWRtaW4gdXNlcgogIDxMb2NhdGlvbiAvdGFyZ2V0cz4KICAgICAgUHJveHlQYXNzIGh0dHA6Ly9sb2NhbGhvc3Q6OTA5MC90YXJnZXRzCiAgICAgIFByb3h5UGFzc1JldmVyc2UgaHR0cDovL2xvY2FsaG9zdDo5MDkwL3RhcmdldHMKICAgICAgQXV0aE5hbWUgIlByb21ldGhldXMiCiAgICAgIEF1dGhUeXBlIEJhc2ljCiAgICAgIEF1dGhCYXNpY1Byb3ZpZGVyIGZpbGUKICAgICAgQXV0aFVzZXJGaWxlIC91c3IvbG9jYWwvYXBhY2hlMi9jb25mLy5odHBhc3N3ZAogICAgICBSZXF1aXJlIHZhbGlkLXVzZXIKICA8L0xvY2F0aW9uPgogIDxMb2NhdGlvbiAvYXBpL3YxL3RhcmdldHM+CiAgICAgIFByb3h5UGFzcyBodHRwOi8vbG9jYWxob3N0OjkwOTAvYXBpL3YxL3RhcmdldHMKICAgICAgUHJveHlQYXNzUmV2ZXJzZSBodHRwOi8vbG9jYWxob3N0OjkwOTAvYXBpL3YxL3RhcmdldHMKICAgICAgQXV0aE5hbWUgIlByb21ldGhldXMiCiAgICAgIEF1dGhUeXBlIEJhc2ljCiAgICAgIEF1dGhCYXNpY1Byb3ZpZGVyIGZpbGUKICAgICAgQXV0aFVzZXJGaWxlIC91c3IvbG9jYWwvYXBhY2hlMi9jb25mLy5odHBhc3N3ZAogICAgICBSZXF1aXJlIHZhbGlkLXVzZXIKICA8L0xvY2F0aW9uPgogICMgUmVzdHJpY3QgYWNjZXNzIHRvIHRoZSAvYXBpL3YxL2FkbWluL3RzZGIvIGVuZHBvaW50cyAoaHR0cCkgdG8gdGhlIGFkbWluIHVzZXIuCiAgIyBUaGVzZSBlbmRwb2ludHMgYXJlIGRpc2FibGVkIGJ5IGRlZmF1bHQsIGJ1dCBhcmUgaW5jbHVkZWQgaGVyZSB0byBlbnN1cmUgb25seQogICMgYW4gYWRtaW4gdXNlciBoYXMgYWNjZXNzIHRvIHRoZXNlIGVuZHBvaW50cyB3aGVuIGVuYWJsZWQKICA8TG9jYXRpb24gL2FwaS92MS9hZG1pbi90c2RiLz4KICAgICAgUHJveHlQYXNzIGh0dHA6Ly9sb2NhbGhvc3Q6OTA5MC9hcGkvdjEvYWRtaW4vdHNkYi8KICAgICAgUHJveHlQYXNzUmV2ZXJzZSBodHRwOi8vbG9jYWxob3N0OjkwOTAvYXBpL3YxL2FkbWluL3RzZGIvCiAgICAgIEF1dGhOYW1lICJQcm9tZXRoZXVzIgogICAgICBBdXRoVHlwZSBCYXNpYwogICAgICBBdXRoQmFzaWNQcm92aWRlciBmaWxlCiAgICAgIEF1dGhVc2VyRmlsZSAvdXNyL2xvY2FsL2FwYWNoZTIvY29uZi8uaHRwYXNzd2QKICAgICAgUmVxdWlyZSB2YWxpZC11c2VyCiAgPC9Mb2NhdGlvbj4KPC9WaXJ0dWFsSG9zdD4=
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-admin-user
type: Opaque
data:
  PROMETHEUS_ADMIN_USERNAME: YWRtaW4=
  PROMETHEUS_ADMIN_PASSWORD: Y2hhbmdlbWU=
  PROMETHEUS_FEDERATE_USERNAME: ZmVkZXJhdGU=
  PROMETHEUS_FEDERATE_PASSWORD: Y2hhbmdlbWU=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-prometheus-bin
data:
  apache.sh: |
    #!/bin/bash



    set -ev

    COMMAND="${@:-start}"

    function start () {

      if [ -f /etc/apache2/envvars ]; then
         # Loading Apache2 ENV variables
         source /etc/httpd/apache2/envvars
      fi
      # Apache gets grumpy about PID files pre-existing
      rm -f /etc/httpd/logs/httpd.pid

      if [ -f /usr/local/apache2/conf/.htpasswd ]; then
        htpasswd -b /usr/local/apache2/conf/.htpasswd "$PROMETHEUS_ADMIN_USERNAME" "$PROMETHEUS_ADMIN_PASSWORD"
      else
        htpasswd -cb /usr/local/apache2/conf/.htpasswd "$PROMETHEUS_ADMIN_USERNAME" "$PROMETHEUS_ADMIN_PASSWORD"
      fi

      if [ -n "$PROMETHEUS_FEDERATE_USERNAME" ]; then
        htpasswd -b /usr/local/apache2/conf/.htpasswd "$PROMETHEUS_FEDERATE_USERNAME" "$PROMETHEUS_FEDERATE_PASSWORD"
      fi

      #Launch Apache on Foreground
      exec httpd -DFOREGROUND
    }

    function stop () {
      apachectl -k graceful-stop
    }

    $COMMAND
  prometheus.sh: "#!/bin/sh\n\n\n\nset -ex\nCOMMAND=\"${@:-start}\"\n\nfunction start () {\n\n  exec /bin/prometheus --config.file=/etc/config/prometheus.yml  --log.level=info  --query.max-concurrency=20  --query.timeout=2m  --storage.tsdb.path=/var/lib/prometheus/data  --storage.tsdb.retention.time=7d \n}\n\nfunction stop () {\n  kill -TERM 1\n}\n\n$COMMAND\n"
  helm-tests.sh: |
    #!/bin/bash



    set -ex

    function endpoints_up () {
      endpoints_result=$(curl ${CACERT_OPTION} -K- <<< "--user ${PROMETHEUS_ADMIN_USERNAME}:${PROMETHEUS_ADMIN_PASSWORD}" \
        "${PROMETHEUS_ENDPOINT}/api/v1/query?query=up" \
        | python -c "import sys, json; print(json.load(sys.stdin)['status'])")
      if [ "$endpoints_result" = "success" ];
      then
        echo "PASS: Endpoints successfully queried!"
      else
        echo "FAIL: Endpoints not queried!";
        exit 1;
      fi
    }

    function get_targets () {
      targets_result=$(curl ${CACERT_OPTION} -K- <<< "--user ${PROMETHEUS_ADMIN_USERNAME}:${PROMETHEUS_ADMIN_PASSWORD}" \
        "${PROMETHEUS_ENDPOINT}/api/v1/targets" \
        | python -c "import sys, json; print(json.load(sys.stdin)['status'])")
      if [ "$targets_result" = "success" ];
      then
        echo "PASS: Targets successfully queried!"
      else
        echo "FAIL: Endpoints not queried!";
        exit 1;
      fi
    }

    function get_alertmanagers () {
      alertmanager=$(curl ${CACERT_OPTION} -K- <<< "--user ${PROMETHEUS_ADMIN_USERNAME}:${PROMETHEUS_ADMIN_PASSWORD}" \
        "${PROMETHEUS_ENDPOINT}/api/v1/alertmanagers" \
        |  python -c "import sys, json; print(json.load(sys.stdin)['status'])")
      if [ "$alertmanager" = "success" ];
      then
        echo "PASS: Alertmanager successfully queried!"
      else
        echo "FAIL: Alertmanager not queried!";
        exit 1;
      fi
    }

    endpoints_up
    get_targets
    get_alertmanagers
  image-repo-sync.sh: |
    #!/bin/sh
    set -ex

    IFS=','; for IMAGE in ${IMAGE_SYNC_LIST}; do
      docker pull ${IMAGE}
      docker tag ${IMAGE} ${LOCAL_REPO}/${IMAGE}
      docker push ${LOCAL_REPO}/${IMAGE}
    done
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-prometheus
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-prometheus
subjects:
  - kind: ServiceAccount
    name: release-name-prometheus
    namespace: default
roleRef:
  kind: ClusterRole
  name: release-name-prometheus
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-release-name-test
  namespace: HGr6hJyFE
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-release-name-test
  namespace: HGr6hJyFE
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-release-name-test
subjects:
  - kind: ServiceAccount
    name: release-name-test
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  ports:
    - name: http
      port: 80
    - name: https
      port: 443
  selector:
    app: ingress-api
---
apiVersion: v1
kind: Service
metadata:
  name: prom-metrics
  labels:
    release_group: release-name
    application: prometheus
    component: metrics
  annotations:
    prometheus.io/scrape: "true"
spec:
  ports:
    - name: http
      port: 80
      targetPort: 80
  selector:
    release_group: release-name
    application: prometheus
    component: api
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-prometheus
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
  labels:
    release_group: release-name
    application: prometheus
    component: api
spec:
  serviceName: prom-metrics
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      release_group: release-name
      application: prometheus
      component: api
  template:
    metadata:
      labels:
        release_group: release-name
        application: prometheus
        component: api
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
        configmap-bin-hash: 22bf4e4dda9d14edaca5c703cd2ea67fbd9aa6269029a2b75806334f1b5ae59f
        configmap-etc-hash: 5b06e94655221ae709ee4308072077c61fec1f7092821d7c281b2792c9e734bd
    spec:
      securityContext:
        runAsUser: 65534
      serviceAccountName: release-name-prometheus
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: release_group
                      operator: In
                      values:
                        - release-name
                    - key: application
                      operator: In
                      values:
                        - prometheus
                    - key: component
                      operator: In
                      values:
                        - api
                topologyKey: kubernetes.io/hostname
              weight: 10
      nodeSelector:
        openstack-control-plane: enabled
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: ""
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
        - name: prometheus-perms
          image: docker.io/prom/prometheus:v2.25.0
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: false
            runAsUser: 0
          command:
            - chown
            - -R
            - 'nobody:'
            - /var/lib/prometheus/data
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: storage
              mountPath: /var/lib/prometheus/data
      containers:
        - name: apache-proxy
          image: docker.io/httpd:2.4
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 11117
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
          command:
            - /tmp/apache.sh
            - start
          ports:
            - name: http
              containerPort: 80
          env:
            - name: PROMETHEUS_PORT
              value: "9090"
            - name: PROMETHEUS_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: release-name-admin-user
                  key: PROMETHEUS_ADMIN_USERNAME
            - name: PROMETHEUS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-admin-user
                  key: PROMETHEUS_ADMIN_PASSWORD
            - name: PROMETHEUS_FEDERATE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: release-name-admin-user
                  key: PROMETHEUS_FEDERATE_USERNAME
            - name: PROMETHEUS_FEDERATE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-admin-user
                  key: PROMETHEUS_FEDERATE_PASSWORD
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: prometheus-bin
              mountPath: /tmp/apache.sh
              subPath: apache.sh
              readOnly: true
            - name: prometheus-etc
              mountPath: /usr/local/apache2/conf/httpd.conf
              subPath: httpd.conf
              readOnly: true
        - name: prometheus
          image: docker.io/prom/prometheus:v2.25.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          command:
            - /tmp/prometheus.sh
            - start
          lifecycle:
            preStop:
              exec:
                command:
                  - /tmp/prometheus.sh
                  - stop
          ports:
            - name: prom-metrics
              containerPort: 9090
          readinessProbe:
            httpGet:
              httpHeaders:
                - name: Authorization
                  value: Basic YWRtaW46Y2hhbmdlbWU=
              path: /status
              port: 80
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 30
          env: null
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: etcprometheus
              mountPath: /etc/config
            - name: rulesprometheus
              mountPath: /etc/config/rules
            - name: prometheus-etc
              mountPath: /etc/config/prometheus.yml
              subPath: prometheus.yml
              readOnly: true
            - name: prometheus-bin
              mountPath: /tmp/prometheus.sh
              subPath: prometheus.sh
              readOnly: true
            - name: storage
              mountPath: /var/lib/prometheus/data
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: etcprometheus
          emptyDir: {}
        - name: rulesprometheus
          emptyDir: {}
        - name: prometheus-etc
          secret:
            secretName: release-name-prometheus-etc
            defaultMode: 292
        - name: prometheus-bin
          configMap:
            name: release-name-prometheus-bin
            defaultMode: 365
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
        storageClassName: general
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: prometheus
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/session-cookie-expires: "600"
    nginx.ingress.kubernetes.io/session-cookie-hash: sha1
    nginx.ingress.kubernetes.io/session-cookie-max-age: "600"
    nginx.ingress.kubernetes.io/session-cookie-name: kube-ingress-session-prometheus
spec:
  rules:
    - host: prometheus
      http:
        paths:
          - path: /
            backend:
              serviceName: prom-metrics
              servicePort: https
    - host: prometheus.default
      http:
        paths:
          - path: /
            backend:
              serviceName: prom-metrics
              servicePort: https
    - host: prometheus.default.svc.cluster.local
      http:
        paths:
          - path: /
            backend:
              serviceName: prom-metrics
              servicePort: https
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-test
  labels:
    release_group: release-name
    application: prometheus
    component: test
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
    helm.sh/hook: test-success
spec:
  securityContext:
    runAsUser: 65534
  serviceAccountName: release-name-test
  nodeSelector:
    openstack-control-plane: enabled
  restartPolicy: Never
  initContainers:
    - name: init
      image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
      imagePullPolicy: IfNotPresent
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsUser: 65534
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INTERFACE_NAME
          value: eth0
        - name: PATH
          value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
        - name: DEPENDENCY_SERVICE
          value: default:prom-metrics
        - name: DEPENDENCY_DAEMONSET
          value: ""
        - name: DEPENDENCY_CONTAINER
          value: ""
        - name: DEPENDENCY_POD_JSON
          value: ""
        - name: DEPENDENCY_CUSTOM_RESOURCE
          value: ""
      command:
        - kubernetes-entrypoint
      volumeMounts: []
  containers:
    - name: prometheus-helm-tests
      image: docker.io/openstackhelm/heat:newton-ubuntu_xenial
      imagePullPolicy: IfNotPresent
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      command:
        - /tmp/helm-tests.sh
      env:
        - name: PROMETHEUS_ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: release-name-admin-user
              key: PROMETHEUS_ADMIN_USERNAME
        - name: PROMETHEUS_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-admin-user
              key: PROMETHEUS_ADMIN_PASSWORD
        - name: PROMETHEUS_ENDPOINT
          value: http://prom-metrics.default.svc.cluster.local
      volumeMounts:
        - name: pod-tmp
          mountPath: /tmp
        - name: prometheus-bin
          mountPath: /tmp/helm-tests.sh
          subPath: helm-tests.sh
          readOnly: true
  volumes:
    - name: pod-tmp
      emptyDir: {}
    - name: prometheus-bin
      configMap:
        name: release-name-prometheus-bin
        defaultMode: 365
