apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: placement-api
spec:
  minAvailable: 0
  selector:
    matchLabels:
      release_group: release-name
      application: placement
      component: api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: placement-api
  namespace: Mcm9vuIUiboxHTa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: placement-db-init
  namespace: Mcm9vuIUiboxHTa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: placement-db-sync
  namespace: Mcm9vuIUiboxHTa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: placement-ks-endpoints
  namespace: Mcm9vuIUiboxHTa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: placement-ks-service
  namespace: Mcm9vuIUiboxHTa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: placement-ks-user
  namespace: Mcm9vuIUiboxHTa
---
apiVersion: v1
kind: Secret
metadata:
  name: placement-etc
type: Opaque
data:
  policy.yaml: YWRtaW5fYXBpOiByb2xlOmFkbWluCmFkbWluX29yX293bmVyOiBydWxlOmNvbnRleHRfaXNfYWRtaW4gb3IgcHJvamVjdF9pZDolKHByb2plY3RfaWQpcwpjb250ZXh0X2lzX2FkbWluOiByb2xlOmFkbWluCmRlZmF1bHQ6IHJ1bGU6YWRtaW5fb3Jfb3duZXIKcGxhY2VtZW50OmFsbG9jYXRpb25fY2FuZGlkYXRlczpsaXN0OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6YWxsb2NhdGlvbnM6ZGVsZXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6YWxsb2NhdGlvbnM6bGlzdDogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OmFsbG9jYXRpb25zOm1hbmFnZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OmFsbG9jYXRpb25zOnVwZGF0ZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc2hhcGVyOnJlc2hhcGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9jbGFzc2VzOmNyZWF0ZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc291cmNlX2NsYXNzZXM6ZGVsZXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfY2xhc3NlczpsaXN0OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfY2xhc3NlczpzaG93OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfY2xhc3Nlczp1cGRhdGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6YWdncmVnYXRlczpsaXN0OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfcHJvdmlkZXJzOmFnZ3JlZ2F0ZXM6dXBkYXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfcHJvdmlkZXJzOmFsbG9jYXRpb25zOmxpc3Q6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6Y3JlYXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfcHJvdmlkZXJzOmRlbGV0ZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc291cmNlX3Byb3ZpZGVyczppbnZlbnRvcmllczpjcmVhdGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6aW52ZW50b3JpZXM6ZGVsZXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfcHJvdmlkZXJzOmludmVudG9yaWVzOmxpc3Q6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6aW52ZW50b3JpZXM6c2hvdzogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc291cmNlX3Byb3ZpZGVyczppbnZlbnRvcmllczp1cGRhdGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6bGlzdDogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc291cmNlX3Byb3ZpZGVyczpzaG93OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfcHJvdmlkZXJzOnRyYWl0czpkZWxldGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6dHJhaXRzOmxpc3Q6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6dHJhaXRzOnVwZGF0ZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc291cmNlX3Byb3ZpZGVyczp1cGRhdGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6dXNhZ2VzOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6dHJhaXRzOmRlbGV0ZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnRyYWl0czpsaXN0OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6dHJhaXRzOnNob3c6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDp0cmFpdHM6dXBkYXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6dXNhZ2VzOiBydWxlOmFkbWluX2FwaQ==
  placement.conf: W0RFRkFVTFRdCmRlYnVnID0gZmFsc2UKbG9nX2NvbmZpZ19hcHBlbmQgPSAvZXRjL3BsYWNlbWVudC9sb2dnaW5nLmNvbmYKdXNlX3N5c2xvZyA9IGZhbHNlCltrZXlzdG9uZV9hdXRodG9rZW5dCmF1dGhfdHlwZSA9IHBhc3N3b3JkCmF1dGhfdXJpID0gaHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjMKYXV0aF91cmwgPSBodHRwOi8va2V5c3RvbmUtYXBpLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6NTAwMC92MwphdXRoX3ZlcnNpb24gPSB2MwptZW1jYWNoZV9zZWNyZXRfa2V5ID0gV3J6UzUwNm5scTVIRU9FQmc5RnR3dE5uaHREY2ZrQjVhYkE0cld2OThxQ1AxTkp6VGpHZmx4RFdTTVd2Y0JZSwptZW1jYWNoZV9zZWN1cml0eV9zdHJhdGVneSA9IEVOQ1JZUFQKbWVtY2FjaGVkX3NlcnZlcnMgPSBtZW1jYWNoZWQuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDoxMTIxMQpvc19yZWdpb25fbmFtZSA9IFJlZ2lvbk9uZQpwYXNzd29yZCA9IHBhc3N3b3JkCnByb2plY3RfZG9tYWluX25hbWUgPSBzZXJ2aWNlCnByb2plY3RfbmFtZSA9IHNlcnZpY2UKdXNlcl9kb21haW5fbmFtZSA9IHNlcnZpY2UKdXNlcm5hbWUgPSBwbGFjZW1lbnQKW3BsYWNlbWVudF9kYXRhYmFzZV0KY29ubmVjdGlvbiA9IG15c3FsK3B5bXlzcWw6Ly9wbGFjZW1lbnQ6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvcGxhY2VtZW50Cg==
  logging.conf: W2Zvcm1hdHRlcl9jb250ZXh0XQpjbGFzcyA9IG9zbG9fbG9nLmZvcm1hdHRlcnMuQ29udGV4dEZvcm1hdHRlcgpkYXRlZm10ID0gJVktJW0tJWQgJUg6JU06JVMKW2Zvcm1hdHRlcl9kZWZhdWx0XQpkYXRlZm10ID0gJVktJW0tJWQgJUg6JU06JVMKZm9ybWF0ID0gJShtZXNzYWdlKXMKW2Zvcm1hdHRlcnNdCmtleXMgPSBjb250ZXh0LGRlZmF1bHQKW2hhbmRsZXJfbnVsbF0KYXJncyA9ICgpCmNsYXNzID0gbG9nZ2luZy5OdWxsSGFuZGxlcgpmb3JtYXR0ZXIgPSBkZWZhdWx0CltoYW5kbGVyX3N0ZGVycl0KYXJncyA9IChzeXMuc3RkZXJyLCkKY2xhc3MgPSBTdHJlYW1IYW5kbGVyCmZvcm1hdHRlciA9IGNvbnRleHQKW2hhbmRsZXJfc3Rkb3V0XQphcmdzID0gKHN5cy5zdGRvdXQsKQpjbGFzcyA9IFN0cmVhbUhhbmRsZXIKZm9ybWF0dGVyID0gY29udGV4dApbaGFuZGxlcnNdCmtleXMgPSBzdGRvdXQsc3RkZXJyLG51bGwKW2xvZ2dlcl9hbXFwXQpoYW5kbGVycyA9IHN0ZGVycgpsZXZlbCA9IFdBUk5JTkcKcXVhbG5hbWUgPSBhbXFwCltsb2dnZXJfYW1xcGxpYl0KaGFuZGxlcnMgPSBzdGRlcnIKbGV2ZWwgPSBXQVJOSU5HCnF1YWxuYW1lID0gYW1xcGxpYgpbbG9nZ2VyX2JvdG9dCmhhbmRsZXJzID0gc3RkZXJyCmxldmVsID0gV0FSTklORwpxdWFsbmFtZSA9IGJvdG8KW2xvZ2dlcl9ldmVudGxldHdzZ2ldCmhhbmRsZXJzID0gc3RkZXJyCmxldmVsID0gV0FSTklORwpxdWFsbmFtZSA9IGV2ZW50bGV0LndzZ2kuc2VydmVyCltsb2dnZXJfcGxhY2VtZW50XQpoYW5kbGVycyA9IHN0ZG91dApsZXZlbCA9IElORk8KcXVhbG5hbWUgPSBwbGFjZW1lbnQKW2xvZ2dlcl9yb290XQpoYW5kbGVycyA9IG51bGwKbGV2ZWwgPSBXQVJOSU5HCltsb2dnZXJfc3FsYWxjaGVteV0KaGFuZGxlcnMgPSBzdGRlcnIKbGV2ZWwgPSBXQVJOSU5HCnF1YWxuYW1lID0gc3FsYWxjaGVteQpbbG9nZ2Vyc10Ka2V5cyA9IHJvb3QscGxhY2VtZW50Cg==
  wsgi-placement.conf: TGlzdGVuIDAuMC4wLjA6ODc3OApMb2dGb3JtYXQgIiVoICVsICV1ICV0IFwiJXJcIiAlPnMgJWIgXCIle1JlZmVyZXJ9aVwiIFwiJXtVc2VyLUFnZW50fWlcIiIgY29tYmluZWQKTG9nRm9ybWF0ICIle1gtRm9yd2FyZGVkLUZvcn1pICVsICV1ICV0IFwiJXJcIiAlPnMgJWIgXCIle1JlZmVyZXJ9aVwiIFwiJXtVc2VyLUFnZW50fWlcIiIgcHJveHkKU2V0RW52SWYgWC1Gb3J3YXJkZWQtRm9yICJeLipcLi4qXC4uKlwuLioiIGZvcndhcmRlZApDdXN0b21Mb2cgL2Rldi9zdGRvdXQgY29tYmluZWQgZW52PSFmb3J3YXJkZWQKQ3VzdG9tTG9nIC9kZXYvc3Rkb3V0IHByb3h5IGVudj1mb3J3YXJkZWQKPFZpcnR1YWxIb3N0ICo6ODc3OD4KICAgIFdTR0lEYWVtb25Qcm9jZXNzIHBsYWNlbWVudC1hcGkgcHJvY2Vzc2VzPTQgdGhyZWFkcz0xIHVzZXI9cGxhY2VtZW50IGdyb3VwPXBsYWNlbWVudCBkaXNwbGF5LW5hbWU9JXtHUk9VUH0KICAgIFdTR0lQcm9jZXNzR3JvdXAgcGxhY2VtZW50LWFwaQogICAgV1NHSVNjcmlwdEFsaWFzIC8gL3Zhci93d3cvY2dpLWJpbi9wbGFjZW1lbnQvcGxhY2VtZW50LWFwaQogICAgV1NHSUFwcGxpY2F0aW9uR3JvdXAgJXtHTE9CQUx9CiAgICBXU0dJUGFzc0F1dGhvcml6YXRpb24gT24KICAgIDxJZlZlcnNpb24gPj0gMi40PgogICAgICBFcnJvckxvZ0Zvcm1hdCAiJXtjdX10ICVNIgogICAgPC9JZlZlcnNpb24+CiAgICBFcnJvckxvZyAvZGV2L3N0ZG91dAogICAgU2V0RW52SWYgWC1Gb3J3YXJkZWQtRm9yICJeLipcLi4qXC4uKlwuLioiIGZvcndhcmRlZAogICAgQ3VzdG9tTG9nIC9kZXYvc3Rkb3V0IGNvbWJpbmVkIGVudj0hZm9yd2FyZGVkCiAgICBDdXN0b21Mb2cgL2Rldi9zdGRvdXQgcHJveHkgZW52PWZvcndhcmRlZAo8L1ZpcnR1YWxIb3N0PgpBbGlhcyAvcGxhY2VtZW50IC92YXIvd3d3L2NnaS1iaW4vcGxhY2VtZW50L3BsYWNlbWVudC1hcGkKPExvY2F0aW9uIC9wbGFjZW1lbnQ+CiAgICBTZXRIYW5kbGVyIHdzZ2ktc2NyaXB0CiAgICBPcHRpb25zICtFeGVjQ0dJCiAgICBXU0dJUHJvY2Vzc0dyb3VwIHBsYWNlbWVudC1hcGkKICAgIFdTR0lBcHBsaWNhdGlvbkdyb3VwICV7R0xPQkFMfQogICAgV1NHSVBhc3NBdXRob3JpemF0aW9uIE9uCjwvTG9jYXRpb24+
---
apiVersion: v1
kind: Secret
metadata:
  name: placement-db-admin
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvcGxhY2VtZW50
---
apiVersion: v1
kind: Secret
metadata:
  name: placement-db-user
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL3BsYWNlbWVudDpwYXNzd29yZEBtYXJpYWRiLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6MzMwNi9wbGFjZW1lbnQ=
---
apiVersion: v1
kind: Secret
metadata:
  name: placement-keystone-admin
type: Opaque
data:
  OS_AUTH_URL: aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=
  OS_REGION_NAME: UmVnaW9uT25l
  OS_INTERFACE: aW50ZXJuYWw=
  OS_PROJECT_DOMAIN_NAME: ZGVmYXVsdA==
  OS_PROJECT_NAME: YWRtaW4=
  OS_USER_DOMAIN_NAME: ZGVmYXVsdA==
  OS_USERNAME: YWRtaW4=
  OS_PASSWORD: cGFzc3dvcmQ=
  OS_DEFAULT_DOMAIN: ZGVmYXVsdA==
---
apiVersion: v1
kind: Secret
metadata:
  name: placement-keystone-user
type: Opaque
data:
  OS_AUTH_URL: aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=
  OS_REGION_NAME: UmVnaW9uT25l
  OS_INTERFACE: aW50ZXJuYWw=
  OS_PROJECT_DOMAIN_NAME: c2VydmljZQ==
  OS_PROJECT_NAME: c2VydmljZQ==
  OS_USER_DOMAIN_NAME: c2VydmljZQ==
  OS_USERNAME: cGxhY2VtZW50
  OS_PASSWORD: cGFzc3dvcmQ=
  OS_DEFAULT_DOMAIN: ZGVmYXVsdA==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: placement-bin
data:
  placement-api.sh: |
    #!/bin/bash



    set -ex
    COMMAND="${@:-start}"

    function start () {

      cp -a $(type -p placement-api) /var/www/cgi-bin/placement/

      if [ -f /etc/apache2/envvars ]; then
        # Loading Apache2 ENV variables
        source /etc/apache2/envvars
        # The directory below has to be created due to the fact that
        # libapache2-mod-wsgi-py3 doesn't create it in contrary by libapache2-mod-wsgi
        mkdir -p ${APACHE_RUN_DIR}
      fi

      # Get rid of stale pid file if present.
      rm -f /var/run/apache2/*.pid

      # Start Apache2
      exec apache2 -DFOREGROUND
    }

    function stop () {
      if [ -f /etc/apache2/envvars ]; then
        source /etc/apache2/envvars
      fi
      apache2 -k graceful-stop
    }

    $COMMAND
  db-sync.sh: |
    #!/bin/bash



    set -ex

    placement-manage db sync
  db-init.py: |
    #!/usr/bin/env python

    # Creates db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.

    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine

    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Init')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)


    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)

    mysql_x509 = os.getenv('MARIADB_X509', "")
    ssl_args = {}
    if mysql_x509:
        ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',
                    'key': '/etc/mysql/certs/tls.key',
                    'cert': '/etc/mysql/certs/tls.crt'}}

    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)

    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url, connect_args=ssl_args)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise

    # User DB engine
    try:
        user_engine = create_engine(user_db_conn, connect_args=ssl_args)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise

    # Create DB
    try:
        root_engine.execute("CREATE DATABASE IF NOT EXISTS {0}".format(database))
        logger.info("Created database {0}".format(database))
    except:
        logger.critical("Could not create database {0}".format(database))
        raise

    # Create DB User
    try:
        root_engine.execute(
            "GRANT ALL ON `{0}`.* TO \'{1}\'@\'%%\' IDENTIFIED BY \'{2}\' {3}".format(
                database, user, password, mysql_x509))
        logger.info("Created user {0} for {1}".format(user, database))
    except:
        logger.critical("Could not create user {0} for {1}".format(user, database))
        raise

    # Test connection
    try:
        connection = user_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1}/{2} as {3}".format(
            host, port, database, user))
    except:
        logger.critical('Could not connect to database as user')
        raise

    logger.info('Finished DB Management')
  db-drop.py: |
    #!/usr/bin/env python

    # Drops db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.

    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine

    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Drop')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)


    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)

    mysql_x509 = os.getenv('MARIADB_X509', "")
    ssl_args = {}
    if mysql_x509:
        ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',
                            'key': '/etc/mysql/certs/tls.key',
                            'cert': '/etc/mysql/certs/tls.crt'}}

    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)

    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url, connect_args=ssl_args)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise

    # User DB engine
    try:
        user_engine = create_engine(user_db_conn, connect_args=ssl_args)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise

    # Delete DB
    try:
        root_engine.execute("DROP DATABASE IF EXISTS {0}".format(database))
        logger.info("Deleted database {0}".format(database))
    except:
        logger.critical("Could not drop database {0}".format(database))
        raise

    # Delete DB User
    try:
        root_engine.execute("DROP USER IF EXISTS {0}".format(user))
        logger.info("Deleted user {0}".format(user))
    except:
        logger.critical("Could not delete user {0}".format(user))
        raise

    logger.info('Finished DB Management')
  db-migrate.sh: |
    #!/bin/bash



    set -ex

    # To make this migration idempotent and not break the chart deployment,
    # we will treat a new deployment ($?==4) and migration completed ($?==3)
    # as success so things can proceed.
    function handler {
      rv=$?
      if [ $rv -eq 4 ] || [ $rv -eq 3 ]; then
        exit 0
      else
        exit $rv
      fi
    }

    trap handler EXIT

    /tmp/mysql-migrate-db.sh --mkconfig /tmp/migrate-db.rc

    sed -i \
      -e "s/NOVA_API_USER=.*/NOVA_API_USER=\"${NOVA_API_USER}\"/g" \
      -e "s/NOVA_API_PASS=.*/NOVA_API_PASS=\"${NOVA_API_PASS}\"/g" \
      -e "s/NOVA_API_DB_HOST=.*/NOVA_API_DB_HOST=\"${NOVA_API_DB_HOST}\"/g" \
      -e "s/PLACEMENT_USER=.*/PLACEMENT_USER=\"${PLACEMENT_USER}\"/g" \
      -e "s/PLACEMENT_PASS=.*/PLACEMENT_PASS=\"${PLACEMENT_PASS}\"/g" \
      -e "s/PLACEMENT_DB_HOST=.*/PLACEMENT_DB_HOST=\"${PLACEMENT_DB_HOST}\"/g" \
      /tmp/migrate-db.rc

    /tmp/mysql-migrate-db.sh --migrate /tmp/migrate-db.rc
  ks-service.sh: |
    #!/bin/bash

    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    set -ex

    # Service boilerplate description
    OS_SERVICE_DESC="${OS_REGION_NAME}: ${OS_SERVICE_NAME} (${OS_SERVICE_TYPE}) service"

    # Get Service ID if it exists
    unset OS_SERVICE_ID

    # FIXME - There seems to be an issue once in a while where the
    # openstack service list fails and encounters an error message such as:
    #   Unable to establish connection to
    #   https://keystone-api.openstack.svc.cluster.local:5000/v3/auth/tokens:
    #   ('Connection aborted.', OSError("(104, 'ECONNRESET')",))
    # During an upgrade scenario, this would cause the OS_SERVICE_ID to be blank
    # and it would attempt to create a new service when it was not needed.
    # This duplciate service would sometimes be used by other services such as
    # Horizon and would give an 'Invalid Service Catalog' error.
    # This loop allows for a 'retry' of the openstack service list in an
    # attempt to get the service list as expected if it does ecounter an error.
    # This loop and recheck can be reverted once the underlying issue is addressed.

    # If OS_SERVICE_ID is blank then wait a few seconds to give it
    # additional time and try again
    for i in $(seq 3)
    do
      OS_SERVICE_ID=$( openstack service list -f csv --quote none | \
                       grep ",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$" | \
                       sed -e "s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g" )

      # If the service was found, go ahead and exit successfully.
      if [[ -n "${OS_SERVICE_ID}" ]]; then
        exit 0
      fi

      sleep 2
    done

    # If we've reached this point and a Service ID was not found,
    # then create the service
    OS_SERVICE_ID=$(openstack service create -f value -c id \
                    --name="${OS_SERVICE_NAME}" \
                    --description "${OS_SERVICE_DESC}" \
                    --enable \
                    "${OS_SERVICE_TYPE}")
  ks-endpoints.sh: |
    #!/bin/bash

    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    set -ex

    # Get Service ID
    OS_SERVICE_ID=$( openstack service list -f csv --quote none | \
                      grep ",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$" | \
                        sed -e "s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g" )

    # Get Endpoint ID if it exists
    OS_ENDPOINT_ID=$( openstack endpoint list  -f csv --quote none | \
                      grep "^[a-z0-9]*,${OS_REGION_NAME},${OS_SERVICE_NAME},${OS_SERVICE_TYPE},True,${OS_SVC_ENDPOINT}," | \
                      awk -F ',' '{ print $1 }' )

    # Making sure only a single endpoint exists for a service within a region
    if [ "$(echo $OS_ENDPOINT_ID | wc -w)" -gt "1" ]; then
      echo "More than one endpoint found, cleaning up"
      for ENDPOINT_ID in $OS_ENDPOINT_ID; do
        openstack endpoint delete ${ENDPOINT_ID}
      done
      unset OS_ENDPOINT_ID
    fi

    # Determine if Endpoint needs updated
    if [[ ${OS_ENDPOINT_ID} ]]; then
      OS_ENDPOINT_URL_CURRENT=$(openstack endpoint show ${OS_ENDPOINT_ID} -f value -c url)
      if [ "${OS_ENDPOINT_URL_CURRENT}" == "${OS_SERVICE_ENDPOINT}" ]; then
        echo "Endpoints Match: no action required"
        OS_ENDPOINT_UPDATE="False"
      else
        echo "Endpoints Dont Match: removing existing entries"
        openstack endpoint delete ${OS_ENDPOINT_ID}
        OS_ENDPOINT_UPDATE="True"
      fi
    else
      OS_ENDPOINT_UPDATE="True"
    fi

    # Update Endpoint if required
    if [[ "${OS_ENDPOINT_UPDATE}" == "True" ]]; then
      OS_ENDPOINT_ID=$( openstack endpoint create -f value -c id \
        --region="${OS_REGION_NAME}" \
        "${OS_SERVICE_ID}" \
        ${OS_SVC_ENDPOINT} \
        "${OS_SERVICE_ENDPOINT}" )
    fi

    # Display the Endpoint
    openstack endpoint show ${OS_ENDPOINT_ID}
  ks-user.sh: |
    #!/bin/bash

    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    set -ex

    shopt -s nocasematch

    if [[ "${SERVICE_OS_PROJECT_DOMAIN_NAME}" == "Default" ]]
    then
      PROJECT_DOMAIN_ID="default"
    else
      # Manage project domain
      PROJECT_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \
        --description="Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}" \
        "${SERVICE_OS_PROJECT_DOMAIN_NAME}")
    fi

    if [[ "${SERVICE_OS_USER_DOMAIN_NAME}" == "Default" ]]
    then
      USER_DOMAIN_ID="default"
    else
      # Manage user domain
      USER_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \
        --description="Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}" \
        "${SERVICE_OS_USER_DOMAIN_NAME}")
    fi

    shopt -u nocasematch

    # Manage user project
    USER_PROJECT_DESC="Service Project for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}"
    USER_PROJECT_ID=$(openstack project create --or-show --enable -f value -c id \
        --domain="${PROJECT_DOMAIN_ID}" \
        --description="${USER_PROJECT_DESC}" \
        "${SERVICE_OS_PROJECT_NAME}");

    # Manage user
    USER_DESC="Service User for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}/${SERVICE_OS_SERVICE_NAME}"
    USER_ID=$(openstack user create --or-show --enable -f value -c id \
        --domain="${USER_DOMAIN_ID}" \
        --project-domain="${PROJECT_DOMAIN_ID}" \
        --project="${USER_PROJECT_ID}" \
        --description="${USER_DESC}" \
        "${SERVICE_OS_USERNAME}");

    # Manage user password (we do this in a seperate step to ensure the password is updated if required)
    set +x
    echo "Setting user password via: openstack user set --password=xxxxxxx ${USER_ID}"
    openstack user set --password="${SERVICE_OS_PASSWORD}" "${USER_ID}"
    set -x

    function ks_assign_user_role () {
      if [[ "$SERVICE_OS_ROLE" == "admin" ]]
      then
        USER_ROLE_ID="$SERVICE_OS_ROLE"
      else
        USER_ROLE_ID=$(openstack role create --or-show -f value -c id "${SERVICE_OS_ROLE}");
      fi

      # Manage user role assignment
      openstack role add \
          --user="${USER_ID}" \
          --user-domain="${USER_DOMAIN_ID}" \
          --project-domain="${PROJECT_DOMAIN_ID}" \
          --project="${USER_PROJECT_ID}" \
          "${USER_ROLE_ID}"
    }

    # Manage user service role
    IFS=','
    for SERVICE_OS_ROLE in ${SERVICE_OS_ROLES}; do
      ks_assign_user_role
    done

    # Manage user member role
    : ${MEMBER_OS_ROLE:="member"}
    export USER_ROLE_ID=$(openstack role create --or-show -f value -c id \
        "${MEMBER_OS_ROLE}");
    ks_assign_user_role
  mysql-migrate-db.sh: |
    #!/bin/bash



    # This script will attempt to migrate your nova-api placement data to
    # a new placement database. Run it with --help for usage, and --mkconfig
    # to write a template config file to use.

    # Defaults we can guess
    DEFAULT_MIGRATE_TABLES="allocations placement_aggregates consumers inventories projects "
    DEFAULT_MIGRATE_TABLES+="resource_classes resource_provider_aggregates resource_provider_traits "
    DEFAULT_MIGRATE_TABLES+="resource_providers traits users "
    MIGRATE_TABLES=${MIGRATE_TABLES:-$DEFAULT_MIGRATE_TABLES}
    PLACEMENT_DB_HOST=${PLACEMENT_DB_HOST:-localhost}
    PLACEMENT_DB=${PLACEMENT_DB:-placement}
    NOVA_API_DB_HOST=${NOVA_API_DB_HOST:-localhost}
    NOVA_API_DB=${NOVA_API_DB:-nova_api}
    TMPDIR=${TMPDIR:-/tmp}
    LAST_MYSQL_ERR=${TMPDIR}/migrate-mysql-db.err
    INITIAL_PLACEMENT_DB_VERSION=${INITIAL_DB_VERSION:-b4ed3a175331}
    ME=$(basename "$0")

    declare -a ARGS
    declare -a OPTS

    function getflag() {
        # Return true if --$flag is present on the command line
        # Usage: getflag help -> 0
        local flag="$1"
        for opt in ${OPTS[*]}; do
            if [ "$opt" == "--${flag}" ]; then
                return 0
            fi
        done
        return 1
    }

    function parse_argv() {
        # Parse command line arguments into positional arguments and
        # option flags. Store each in $ARGS, $OPTS.
        # Usage: parse_argv $*
        for item in $*; do
            if echo $item | grep -q -- '^--'; then
                OPTS+=($item)
            else
                ARGS+=($item)
            fi
        done
    }

    function db_var() {
        # Return an attribute of database config based on the symbolic
        # name
        # Usage: db_var PLACEMENT USER -> $PLACEMENT_USER
        local db="$1"
        local var="$2"

        eval echo "\$${db}_${var}"
    }

    function mysql_command() {
        # Run a mysql command with the usual connection information taken
        # from a symbolic configuration name
        # Usage: mysql_command PLACEMENT [command] [args..] -> stdout
        local whichdb="$1"
        shift
        local command=mysql
        if [ "$2" ]; then
            command=${1:-mysql}
            shift
        fi
        local db=$(db_var $whichdb DB)
        local host=$(db_var $whichdb DB_HOST)
        local user=$(db_var $whichdb USER)
        local pass=$(db_var $whichdb PASS)

        if [ "$command" = "mysql" ]; then
            command="mysql --skip-column-names"
        fi

        if [ ! -z "$MARIADB_X509" ]; then
            local ca=/etc/mysql/certs/ca.crt
            local cert=/etc/mysql/certs/tls.crt
            local key=/etc/mysql/certs/tls.key
            $command -h$host -u$user -p$pass $db --ssl-ca=$ca --ssl-cert=$cert --ssl-key=$key $* 2>$LAST_MYSQL_ERR
        else
            $command -h$host -u$user -p$pass $db $* 2>$LAST_MYSQL_ERR
        fi
    }

    function show_error() {
        # Prints the last error (if present) and removes the temporary
        # file
        if [ -f $LAST_MYSQL_ERR ]; then
            cat $LAST_MYSQL_ERR
            rm -f $LAST_MYSQL_ERR
        fi
    }

    function check_db() {
        # Check a DB to see if it's missing, present, filled with data
        # Returns 0 if it is present with data, 1 if present but no data
        # or 2 if not present (or unable to connect)
        # Usage: check_db PLACEMENT -> 0
        local whichdb="$1"

        local inv
        local inv_count

        if ! echo "SELECT DATABASE()" | mysql_command $whichdb >/dev/null 2>&1; then
            echo "Failed to connect to $whichdb database"
            show_error
            return 2
        fi

        inv=$(echo "SELECT COUNT(id) FROM inventories" |
                  mysql_command $whichdb)
        if [ $? -ne 0 ]; then
            # No schema
            return 1
        fi

        inv_count=$(echo $inv | tail -n1)
        if [ $inv_count -gt 0 ]; then
            # Data found
            return 0
        else
            # No data found, but schema intact
            return 1
        fi
    }

    function check_cli() {
        # Returns 0 if placement cli is installed and configured,
        # 1 if it is not installed, or 2 if the access to the
        # placement database fails
        # Usage: check_cli -> 0
        placement-manage --version > /dev/null 2>&1

        if [ $? -ne 0 ]; then
            # placement not installed
            return 1
        fi

        placement-manage db version > /dev/null 2>&1

        if [ $? -ne 0 ]; then
            # DB connection fails
            return 2
        fi
    }

    function migrate_data() {
        # Actually migrate data from a source to destination symbolic
        # database. Returns 1 if failure, 0 otherwise.
        # Usage: migrate_data NOVA_API PLACEMENT -> 0
        local source="$1"
        local dest="$2"
        local dump_flags="$3"
        local tmpdir=$(mktemp -d migrate-db.XXXXXXXX)
        local tmpfile="${tmpdir}/from-nova.sql"

        echo "Dumping from $source to $tmpfile"
        mysql_command $source mysqldump $dump_flags $MIGRATE_TABLES > $tmpfile || {
            echo 'Failed to dump source database:'
            show_error
            return 1
        }
        echo "Loading to $dest from $tmpfile"
        mysql_command $dest < $tmpfile || {
            echo 'Failed to load destination database:'
            show_error
            return 1
        }
    }

    function sanity_check_env() {
        # Check that we have everything we need to examine the situation
        # and potentially do the migration. Loads values from the rcfile,
        # if present. Returns 1 if a config was not found, 2 if that
        # config is incomplete or 0 if everything is good.
        # Usage: sanity_check_env $rcfile -> 0

        RCFILE="${1:-migrate-db.rc}"
        if [ "$RCFILE" = '-' ]; then
            # Don't require a file and assume everything is already
            # set in the environment
            true
        elif [ ! -f "$RCFILE" ]; then
            echo -n 'ERROR: Specify an RC file on the command line or create '
            echo 'migrate-db.rc in the current directory'
            echo
            show_help
        else
            source $RCFILE
        fi

        required="NOVA_API_DB NOVA_API_USER NOVA_API_PASS PLACEMENT_DB PLACEMENT_USER PLACEMENT_PASS"
        for var in $required; do
            value=$(eval echo "\$$var")
            if [ -z "$value" ]; then
                echo "A value for $var was not provided but is required"
                return 2
            fi
        done
    }

    function make_config() {
        # Create or update a config file with defaults we know. Either use
        # the default migrate-db.rc or the file specified on the command
        # line.
        RCFILE="${1:-migrate-db.rc}"
        if [ -f "$RCFILE" ]; then
            source $RCFILE
        fi

        vars="NOVA_API_DB NOVA_API_USER NOVA_API_PASS NOVA_API_DB_HOST "
        vars+="PLACEMENT_DB PLACEMENT_USER PLACEMENT_PASS PLACEMENT_DB_HOST "
        vars+="MIGRATE_TABLES"

        (for var in $vars; do
             val=$(eval echo "\$$var")
             echo "${var}=\"$val\""
         done) > $RCFILE

        echo Wrote $(readlink -f $RCFILE)
    }

    function show_help() {
        echo "Usage: $ME [flags] [rcfile]"
        echo
        echo "Flags:"
        echo "    --help: this text"
        echo "    --migrate: actually do data migration"
        echo "    --mkconfig: write/update config to \$rcfile"
        echo "    --skip-locks: don't use table locks for data migration"
        echo
        echo "Pass '-' as \$rcfile if all config values are set in"
        echo "the environment."
        echo
        echo "Exit codes:"
        echo "    0: Success"
        echo "    1: Usage error"
        echo "    2: Configuration missing or incomplete"
        echo "    3: Migration already completed"
        echo "    4: No data to migrate from nova (new deployment)"
        echo "    5: Unable to connect to one or both databases"
        echo "    6: Unable to execute placement's CLI commands"
        exit 0
    }

    parse_argv $*

    if getflag help; then
        show_help
    fi

    if getflag mkconfig; then
        make_config $ARGS
        exit 0
    fi

    #
    # Actual migration logic starts here
    #

    # Sanity check that we have what we need or bail
    sanity_check_env $ARGS || exit $?

    # Check the state of each database we care about
    check_db NOVA_API
    nova_present=$?
    check_db PLACEMENT
    placement_present=$?
    check_cli
    placement_cli=$?

    # Try to come up with a good reason to refuse to migrate
    if [ $nova_present -eq 0 -a $placement_present -eq 0 ]; then
        echo "Migration has already completed. The placement database appears to have data."
        exit 3
    elif [ $nova_present -eq 1 ]; then
        echo "No data present in nova database - nothing to migrate (new deployment?)"
        exit 4
    elif [ $nova_present -eq 2 ]; then
        echo "Unable to proceed without connection to nova database"
        exit 5
    elif [ $placement_present -eq 2 ]; then
        echo "Unable to proceed without connection to placement database"
        exit 5
    elif [ $placement_cli -eq 1 ]; then
        echo "Unable to proceed without placement installed"
        exit 6
    elif [ $placement_cli -eq 2 ]; then
        echo "The 'placement-manage db version' command fails"
        echo "Is placement.conf configured to access the new database?"
        exit 6
    fi

    # If we get here, we expect to be able to migrate. Require them to opt into
    # actual migration before we do anything.

    echo Nova database contains data, placement database does not. Okay to proceed with migration

    if getflag migrate $*; then
        if getflag skip-locks $*; then
            migrate_data NOVA_API PLACEMENT "--skip-lock-tables --skip-add-locks"
        else
            migrate_data NOVA_API PLACEMENT
        fi
        placement-manage db stamp $INITIAL_PLACEMENT_DB_VERSION
    else
        echo "To actually migrate, run me with --migrate"
    fi

    rm -f $LAST_MYSQL_ERR
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-placement-api
  namespace: Mcm9vuIUiboxHTa
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-placement-db-init
  namespace: Mcm9vuIUiboxHTa
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-placement-db-sync
  namespace: Mcm9vuIUiboxHTa
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-placement-ks-endpoints
  namespace: Mcm9vuIUiboxHTa
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-placement-ks-service
  namespace: Mcm9vuIUiboxHTa
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-placement-ks-user
  namespace: Mcm9vuIUiboxHTa
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-placement-api
  namespace: Mcm9vuIUiboxHTa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-placement-api
subjects:
  - kind: ServiceAccount
    name: placement-api
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-placement-db-init
  namespace: Mcm9vuIUiboxHTa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-placement-db-init
subjects:
  - kind: ServiceAccount
    name: placement-db-init
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-placement-db-sync
  namespace: Mcm9vuIUiboxHTa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-placement-db-sync
subjects:
  - kind: ServiceAccount
    name: placement-db-sync
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-placement-ks-endpoints
  namespace: Mcm9vuIUiboxHTa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-placement-ks-endpoints
subjects:
  - kind: ServiceAccount
    name: placement-ks-endpoints
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-placement-ks-service
  namespace: Mcm9vuIUiboxHTa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-placement-ks-service
subjects:
  - kind: ServiceAccount
    name: placement-ks-service
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-placement-ks-user
  namespace: Mcm9vuIUiboxHTa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-placement-ks-user
subjects:
  - kind: ServiceAccount
    name: placement-ks-user
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: placement
spec:
  ports:
    - name: http
      port: 80
    - name: https
      port: 443
  selector:
    app: ingress-api
---
apiVersion: v1
kind: Service
metadata:
  name: placement-api
spec:
  ports:
    - name: p-api
      port: 8778
  selector:
    release_group: release-name
    application: placement
    component: api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: placement-api
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
  labels:
    release_group: release-name
    application: placement
    component: api
spec:
  replicas: 1
  selector:
    matchLabels:
      release_group: release-name
      application: placement
      component: api
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 3
  template:
    metadata:
      labels:
        release_group: release-name
        application: placement
        component: api
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
        configmap-bin-hash: e02f7c058935e0ef4e31c3ac0ed2614581c829a60ed175cc696f56bb90151244
        configmap-etc-hash: aba9b4c07963072566486bb5130d4c7ace74c2b1e74a5e3f23910dc6d86553e2
    spec:
      serviceAccountName: placement-api
      securityContext:
        runAsUser: 42424
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: release_group
                      operator: In
                      values:
                        - release-name
                    - key: application
                      operator: In
                      values:
                        - placement
                    - key: component
                      operator: In
                      values:
                        - api
                topologyKey: kubernetes.io/hostname
              weight: 10
      nodeSelector:
        openstack-control-plane: enabled
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: ""
            - name: DEPENDENCY_JOBS
              value: placement-db-sync,placement-ks-service,placement-ks-user,placement-ks-endpoints
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: null
      containers:
        - name: placement-api
          image: docker.io/openstackhelm/placement:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 11778
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
          command:
            - /tmp/placement-api.sh
            - start
          lifecycle:
            preStop:
              exec:
                command:
                  - /tmp/placement-api.sh
                  - stop
          ports:
            - name: p-api
              containerPort: 8778
          readinessProbe:
            tcpSocket:
              port: 8778
            initialDelaySeconds: 15
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 8778
            initialDelaySeconds: 50
            periodSeconds: 10
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: wsgi-placement
              mountPath: /var/www/cgi-bin/placement
            - name: placement-bin
              mountPath: /tmp/placement-api.sh
              subPath: placement-api.sh
              readOnly: true
            - name: placement-etc
              mountPath: /etc/placement/placement.conf
              subPath: placement.conf
              readOnly: true
            - name: placement-etc
              mountPath: /etc/placement/logging.conf
              subPath: logging.conf
              readOnly: true
            - name: placement-etc
              mountPath: /etc/placement/policy.yaml
              subPath: policy.yaml
              readOnly: true
            - name: placement-etc
              mountPath: /etc/apache2/conf-enabled/wsgi-placement.conf
              subPath: wsgi-placement.conf
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: wsgi-placement
          emptyDir: {}
        - name: placement-bin
          configMap:
            name: placement-bin
            defaultMode: 365
        - name: placement-etc
          secret:
            secretName: placement-etc
            defaultMode: 292
---
apiVersion: batch/v1
kind: Job
metadata:
  name: placement-db-init
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: placement
        component: db-init
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: placement-db-init
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: placement-db-init-0
          image: docker.io/openstackhelm/heat:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          env:
            - name: ROOT_DB_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: placement-db-admin
                  key: DB_CONNECTION
            - name: OPENSTACK_CONFIG_FILE
              value: /etc/placement/placement.conf
            - name: OPENSTACK_CONFIG_DB_SECTION
              value: placement_database
            - name: OPENSTACK_CONFIG_DB_KEY
              value: connection
          command:
            - /tmp/db-init.py
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: db-init-sh
              mountPath: /tmp/db-init.py
              subPath: db-init.py
              readOnly: true
            - name: etc-service
              mountPath: /etc/placement
            - name: db-init-conf
              mountPath: /etc/placement/placement.conf
              subPath: placement.conf
              readOnly: true
            - name: db-init-conf
              mountPath: /etc/placement/logging.conf
              subPath: logging.conf
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: db-init-sh
          configMap:
            name: placement-bin
            defaultMode: 365
        - name: etc-service
          emptyDir: {}
        - name: db-init-conf
          secret:
            secretName: placement-etc
            defaultMode: 292
---
apiVersion: batch/v1
kind: Job
metadata:
  name: placement-db-sync
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: placement
        component: db-sync
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: placement-db-sync
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_JOBS
              value: placement-db-init
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: placement-db-sync
          image: docker.io/openstackhelm/placement:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/db-sync.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: db-sync-sh
              mountPath: /tmp/db-sync.sh
              subPath: db-sync.sh
              readOnly: true
            - name: etc-service
              mountPath: /etc/placement
            - name: db-sync-conf
              mountPath: /etc/placement/placement.conf
              subPath: placement.conf
              readOnly: true
            - name: db-sync-conf
              mountPath: /etc/placement/logging.conf
              subPath: logging.conf
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: db-sync-sh
          configMap:
            name: placement-bin
            defaultMode: 365
        - name: etc-service
          emptyDir: {}
        - name: db-sync-conf
          secret:
            secretName: placement-etc
            defaultMode: 292
---
apiVersion: batch/v1
kind: Job
metadata:
  name: placement-ks-endpoints
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: placement
        component: ks-endpoints
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: placement-ks-endpoints
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:keystone-api
            - name: DEPENDENCY_JOBS
              value: placement-ks-user,placement-ks-service
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: placement-ks-endpoints-admin
          image: docker.io/openstackhelm/heat:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-endpoints.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-endpoints-sh
              mountPath: /tmp/ks-endpoints.sh
              subPath: ks-endpoints.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SVC_ENDPOINT
              value: admin
            - name: OS_SERVICE_NAME
              value: placement
            - name: OS_SERVICE_TYPE
              value: placement
            - name: OS_SERVICE_ENDPOINT
              value: http://placement-api.default.svc.cluster.local:8778/
        - name: placement-ks-endpoints-internal
          image: docker.io/openstackhelm/heat:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-endpoints.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-endpoints-sh
              mountPath: /tmp/ks-endpoints.sh
              subPath: ks-endpoints.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SVC_ENDPOINT
              value: internal
            - name: OS_SERVICE_NAME
              value: placement
            - name: OS_SERVICE_TYPE
              value: placement
            - name: OS_SERVICE_ENDPOINT
              value: http://placement-api.default.svc.cluster.local:8778/
        - name: placement-ks-endpoints-public
          image: docker.io/openstackhelm/heat:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-endpoints.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-endpoints-sh
              mountPath: /tmp/ks-endpoints.sh
              subPath: ks-endpoints.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SVC_ENDPOINT
              value: public
            - name: OS_SERVICE_NAME
              value: placement
            - name: OS_SERVICE_TYPE
              value: placement
            - name: OS_SERVICE_ENDPOINT
              value: http://placement.default.svc.cluster.local/
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: ks-endpoints-sh
          configMap:
            name: placement-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: placement-ks-service
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: placement
        component: ks-service
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: placement-ks-service
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:keystone-api
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: placement-ks-service-registration
          image: docker.io/openstackhelm/heat:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-service.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-service-sh
              mountPath: /tmp/ks-service.sh
              subPath: ks-service.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SERVICE_NAME
              value: placement
            - name: OS_SERVICE_TYPE
              value: placement
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: ks-service-sh
          configMap:
            name: placement-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: placement-ks-user
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: placement
        component: ks-user
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: placement-ks-user
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:keystone-api
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: ks-user
          image: docker.io/openstackhelm/heat:stein-ubuntu_bionic
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-user.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-user-sh
              mountPath: /tmp/ks-user.sh
              subPath: ks-user.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: SERVICE_OS_SERVICE_NAME
              value: placement
            - name: SERVICE_OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-user
                  key: OS_REGION_NAME
            - name: SERVICE_OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-user
                  key: OS_PROJECT_DOMAIN_NAME
            - name: SERVICE_OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-user
                  key: OS_PROJECT_NAME
            - name: SERVICE_OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-user
                  key: OS_USER_DOMAIN_NAME
            - name: SERVICE_OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-user
                  key: OS_USERNAME
            - name: SERVICE_OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: placement-keystone-user
                  key: OS_PASSWORD
            - name: SERVICE_OS_ROLES
              value: admin
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: ks-user-sh
          configMap:
            name: placement-bin
            defaultMode: 365
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: placement
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: placement
      http:
        paths:
          - path: /
            backend:
              serviceName: placement-api
              servicePort: p-api
    - host: placement.default
      http:
        paths:
          - path: /
            backend:
              serviceName: placement-api
              servicePort: p-api
    - host: placement.default.svc.cluster.local
      http:
        paths:
          - path: /
            backend:
              serviceName: placement-api
              servicePort: p-api
