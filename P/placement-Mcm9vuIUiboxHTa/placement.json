[
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "placement-api"
    },
    "spec": {
      "minAvailable": 0,
      "selector": {
        "matchLabels": {
          "release_group": "release-name",
          "application": "placement",
          "component": "api"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "placement-api",
      "namespace": "Mcm9vuIUiboxHTa"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "placement-db-init",
      "namespace": "Mcm9vuIUiboxHTa"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "placement-db-sync",
      "namespace": "Mcm9vuIUiboxHTa"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "placement-ks-endpoints",
      "namespace": "Mcm9vuIUiboxHTa"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "placement-ks-service",
      "namespace": "Mcm9vuIUiboxHTa"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "placement-ks-user",
      "namespace": "Mcm9vuIUiboxHTa"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "placement-etc"
    },
    "type": "Opaque",
    "data": {
      "policy.yaml": "YWRtaW5fYXBpOiByb2xlOmFkbWluCmFkbWluX29yX293bmVyOiBydWxlOmNvbnRleHRfaXNfYWRtaW4gb3IgcHJvamVjdF9pZDolKHByb2plY3RfaWQpcwpjb250ZXh0X2lzX2FkbWluOiByb2xlOmFkbWluCmRlZmF1bHQ6IHJ1bGU6YWRtaW5fb3Jfb3duZXIKcGxhY2VtZW50OmFsbG9jYXRpb25fY2FuZGlkYXRlczpsaXN0OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6YWxsb2NhdGlvbnM6ZGVsZXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6YWxsb2NhdGlvbnM6bGlzdDogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OmFsbG9jYXRpb25zOm1hbmFnZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OmFsbG9jYXRpb25zOnVwZGF0ZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc2hhcGVyOnJlc2hhcGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9jbGFzc2VzOmNyZWF0ZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc291cmNlX2NsYXNzZXM6ZGVsZXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfY2xhc3NlczpsaXN0OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfY2xhc3NlczpzaG93OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfY2xhc3Nlczp1cGRhdGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6YWdncmVnYXRlczpsaXN0OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfcHJvdmlkZXJzOmFnZ3JlZ2F0ZXM6dXBkYXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfcHJvdmlkZXJzOmFsbG9jYXRpb25zOmxpc3Q6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6Y3JlYXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfcHJvdmlkZXJzOmRlbGV0ZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc291cmNlX3Byb3ZpZGVyczppbnZlbnRvcmllczpjcmVhdGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6aW52ZW50b3JpZXM6ZGVsZXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfcHJvdmlkZXJzOmludmVudG9yaWVzOmxpc3Q6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6aW52ZW50b3JpZXM6c2hvdzogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc291cmNlX3Byb3ZpZGVyczppbnZlbnRvcmllczp1cGRhdGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6bGlzdDogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc291cmNlX3Byb3ZpZGVyczpzaG93OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6cmVzb3VyY2VfcHJvdmlkZXJzOnRyYWl0czpkZWxldGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6dHJhaXRzOmxpc3Q6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6dHJhaXRzOnVwZGF0ZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnJlc291cmNlX3Byb3ZpZGVyczp1cGRhdGU6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDpyZXNvdXJjZV9wcm92aWRlcnM6dXNhZ2VzOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6dHJhaXRzOmRlbGV0ZTogcnVsZTphZG1pbl9hcGkKcGxhY2VtZW50OnRyYWl0czpsaXN0OiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6dHJhaXRzOnNob3c6IHJ1bGU6YWRtaW5fYXBpCnBsYWNlbWVudDp0cmFpdHM6dXBkYXRlOiBydWxlOmFkbWluX2FwaQpwbGFjZW1lbnQ6dXNhZ2VzOiBydWxlOmFkbWluX2FwaQ==",
      "placement.conf": "W0RFRkFVTFRdCmRlYnVnID0gZmFsc2UKbG9nX2NvbmZpZ19hcHBlbmQgPSAvZXRjL3BsYWNlbWVudC9sb2dnaW5nLmNvbmYKdXNlX3N5c2xvZyA9IGZhbHNlCltrZXlzdG9uZV9hdXRodG9rZW5dCmF1dGhfdHlwZSA9IHBhc3N3b3JkCmF1dGhfdXJpID0gaHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjMKYXV0aF91cmwgPSBodHRwOi8va2V5c3RvbmUtYXBpLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6NTAwMC92MwphdXRoX3ZlcnNpb24gPSB2MwptZW1jYWNoZV9zZWNyZXRfa2V5ID0gV3J6UzUwNm5scTVIRU9FQmc5RnR3dE5uaHREY2ZrQjVhYkE0cld2OThxQ1AxTkp6VGpHZmx4RFdTTVd2Y0JZSwptZW1jYWNoZV9zZWN1cml0eV9zdHJhdGVneSA9IEVOQ1JZUFQKbWVtY2FjaGVkX3NlcnZlcnMgPSBtZW1jYWNoZWQuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDoxMTIxMQpvc19yZWdpb25fbmFtZSA9IFJlZ2lvbk9uZQpwYXNzd29yZCA9IHBhc3N3b3JkCnByb2plY3RfZG9tYWluX25hbWUgPSBzZXJ2aWNlCnByb2plY3RfbmFtZSA9IHNlcnZpY2UKdXNlcl9kb21haW5fbmFtZSA9IHNlcnZpY2UKdXNlcm5hbWUgPSBwbGFjZW1lbnQKW3BsYWNlbWVudF9kYXRhYmFzZV0KY29ubmVjdGlvbiA9IG15c3FsK3B5bXlzcWw6Ly9wbGFjZW1lbnQ6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvcGxhY2VtZW50Cg==",
      "logging.conf": "W2Zvcm1hdHRlcl9jb250ZXh0XQpjbGFzcyA9IG9zbG9fbG9nLmZvcm1hdHRlcnMuQ29udGV4dEZvcm1hdHRlcgpkYXRlZm10ID0gJVktJW0tJWQgJUg6JU06JVMKW2Zvcm1hdHRlcl9kZWZhdWx0XQpkYXRlZm10ID0gJVktJW0tJWQgJUg6JU06JVMKZm9ybWF0ID0gJShtZXNzYWdlKXMKW2Zvcm1hdHRlcnNdCmtleXMgPSBjb250ZXh0LGRlZmF1bHQKW2hhbmRsZXJfbnVsbF0KYXJncyA9ICgpCmNsYXNzID0gbG9nZ2luZy5OdWxsSGFuZGxlcgpmb3JtYXR0ZXIgPSBkZWZhdWx0CltoYW5kbGVyX3N0ZGVycl0KYXJncyA9IChzeXMuc3RkZXJyLCkKY2xhc3MgPSBTdHJlYW1IYW5kbGVyCmZvcm1hdHRlciA9IGNvbnRleHQKW2hhbmRsZXJfc3Rkb3V0XQphcmdzID0gKHN5cy5zdGRvdXQsKQpjbGFzcyA9IFN0cmVhbUhhbmRsZXIKZm9ybWF0dGVyID0gY29udGV4dApbaGFuZGxlcnNdCmtleXMgPSBzdGRvdXQsc3RkZXJyLG51bGwKW2xvZ2dlcl9hbXFwXQpoYW5kbGVycyA9IHN0ZGVycgpsZXZlbCA9IFdBUk5JTkcKcXVhbG5hbWUgPSBhbXFwCltsb2dnZXJfYW1xcGxpYl0KaGFuZGxlcnMgPSBzdGRlcnIKbGV2ZWwgPSBXQVJOSU5HCnF1YWxuYW1lID0gYW1xcGxpYgpbbG9nZ2VyX2JvdG9dCmhhbmRsZXJzID0gc3RkZXJyCmxldmVsID0gV0FSTklORwpxdWFsbmFtZSA9IGJvdG8KW2xvZ2dlcl9ldmVudGxldHdzZ2ldCmhhbmRsZXJzID0gc3RkZXJyCmxldmVsID0gV0FSTklORwpxdWFsbmFtZSA9IGV2ZW50bGV0LndzZ2kuc2VydmVyCltsb2dnZXJfcGxhY2VtZW50XQpoYW5kbGVycyA9IHN0ZG91dApsZXZlbCA9IElORk8KcXVhbG5hbWUgPSBwbGFjZW1lbnQKW2xvZ2dlcl9yb290XQpoYW5kbGVycyA9IG51bGwKbGV2ZWwgPSBXQVJOSU5HCltsb2dnZXJfc3FsYWxjaGVteV0KaGFuZGxlcnMgPSBzdGRlcnIKbGV2ZWwgPSBXQVJOSU5HCnF1YWxuYW1lID0gc3FsYWxjaGVteQpbbG9nZ2Vyc10Ka2V5cyA9IHJvb3QscGxhY2VtZW50Cg==",
      "wsgi-placement.conf": "TGlzdGVuIDAuMC4wLjA6ODc3OApMb2dGb3JtYXQgIiVoICVsICV1ICV0IFwiJXJcIiAlPnMgJWIgXCIle1JlZmVyZXJ9aVwiIFwiJXtVc2VyLUFnZW50fWlcIiIgY29tYmluZWQKTG9nRm9ybWF0ICIle1gtRm9yd2FyZGVkLUZvcn1pICVsICV1ICV0IFwiJXJcIiAlPnMgJWIgXCIle1JlZmVyZXJ9aVwiIFwiJXtVc2VyLUFnZW50fWlcIiIgcHJveHkKU2V0RW52SWYgWC1Gb3J3YXJkZWQtRm9yICJeLipcLi4qXC4uKlwuLioiIGZvcndhcmRlZApDdXN0b21Mb2cgL2Rldi9zdGRvdXQgY29tYmluZWQgZW52PSFmb3J3YXJkZWQKQ3VzdG9tTG9nIC9kZXYvc3Rkb3V0IHByb3h5IGVudj1mb3J3YXJkZWQKPFZpcnR1YWxIb3N0ICo6ODc3OD4KICAgIFdTR0lEYWVtb25Qcm9jZXNzIHBsYWNlbWVudC1hcGkgcHJvY2Vzc2VzPTQgdGhyZWFkcz0xIHVzZXI9cGxhY2VtZW50IGdyb3VwPXBsYWNlbWVudCBkaXNwbGF5LW5hbWU9JXtHUk9VUH0KICAgIFdTR0lQcm9jZXNzR3JvdXAgcGxhY2VtZW50LWFwaQogICAgV1NHSVNjcmlwdEFsaWFzIC8gL3Zhci93d3cvY2dpLWJpbi9wbGFjZW1lbnQvcGxhY2VtZW50LWFwaQogICAgV1NHSUFwcGxpY2F0aW9uR3JvdXAgJXtHTE9CQUx9CiAgICBXU0dJUGFzc0F1dGhvcml6YXRpb24gT24KICAgIDxJZlZlcnNpb24gPj0gMi40PgogICAgICBFcnJvckxvZ0Zvcm1hdCAiJXtjdX10ICVNIgogICAgPC9JZlZlcnNpb24+CiAgICBFcnJvckxvZyAvZGV2L3N0ZG91dAogICAgU2V0RW52SWYgWC1Gb3J3YXJkZWQtRm9yICJeLipcLi4qXC4uKlwuLioiIGZvcndhcmRlZAogICAgQ3VzdG9tTG9nIC9kZXYvc3Rkb3V0IGNvbWJpbmVkIGVudj0hZm9yd2FyZGVkCiAgICBDdXN0b21Mb2cgL2Rldi9zdGRvdXQgcHJveHkgZW52PWZvcndhcmRlZAo8L1ZpcnR1YWxIb3N0PgpBbGlhcyAvcGxhY2VtZW50IC92YXIvd3d3L2NnaS1iaW4vcGxhY2VtZW50L3BsYWNlbWVudC1hcGkKPExvY2F0aW9uIC9wbGFjZW1lbnQ+CiAgICBTZXRIYW5kbGVyIHdzZ2ktc2NyaXB0CiAgICBPcHRpb25zICtFeGVjQ0dJCiAgICBXU0dJUHJvY2Vzc0dyb3VwIHBsYWNlbWVudC1hcGkKICAgIFdTR0lBcHBsaWNhdGlvbkdyb3VwICV7R0xPQkFMfQogICAgV1NHSVBhc3NBdXRob3JpemF0aW9uIE9uCjwvTG9jYXRpb24+"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "placement-db-admin"
    },
    "type": "Opaque",
    "data": {
      "DB_CONNECTION": "bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvcGxhY2VtZW50"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "placement-db-user"
    },
    "type": "Opaque",
    "data": {
      "DB_CONNECTION": "bXlzcWwrcHlteXNxbDovL3BsYWNlbWVudDpwYXNzd29yZEBtYXJpYWRiLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6MzMwNi9wbGFjZW1lbnQ="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "placement-keystone-admin"
    },
    "type": "Opaque",
    "data": {
      "OS_AUTH_URL": "aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=",
      "OS_REGION_NAME": "UmVnaW9uT25l",
      "OS_INTERFACE": "aW50ZXJuYWw=",
      "OS_PROJECT_DOMAIN_NAME": "ZGVmYXVsdA==",
      "OS_PROJECT_NAME": "YWRtaW4=",
      "OS_USER_DOMAIN_NAME": "ZGVmYXVsdA==",
      "OS_USERNAME": "YWRtaW4=",
      "OS_PASSWORD": "cGFzc3dvcmQ=",
      "OS_DEFAULT_DOMAIN": "ZGVmYXVsdA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "placement-keystone-user"
    },
    "type": "Opaque",
    "data": {
      "OS_AUTH_URL": "aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=",
      "OS_REGION_NAME": "UmVnaW9uT25l",
      "OS_INTERFACE": "aW50ZXJuYWw=",
      "OS_PROJECT_DOMAIN_NAME": "c2VydmljZQ==",
      "OS_PROJECT_NAME": "c2VydmljZQ==",
      "OS_USER_DOMAIN_NAME": "c2VydmljZQ==",
      "OS_USERNAME": "cGxhY2VtZW50",
      "OS_PASSWORD": "cGFzc3dvcmQ=",
      "OS_DEFAULT_DOMAIN": "ZGVmYXVsdA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "placement-bin"
    },
    "data": {
      "placement-api.sh": "#!/bin/bash\n\n\n\nset -ex\nCOMMAND=\"${@:-start}\"\n\nfunction start () {\n\n  cp -a $(type -p placement-api) /var/www/cgi-bin/placement/\n\n  if [ -f /etc/apache2/envvars ]; then\n    # Loading Apache2 ENV variables\n    source /etc/apache2/envvars\n    # The directory below has to be created due to the fact that\n    # libapache2-mod-wsgi-py3 doesn't create it in contrary by libapache2-mod-wsgi\n    mkdir -p ${APACHE_RUN_DIR}\n  fi\n\n  # Get rid of stale pid file if present.\n  rm -f /var/run/apache2/*.pid\n\n  # Start Apache2\n  exec apache2 -DFOREGROUND\n}\n\nfunction stop () {\n  if [ -f /etc/apache2/envvars ]; then\n    source /etc/apache2/envvars\n  fi\n  apache2 -k graceful-stop\n}\n\n$COMMAND\n",
      "db-sync.sh": "#!/bin/bash\n\n\n\nset -ex\n\nplacement-manage db sync\n",
      "db-init.py": "#!/usr/bin/env python\n\n# Creates db and user for an OpenStack Service:\n# Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain\n# SQLAlchemy strings for the root connection to the database and the one you\n# wish the service to use. Alternatively, you can use an ini formatted config\n# at the location specified by OPENSTACK_CONFIG_FILE, and extract the string\n# from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by\n# OPENSTACK_CONFIG_DB_SECTION.\n\nimport os\nimport sys\ntry:\n    import ConfigParser\n    PARSER_OPTS = {}\nexcept ImportError:\n    import configparser as ConfigParser\n    PARSER_OPTS = {\"strict\": False}\nimport logging\nfrom sqlalchemy import create_engine\n\n# Create logger, console handler and formatter\nlogger = logging.getLogger('OpenStack-Helm DB Init')\nlogger.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n# Set the formatter and add the handler\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\n\n# Get the connection string for the service db root user\nif \"ROOT_DB_CONNECTION\" in os.environ:\n    db_connection = os.environ['ROOT_DB_CONNECTION']\n    logger.info('Got DB root connection')\nelse:\n    logger.critical('environment variable ROOT_DB_CONNECTION not set')\n    sys.exit(1)\n\nmysql_x509 = os.getenv('MARIADB_X509', \"\")\nssl_args = {}\nif mysql_x509:\n    ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',\n                'key': '/etc/mysql/certs/tls.key',\n                'cert': '/etc/mysql/certs/tls.crt'}}\n\n# Get the connection string for the service db\nif \"OPENSTACK_CONFIG_FILE\" in os.environ:\n    os_conf = os.environ['OPENSTACK_CONFIG_FILE']\n    if \"OPENSTACK_CONFIG_DB_SECTION\" in os.environ:\n        os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']\n    else:\n        logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')\n        sys.exit(1)\n    if \"OPENSTACK_CONFIG_DB_KEY\" in os.environ:\n        os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']\n    else:\n        logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')\n        sys.exit(1)\n    try:\n        config = ConfigParser.RawConfigParser(**PARSER_OPTS)\n        logger.info(\"Using {0} as db config source\".format(os_conf))\n        config.read(os_conf)\n        logger.info(\"Trying to load db config from {0}:{1}\".format(\n            os_conf_section, os_conf_key))\n        user_db_conn = config.get(os_conf_section, os_conf_key)\n        logger.info(\"Got config from {0}\".format(os_conf))\n    except:\n        logger.critical(\"Tried to load config from {0} but failed.\".format(os_conf))\n        raise\nelif \"DB_CONNECTION\" in os.environ:\n    user_db_conn = os.environ['DB_CONNECTION']\n    logger.info('Got config from DB_CONNECTION env var')\nelse:\n    logger.critical('Could not get db config, either from config file or env var')\n    sys.exit(1)\n\n# Root DB engine\ntry:\n    root_engine_full = create_engine(db_connection)\n    root_user = root_engine_full.url.username\n    root_password = root_engine_full.url.password\n    drivername = root_engine_full.url.drivername\n    host = root_engine_full.url.host\n    port = root_engine_full.url.port\n    root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])\n    root_engine = create_engine(root_engine_url, connect_args=ssl_args)\n    connection = root_engine.connect()\n    connection.close()\n    logger.info(\"Tested connection to DB @ {0}:{1} as {2}\".format(\n        host, port, root_user))\nexcept:\n    logger.critical('Could not connect to database as root user')\n    raise\n\n# User DB engine\ntry:\n    user_engine = create_engine(user_db_conn, connect_args=ssl_args)\n    # Get our user data out of the user_engine\n    database = user_engine.url.database\n    user = user_engine.url.username\n    password = user_engine.url.password\n    logger.info('Got user db config')\nexcept:\n    logger.critical('Could not get user database config')\n    raise\n\n# Create DB\ntry:\n    root_engine.execute(\"CREATE DATABASE IF NOT EXISTS {0}\".format(database))\n    logger.info(\"Created database {0}\".format(database))\nexcept:\n    logger.critical(\"Could not create database {0}\".format(database))\n    raise\n\n# Create DB User\ntry:\n    root_engine.execute(\n        \"GRANT ALL ON `{0}`.* TO \\'{1}\\'@\\'%%\\' IDENTIFIED BY \\'{2}\\' {3}\".format(\n            database, user, password, mysql_x509))\n    logger.info(\"Created user {0} for {1}\".format(user, database))\nexcept:\n    logger.critical(\"Could not create user {0} for {1}\".format(user, database))\n    raise\n\n# Test connection\ntry:\n    connection = user_engine.connect()\n    connection.close()\n    logger.info(\"Tested connection to DB @ {0}:{1}/{2} as {3}\".format(\n        host, port, database, user))\nexcept:\n    logger.critical('Could not connect to database as user')\n    raise\n\nlogger.info('Finished DB Management')\n",
      "db-drop.py": "#!/usr/bin/env python\n\n# Drops db and user for an OpenStack Service:\n# Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain\n# SQLAlchemy strings for the root connection to the database and the one you\n# wish the service to use. Alternatively, you can use an ini formatted config\n# at the location specified by OPENSTACK_CONFIG_FILE, and extract the string\n# from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by\n# OPENSTACK_CONFIG_DB_SECTION.\n\nimport os\nimport sys\ntry:\n    import ConfigParser\n    PARSER_OPTS = {}\nexcept ImportError:\n    import configparser as ConfigParser\n    PARSER_OPTS = {\"strict\": False}\nimport logging\nfrom sqlalchemy import create_engine\n\n# Create logger, console handler and formatter\nlogger = logging.getLogger('OpenStack-Helm DB Drop')\nlogger.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n# Set the formatter and add the handler\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\n\n# Get the connection string for the service db root user\nif \"ROOT_DB_CONNECTION\" in os.environ:\n    db_connection = os.environ['ROOT_DB_CONNECTION']\n    logger.info('Got DB root connection')\nelse:\n    logger.critical('environment variable ROOT_DB_CONNECTION not set')\n    sys.exit(1)\n\nmysql_x509 = os.getenv('MARIADB_X509', \"\")\nssl_args = {}\nif mysql_x509:\n    ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',\n                        'key': '/etc/mysql/certs/tls.key',\n                        'cert': '/etc/mysql/certs/tls.crt'}}\n\n# Get the connection string for the service db\nif \"OPENSTACK_CONFIG_FILE\" in os.environ:\n    os_conf = os.environ['OPENSTACK_CONFIG_FILE']\n    if \"OPENSTACK_CONFIG_DB_SECTION\" in os.environ:\n        os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']\n    else:\n        logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')\n        sys.exit(1)\n    if \"OPENSTACK_CONFIG_DB_KEY\" in os.environ:\n        os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']\n    else:\n        logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')\n        sys.exit(1)\n    try:\n        config = ConfigParser.RawConfigParser(**PARSER_OPTS)\n        logger.info(\"Using {0} as db config source\".format(os_conf))\n        config.read(os_conf)\n        logger.info(\"Trying to load db config from {0}:{1}\".format(\n            os_conf_section, os_conf_key))\n        user_db_conn = config.get(os_conf_section, os_conf_key)\n        logger.info(\"Got config from {0}\".format(os_conf))\n    except:\n        logger.critical(\"Tried to load config from {0} but failed.\".format(os_conf))\n        raise\nelif \"DB_CONNECTION\" in os.environ:\n    user_db_conn = os.environ['DB_CONNECTION']\n    logger.info('Got config from DB_CONNECTION env var')\nelse:\n    logger.critical('Could not get db config, either from config file or env var')\n    sys.exit(1)\n\n# Root DB engine\ntry:\n    root_engine_full = create_engine(db_connection)\n    root_user = root_engine_full.url.username\n    root_password = root_engine_full.url.password\n    drivername = root_engine_full.url.drivername\n    host = root_engine_full.url.host\n    port = root_engine_full.url.port\n    root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])\n    root_engine = create_engine(root_engine_url, connect_args=ssl_args)\n    connection = root_engine.connect()\n    connection.close()\n    logger.info(\"Tested connection to DB @ {0}:{1} as {2}\".format(\n        host, port, root_user))\nexcept:\n    logger.critical('Could not connect to database as root user')\n    raise\n\n# User DB engine\ntry:\n    user_engine = create_engine(user_db_conn, connect_args=ssl_args)\n    # Get our user data out of the user_engine\n    database = user_engine.url.database\n    user = user_engine.url.username\n    password = user_engine.url.password\n    logger.info('Got user db config')\nexcept:\n    logger.critical('Could not get user database config')\n    raise\n\n# Delete DB\ntry:\n    root_engine.execute(\"DROP DATABASE IF EXISTS {0}\".format(database))\n    logger.info(\"Deleted database {0}\".format(database))\nexcept:\n    logger.critical(\"Could not drop database {0}\".format(database))\n    raise\n\n# Delete DB User\ntry:\n    root_engine.execute(\"DROP USER IF EXISTS {0}\".format(user))\n    logger.info(\"Deleted user {0}\".format(user))\nexcept:\n    logger.critical(\"Could not delete user {0}\".format(user))\n    raise\n\nlogger.info('Finished DB Management')\n",
      "db-migrate.sh": "#!/bin/bash\n\n\n\nset -ex\n\n# To make this migration idempotent and not break the chart deployment,\n# we will treat a new deployment ($?==4) and migration completed ($?==3)\n# as success so things can proceed.\nfunction handler {\n  rv=$?\n  if [ $rv -eq 4 ] || [ $rv -eq 3 ]; then\n    exit 0\n  else\n    exit $rv\n  fi\n}\n\ntrap handler EXIT\n\n/tmp/mysql-migrate-db.sh --mkconfig /tmp/migrate-db.rc\n\nsed -i \\\n  -e \"s/NOVA_API_USER=.*/NOVA_API_USER=\\\"${NOVA_API_USER}\\\"/g\" \\\n  -e \"s/NOVA_API_PASS=.*/NOVA_API_PASS=\\\"${NOVA_API_PASS}\\\"/g\" \\\n  -e \"s/NOVA_API_DB_HOST=.*/NOVA_API_DB_HOST=\\\"${NOVA_API_DB_HOST}\\\"/g\" \\\n  -e \"s/PLACEMENT_USER=.*/PLACEMENT_USER=\\\"${PLACEMENT_USER}\\\"/g\" \\\n  -e \"s/PLACEMENT_PASS=.*/PLACEMENT_PASS=\\\"${PLACEMENT_PASS}\\\"/g\" \\\n  -e \"s/PLACEMENT_DB_HOST=.*/PLACEMENT_DB_HOST=\\\"${PLACEMENT_DB_HOST}\\\"/g\" \\\n  /tmp/migrate-db.rc\n\n/tmp/mysql-migrate-db.sh --migrate /tmp/migrate-db.rc\n",
      "ks-service.sh": "#!/bin/bash\n\n# Copyright 2017 Pete Birley\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -ex\n\n# Service boilerplate description\nOS_SERVICE_DESC=\"${OS_REGION_NAME}: ${OS_SERVICE_NAME} (${OS_SERVICE_TYPE}) service\"\n\n# Get Service ID if it exists\nunset OS_SERVICE_ID\n\n# FIXME - There seems to be an issue once in a while where the\n# openstack service list fails and encounters an error message such as:\n#   Unable to establish connection to\n#   https://keystone-api.openstack.svc.cluster.local:5000/v3/auth/tokens:\n#   ('Connection aborted.', OSError(\"(104, 'ECONNRESET')\",))\n# During an upgrade scenario, this would cause the OS_SERVICE_ID to be blank\n# and it would attempt to create a new service when it was not needed.\n# This duplciate service would sometimes be used by other services such as\n# Horizon and would give an 'Invalid Service Catalog' error.\n# This loop allows for a 'retry' of the openstack service list in an\n# attempt to get the service list as expected if it does ecounter an error.\n# This loop and recheck can be reverted once the underlying issue is addressed.\n\n# If OS_SERVICE_ID is blank then wait a few seconds to give it\n# additional time and try again\nfor i in $(seq 3)\ndo\n  OS_SERVICE_ID=$( openstack service list -f csv --quote none | \\\n                   grep \",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$\" | \\\n                   sed -e \"s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g\" )\n\n  # If the service was found, go ahead and exit successfully.\n  if [[ -n \"${OS_SERVICE_ID}\" ]]; then\n    exit 0\n  fi\n\n  sleep 2\ndone\n\n# If we've reached this point and a Service ID was not found,\n# then create the service\nOS_SERVICE_ID=$(openstack service create -f value -c id \\\n                --name=\"${OS_SERVICE_NAME}\" \\\n                --description \"${OS_SERVICE_DESC}\" \\\n                --enable \\\n                \"${OS_SERVICE_TYPE}\")\n",
      "ks-endpoints.sh": "#!/bin/bash\n\n# Copyright 2017 Pete Birley\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -ex\n\n# Get Service ID\nOS_SERVICE_ID=$( openstack service list -f csv --quote none | \\\n                  grep \",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$\" | \\\n                    sed -e \"s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g\" )\n\n# Get Endpoint ID if it exists\nOS_ENDPOINT_ID=$( openstack endpoint list  -f csv --quote none | \\\n                  grep \"^[a-z0-9]*,${OS_REGION_NAME},${OS_SERVICE_NAME},${OS_SERVICE_TYPE},True,${OS_SVC_ENDPOINT},\" | \\\n                  awk -F ',' '{ print $1 }' )\n\n# Making sure only a single endpoint exists for a service within a region\nif [ \"$(echo $OS_ENDPOINT_ID | wc -w)\" -gt \"1\" ]; then\n  echo \"More than one endpoint found, cleaning up\"\n  for ENDPOINT_ID in $OS_ENDPOINT_ID; do\n    openstack endpoint delete ${ENDPOINT_ID}\n  done\n  unset OS_ENDPOINT_ID\nfi\n\n# Determine if Endpoint needs updated\nif [[ ${OS_ENDPOINT_ID} ]]; then\n  OS_ENDPOINT_URL_CURRENT=$(openstack endpoint show ${OS_ENDPOINT_ID} -f value -c url)\n  if [ \"${OS_ENDPOINT_URL_CURRENT}\" == \"${OS_SERVICE_ENDPOINT}\" ]; then\n    echo \"Endpoints Match: no action required\"\n    OS_ENDPOINT_UPDATE=\"False\"\n  else\n    echo \"Endpoints Dont Match: removing existing entries\"\n    openstack endpoint delete ${OS_ENDPOINT_ID}\n    OS_ENDPOINT_UPDATE=\"True\"\n  fi\nelse\n  OS_ENDPOINT_UPDATE=\"True\"\nfi\n\n# Update Endpoint if required\nif [[ \"${OS_ENDPOINT_UPDATE}\" == \"True\" ]]; then\n  OS_ENDPOINT_ID=$( openstack endpoint create -f value -c id \\\n    --region=\"${OS_REGION_NAME}\" \\\n    \"${OS_SERVICE_ID}\" \\\n    ${OS_SVC_ENDPOINT} \\\n    \"${OS_SERVICE_ENDPOINT}\" )\nfi\n\n# Display the Endpoint\nopenstack endpoint show ${OS_ENDPOINT_ID}\n",
      "ks-user.sh": "#!/bin/bash\n\n# Copyright 2017 Pete Birley\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -ex\n\nshopt -s nocasematch\n\nif [[ \"${SERVICE_OS_PROJECT_DOMAIN_NAME}\" == \"Default\" ]]\nthen\n  PROJECT_DOMAIN_ID=\"default\"\nelse\n  # Manage project domain\n  PROJECT_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \\\n    --description=\"Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}\" \\\n    \"${SERVICE_OS_PROJECT_DOMAIN_NAME}\")\nfi\n\nif [[ \"${SERVICE_OS_USER_DOMAIN_NAME}\" == \"Default\" ]]\nthen\n  USER_DOMAIN_ID=\"default\"\nelse\n  # Manage user domain\n  USER_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \\\n    --description=\"Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}\" \\\n    \"${SERVICE_OS_USER_DOMAIN_NAME}\")\nfi\n\nshopt -u nocasematch\n\n# Manage user project\nUSER_PROJECT_DESC=\"Service Project for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}\"\nUSER_PROJECT_ID=$(openstack project create --or-show --enable -f value -c id \\\n    --domain=\"${PROJECT_DOMAIN_ID}\" \\\n    --description=\"${USER_PROJECT_DESC}\" \\\n    \"${SERVICE_OS_PROJECT_NAME}\");\n\n# Manage user\nUSER_DESC=\"Service User for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}/${SERVICE_OS_SERVICE_NAME}\"\nUSER_ID=$(openstack user create --or-show --enable -f value -c id \\\n    --domain=\"${USER_DOMAIN_ID}\" \\\n    --project-domain=\"${PROJECT_DOMAIN_ID}\" \\\n    --project=\"${USER_PROJECT_ID}\" \\\n    --description=\"${USER_DESC}\" \\\n    \"${SERVICE_OS_USERNAME}\");\n\n# Manage user password (we do this in a seperate step to ensure the password is updated if required)\nset +x\necho \"Setting user password via: openstack user set --password=xxxxxxx ${USER_ID}\"\nopenstack user set --password=\"${SERVICE_OS_PASSWORD}\" \"${USER_ID}\"\nset -x\n\nfunction ks_assign_user_role () {\n  if [[ \"$SERVICE_OS_ROLE\" == \"admin\" ]]\n  then\n    USER_ROLE_ID=\"$SERVICE_OS_ROLE\"\n  else\n    USER_ROLE_ID=$(openstack role create --or-show -f value -c id \"${SERVICE_OS_ROLE}\");\n  fi\n\n  # Manage user role assignment\n  openstack role add \\\n      --user=\"${USER_ID}\" \\\n      --user-domain=\"${USER_DOMAIN_ID}\" \\\n      --project-domain=\"${PROJECT_DOMAIN_ID}\" \\\n      --project=\"${USER_PROJECT_ID}\" \\\n      \"${USER_ROLE_ID}\"\n}\n\n# Manage user service role\nIFS=','\nfor SERVICE_OS_ROLE in ${SERVICE_OS_ROLES}; do\n  ks_assign_user_role\ndone\n\n# Manage user member role\n: ${MEMBER_OS_ROLE:=\"member\"}\nexport USER_ROLE_ID=$(openstack role create --or-show -f value -c id \\\n    \"${MEMBER_OS_ROLE}\");\nks_assign_user_role\n",
      "mysql-migrate-db.sh": "#!/bin/bash\n\n\n\n# This script will attempt to migrate your nova-api placement data to\n# a new placement database. Run it with --help for usage, and --mkconfig\n# to write a template config file to use.\n\n# Defaults we can guess\nDEFAULT_MIGRATE_TABLES=\"allocations placement_aggregates consumers inventories projects \"\nDEFAULT_MIGRATE_TABLES+=\"resource_classes resource_provider_aggregates resource_provider_traits \"\nDEFAULT_MIGRATE_TABLES+=\"resource_providers traits users \"\nMIGRATE_TABLES=${MIGRATE_TABLES:-$DEFAULT_MIGRATE_TABLES}\nPLACEMENT_DB_HOST=${PLACEMENT_DB_HOST:-localhost}\nPLACEMENT_DB=${PLACEMENT_DB:-placement}\nNOVA_API_DB_HOST=${NOVA_API_DB_HOST:-localhost}\nNOVA_API_DB=${NOVA_API_DB:-nova_api}\nTMPDIR=${TMPDIR:-/tmp}\nLAST_MYSQL_ERR=${TMPDIR}/migrate-mysql-db.err\nINITIAL_PLACEMENT_DB_VERSION=${INITIAL_DB_VERSION:-b4ed3a175331}\nME=$(basename \"$0\")\n\ndeclare -a ARGS\ndeclare -a OPTS\n\nfunction getflag() {\n    # Return true if --$flag is present on the command line\n    # Usage: getflag help -> 0\n    local flag=\"$1\"\n    for opt in ${OPTS[*]}; do\n        if [ \"$opt\" == \"--${flag}\" ]; then\n            return 0\n        fi\n    done\n    return 1\n}\n\nfunction parse_argv() {\n    # Parse command line arguments into positional arguments and\n    # option flags. Store each in $ARGS, $OPTS.\n    # Usage: parse_argv $*\n    for item in $*; do\n        if echo $item | grep -q -- '^--'; then\n            OPTS+=($item)\n        else\n            ARGS+=($item)\n        fi\n    done\n}\n\nfunction db_var() {\n    # Return an attribute of database config based on the symbolic\n    # name\n    # Usage: db_var PLACEMENT USER -> $PLACEMENT_USER\n    local db=\"$1\"\n    local var=\"$2\"\n\n    eval echo \"\\$${db}_${var}\"\n}\n\nfunction mysql_command() {\n    # Run a mysql command with the usual connection information taken\n    # from a symbolic configuration name\n    # Usage: mysql_command PLACEMENT [command] [args..] -> stdout\n    local whichdb=\"$1\"\n    shift\n    local command=mysql\n    if [ \"$2\" ]; then\n        command=${1:-mysql}\n        shift\n    fi\n    local db=$(db_var $whichdb DB)\n    local host=$(db_var $whichdb DB_HOST)\n    local user=$(db_var $whichdb USER)\n    local pass=$(db_var $whichdb PASS)\n\n    if [ \"$command\" = \"mysql\" ]; then\n        command=\"mysql --skip-column-names\"\n    fi\n\n    if [ ! -z \"$MARIADB_X509\" ]; then\n        local ca=/etc/mysql/certs/ca.crt\n        local cert=/etc/mysql/certs/tls.crt\n        local key=/etc/mysql/certs/tls.key\n        $command -h$host -u$user -p$pass $db --ssl-ca=$ca --ssl-cert=$cert --ssl-key=$key $* 2>$LAST_MYSQL_ERR\n    else\n        $command -h$host -u$user -p$pass $db $* 2>$LAST_MYSQL_ERR\n    fi\n}\n\nfunction show_error() {\n    # Prints the last error (if present) and removes the temporary\n    # file\n    if [ -f $LAST_MYSQL_ERR ]; then\n        cat $LAST_MYSQL_ERR\n        rm -f $LAST_MYSQL_ERR\n    fi\n}\n\nfunction check_db() {\n    # Check a DB to see if it's missing, present, filled with data\n    # Returns 0 if it is present with data, 1 if present but no data\n    # or 2 if not present (or unable to connect)\n    # Usage: check_db PLACEMENT -> 0\n    local whichdb=\"$1\"\n\n    local inv\n    local inv_count\n\n    if ! echo \"SELECT DATABASE()\" | mysql_command $whichdb >/dev/null 2>&1; then\n        echo \"Failed to connect to $whichdb database\"\n        show_error\n        return 2\n    fi\n\n    inv=$(echo \"SELECT COUNT(id) FROM inventories\" |\n              mysql_command $whichdb)\n    if [ $? -ne 0 ]; then\n        # No schema\n        return 1\n    fi\n\n    inv_count=$(echo $inv | tail -n1)\n    if [ $inv_count -gt 0 ]; then\n        # Data found\n        return 0\n    else\n        # No data found, but schema intact\n        return 1\n    fi\n}\n\nfunction check_cli() {\n    # Returns 0 if placement cli is installed and configured,\n    # 1 if it is not installed, or 2 if the access to the\n    # placement database fails\n    # Usage: check_cli -> 0\n    placement-manage --version > /dev/null 2>&1\n\n    if [ $? -ne 0 ]; then\n        # placement not installed\n        return 1\n    fi\n\n    placement-manage db version > /dev/null 2>&1\n\n    if [ $? -ne 0 ]; then\n        # DB connection fails\n        return 2\n    fi\n}\n\nfunction migrate_data() {\n    # Actually migrate data from a source to destination symbolic\n    # database. Returns 1 if failure, 0 otherwise.\n    # Usage: migrate_data NOVA_API PLACEMENT -> 0\n    local source=\"$1\"\n    local dest=\"$2\"\n    local dump_flags=\"$3\"\n    local tmpdir=$(mktemp -d migrate-db.XXXXXXXX)\n    local tmpfile=\"${tmpdir}/from-nova.sql\"\n\n    echo \"Dumping from $source to $tmpfile\"\n    mysql_command $source mysqldump $dump_flags $MIGRATE_TABLES > $tmpfile || {\n        echo 'Failed to dump source database:'\n        show_error\n        return 1\n    }\n    echo \"Loading to $dest from $tmpfile\"\n    mysql_command $dest < $tmpfile || {\n        echo 'Failed to load destination database:'\n        show_error\n        return 1\n    }\n}\n\nfunction sanity_check_env() {\n    # Check that we have everything we need to examine the situation\n    # and potentially do the migration. Loads values from the rcfile,\n    # if present. Returns 1 if a config was not found, 2 if that\n    # config is incomplete or 0 if everything is good.\n    # Usage: sanity_check_env $rcfile -> 0\n\n    RCFILE=\"${1:-migrate-db.rc}\"\n    if [ \"$RCFILE\" = '-' ]; then\n        # Don't require a file and assume everything is already\n        # set in the environment\n        true\n    elif [ ! -f \"$RCFILE\" ]; then\n        echo -n 'ERROR: Specify an RC file on the command line or create '\n        echo 'migrate-db.rc in the current directory'\n        echo\n        show_help\n    else\n        source $RCFILE\n    fi\n\n    required=\"NOVA_API_DB NOVA_API_USER NOVA_API_PASS PLACEMENT_DB PLACEMENT_USER PLACEMENT_PASS\"\n    for var in $required; do\n        value=$(eval echo \"\\$$var\")\n        if [ -z \"$value\" ]; then\n            echo \"A value for $var was not provided but is required\"\n            return 2\n        fi\n    done\n}\n\nfunction make_config() {\n    # Create or update a config file with defaults we know. Either use\n    # the default migrate-db.rc or the file specified on the command\n    # line.\n    RCFILE=\"${1:-migrate-db.rc}\"\n    if [ -f \"$RCFILE\" ]; then\n        source $RCFILE\n    fi\n\n    vars=\"NOVA_API_DB NOVA_API_USER NOVA_API_PASS NOVA_API_DB_HOST \"\n    vars+=\"PLACEMENT_DB PLACEMENT_USER PLACEMENT_PASS PLACEMENT_DB_HOST \"\n    vars+=\"MIGRATE_TABLES\"\n\n    (for var in $vars; do\n         val=$(eval echo \"\\$$var\")\n         echo \"${var}=\\\"$val\\\"\"\n     done) > $RCFILE\n\n    echo Wrote $(readlink -f $RCFILE)\n}\n\nfunction show_help() {\n    echo \"Usage: $ME [flags] [rcfile]\"\n    echo\n    echo \"Flags:\"\n    echo \"    --help: this text\"\n    echo \"    --migrate: actually do data migration\"\n    echo \"    --mkconfig: write/update config to \\$rcfile\"\n    echo \"    --skip-locks: don't use table locks for data migration\"\n    echo\n    echo \"Pass '-' as \\$rcfile if all config values are set in\"\n    echo \"the environment.\"\n    echo\n    echo \"Exit codes:\"\n    echo \"    0: Success\"\n    echo \"    1: Usage error\"\n    echo \"    2: Configuration missing or incomplete\"\n    echo \"    3: Migration already completed\"\n    echo \"    4: No data to migrate from nova (new deployment)\"\n    echo \"    5: Unable to connect to one or both databases\"\n    echo \"    6: Unable to execute placement's CLI commands\"\n    exit 0\n}\n\nparse_argv $*\n\nif getflag help; then\n    show_help\nfi\n\nif getflag mkconfig; then\n    make_config $ARGS\n    exit 0\nfi\n\n#\n# Actual migration logic starts here\n#\n\n# Sanity check that we have what we need or bail\nsanity_check_env $ARGS || exit $?\n\n# Check the state of each database we care about\ncheck_db NOVA_API\nnova_present=$?\ncheck_db PLACEMENT\nplacement_present=$?\ncheck_cli\nplacement_cli=$?\n\n# Try to come up with a good reason to refuse to migrate\nif [ $nova_present -eq 0 -a $placement_present -eq 0 ]; then\n    echo \"Migration has already completed. The placement database appears to have data.\"\n    exit 3\nelif [ $nova_present -eq 1 ]; then\n    echo \"No data present in nova database - nothing to migrate (new deployment?)\"\n    exit 4\nelif [ $nova_present -eq 2 ]; then\n    echo \"Unable to proceed without connection to nova database\"\n    exit 5\nelif [ $placement_present -eq 2 ]; then\n    echo \"Unable to proceed without connection to placement database\"\n    exit 5\nelif [ $placement_cli -eq 1 ]; then\n    echo \"Unable to proceed without placement installed\"\n    exit 6\nelif [ $placement_cli -eq 2 ]; then\n    echo \"The 'placement-manage db version' command fails\"\n    echo \"Is placement.conf configured to access the new database?\"\n    exit 6\nfi\n\n# If we get here, we expect to be able to migrate. Require them to opt into\n# actual migration before we do anything.\n\necho Nova database contains data, placement database does not. Okay to proceed with migration\n\nif getflag migrate $*; then\n    if getflag skip-locks $*; then\n        migrate_data NOVA_API PLACEMENT \"--skip-lock-tables --skip-add-locks\"\n    else\n        migrate_data NOVA_API PLACEMENT\n    fi\n    placement-manage db stamp $INITIAL_PLACEMENT_DB_VERSION\nelse\n    echo \"To actually migrate, run me with --migrate\"\nfi\n\nrm -f $LAST_MYSQL_ERR\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-placement-api",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-placement-db-init",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-placement-db-sync",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-placement-ks-endpoints",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-placement-ks-service",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-placement-ks-user",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-placement-api",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-placement-api"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "placement-api",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-placement-db-init",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-placement-db-init"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "placement-db-init",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-placement-db-sync",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-placement-db-sync"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "placement-db-sync",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-placement-ks-endpoints",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-placement-ks-endpoints"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "placement-ks-endpoints",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-placement-ks-service",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-placement-ks-service"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "placement-ks-service",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-placement-ks-user",
      "namespace": "Mcm9vuIUiboxHTa"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-placement-ks-user"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "placement-ks-user",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "placement"
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 80
        },
        {
          "name": "https",
          "port": 443
        }
      ],
      "selector": {
        "app": "ingress-api"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "placement-api"
    },
    "spec": {
      "ports": [
        {
          "name": "p-api",
          "port": 8778
        }
      ],
      "selector": {
        "release_group": "release-name",
        "application": "placement",
        "component": "api"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "placement-api",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      },
      "labels": {
        "release_group": "release-name",
        "application": "placement",
        "component": "api"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "release_group": "release-name",
          "application": "placement",
          "component": "api"
        }
      },
      "revisionHistoryLimit": 3,
      "strategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "maxUnavailable": 1,
          "maxSurge": 3
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "placement",
            "component": "api"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": "",
            "configmap-bin-hash": "e02f7c058935e0ef4e31c3ac0ed2614581c829a60ed175cc696f56bb90151244",
            "configmap-etc-hash": "aba9b4c07963072566486bb5130d4c7ace74c2b1e74a5e3f23910dc6d86553e2"
          }
        },
        "spec": {
          "serviceAccountName": "placement-api",
          "securityContext": {
            "runAsUser": 42424
          },
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "release_group",
                          "operator": "In",
                          "values": [
                            "release-name"
                          ]
                        },
                        {
                          "key": "application",
                          "operator": "In",
                          "values": [
                            "placement"
                          ]
                        },
                        {
                          "key": "component",
                          "operator": "In",
                          "values": [
                            "api"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 10
                }
              ]
            }
          },
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "terminationGracePeriodSeconds": 30,
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "placement-db-sync,placement-ks-service,placement-ks-user,placement-ks-endpoints"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": null
            }
          ],
          "containers": [
            {
              "name": "placement-api",
              "image": "docker.io/openstackhelm/placement:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "runAsUser": 11778,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "command": [
                "/tmp/placement-api.sh",
                "start"
              ],
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/tmp/placement-api.sh",
                      "stop"
                    ]
                  }
                }
              },
              "ports": [
                {
                  "name": "p-api",
                  "containerPort": 8778
                }
              ],
              "readinessProbe": {
                "tcpSocket": {
                  "port": 8778
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 10
              },
              "livenessProbe": {
                "tcpSocket": {
                  "port": 8778
                },
                "initialDelaySeconds": 50,
                "periodSeconds": 10
              },
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "wsgi-placement",
                  "mountPath": "/var/www/cgi-bin/placement"
                },
                {
                  "name": "placement-bin",
                  "mountPath": "/tmp/placement-api.sh",
                  "subPath": "placement-api.sh",
                  "readOnly": true
                },
                {
                  "name": "placement-etc",
                  "mountPath": "/etc/placement/placement.conf",
                  "subPath": "placement.conf",
                  "readOnly": true
                },
                {
                  "name": "placement-etc",
                  "mountPath": "/etc/placement/logging.conf",
                  "subPath": "logging.conf",
                  "readOnly": true
                },
                {
                  "name": "placement-etc",
                  "mountPath": "/etc/placement/policy.yaml",
                  "subPath": "policy.yaml",
                  "readOnly": true
                },
                {
                  "name": "placement-etc",
                  "mountPath": "/etc/apache2/conf-enabled/wsgi-placement.conf",
                  "subPath": "wsgi-placement.conf",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "wsgi-placement",
              "emptyDir": {}
            },
            {
              "name": "placement-bin",
              "configMap": {
                "name": "placement-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "placement-etc",
              "secret": {
                "secretName": "placement-etc",
                "defaultMode": 292
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "placement-db-init",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "spec": {
      "backoffLimit": 1000,
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "placement",
            "component": "db-init"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": ""
          }
        },
        "spec": {
          "serviceAccountName": "placement-db-init",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "placement-db-init-0",
              "image": "docker.io/openstackhelm/heat:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "ROOT_DB_CONNECTION",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-db-admin",
                      "key": "DB_CONNECTION"
                    }
                  }
                },
                {
                  "name": "OPENSTACK_CONFIG_FILE",
                  "value": "/etc/placement/placement.conf"
                },
                {
                  "name": "OPENSTACK_CONFIG_DB_SECTION",
                  "value": "placement_database"
                },
                {
                  "name": "OPENSTACK_CONFIG_DB_KEY",
                  "value": "connection"
                }
              ],
              "command": [
                "/tmp/db-init.py"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "db-init-sh",
                  "mountPath": "/tmp/db-init.py",
                  "subPath": "db-init.py",
                  "readOnly": true
                },
                {
                  "name": "etc-service",
                  "mountPath": "/etc/placement"
                },
                {
                  "name": "db-init-conf",
                  "mountPath": "/etc/placement/placement.conf",
                  "subPath": "placement.conf",
                  "readOnly": true
                },
                {
                  "name": "db-init-conf",
                  "mountPath": "/etc/placement/logging.conf",
                  "subPath": "logging.conf",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "db-init-sh",
              "configMap": {
                "name": "placement-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "etc-service",
              "emptyDir": {}
            },
            {
              "name": "db-init-conf",
              "secret": {
                "secretName": "placement-etc",
                "defaultMode": 292
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "placement-db-sync",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "spec": {
      "backoffLimit": 1000,
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "placement",
            "component": "db-sync"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": ""
          }
        },
        "spec": {
          "serviceAccountName": "placement-db-sync",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "placement-db-init"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "placement-db-sync",
              "image": "docker.io/openstackhelm/placement:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/db-sync.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "db-sync-sh",
                  "mountPath": "/tmp/db-sync.sh",
                  "subPath": "db-sync.sh",
                  "readOnly": true
                },
                {
                  "name": "etc-service",
                  "mountPath": "/etc/placement"
                },
                {
                  "name": "db-sync-conf",
                  "mountPath": "/etc/placement/placement.conf",
                  "subPath": "placement.conf",
                  "readOnly": true
                },
                {
                  "name": "db-sync-conf",
                  "mountPath": "/etc/placement/logging.conf",
                  "subPath": "logging.conf",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "db-sync-sh",
              "configMap": {
                "name": "placement-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "etc-service",
              "emptyDir": {}
            },
            {
              "name": "db-sync-conf",
              "secret": {
                "secretName": "placement-etc",
                "defaultMode": 292
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "placement-ks-endpoints",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "spec": {
      "backoffLimit": 1000,
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "placement",
            "component": "ks-endpoints"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": ""
          }
        },
        "spec": {
          "serviceAccountName": "placement-ks-endpoints",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:keystone-api"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "placement-ks-user,placement-ks-service"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "placement-ks-endpoints-admin",
              "image": "docker.io/openstackhelm/heat:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/ks-endpoints.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "ks-endpoints-sh",
                  "mountPath": "/tmp/ks-endpoints.sh",
                  "subPath": "ks-endpoints.sh",
                  "readOnly": true
                }
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "OS_SVC_ENDPOINT",
                  "value": "admin"
                },
                {
                  "name": "OS_SERVICE_NAME",
                  "value": "placement"
                },
                {
                  "name": "OS_SERVICE_TYPE",
                  "value": "placement"
                },
                {
                  "name": "OS_SERVICE_ENDPOINT",
                  "value": "http://placement-api.default.svc.cluster.local:8778/"
                }
              ]
            },
            {
              "name": "placement-ks-endpoints-internal",
              "image": "docker.io/openstackhelm/heat:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/ks-endpoints.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "ks-endpoints-sh",
                  "mountPath": "/tmp/ks-endpoints.sh",
                  "subPath": "ks-endpoints.sh",
                  "readOnly": true
                }
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "OS_SVC_ENDPOINT",
                  "value": "internal"
                },
                {
                  "name": "OS_SERVICE_NAME",
                  "value": "placement"
                },
                {
                  "name": "OS_SERVICE_TYPE",
                  "value": "placement"
                },
                {
                  "name": "OS_SERVICE_ENDPOINT",
                  "value": "http://placement-api.default.svc.cluster.local:8778/"
                }
              ]
            },
            {
              "name": "placement-ks-endpoints-public",
              "image": "docker.io/openstackhelm/heat:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/ks-endpoints.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "ks-endpoints-sh",
                  "mountPath": "/tmp/ks-endpoints.sh",
                  "subPath": "ks-endpoints.sh",
                  "readOnly": true
                }
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "OS_SVC_ENDPOINT",
                  "value": "public"
                },
                {
                  "name": "OS_SERVICE_NAME",
                  "value": "placement"
                },
                {
                  "name": "OS_SERVICE_TYPE",
                  "value": "placement"
                },
                {
                  "name": "OS_SERVICE_ENDPOINT",
                  "value": "http://placement.default.svc.cluster.local/"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "ks-endpoints-sh",
              "configMap": {
                "name": "placement-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "placement-ks-service",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "spec": {
      "backoffLimit": 1000,
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "placement",
            "component": "ks-service"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": ""
          }
        },
        "spec": {
          "serviceAccountName": "placement-ks-service",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:keystone-api"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "placement-ks-service-registration",
              "image": "docker.io/openstackhelm/heat:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/ks-service.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "ks-service-sh",
                  "mountPath": "/tmp/ks-service.sh",
                  "subPath": "ks-service.sh",
                  "readOnly": true
                }
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "OS_SERVICE_NAME",
                  "value": "placement"
                },
                {
                  "name": "OS_SERVICE_TYPE",
                  "value": "placement"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "ks-service-sh",
              "configMap": {
                "name": "placement-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "placement-ks-user",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "spec": {
      "backoffLimit": 1000,
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "placement",
            "component": "ks-user"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": ""
          }
        },
        "spec": {
          "serviceAccountName": "placement-ks-user",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:keystone-api"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "ks-user",
              "image": "docker.io/openstackhelm/heat:stein-ubuntu_bionic",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c",
                "/tmp/ks-user.sh"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "ks-user-sh",
                  "mountPath": "/tmp/ks-user.sh",
                  "subPath": "ks-user.sh",
                  "readOnly": true
                }
              ],
              "env": [
                {
                  "name": "OS_IDENTITY_API_VERSION",
                  "value": "3"
                },
                {
                  "name": "OS_AUTH_URL",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_AUTH_URL"
                    }
                  }
                },
                {
                  "name": "OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "OS_INTERFACE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_ENDPOINT_TYPE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_INTERFACE"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "OS_DEFAULT_DOMAIN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-admin",
                      "key": "OS_DEFAULT_DOMAIN"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_SERVICE_NAME",
                  "value": "placement"
                },
                {
                  "name": "SERVICE_OS_REGION_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-user",
                      "key": "OS_REGION_NAME"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_PROJECT_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-user",
                      "key": "OS_PROJECT_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_PROJECT_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-user",
                      "key": "OS_PROJECT_NAME"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_USER_DOMAIN_NAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-user",
                      "key": "OS_USER_DOMAIN_NAME"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-user",
                      "key": "OS_USERNAME"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "placement-keystone-user",
                      "key": "OS_PASSWORD"
                    }
                  }
                },
                {
                  "name": "SERVICE_OS_ROLES",
                  "value": "admin"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "ks-user-sh",
              "configMap": {
                "name": "placement-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1beta1",
    "kind": "Ingress",
    "metadata": {
      "name": "placement",
      "annotations": {
        "kubernetes.io/ingress.class": "nginx",
        "nginx.ingress.kubernetes.io/rewrite-target": "/"
      }
    },
    "spec": {
      "rules": [
        {
          "host": "placement",
          "http": {
            "paths": [
              {
                "path": "/",
                "backend": {
                  "serviceName": "placement-api",
                  "servicePort": "p-api"
                }
              }
            ]
          }
        },
        {
          "host": "placement.default",
          "http": {
            "paths": [
              {
                "path": "/",
                "backend": {
                  "serviceName": "placement-api",
                  "servicePort": "p-api"
                }
              }
            ]
          }
        },
        {
          "host": "placement.default.svc.cluster.local",
          "http": {
            "paths": [
              {
                "path": "/",
                "backend": {
                  "serviceName": "placement-api",
                  "servicePort": "p-api"
                }
              }
            ]
          }
        }
      ]
    }
  }
]