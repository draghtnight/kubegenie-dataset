[
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-dcae-pnda-bootstrap-inputs",
      "namespace": "kl1sCs"
    },
    "data": {
      "pnda_env.yaml": "# ================================================================================\n# Copyright (c) 2018 Cisco Systems. All rights reserved.\n# ================================================================================\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============LICENSE_END=========================================================\n\ninfrastructure :\n  # infrastructure used for pnda deployment\n  # Valid Values are:\n  #   - aws\n  #   - openstack\n  #   - existing-machines\n  #   - terraform\n  INFRASTRUCTURE_TYPE: openstack\n\n  # The user name to use when logging into the  instances\n  # For aws target user-name allowed :\n  #            Target         AWS         Openstack\n  #\n  #   Distro   Redhat:       ec2-user     cloud-user\n  #            CentOS:       centos       cloud-user\n  OS_USER: centos\n\n  # CIDR specifying the address range for the network containing all PNDA instances\n  networkCidr: 10.0.0.0/16\n\nopenstack_parameters:\n  # KEYSTONE_USER: Username for the openstack clients to use\n  KEYSTONE_USER: onap\n\n  # KEYSTONE_PASSWORD: Password for the openstack clients to use\n  KEYSTONE_PASSWORD: onap\n\n  # KEYSTONE_TENANT: Name of the tenant / project in the openstack environment. The\n  # PNDA stack will be created in this project.\n  KEYSTONE_TENANT: onap\n\n  # KEYSTONE_AUTH_URL: Keystone authentication URL. The Openstack console provides this\n  # under the Access & Security section.\n  KEYSTONE_AUTH_URL: http://10.60.18.18:5000/v2.0/\n\n  # KEYSTONE_AUTH_VERSION: Keystone authentication version. The Openstack console provides this\n  # under the Access & Security section.\n  KEYSTONE_AUTH_VERSION: '2'\n\n  # KEYSTONE_REGION_NAME: Keystone region. The Openstack console provides this\n  # under the Access & Security section.\n  KEYSTONE_REGION_NAME: regionOne\n\n  # imageId: Base image to use for the created instances. It should be created by\n  # following the guide in https://github.com/pndaproject/pnda-dib-elements\n  #\n  imageId: id_of_image\n\n  # CIDR specifying the address range that may access the created PNDA instances\n  whitelistSshAccess: 0.0.0.0/0\n\n  # UUID of the public network in openstack to use\n  externalPublicNetworkId: id_of_public_network\n\n  useExistingNetwork: true\n\n  existingNetworkId: id_of_onap_network\n\n  existingSubnetId: id_of_onap_subnet\n\n  # CIDR specifying the address range for the public subnet (bastion access)\n  publicSubnetCidr: 10.0.0.0/24\n\nplatform_salt:\n  # Use either PLATFORM_GIT_REPO_URI + PLATFORM_GIT_BRANCH or PLATFORM_SALT_LOCAL\n  PLATFORM_SALT_LOCAL: /platform-salt\n\npnda_application_repo:\n  # Type of storage to use for PNDA application packages\n  #   s3     - AWS S3. Also set PNDA_APPS_CONTAINER, PNDA_APPS_FOLDER, PNDA_APPS_REGION, PNDA_APPS_ACCESS_KEY_ID, PNDA_APPS_SECRET_ACCESS_KEY\n  #   sshfs  - standard file system. Also set PR_FS_LOCATION_PATH, PR_SSHFS_USER, PR_SSHFS_HOST, PR_SSHFS_PATH and PR_SSHFS_KEY\n  #   local  - local filesystem on the package repository service server. Also set PR_FS_LOCATION_PATH.\n  #   swift  - Openstack swift. Also set PNDA_APPS_CONTAINER and PNDA_APPS_FOLDER\n  PR_FS_TYPE: local\n\n  # S3 container to use for PNDA application packages\n  PNDA_APPS_CONTAINER: \n\n  # Name of folder within PNDA_APPS_CONTAINER that contains the PNDA application packages\n  PNDA_APPS_FOLDER: \n\n  # AWS region that contains the PNDA_APPS_CONTAINER bucket\n  PNDA_APPS_REGION: \n\n  # API key for s3 access to PNDA_APPS_CONTAINER. These keys are stored on the cloud instances so should be restricted\n  # only allow access to the PNDA_APPS_CONTAINER bucket\n  PNDA_APPS_ACCESS_KEY_ID: \n  PNDA_APPS_SECRET_ACCESS_KEY: \n\n  # Path on file system if PR_FS_TYPE is 'local' or 'sshfs'\n  PR_FS_LOCATION_PATH: /opt/pnda/packages<nil>\n\n  # SSH accessed file system to use for PNDA application packages\n  PR_SSHFS_USER: centos\n  PR_SSHFS_HOST: 127.0.0.1\n  PR_SSHFS_PATH: /mnt/packages\n  PR_SSHFS_KEY: key.pem\n\npnda_data_archive:\n  # S3 container to use for archiving PNDA datasets\n  PNDA_ARCHIVE_CONTAINER: pnda-archive\n\n  # AWS region that contains the PNDA_ARCHIVE_CONTAINER bucket\n  PNDA_ARCHIVE_REGION: eu-west-1\n\n  # API key for s3 access to PNDA_ARCHIVE_CONTAINER. These keys are stored on the cloud instances so should be restricted\n  # only allow access to the PNDA_ARCHIVE_CONTAINER bucket\n  PNDA_ARCHIVE_ACCESS_KEY_ID: xxxx\n  PNDA_ARCHIVE_SECRET_ACCESS_KEY: xxxx\n\nntp:\n  # Optional ntp servers. Use this if the standard NTP servers on the Internet cannot be reached\n  # and a local NTP server has been configured. PNDA will not work without NTP.\n  # example format: 'xxx.ntp.org'\n  #For REJECT_OUTBOUND=\"YES\" then NTP server/s must.\n  NTP_SERVERS:\n    - pool.ntp.org\n\ndns:\n  # External DNS servers list\n  nameServers:\n    - 8.8.8.8\n\nmirrors:\n  # Mirror of resources required for provisioning PNDA, see PNDA guide for instructions on how to set this up\n  PNDA_MIRROR:\n\nhadoop:\n  # Hadoop distribution to install\n  # Valid values are:\n  # - HDP\n  # - CDH\n  HADOOP_DISTRO: HDP\n  # Spark version to enable for oozie (HDP only)\n  # Valid values are:\n  # - 1\n  # - 2\n  OOZIE_SPARK_VERSION: 1\n\nconnectivity:\n  # The IP address of the client that created PNDA\n  CLIENT_IP: 0.0.0.0/0\n  # Add online repositories for yum, apt-get, pip, etc alongside PNDA mirror\n  ADD_ONLINE_REPOS: \"YES\"\n  # RPM Extras repository to enable when ADD_ONLINE_REPOS=YES\n  RPM_EXTRAS_REPO_NAME: rhui-REGION-rhel-server-optional\n  # RPM Optional repository to enable when ADD_ONLINE_REPOS=YES\n  RPM_OPTIONAL_REPO_NAME: rhui-REGION-rhel-server-extras\n\nnetwork_interfaces:\n  PNDA_INTERNAL_NETWORK: eth0\n  PNDA_INGEST_NETWORK: eth0\n\ncli:\n  # Maximum number of outbound connections that the CLI will attempt to open at once\n  # Consider increasing this when creating clusters with more than 100 nodes to speed\n  # up PNDA creation time.\n  MAX_SIMULTANEOUS_OUTBOUND_CONNECTIONS: 100\n\nsecurity:\n  # The path were to find the security material (certificate/key).\n  # The directory should be structured as defined in this' repo's directory structure with the same name.\n  # The security material should conform to the guidelines defined in the README.md file in\n  # the containing sub directory.\n  SECURITY_MATERIAL_PATH: ./platform-certificates/\n\n  # Address of LDAP server\n  # All instances will have PAM configured to authenticate with this LDAP server if set\n  # Leave blank to disable LDAP-PAM integration\n  LDAP_SERVER: ''\n\n  # Base DN for LDAP server to use when enabling client PAM integration with LDAP\n  LDAP_BASE_DN: dc=nodomain\n\nfeatures:\n  # Include experimental features.\n  # Set to \"NO\", omit setting or omit features section entirely to turn off experimental features\n  EXPERIMENTAL_FEATURES: \"NO\"\n\ndomain:\n  # Top-level domain\n  TOP_LEVEL_DOMAIN: pnda.local\n\n  # Second-level domain\n  SECOND_LEVEL_DOMAIN: dc1\n\ndataset_compaction:\n  # Enable/Disable compaction on datasets.\n  # \"YES\" to enable.\n  # \"NO\" to disable.\n  COMPACTION: \"NO\"\n  # If compaction is enabled, PATTERN sets the frequency of compaction.\n  # H - hourly compaction.\n  # d - daily compaction.\n  # M - monthly compaction.\n  # Y - yearly compaction.\n  PATTERN: d\n\ndatanode:\n  # DATANODE_VOLUME_COUNT sets the number of data volumes on each hadoop datanode\n  DATA_VOLUME_COUNT: 1\n  # DEVICE_ROOT sets the disk device root name\n  DEVICE_ROOT: xvdb\n\nkafka:\n  # DATA_DIRS sets the data dirs on kafka node\n  KAFKA_DATA_DIRS:\n    - /var/kafka-logs\n  # DEVICE_ROOT sets the disk device root name\n  KAFKA_DEVICE_ROOT: xvdb\n\ngeneric:\n  #GENERIC_DEVICE_ROOT sets the disk device root name for generic instances.\n  GENERIC_DEVICE_ROOT: xvdb\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-dcae-pnda-bootstrap-scripts",
      "namespace": "kl1sCs"
    },
    "data": {
      "bootstrap.sh": "#!/bin/sh\n# ================================================================================\n# Copyright (c) 2018 Cisco Systems. All rights reserved.\n# ================================================================================\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ============LICENSE_END=========================================================\n\n# Install PNDA in Openstack with Heat templates\n# Expects:\n#   Input files for components to be installed in /inputs\n\nif [ \"zfalse\" != \"ztrue\" ]\nthen\n   echo\n   echo \"PNDA bootstrap is disabled - skipping pnda-cli launch\"\n   echo\n   exit 0\nfi\n\nset -ex\n\nCLUSTER_PREFIX=\"release-default-pnda\"\nDATANODES=\"2\"\nKAFKANODES=\"1\"\nVERSION=\"release/5.0\"\nKEYPAIR_NAME=\"pnda\"\nKEYFILE=\"$KEYPAIR_NAME.pem\"\n\ncd /pnda-cli\n\ncp /inputs/pnda_env.yaml .\ncp /secrets/pnda.pem $KEYFILE\nchmod 600 $KEYFILE\n\n(cd tools && ./gen-certs.py)\n\nKUBE_API=\"https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT_HTTPS/api/v1\"\nKUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\n\nfor i in 1 2 3 4 5 6 7 8 9\ndo\n  MIRROR_IP=$(curl -s $KUBE_API/namespaces/default/pods \\\n            --header \"Authorization: Bearer $KUBE_TOKEN\" \\\n            --insecure | jq -r '.items[].status | select(.containerStatuses != null) | select(.containerStatuses[].ready and .containerStatuses[].name==\"dcae-pnda-mirror\") | .hostIP')\n  MIRROR_PORT=$(curl -s $KUBE_API/namespaces/default/services/dcae-pnda-mirror \\\n              --header \"Authorization: Bearer $KUBE_TOKEN\" \\\n              --insecure | jq -r '.spec.ports[] | select(.name==\"dcae-pnda-mirror\") | .nodePort')\n\n  if [ \"x${MIRROR_IP}\" != \"xnull\" -a \"x${MIRROR_PORT}\" != \"xnull\" ]; then\n    PNDA_MIRROR=\"http://$MIRROR_IP:$MIRROR_PORT\"\n    break\n  fi\n  sleep 5\ndone\n\n[ -z \"${PNDA_MIRROR}\" ] && { echo \"Unable to get PNDA mirror IP:PORT\"; exit 1; }\n\nsed -i -e 's?CLIENT_IP/32?CLIENT_IP?' bootstrap-scripts/package-install.sh\n\n./cli/pnda-cli.py create -e $CLUSTER_PREFIX -f pico -n $DATANODES -k $KAFKANODES \\\n                  -b $VERSION -s $KEYPAIR_NAME --set \"mirrors.PNDA_MIRROR=$PNDA_MIRROR\"\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-dcae-pnda-bootstrap-secrets",
      "namespace": "kl1sCs"
    },
    "data": {
      "pnda.pem": "replace-me\n"
    }
  },
  {
    "kind": "PersistentVolume",
    "apiVersion": "v1",
    "metadata": {
      "name": "release-dcae-pnda-bootstrap",
      "namespace": "default",
      "labels": {
        "app": "dcae-pnda-bootstrap",
        "chart": "dcae-pnda-bootstrap-6.0.0",
        "release": "release",
        "heritage": "Helm",
        "name": "release-dcae-pnda-bootstrap"
      }
    },
    "spec": {
      "storageClassName": "release-dcae-pnda-bootstrap-data",
      "capacity": {
        "storage": "10Mi"
      },
      "accessModes": [
        "ReadWriteOnce"
      ],
      "persistentVolumeReclaimPolicy": "Retain",
      "hostPath": {
        "path": "/dockerdata-nfs/release/dcae-pnda-bootstrap/logs"
      }
    }
  },
  {
    "kind": "PersistentVolumeClaim",
    "apiVersion": "v1",
    "metadata": {
      "name": "release-dcae-pnda-bootstrap",
      "namespace": "default",
      "labels": {
        "app": "dcae-pnda-bootstrap",
        "chart": "dcae-pnda-bootstrap-6.0.0",
        "release": "release",
        "heritage": "Helm"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "storageClassName": "release-dcae-pnda-bootstrap-data",
      "resources": {
        "requests": {
          "storage": "10Mi"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "dcae-pnda-mirror",
      "namespace": "kl1sCs",
      "labels": {
        "app": "dcae-pnda-mirror",
        "chart": "dcae-pnda-mirror-6.0.0",
        "release": "release",
        "heritage": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "NodePort",
      "ports": [
        {
          "port": 80,
          "nodePort": 30400,
          "name": "dcae-pnda-mirror"
        }
      ],
      "selector": {
        "app": "dcae-pnda-mirror",
        "release": "release"
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-dcae-pnda-mirror",
      "namespace": "kl1sCs",
      "labels": {
        "app": "dcae-pnda-mirror",
        "chart": "dcae-pnda-mirror-6.0.0",
        "release": "release",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "dcae-pnda-mirror",
            "release": "release"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "dcae-pnda-mirror",
              "image": "pndareg.ctao6.net/onap/org.onap.dcaegen2.deployments.pnda-mirror-container:6.0.0",
              "imagePullPolicy": "Always",
              "ports": [
                {
                  "containerPort": 80
                }
              ],
              "livenessProbe": {
                "tcpSocket": {
                  "port": 80
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 10
              },
              "readinessProbe": {
                "tcpSocket": {
                  "port": 80
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 10
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-dcae-pnda-bootstrap",
      "namespace": "kl1sCs",
      "labels": {
        "app": "dcae-pnda-bootstrap",
        "chart": "dcae-pnda-bootstrap-6.0.0",
        "release": "release",
        "heritage": "Helm"
      }
    },
    "spec": {
      "completions": 1,
      "backoffLimit": 0,
      "template": {
        "metadata": {
          "labels": {
            "app": "dcae-pnda-bootstrap",
            "release": "release"
          }
        },
        "spec": {
          "restartPolicy": "Never",
          "initContainers": [
            {
              "name": "dcae-pnda-bootstrap-readiness",
              "image": "oomk8s/readiness-check:2.0.0",
              "imagePullPolicy": "Always",
              "command": [
                "/root/ready.py"
              ],
              "args": [
                "--container-name",
                "dcae-pnda-mirror",
                "-t",
                "75"
              ],
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "dcae-pnda-bootstrap",
              "image": "pndareg.ctao6.net/onap/org.onap.dcaegen2.deployments.pnda-bootstrap-container:6.0.0",
              "imagePullPolicy": "Always",
              "volumeMounts": [
                {
                  "mountPath": "/inputs",
                  "name": "release-dcae-pnda-bootstrap-inputs"
                },
                {
                  "mountPath": "/scripts",
                  "name": "release-dcae-pnda-bootstrap-scripts"
                },
                {
                  "mountPath": "/secrets",
                  "name": "release-dcae-pnda-bootstrap-secrets"
                },
                {
                  "mountPath": "/pnda-cli/cli/logs",
                  "name": "release-dcae-pnda-bootstrap-logs"
                }
              ],
              "command": [
                "/scripts/bootstrap.sh"
              ]
            }
          ],
          "volumes": [
            {
              "name": "release-dcae-pnda-bootstrap-inputs",
              "configMap": {
                "name": "release-dcae-pnda-bootstrap-inputs"
              }
            },
            {
              "name": "release-dcae-pnda-bootstrap-scripts",
              "configMap": {
                "name": "release-dcae-pnda-bootstrap-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "release-dcae-pnda-bootstrap-secrets",
              "configMap": {
                "name": "release-dcae-pnda-bootstrap-secrets"
              }
            },
            {
              "name": "release-dcae-pnda-bootstrap-logs",
              "persistentVolumeClaim": {
                "claimName": "release-dcae-pnda-bootstrap"
              }
            }
          ]
        }
      }
    }
  }
]