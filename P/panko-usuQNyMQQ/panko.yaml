apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: panko-api
spec:
  minAvailable: 0
  selector:
    matchLabels:
      release_group: release-name
      application: panko
      component: api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: panko-events-cleaner
  namespace: usuQNyMQQ
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: panko-api
  namespace: usuQNyMQQ
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: panko-db-init
  namespace: usuQNyMQQ
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: panko-db-sync
  namespace: usuQNyMQQ
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: panko-ks-endpoints
  namespace: usuQNyMQQ
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: panko-ks-service
  namespace: usuQNyMQQ
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: panko-ks-user
  namespace: usuQNyMQQ
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-test
  namespace: usuQNyMQQ
---
apiVersion: v1
kind: Secret
metadata:
  name: panko-etc
type: Opaque
data:
  rally_tests.yaml: Q2VpbG9tZXRlckV2ZW50cy5jcmVhdGVfdXNlcl9hbmRfZ2V0X2V2ZW50OgotIHJ1bm5lcjoKICAgIGNvbmN1cnJlbmN5OiAxCiAgICB0aW1lczogMQogICAgdHlwZTogY29uc3RhbnQKICBzbGE6CiAgICBmYWlsdXJlX3JhdGU6CiAgICAgIG1heDogMApDZWlsb21ldGVyRXZlbnRzLmNyZWF0ZV91c2VyX2FuZF9saXN0X2V2ZW50X3R5cGVzOgotIHJ1bm5lcjoKICAgIGNvbmN1cnJlbmN5OiAxCiAgICB0aW1lczogMQogICAgdHlwZTogY29uc3RhbnQKICBzbGE6CiAgICBmYWlsdXJlX3JhdGU6CiAgICAgIG1heDogMApDZWlsb21ldGVyRXZlbnRzLmNyZWF0ZV91c2VyX2FuZF9saXN0X2V2ZW50czoKLSBydW5uZXI6CiAgICBjb25jdXJyZW5jeTogMQogICAgdGltZXM6IDEKICAgIHR5cGU6IGNvbnN0YW50CiAgc2xhOgogICAgZmFpbHVyZV9yYXRlOgogICAgICBtYXg6IDA=
  panko.conf: W0RFRkFVTFRdCmRlYnVnID0gZmFsc2UKbG9nX2NvbmZpZ19hcHBlbmQgPSAvZXRjL3BhbmtvL2xvZ2dpbmcuY29uZgpbZGF0YWJhc2VdCmNvbm5lY3Rpb24gPSBteXNxbCtweW15c3FsOi8vcGFua286cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvcGFua28KZXZlbnRfdGltZV90b19saXZlID0gODY0MDAKbWF4X3JldHJpZXMgPSAtMQpba2V5c3RvbmVfYXV0aHRva2VuXQphdXRoX3R5cGUgPSBwYXNzd29yZAphdXRoX3VyaSA9IGh0dHA6Ly9rZXlzdG9uZS1hcGkuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDo1MDAwL3YzCmF1dGhfdXJsID0gaHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjMKYXV0aF92ZXJzaW9uID0gdjMKbWVtY2FjaGVfc2VjcmV0X2tleSA9IDdEdWg3NmdqbHpVM1ZNdXA2ckFkRXEzbGtsMVZaMDhPdEYxRVo3SVJpRnExV0JVc0hrM1Qxc2M0bHVJSTQ5T2cKbWVtY2FjaGVfc2VjdXJpdHlfc3RyYXRlZ3kgPSBFTkNSWVBUCm1lbWNhY2hlZF9zZXJ2ZXJzID0gbWVtY2FjaGVkLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6MTEyMTEKcGFzc3dvcmQgPSBwYXNzd29yZApwcm9qZWN0X2RvbWFpbl9uYW1lID0gc2VydmljZQpwcm9qZWN0X25hbWUgPSBzZXJ2aWNlCnJlZ2lvbl9uYW1lID0gUmVnaW9uT25lCnVzZXJfZG9tYWluX25hbWUgPSBzZXJ2aWNlCnVzZXJuYW1lID0gcGFua28KW29zbG9fbWlkZGxld2FyZV0KZW5hYmxlX3Byb3h5X2hlYWRlcnNfcGFyc2luZyA9IHRydWUK
  logging.conf: W2Zvcm1hdHRlcl9jb250ZXh0XQpjbGFzcyA9IG9zbG9fbG9nLmZvcm1hdHRlcnMuQ29udGV4dEZvcm1hdHRlcgpbZm9ybWF0dGVyX2RlZmF1bHRdCmZvcm1hdCA9ICUobWVzc2FnZSlzCltmb3JtYXR0ZXJzXQprZXlzID0gY29udGV4dCxkZWZhdWx0CltoYW5kbGVyX251bGxdCmFyZ3MgPSAoKQpjbGFzcyA9IGxvZ2dpbmcuTnVsbEhhbmRsZXIKZm9ybWF0dGVyID0gZGVmYXVsdApbaGFuZGxlcl9zdGRlcnJdCmFyZ3MgPSAoc3lzLnN0ZGVyciwpCmNsYXNzID0gU3RyZWFtSGFuZGxlcgpmb3JtYXR0ZXIgPSBjb250ZXh0CltoYW5kbGVyX3N0ZG91dF0KYXJncyA9IChzeXMuc3Rkb3V0LCkKY2xhc3MgPSBTdHJlYW1IYW5kbGVyCmZvcm1hdHRlciA9IGNvbnRleHQKW2hhbmRsZXJzXQprZXlzID0gc3Rkb3V0LHN0ZGVycixudWxsCltsb2dnZXJfYW1xcF0KaGFuZGxlcnMgPSBzdGRlcnIKbGV2ZWwgPSBXQVJOSU5HCnF1YWxuYW1lID0gYW1xcApbbG9nZ2VyX2FtcXBsaWJdCmhhbmRsZXJzID0gc3RkZXJyCmxldmVsID0gV0FSTklORwpxdWFsbmFtZSA9IGFtcXBsaWIKW2xvZ2dlcl9ib3RvXQpoYW5kbGVycyA9IHN0ZGVycgpsZXZlbCA9IFdBUk5JTkcKcXVhbG5hbWUgPSBib3RvCltsb2dnZXJfZXZlbnRsZXR3c2dpXQpoYW5kbGVycyA9IHN0ZGVycgpsZXZlbCA9IFdBUk5JTkcKcXVhbG5hbWUgPSBldmVudGxldC53c2dpLnNlcnZlcgpbbG9nZ2VyX3BhbmtvXQpoYW5kbGVycyA9IHN0ZG91dApsZXZlbCA9IElORk8KcXVhbG5hbWUgPSBwYW5rbwpbbG9nZ2VyX3Jvb3RdCmhhbmRsZXJzID0gbnVsbApsZXZlbCA9IFdBUk5JTkcKW2xvZ2dlcl9zcWxhbGNoZW15XQpoYW5kbGVycyA9IHN0ZGVycgpsZXZlbCA9IFdBUk5JTkcKcXVhbG5hbWUgPSBzcWxhbGNoZW15Cltsb2dnZXJzXQprZXlzID0gcm9vdCxwYW5rbwo=
  api_paste.ini: W2FwcDphcGktc2VydmVyXQpwYXN0ZS5hcHBfZmFjdG9yeSA9IHBhbmtvLmFwaS5hcHA6YXBwX2ZhY3RvcnkKW2ZpbHRlcjphdWRpdF0KYXVkaXRfbWFwX2ZpbGUgPSAvZXRjL3BhbmtvL2FwaV9hdWRpdF9tYXAuY29uZgpwYXN0ZS5maWx0ZXJfZmFjdG9yeSA9IGtleXN0b25lbWlkZGxld2FyZS5hdWRpdDpmaWx0ZXJfZmFjdG9yeQpbZmlsdGVyOmF1dGh0b2tlbl0Kb3Nsb19jb25maWdfcHJvamVjdCA9IHBhbmtvCnBhc3RlLmZpbHRlcl9mYWN0b3J5ID0ga2V5c3RvbmVtaWRkbGV3YXJlLmF1dGhfdG9rZW46ZmlsdGVyX2ZhY3RvcnkKW2ZpbHRlcjpjb3JzXQpvc2xvX2NvbmZpZ19wcm9qZWN0ID0gcGFua28KcGFzdGUuZmlsdGVyX2ZhY3RvcnkgPSBvc2xvX21pZGRsZXdhcmUuY29yczpmaWx0ZXJfZmFjdG9yeQpbZmlsdGVyOmh0dHBfcHJveHlfdG9fd3NnaV0Kb3Nsb19jb25maWdfcHJvamVjdCA9IHBhbmtvCnBhc3RlLmZpbHRlcl9mYWN0b3J5ID0gb3Nsb19taWRkbGV3YXJlLmh0dHBfcHJveHlfdG9fd3NnaTpIVFRQUHJveHlUb1dTR0kuZmFjdG9yeQpbZmlsdGVyOnJlcXVlc3RfaWRdCnBhc3RlLmZpbHRlcl9mYWN0b3J5ID0gb3Nsb19taWRkbGV3YXJlOlJlcXVlc3RJZC5mYWN0b3J5CltwaXBlbGluZTptYWluXQpwaXBlbGluZSA9IGNvcnMgaHR0cF9wcm94eV90b193c2dpIHJlcXVlc3RfaWQgYXV0aHRva2VuIGF1ZGl0IGFwaS1zZXJ2ZXIK
  policy.json: eyJjb250ZXh0X2lzX2FkbWluIjoicm9sZTphZG1pbiIsInNlZ3JlZ2F0aW9uIjoicnVsZTpjb250ZXh0X2lzX2FkbWluIiwidGVsZW1ldHJ5OmV2ZW50czppbmRleCI6IiIsInRlbGVtZXRyeTpldmVudHM6c2hvdyI6IiJ9
  api_audit_map.conf: W0RFRkFVTFRdCnRhcmdldF9lbmRwb2ludF90eXBlID0gZXZlbnQKW3BhdGhfa2V5d29yZHNdCmNhcGFiaWxpdGllcyA9IE5vbmUKZXZlbnRfdHlwZXMgPSBldmVudF90eXBlCmV2ZW50cyA9IG1lc3NhZ2VfaWQKdHJhaXRzID0gZXZlbnRfdHlwZQpbc2VydmljZV9lbmRwb2ludHNdCmV2ZW50ID0gc2VydmljZS9ldmVudAo=
  wsgi-panko.conf: TGlzdGVuIDAuMC4wLjA6ODk3NwoKTG9nRm9ybWF0ICIlaCAlbCAldSAldCBcIiVyXCIgJT5zICViIFwiJXtSZWZlcmVyfWlcIiBcIiV7VXNlci1BZ2VudH1pXCIiIGNvbWJpbmVkCkxvZ0Zvcm1hdCAiJXtYLUZvcndhcmRlZC1Gb3J9aSAlbCAldSAldCBcIiVyXCIgJT5zICViIFwiJXtSZWZlcmVyfWlcIiBcIiV7VXNlci1BZ2VudH1pXCIiIHByb3h5CgpTZXRFbnZJZiBYLUZvcndhcmRlZC1Gb3IgIl4uKlwuLipcLi4qXC4uKiIgZm9yd2FyZGVkCkN1c3RvbUxvZyAvZGV2L3N0ZG91dCBjb21iaW5lZCBlbnY9IWZvcndhcmRlZApDdXN0b21Mb2cgL2Rldi9zdGRvdXQgcHJveHkgZW52PWZvcndhcmRlZAoKPFZpcnR1YWxIb3N0ICo6ODk3Nz4KICAgIFdTR0lEYWVtb25Qcm9jZXNzIHBhbmtvIHByb2Nlc3Nlcz0yIHRocmVhZHM9MSB1c2VyPXBhbmtvIGdyb3VwPXBhbmtvIGRpc3BsYXktbmFtZT0le0dST1VQfQogICAgV1NHSVByb2Nlc3NHcm91cCBwYW5rbwogICAgV1NHSVNjcmlwdEFsaWFzIC8gL3Zhci93d3cvY2dpLWJpbi9wYW5rby9wYW5rby1hcGkKICAgIFdTR0lBcHBsaWNhdGlvbkdyb3VwICV7R0xPQkFMfQogICAgPElmVmVyc2lvbiA+PSAyLjQ+CiAgICAgIEVycm9yTG9nRm9ybWF0ICIle2N1fXQgJU0iCiAgICA8L0lmVmVyc2lvbj4KCiAgICBFcnJvckxvZyAvZGV2L3N0ZG91dAogICAgU2V0RW52SWYgWC1Gb3J3YXJkZWQtRm9yICJeLipcLi4qXC4uKlwuLioiIGZvcndhcmRlZAogICAgQ3VzdG9tTG9nIC9kZXYvc3Rkb3V0IGNvbWJpbmVkIGVudj0hZm9yd2FyZGVkCiAgICBDdXN0b21Mb2cgL2Rldi9zdGRvdXQgcHJveHkgZW52PWZvcndhcmRlZAo8L1ZpcnR1YWxIb3N0Pg==
---
apiVersion: v1
kind: Secret
metadata:
  name: panko-db-admin
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvcGFua28=
---
apiVersion: v1
kind: Secret
metadata:
  name: panko-db-user
type: Opaque
data:
  DB_CONNECTION: bXlzcWwrcHlteXNxbDovL3BhbmtvOnBhc3N3b3JkQG1hcmlhZGIuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDozMzA2L3Bhbmtv
---
apiVersion: v1
kind: Secret
metadata:
  name: panko-keystone-admin
type: Opaque
data:
  OS_AUTH_URL: aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=
  OS_REGION_NAME: UmVnaW9uT25l
  OS_INTERFACE: aW50ZXJuYWw=
  OS_PROJECT_DOMAIN_NAME: ZGVmYXVsdA==
  OS_PROJECT_NAME: YWRtaW4=
  OS_USER_DOMAIN_NAME: ZGVmYXVsdA==
  OS_USERNAME: YWRtaW4=
  OS_PASSWORD: cGFzc3dvcmQ=
  OS_DEFAULT_DOMAIN: ZGVmYXVsdA==
---
apiVersion: v1
kind: Secret
metadata:
  name: panko-keystone-user
type: Opaque
data:
  OS_AUTH_URL: aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=
  OS_REGION_NAME: UmVnaW9uT25l
  OS_INTERFACE: aW50ZXJuYWw=
  OS_PROJECT_DOMAIN_NAME: c2VydmljZQ==
  OS_PROJECT_NAME: c2VydmljZQ==
  OS_USER_DOMAIN_NAME: c2VydmljZQ==
  OS_USERNAME: cGFua28=
  OS_PASSWORD: cGFzc3dvcmQ=
  OS_DEFAULT_DOMAIN: ZGVmYXVsdA==
---
apiVersion: v1
kind: Secret
metadata:
  name: panko-keystone-test
type: Opaque
data:
  OS_AUTH_URL: aHR0cDovL2tleXN0b25lLWFwaS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAvdjM=
  OS_REGION_NAME: UmVnaW9uT25l
  OS_INTERFACE: aW50ZXJuYWw=
  OS_PROJECT_DOMAIN_NAME: c2VydmljZQ==
  OS_PROJECT_NAME: dGVzdA==
  OS_USER_DOMAIN_NAME: c2VydmljZQ==
  OS_USERNAME: dGVzdA==
  OS_PASSWORD: cGFzc3dvcmQ=
  OS_DEFAULT_DOMAIN: ZGVmYXVsdA==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: panko-bin
data:
  rally-test.sh: "#!/bin/bash\nset -ex\n\n: \"${RALLY_ENV_NAME:=\"openstack-helm\"}\"\n: \"${OS_INTERFACE:=\"public\"}\"\n: \"${RALLY_CLEANUP:=\"true\"}\"\n\nif [ \"x$RALLY_CLEANUP\" == \"xtrue\" ]; then\n  function rally_cleanup {\n    openstack user delete \\\n        --domain=\"${SERVICE_OS_USER_DOMAIN_NAME}\" \\\n        \"${SERVICE_OS_USERNAME}\"\n    \n  }\n  trap rally_cleanup EXIT\nfi\n\nfunction create_or_update_db () {\n  revisionResults=$(rally db revision)\n  if [ $revisionResults = \"None\"  ]\n  then\n    rally db create\n  else\n    rally db upgrade\n  fi\n}\n\ncreate_or_update_db\n\ncat > /tmp/rally-config.json << EOF\n{\n    \"openstack\": {\n        \"auth_url\": \"${OS_AUTH_URL}\",\n        \"region_name\": \"${OS_REGION_NAME}\",\n        \"endpoint_type\": \"${OS_INTERFACE}\",\n        \"admin\": {\n            \"username\": \"${OS_USERNAME}\",\n            \"password\": \"${OS_PASSWORD}\",\n            \"user_domain_name\": \"${OS_USER_DOMAIN_NAME}\",\n            \"project_name\": \"${OS_PROJECT_NAME}\",\n            \"project_domain_name\": \"${OS_PROJECT_DOMAIN_NAME}\"\n        },\n        \"users\": [\n            {\n                \"username\": \"${SERVICE_OS_USERNAME}\",\n                \"password\": \"${SERVICE_OS_PASSWORD}\",\n                \"project_name\": \"${SERVICE_OS_PROJECT_NAME}\",\n                \"user_domain_name\": \"${SERVICE_OS_USER_DOMAIN_NAME}\",\n                \"project_domain_name\": \"${SERVICE_OS_PROJECT_DOMAIN_NAME}\"\n            }\n        ],\n        \"https_insecure\": false,\n        \"https_cacert\": \"${OS_CACERT}\"\n    }\n}\nEOF\nrally deployment create --file /tmp/rally-config.json --name \"${RALLY_ENV_NAME}\"\nrm -f /tmp/rally-config.json\nrally deployment use \"${RALLY_ENV_NAME}\"\nrally deployment check\nrally task validate /etc/rally/rally_tests.yaml\nrally task start /etc/rally/rally_tests.yaml\nrally task sla-check\nrally env cleanup\nrally deployment destroy --deployment \"${RALLY_ENV_NAME}\"\n"
  db-init.py: |
    #!/usr/bin/env python

    # Creates db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.

    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine

    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Init')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)


    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)

    mysql_x509 = os.getenv('MARIADB_X509', "")
    ssl_args = {}
    if mysql_x509:
        ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',
                    'key': '/etc/mysql/certs/tls.key',
                    'cert': '/etc/mysql/certs/tls.crt'}}

    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)

    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url, connect_args=ssl_args)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise

    # User DB engine
    try:
        user_engine = create_engine(user_db_conn, connect_args=ssl_args)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise

    # Create DB
    try:
        root_engine.execute("CREATE DATABASE IF NOT EXISTS {0}".format(database))
        logger.info("Created database {0}".format(database))
    except:
        logger.critical("Could not create database {0}".format(database))
        raise

    # Create DB User
    try:
        root_engine.execute(
            "GRANT ALL ON `{0}`.* TO \'{1}\'@\'%%\' IDENTIFIED BY \'{2}\' {3}".format(
                database, user, password, mysql_x509))
        logger.info("Created user {0} for {1}".format(user, database))
    except:
        logger.critical("Could not create user {0} for {1}".format(user, database))
        raise

    # Test connection
    try:
        connection = user_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1}/{2} as {3}".format(
            host, port, database, user))
    except:
        logger.critical('Could not connect to database as user')
        raise

    logger.info('Finished DB Management')
  db-sync.sh: |
    #!/bin/bash



    set -ex

    exec panko-dbsync
  db-drop.py: |
    #!/usr/bin/env python

    # Drops db and user for an OpenStack Service:
    # Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain
    # SQLAlchemy strings for the root connection to the database and the one you
    # wish the service to use. Alternatively, you can use an ini formatted config
    # at the location specified by OPENSTACK_CONFIG_FILE, and extract the string
    # from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by
    # OPENSTACK_CONFIG_DB_SECTION.

    import os
    import sys
    try:
        import ConfigParser
        PARSER_OPTS = {}
    except ImportError:
        import configparser as ConfigParser
        PARSER_OPTS = {"strict": False}
    import logging
    from sqlalchemy import create_engine

    # Create logger, console handler and formatter
    logger = logging.getLogger('OpenStack-Helm DB Drop')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Set the formatter and add the handler
    ch.setFormatter(formatter)
    logger.addHandler(ch)


    # Get the connection string for the service db root user
    if "ROOT_DB_CONNECTION" in os.environ:
        db_connection = os.environ['ROOT_DB_CONNECTION']
        logger.info('Got DB root connection')
    else:
        logger.critical('environment variable ROOT_DB_CONNECTION not set')
        sys.exit(1)

    mysql_x509 = os.getenv('MARIADB_X509', "")
    ssl_args = {}
    if mysql_x509:
        ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',
                            'key': '/etc/mysql/certs/tls.key',
                            'cert': '/etc/mysql/certs/tls.crt'}}

    # Get the connection string for the service db
    if "OPENSTACK_CONFIG_FILE" in os.environ:
        os_conf = os.environ['OPENSTACK_CONFIG_FILE']
        if "OPENSTACK_CONFIG_DB_SECTION" in os.environ:
            os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')
            sys.exit(1)
        if "OPENSTACK_CONFIG_DB_KEY" in os.environ:
            os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']
        else:
            logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')
            sys.exit(1)
        try:
            config = ConfigParser.RawConfigParser(**PARSER_OPTS)
            logger.info("Using {0} as db config source".format(os_conf))
            config.read(os_conf)
            logger.info("Trying to load db config from {0}:{1}".format(
                os_conf_section, os_conf_key))
            user_db_conn = config.get(os_conf_section, os_conf_key)
            logger.info("Got config from {0}".format(os_conf))
        except:
            logger.critical("Tried to load config from {0} but failed.".format(os_conf))
            raise
    elif "DB_CONNECTION" in os.environ:
        user_db_conn = os.environ['DB_CONNECTION']
        logger.info('Got config from DB_CONNECTION env var')
    else:
        logger.critical('Could not get db config, either from config file or env var')
        sys.exit(1)

    # Root DB engine
    try:
        root_engine_full = create_engine(db_connection)
        root_user = root_engine_full.url.username
        root_password = root_engine_full.url.password
        drivername = root_engine_full.url.drivername
        host = root_engine_full.url.host
        port = root_engine_full.url.port
        root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])
        root_engine = create_engine(root_engine_url, connect_args=ssl_args)
        connection = root_engine.connect()
        connection.close()
        logger.info("Tested connection to DB @ {0}:{1} as {2}".format(
            host, port, root_user))
    except:
        logger.critical('Could not connect to database as root user')
        raise

    # User DB engine
    try:
        user_engine = create_engine(user_db_conn, connect_args=ssl_args)
        # Get our user data out of the user_engine
        database = user_engine.url.database
        user = user_engine.url.username
        password = user_engine.url.password
        logger.info('Got user db config')
    except:
        logger.critical('Could not get user database config')
        raise

    # Delete DB
    try:
        root_engine.execute("DROP DATABASE IF EXISTS {0}".format(database))
        logger.info("Deleted database {0}".format(database))
    except:
        logger.critical("Could not drop database {0}".format(database))
        raise

    # Delete DB User
    try:
        root_engine.execute("DROP USER IF EXISTS {0}".format(user))
        logger.info("Deleted user {0}".format(user))
    except:
        logger.critical("Could not delete user {0}".format(user))
        raise

    logger.info('Finished DB Management')
  panko-api.sh: |
    #!/bin/bash



    set -ex

    COMMAND="${@:-start}"

    function start () {

      cp -a $(type -p panko-api) /var/www/cgi-bin/panko/

      if [ -f /etc/apache2/envvars ]; then
         # Loading Apache2 ENV variables
         source /etc/apache2/envvars
         # The directory below has to be created due to the fact that
         # libapache2-mod-wsgi-py3 doesn't create it in contrary by libapache2-mod-wsgi
         if [ ! -d ${APACHE_RUN_DIR} ]; then
            mkdir -p ${APACHE_RUN_DIR}
         fi
      fi

      # Get rid of stale pid file if present.
      rm -f /var/run/apache2/*.pid

      # Start Apache2
      exec apache2 -DFOREGROUND
    }

    function stop () {
      apachectl -k graceful-stop
    }

    $COMMAND
  panko-events-cleaner.sh: |
    #!/bin/bash



    set -ex

    exec panko-expirer
  ks-service.sh: |
    #!/bin/bash

    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    set -ex

    # Service boilerplate description
    OS_SERVICE_DESC="${OS_REGION_NAME}: ${OS_SERVICE_NAME} (${OS_SERVICE_TYPE}) service"

    # Get Service ID if it exists
    unset OS_SERVICE_ID

    # FIXME - There seems to be an issue once in a while where the
    # openstack service list fails and encounters an error message such as:
    #   Unable to establish connection to
    #   https://keystone-api.openstack.svc.cluster.local:5000/v3/auth/tokens:
    #   ('Connection aborted.', OSError("(104, 'ECONNRESET')",))
    # During an upgrade scenario, this would cause the OS_SERVICE_ID to be blank
    # and it would attempt to create a new service when it was not needed.
    # This duplciate service would sometimes be used by other services such as
    # Horizon and would give an 'Invalid Service Catalog' error.
    # This loop allows for a 'retry' of the openstack service list in an
    # attempt to get the service list as expected if it does ecounter an error.
    # This loop and recheck can be reverted once the underlying issue is addressed.

    # If OS_SERVICE_ID is blank then wait a few seconds to give it
    # additional time and try again
    for i in $(seq 3)
    do
      OS_SERVICE_ID=$( openstack service list -f csv --quote none | \
                       grep ",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$" | \
                       sed -e "s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g" )

      # If the service was found, go ahead and exit successfully.
      if [[ -n "${OS_SERVICE_ID}" ]]; then
        exit 0
      fi

      sleep 2
    done

    # If we've reached this point and a Service ID was not found,
    # then create the service
    OS_SERVICE_ID=$(openstack service create -f value -c id \
                    --name="${OS_SERVICE_NAME}" \
                    --description "${OS_SERVICE_DESC}" \
                    --enable \
                    "${OS_SERVICE_TYPE}")
  ks-endpoints.sh: |
    #!/bin/bash

    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    set -ex

    # Get Service ID
    OS_SERVICE_ID=$( openstack service list -f csv --quote none | \
                      grep ",${OS_SERVICE_NAME},${OS_SERVICE_TYPE}$" | \
                        sed -e "s/,${OS_SERVICE_NAME},${OS_SERVICE_TYPE}//g" )

    # Get Endpoint ID if it exists
    OS_ENDPOINT_ID=$( openstack endpoint list  -f csv --quote none | \
                      grep "^[a-z0-9]*,${OS_REGION_NAME},${OS_SERVICE_NAME},${OS_SERVICE_TYPE},True,${OS_SVC_ENDPOINT}," | \
                      awk -F ',' '{ print $1 }' )

    # Making sure only a single endpoint exists for a service within a region
    if [ "$(echo $OS_ENDPOINT_ID | wc -w)" -gt "1" ]; then
      echo "More than one endpoint found, cleaning up"
      for ENDPOINT_ID in $OS_ENDPOINT_ID; do
        openstack endpoint delete ${ENDPOINT_ID}
      done
      unset OS_ENDPOINT_ID
    fi

    # Determine if Endpoint needs updated
    if [[ ${OS_ENDPOINT_ID} ]]; then
      OS_ENDPOINT_URL_CURRENT=$(openstack endpoint show ${OS_ENDPOINT_ID} -f value -c url)
      if [ "${OS_ENDPOINT_URL_CURRENT}" == "${OS_SERVICE_ENDPOINT}" ]; then
        echo "Endpoints Match: no action required"
        OS_ENDPOINT_UPDATE="False"
      else
        echo "Endpoints Dont Match: removing existing entries"
        openstack endpoint delete ${OS_ENDPOINT_ID}
        OS_ENDPOINT_UPDATE="True"
      fi
    else
      OS_ENDPOINT_UPDATE="True"
    fi

    # Update Endpoint if required
    if [[ "${OS_ENDPOINT_UPDATE}" == "True" ]]; then
      OS_ENDPOINT_ID=$( openstack endpoint create -f value -c id \
        --region="${OS_REGION_NAME}" \
        "${OS_SERVICE_ID}" \
        ${OS_SVC_ENDPOINT} \
        "${OS_SERVICE_ENDPOINT}" )
    fi

    # Display the Endpoint
    openstack endpoint show ${OS_ENDPOINT_ID}
  ks-user.sh: |
    #!/bin/bash

    # Copyright 2017 Pete Birley
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    set -ex

    shopt -s nocasematch

    if [[ "${SERVICE_OS_PROJECT_DOMAIN_NAME}" == "Default" ]]
    then
      PROJECT_DOMAIN_ID="default"
    else
      # Manage project domain
      PROJECT_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \
        --description="Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}" \
        "${SERVICE_OS_PROJECT_DOMAIN_NAME}")
    fi

    if [[ "${SERVICE_OS_USER_DOMAIN_NAME}" == "Default" ]]
    then
      USER_DOMAIN_ID="default"
    else
      # Manage user domain
      USER_DOMAIN_ID=$(openstack domain create --or-show --enable -f value -c id \
        --description="Domain for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}" \
        "${SERVICE_OS_USER_DOMAIN_NAME}")
    fi

    shopt -u nocasematch

    # Manage user project
    USER_PROJECT_DESC="Service Project for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_PROJECT_DOMAIN_NAME}"
    USER_PROJECT_ID=$(openstack project create --or-show --enable -f value -c id \
        --domain="${PROJECT_DOMAIN_ID}" \
        --description="${USER_PROJECT_DESC}" \
        "${SERVICE_OS_PROJECT_NAME}");

    # Manage user
    USER_DESC="Service User for ${SERVICE_OS_REGION_NAME}/${SERVICE_OS_USER_DOMAIN_NAME}/${SERVICE_OS_SERVICE_NAME}"
    USER_ID=$(openstack user create --or-show --enable -f value -c id \
        --domain="${USER_DOMAIN_ID}" \
        --project-domain="${PROJECT_DOMAIN_ID}" \
        --project="${USER_PROJECT_ID}" \
        --description="${USER_DESC}" \
        "${SERVICE_OS_USERNAME}");

    # Manage user password (we do this in a seperate step to ensure the password is updated if required)
    set +x
    echo "Setting user password via: openstack user set --password=xxxxxxx ${USER_ID}"
    openstack user set --password="${SERVICE_OS_PASSWORD}" "${USER_ID}"
    set -x

    function ks_assign_user_role () {
      if [[ "$SERVICE_OS_ROLE" == "admin" ]]
      then
        USER_ROLE_ID="$SERVICE_OS_ROLE"
      else
        USER_ROLE_ID=$(openstack role create --or-show -f value -c id "${SERVICE_OS_ROLE}");
      fi

      # Manage user role assignment
      openstack role add \
          --user="${USER_ID}" \
          --user-domain="${USER_DOMAIN_ID}" \
          --project-domain="${PROJECT_DOMAIN_ID}" \
          --project="${USER_PROJECT_ID}" \
          "${USER_ROLE_ID}"
    }

    # Manage user service role
    IFS=','
    for SERVICE_OS_ROLE in ${SERVICE_OS_ROLES}; do
      ks_assign_user_role
    done

    # Manage user member role
    : ${MEMBER_OS_ROLE:="member"}
    export USER_ROLE_ID=$(openstack role create --or-show -f value -c id \
        "${MEMBER_OS_ROLE}");
    ks_assign_user_role
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-panko-events-cleaner
  namespace: usuQNyMQQ
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-panko-api
  namespace: usuQNyMQQ
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-panko-db-init
  namespace: usuQNyMQQ
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-panko-db-sync
  namespace: usuQNyMQQ
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-panko-ks-endpoints
  namespace: usuQNyMQQ
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-panko-ks-service
  namespace: usuQNyMQQ
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-panko-ks-user
  namespace: usuQNyMQQ
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-default-release-name-test
  namespace: usuQNyMQQ
rules:
  - apiGroups:
      - ""
      - extensions
      - batch
      - apps
    verbs:
      - get
      - list
    resources:
      - services
      - endpoints
      - jobs
      - pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-panko-events-cleaner
  namespace: usuQNyMQQ
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-panko-events-cleaner
subjects:
  - kind: ServiceAccount
    name: panko-events-cleaner
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-panko-api
  namespace: usuQNyMQQ
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-panko-api
subjects:
  - kind: ServiceAccount
    name: panko-api
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-panko-db-init
  namespace: usuQNyMQQ
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-panko-db-init
subjects:
  - kind: ServiceAccount
    name: panko-db-init
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-panko-db-sync
  namespace: usuQNyMQQ
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-panko-db-sync
subjects:
  - kind: ServiceAccount
    name: panko-db-sync
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-panko-ks-endpoints
  namespace: usuQNyMQQ
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-panko-ks-endpoints
subjects:
  - kind: ServiceAccount
    name: panko-ks-endpoints
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-panko-ks-service
  namespace: usuQNyMQQ
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-panko-ks-service
subjects:
  - kind: ServiceAccount
    name: panko-ks-service
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-panko-ks-user
  namespace: usuQNyMQQ
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-panko-ks-user
subjects:
  - kind: ServiceAccount
    name: panko-ks-user
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-release-name-test
  namespace: usuQNyMQQ
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-default-release-name-test
subjects:
  - kind: ServiceAccount
    name: release-name-test
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: panko-api
spec:
  ports:
    - name: p-api
      port: 8977
  selector:
    release_group: release-name
    application: panko
    component: api
---
apiVersion: v1
kind: Service
metadata:
  name: panko
spec:
  ports:
    - name: http
      port: 80
    - name: https
      port: 443
  selector:
    app: ingress-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: panko-api
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
  labels:
    release_group: release-name
    application: panko
    component: api
spec:
  replicas: 1
  selector:
    matchLabels:
      release_group: release-name
      application: panko
      component: api
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 3
  template:
    metadata:
      labels:
        release_group: release-name
        application: panko
        component: api
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
        configmap-bin-hash: 089f253e13934f052f86a03532ab0ea31c9a1f68c99bce32e050a365e579de6d
        configmap-etc-hash: 86ad0f6e81b7748da025684ecb1b5791c2d9bb0a2879cc5ec40fd230426b5c6c
    spec:
      serviceAccountName: panko-api
      securityContext:
        runAsUser: 42438
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: release_group
                      operator: In
                      values:
                        - release-name
                    - key: application
                      operator: In
                      values:
                        - panko
                    - key: component
                      operator: In
                      values:
                        - api
                topologyKey: kubernetes.io/hostname
              weight: 10
      nodeSelector:
        openstack-control-plane: enabled
      terminationGracePeriodSeconds: 600
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb,default:keystone-api
            - name: DEPENDENCY_JOBS
              value: panko-db-sync,panko-ks-user,panko-ks-endpoints
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: null
      containers:
        - name: panko-api
          image: docker.io/kolla/ubuntu-source-panko-api:ocata
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11374
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /tmp/panko-api.sh
            - start
          lifecycle:
            preStop:
              exec:
                command:
                  - /tmp/panko-api.sh
                  - stop
          ports:
            - name: p-api
              containerPort: 8977
          readinessProbe:
            tcpSocket:
              port: 8977
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: wsgi-panko
              mountPath: /var/www/cgi-bin/panko
            - name: etcpanko
              mountPath: /etc/panko
            - name: panko-etc
              mountPath: /etc/panko/panko.conf
              subPath: panko.conf
              readOnly: true
            - name: panko-etc
              mountPath: /etc/panko/logging.conf
              subPath: logging.conf
              readOnly: true
            - name: panko-etc
              mountPath: /etc/panko/api_paste.ini
              subPath: api_paste.ini
              readOnly: true
            - name: panko-etc
              mountPath: /etc/panko/policy.json
              subPath: policy.json
              readOnly: true
            - name: panko-etc
              mountPath: /etc/panko/api_audit_map.conf
              subPath: api_audit_map.conf
              readOnly: true
            - name: panko-etc
              mountPath: /etc/apache2/conf-enabled/wsgi-panko.conf
              subPath: wsgi-panko.conf
              readOnly: true
            - name: panko-bin
              mountPath: /tmp/panko-api.sh
              subPath: panko-api.sh
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: wsgi-panko
          emptyDir: {}
        - name: etcpanko
          emptyDir: {}
        - name: panko-etc
          secret:
            secretName: panko-etc
            defaultMode: 292
        - name: panko-bin
          configMap:
            name: panko-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: panko-db-init
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: panko
        component: db-init
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: panko-db-init
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: panko-db-init-0
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          env:
            - name: ROOT_DB_CONNECTION
              valueFrom:
                secretKeyRef:
                  name: panko-db-admin
                  key: DB_CONNECTION
            - name: OPENSTACK_CONFIG_FILE
              value: /etc/panko/panko.conf
            - name: OPENSTACK_CONFIG_DB_SECTION
              value: database
            - name: OPENSTACK_CONFIG_DB_KEY
              value: connection
          command:
            - /tmp/db-init.py
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: db-init-sh
              mountPath: /tmp/db-init.py
              subPath: db-init.py
              readOnly: true
            - name: etc-service
              mountPath: /etc/panko
            - name: db-init-conf
              mountPath: /etc/panko/panko.conf
              subPath: panko.conf
              readOnly: true
            - name: db-init-conf
              mountPath: /etc/panko/logging.conf
              subPath: logging.conf
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: db-init-sh
          configMap:
            name: panko-bin
            defaultMode: 365
        - name: etc-service
          emptyDir: {}
        - name: db-init-conf
          secret:
            secretName: panko-etc
            defaultMode: 292
---
apiVersion: batch/v1
kind: Job
metadata:
  name: panko-db-sync
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: panko
        component: db-sync
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: panko-db-sync
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:mariadb
            - name: DEPENDENCY_JOBS
              value: panko-db-init
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: panko-db-sync
          image: docker.io/kolla/ubuntu-source-panko-api:ocata
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/db-sync.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: db-sync-sh
              mountPath: /tmp/db-sync.sh
              subPath: db-sync.sh
              readOnly: true
            - name: etc-service
              mountPath: /etc/panko
            - name: db-sync-conf
              mountPath: /etc/panko/panko.conf
              subPath: panko.conf
              readOnly: true
            - name: db-sync-conf
              mountPath: /etc/panko/logging.conf
              subPath: logging.conf
              readOnly: true
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: db-sync-sh
          configMap:
            name: panko-bin
            defaultMode: 365
        - name: etc-service
          emptyDir: {}
        - name: db-sync-conf
          secret:
            secretName: panko-etc
            defaultMode: 292
---
apiVersion: batch/v1
kind: Job
metadata:
  name: panko-ks-endpoints
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: panko
        component: ks-endpoints
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: panko-ks-endpoints
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:keystone-api
            - name: DEPENDENCY_JOBS
              value: panko-ks-service
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: event-ks-endpoints-admin
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-endpoints.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-endpoints-sh
              mountPath: /tmp/ks-endpoints.sh
              subPath: ks-endpoints.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SVC_ENDPOINT
              value: admin
            - name: OS_SERVICE_NAME
              value: panko
            - name: OS_SERVICE_TYPE
              value: event
            - name: OS_SERVICE_ENDPOINT
              value: http://panko-api.default.svc.cluster.local:8977/
        - name: event-ks-endpoints-internal
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-endpoints.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-endpoints-sh
              mountPath: /tmp/ks-endpoints.sh
              subPath: ks-endpoints.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SVC_ENDPOINT
              value: internal
            - name: OS_SERVICE_NAME
              value: panko
            - name: OS_SERVICE_TYPE
              value: event
            - name: OS_SERVICE_ENDPOINT
              value: http://panko-api.default.svc.cluster.local:8977/
        - name: event-ks-endpoints-public
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-endpoints.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-endpoints-sh
              mountPath: /tmp/ks-endpoints.sh
              subPath: ks-endpoints.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SVC_ENDPOINT
              value: public
            - name: OS_SERVICE_NAME
              value: panko
            - name: OS_SERVICE_TYPE
              value: event
            - name: OS_SERVICE_ENDPOINT
              value: http://panko.default.svc.cluster.local/
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: ks-endpoints-sh
          configMap:
            name: panko-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: panko-ks-service
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: panko
        component: ks-service
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: panko-ks-service
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:keystone-api
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: event-ks-service-registration
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-service.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-service-sh
              mountPath: /tmp/ks-service.sh
              subPath: ks-service.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: OS_SERVICE_NAME
              value: panko
            - name: OS_SERVICE_TYPE
              value: event
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: ks-service-sh
          configMap:
            name: panko-bin
            defaultMode: 365
---
apiVersion: batch/v1
kind: Job
metadata:
  name: panko-ks-user
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        release_group: release-name
        application: panko
        component: ks-user
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
    spec:
      serviceAccountName: panko-ks-user
      restartPolicy: OnFailure
      nodeSelector:
        openstack-control-plane: enabled
      initContainers:
        - name: init
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: INTERFACE_NAME
              value: eth0
            - name: PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
            - name: DEPENDENCY_SERVICE
              value: default:keystone-api
            - name: DEPENDENCY_DAEMONSET
              value: ""
            - name: DEPENDENCY_CONTAINER
              value: ""
            - name: DEPENDENCY_POD_JSON
              value: ""
            - name: DEPENDENCY_CUSTOM_RESOURCE
              value: ""
          command:
            - kubernetes-entrypoint
          volumeMounts: []
      containers:
        - name: ks-user
          image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - /tmp/ks-user.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: ks-user-sh
              mountPath: /tmp/ks-user.sh
              subPath: ks-user.sh
              readOnly: true
          env:
            - name: OS_IDENTITY_API_VERSION
              value: "3"
            - name: OS_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_AUTH_URL
            - name: OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_REGION_NAME
            - name: OS_INTERFACE
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_INTERFACE
            - name: OS_ENDPOINT_TYPE
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_INTERFACE
            - name: OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PROJECT_DOMAIN_NAME
            - name: OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PROJECT_NAME
            - name: OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_USER_DOMAIN_NAME
            - name: OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_USERNAME
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_PASSWORD
            - name: OS_DEFAULT_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-admin
                  key: OS_DEFAULT_DOMAIN
            - name: SERVICE_OS_SERVICE_NAME
              value: panko
            - name: SERVICE_OS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-user
                  key: OS_REGION_NAME
            - name: SERVICE_OS_PROJECT_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-user
                  key: OS_PROJECT_DOMAIN_NAME
            - name: SERVICE_OS_PROJECT_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-user
                  key: OS_PROJECT_NAME
            - name: SERVICE_OS_USER_DOMAIN_NAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-user
                  key: OS_USER_DOMAIN_NAME
            - name: SERVICE_OS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-user
                  key: OS_USERNAME
            - name: SERVICE_OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: panko-keystone-user
                  key: OS_PASSWORD
            - name: SERVICE_OS_ROLES
              value: admin
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: ks-user-sh
          configMap:
            name: panko-bin
            defaultMode: 365
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: panko-events-cleaner
  annotations:
    openstackhelm.openstack.org/release_uuid: ""
spec:
  schedule: 0 * * * *
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        release_group: release-name
        application: panko
        component: events-cleaner
    spec:
      template:
        metadata:
          labels:
            release_group: release-name
            application: panko
            component: events-cleaner
        spec:
          serviceAccountName: panko-events-cleaner
          restartPolicy: OnFailure
          nodeSelector:
            openstack-control-plane: enabled
          initContainers:
            - name: init
              image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
              imagePullPolicy: IfNotPresent
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                runAsUser: 65534
              env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.name
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: INTERFACE_NAME
                  value: eth0
                - name: PATH
                  value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
                - name: DEPENDENCY_SERVICE
                  value: default:mariadb,default:keystone-api
                - name: DEPENDENCY_JOBS
                  value: panko-db-sync,panko-ks-user,panko-ks-endpoints
                - name: DEPENDENCY_DAEMONSET
                  value: ""
                - name: DEPENDENCY_CONTAINER
                  value: ""
                - name: DEPENDENCY_POD_JSON
                  value: ""
                - name: DEPENDENCY_CUSTOM_RESOURCE
                  value: ""
              command:
                - kubernetes-entrypoint
              volumeMounts: null
          containers:
            - name: panko-events-cleaner
              image: docker.io/kolla/ubuntu-source-panko-base:ocata
              imagePullPolicy: IfNotPresent
              command:
                - /tmp/panko-events-cleaner.sh
              volumeMounts:
                - name: pod-tmp
                  mountPath: /tmp
                - name: panko-bin
                  mountPath: /tmp/panko-events-cleaner.sh
                  subPath: panko-events-cleaner.sh
                  readOnly: true
                - name: etcpanko
                  mountPath: /etc/panko
                - name: panko-etc
                  mountPath: /etc/panko/panko.conf
                  subPath: panko.conf
                  readOnly: true
                - name: panko-etc
                  mountPath: /etc/panko/logging.conf
                  subPath: logging.conf
                  readOnly: true
          volumes:
            - name: pod-tmp
              mountPath: /tmp
            - name: etcpanko
              emptyDir: {}
            - name: panko-etc
              secret:
                secretName: panko-etc
                defaultMode: 292
            - name: panko-bin
              configMap:
                name: panko-bin
                defaultMode: 365
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: panko
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: panko
      http:
        paths:
          - path: /
            backend:
              serviceName: panko-api
              servicePort: p-api
    - host: panko.default
      http:
        paths:
          - path: /
            backend:
              serviceName: panko-api
              servicePort: p-api
    - host: panko.default.svc.cluster.local
      http:
        paths:
          - path: /
            backend:
              serviceName: panko-api
              servicePort: p-api
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-test
  labels:
    release_group: release-name
    application: panko
    component: test
  annotations:
    helm.sh/hook: test-success
    openstackhelm.openstack.org/release_uuid: ""
spec:
  restartPolicy: Never
  nodeSelector:
    openstack-control-plane: enabled
  serviceAccountName: release-name-test
  initContainers:
    - name: init
      image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
      imagePullPolicy: IfNotPresent
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsUser: 65534
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INTERFACE_NAME
          value: eth0
        - name: PATH
          value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
        - name: DEPENDENCY_SERVICE
          value: default:keystone-api,default:mariadb,default:panko-api
        - name: DEPENDENCY_JOBS
          value: panko-db-sync
        - name: DEPENDENCY_DAEMONSET
          value: ""
        - name: DEPENDENCY_CONTAINER
          value: ""
        - name: DEPENDENCY_POD_JSON
          value: ""
        - name: DEPENDENCY_CUSTOM_RESOURCE
          value: ""
      command:
        - kubernetes-entrypoint
      volumeMounts: null
    - name: release-name-test-ks-user
      image: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
      imagePullPolicy: IfNotPresent
      command:
        - /tmp/ks-user.sh
      volumeMounts:
        - name: pod-tmp
          mountPath: /tmp
        - name: panko-bin
          mountPath: /tmp/ks-user.sh
          subPath: ks-user.sh
          readOnly: true
      env:
        - name: OS_IDENTITY_API_VERSION
          value: "3"
        - name: OS_AUTH_URL
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_AUTH_URL
        - name: OS_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_REGION_NAME
        - name: OS_INTERFACE
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_INTERFACE
        - name: OS_ENDPOINT_TYPE
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_INTERFACE
        - name: OS_PROJECT_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_PROJECT_DOMAIN_NAME
        - name: OS_PROJECT_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_PROJECT_NAME
        - name: OS_USER_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_USER_DOMAIN_NAME
        - name: OS_USERNAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_USERNAME
        - name: OS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_PASSWORD
        - name: OS_DEFAULT_DOMAIN
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_DEFAULT_DOMAIN
        - name: SERVICE_OS_SERVICE_NAME
          value: test
        - name: SERVICE_OS_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_REGION_NAME
        - name: SERVICE_OS_PROJECT_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_PROJECT_DOMAIN_NAME
        - name: SERVICE_OS_PROJECT_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_PROJECT_NAME
        - name: SERVICE_OS_USER_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_USER_DOMAIN_NAME
        - name: SERVICE_OS_USERNAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_USERNAME
        - name: SERVICE_OS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_PASSWORD
        - name: SERVICE_OS_ROLE
          value: admin
  containers:
    - name: release-name-test
      image: docker.io/xrally/xrally-openstack:2.0.0
      imagePullPolicy: IfNotPresent
      env:
        - name: OS_IDENTITY_API_VERSION
          value: "3"
        - name: OS_AUTH_URL
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_AUTH_URL
        - name: OS_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_REGION_NAME
        - name: OS_INTERFACE
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_INTERFACE
        - name: OS_ENDPOINT_TYPE
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_INTERFACE
        - name: OS_PROJECT_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_PROJECT_DOMAIN_NAME
        - name: OS_PROJECT_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_PROJECT_NAME
        - name: OS_USER_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_USER_DOMAIN_NAME
        - name: OS_USERNAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_USERNAME
        - name: OS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_PASSWORD
        - name: OS_DEFAULT_DOMAIN
          valueFrom:
            secretKeyRef:
              name: panko-keystone-admin
              key: OS_DEFAULT_DOMAIN
        - name: SERVICE_OS_REGION_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_REGION_NAME
        - name: SERVICE_OS_PROJECT_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_PROJECT_DOMAIN_NAME
        - name: SERVICE_OS_PROJECT_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_PROJECT_NAME
        - name: SERVICE_OS_USER_DOMAIN_NAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_USER_DOMAIN_NAME
        - name: SERVICE_OS_USERNAME
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_USERNAME
        - name: SERVICE_OS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: panko-keystone-test
              key: OS_PASSWORD
        - name: RALLY_ENV_NAME
          value: release-name
      command:
        - /tmp/rally-test.sh
      volumeMounts:
        - name: pod-tmp
          mountPath: /tmp
        - name: panko-etc
          mountPath: /etc/rally/rally_tests.yaml
          subPath: rally_tests.yaml
          readOnly: true
        - name: panko-bin
          mountPath: /tmp/rally-test.sh
          subPath: rally-test.sh
          readOnly: true
        - name: rally-db
          mountPath: /var/lib/rally
  volumes:
    - name: pod-tmp
      emptyDir: {}
    - name: panko-etc
      secret:
        secretName: panko-etc
        defaultMode: 292
    - name: panko-bin
      configMap:
        name: panko-bin
        defaultMode: 365
    - name: rally-db
      emptyDir: {}
