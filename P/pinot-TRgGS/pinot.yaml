apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: release-name-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.6
    release: release-name
    heritage: Helm
    component: server
spec:
  selector:
    matchLabels:
      app: zookeeper
      release: release-name
      component: server
  maxUnavailable: 1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-pinot
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.6
    release: release-name
    heritage: Helm
    component: server
data:
  ok: |
    #!/bin/sh
    zkServer.sh status
  ready: |
    #!/bin/sh
    echo ruok | nc 127.0.0.1 ${1:-2181}
  run: |
    #!/bin/bash

    set -a
    ROOT=$(echo /apache-zookeeper-*)

    ZK_USER=${ZK_USER:-"zookeeper"}
    ZK_LOG_LEVEL=${ZK_LOG_LEVEL:-"INFO"}
    ZK_DATA_DIR=${ZK_DATA_DIR:-"/data"}
    ZK_DATA_LOG_DIR=${ZK_DATA_LOG_DIR:-"/data/log"}
    ZK_CONF_DIR=${ZK_CONF_DIR:-"/conf"}
    ZK_CLIENT_PORT=${ZK_CLIENT_PORT:-2181}
    ZK_SERVER_PORT=${ZK_SERVER_PORT:-2888}
    ZK_ELECTION_PORT=${ZK_ELECTION_PORT:-3888}
    ZK_TICK_TIME=${ZK_TICK_TIME:-2000}
    ZK_INIT_LIMIT=${ZK_INIT_LIMIT:-10}
    ZK_SYNC_LIMIT=${ZK_SYNC_LIMIT:-5}
    ZK_HEAP_SIZE=${ZK_HEAP_SIZE:-2G}
    ZK_MAX_CLIENT_CNXNS=${ZK_MAX_CLIENT_CNXNS:-60}
    ZK_MIN_SESSION_TIMEOUT=${ZK_MIN_SESSION_TIMEOUT:- $((ZK_TICK_TIME*2))}
    ZK_MAX_SESSION_TIMEOUT=${ZK_MAX_SESSION_TIMEOUT:- $((ZK_TICK_TIME*20))}
    ZK_SNAP_RETAIN_COUNT=${ZK_SNAP_RETAIN_COUNT:-3}
    ZK_PURGE_INTERVAL=${ZK_PURGE_INTERVAL:-0}
    ID_FILE="$ZK_DATA_DIR/myid"
    ZK_CONFIG_FILE="$ZK_CONF_DIR/zoo.cfg"
    LOG4J_PROPERTIES="$ZK_CONF_DIR/log4j.properties"
    HOST=$(hostname)
    DOMAIN=`hostname -d`
    JVMFLAGS="-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE"

    APPJAR=$(echo $ROOT/*jar)
    CLASSPATH="${ROOT}/lib/*:${APPJAR}:${ZK_CONF_DIR}:"

    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        NAME=${BASH_REMATCH[1]}
        ORD=${BASH_REMATCH[2]}
        MY_ID=$((ORD+1))
    else
        echo "Failed to extract ordinal from hostname $HOST"
        exit 1
    fi

    mkdir -p $ZK_DATA_DIR
    mkdir -p $ZK_DATA_LOG_DIR
    echo $MY_ID >> $ID_FILE

    echo "clientPort=$ZK_CLIENT_PORT" >> $ZK_CONFIG_FILE
    echo "dataDir=$ZK_DATA_DIR" >> $ZK_CONFIG_FILE
    echo "dataLogDir=$ZK_DATA_LOG_DIR" >> $ZK_CONFIG_FILE
    echo "tickTime=$ZK_TICK_TIME" >> $ZK_CONFIG_FILE
    echo "initLimit=$ZK_INIT_LIMIT" >> $ZK_CONFIG_FILE
    echo "syncLimit=$ZK_SYNC_LIMIT" >> $ZK_CONFIG_FILE
    echo "maxClientCnxns=$ZK_MAX_CLIENT_CNXNS" >> $ZK_CONFIG_FILE
    echo "minSessionTimeout=$ZK_MIN_SESSION_TIMEOUT" >> $ZK_CONFIG_FILE
    echo "maxSessionTimeout=$ZK_MAX_SESSION_TIMEOUT" >> $ZK_CONFIG_FILE
    echo "autopurge.snapRetainCount=$ZK_SNAP_RETAIN_COUNT" >> $ZK_CONFIG_FILE
    echo "autopurge.purgeInterval=$ZK_PURGE_INTERVAL" >> $ZK_CONFIG_FILE
    echo "4lw.commands.whitelist=*" >> $ZK_CONFIG_FILE

    for (( i=1; i<=$ZK_REPLICAS; i++ ))
    do
        echo "server.$i=$NAME-$((i-1)).$DOMAIN:$ZK_SERVER_PORT:$ZK_ELECTION_PORT" >> $ZK_CONFIG_FILE
    done

    rm -f $LOG4J_PROPERTIES

    echo "zookeeper.root.logger=$ZK_LOG_LEVEL, CONSOLE" >> $LOG4J_PROPERTIES
    echo "zookeeper.console.threshold=$ZK_LOG_LEVEL" >> $LOG4J_PROPERTIES
    echo "zookeeper.log.threshold=$ZK_LOG_LEVEL" >> $LOG4J_PROPERTIES
    echo "zookeeper.log.dir=$ZK_DATA_LOG_DIR" >> $LOG4J_PROPERTIES
    echo "zookeeper.log.file=zookeeper.log" >> $LOG4J_PROPERTIES
    echo "zookeeper.log.maxfilesize=256MB" >> $LOG4J_PROPERTIES
    echo "zookeeper.log.maxbackupindex=10" >> $LOG4J_PROPERTIES
    echo "zookeeper.tracelog.dir=$ZK_DATA_LOG_DIR" >> $LOG4J_PROPERTIES
    echo "zookeeper.tracelog.file=zookeeper_trace.log" >> $LOG4J_PROPERTIES
    echo "log4j.rootLogger=\${zookeeper.root.logger}" >> $LOG4J_PROPERTIES
    echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender" >> $LOG4J_PROPERTIES
    echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}" >> $LOG4J_PROPERTIES
    echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout" >> $LOG4J_PROPERTIES
    echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n" >> $LOG4J_PROPERTIES

    if [ -n "$JMXDISABLE" ]
    then
        MAIN=org.apache.zookeeper.server.quorum.QuorumPeerMain
    else
        MAIN="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=$JMXPORT -Dcom.sun.management.jmxremote.authenticate=$JMXAUTH -Dcom.sun.management.jmxremote.ssl=$JMXSSL -Dzookeeper.jmx.log4j.disable=$JMXLOG4J org.apache.zookeeper.server.quorum.QuorumPeerMain"
    fi

    set -x
    exec java -cp "$CLASSPATH" $JVMFLAGS $MAIN $ZK_CONFIG_FILE
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-pinot-broker-config
data:
  pinot-broker.conf: |-
    pinot.broker.client.queryPort=8099
    pinot.broker.routing.table.builder.class=random
    pinot.set.instance.id.to.hostname=true
    pinot.broker.access.control.class=org.apache.pinot.broker.broker.BasicAuthAccessControlFactory
    pinot.broker.access.control.principals=admin
    pinot.broker.access.control.principals.admin.password=verysecure
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-pinot-controller-config
data:
  pinot-controller.conf: |-
    controller.helix.cluster.name=pinot-quickstart
    controller.port=9000
    controller.data.dir=/var/pinot/controller/data
    controller.zk.str=release-name-zookeeper:2181
    pinot.set.instance.id.to.hostname=true
    controller.task.scheduler.enabled=true
    controller.admin.access.control.factory.class=org.apache.pinot.controller.api.access.BasicAuthAccessControlFactory
    controller.admin.access.control.principals=admin
    controller.admin.access.control.principals.admin.password=verysecret
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-pinot-minion-config
data:
  pinot-minion.conf: |-
    pinot.minion.port=9514
    dataDir=/var/pinot/minion/data
    pinot.set.instance.id.to.hostname=true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-pinot-server-config
data:
  pinot-server.conf: |-
    pinot.server.netty.port=8098
    pinot.server.adminapi.port=8097
    pinot.server.instance.dataDir=/var/pinot/server/data/index
    pinot.server.instance.segmentTarDir=/var/pinot/server/data/segment
    pinot.set.instance.id.to.hostname=true
    pinot.server.instance.realtime.alloc.offheap=true
    pinot.server.instance.currentDataTableVersion=2
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-zookeeper-headless
  labels:
    app: zookeeper
    chart: zookeeper-2.1.6
    release: release-name
    heritage: Helm
spec:
  clusterIP: None
  ports:
    - name: client
      port: 2181
      targetPort: client
      protocol: TCP
    - name: election
      port: 3888
      targetPort: election
      protocol: TCP
    - name: server
      port: 2888
      targetPort: server
      protocol: TCP
  selector:
    app: zookeeper
    release: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.6
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: client
      port: 2181
      protocol: TCP
      targetPort: client
  selector:
    app: zookeeper
    release: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-pinot-broker-headless
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: broker
spec:
  clusterIP: None
  ports:
    - name: broker
      port: 8099
  selector:
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    component: broker
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-pinot-broker
  annotations:
    type: service
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: broker
spec:
  type: ClusterIP
  ports:
    - name: broker
      port: 8099
  selector:
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    component: broker
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-pinot-controller-headless
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: controller
spec:
  clusterIP: None
  ports:
    - name: controller
      port: 9000
  selector:
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    component: controller
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-pinot-controller
  annotations:
    type: service
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: controller
spec:
  type: ClusterIP
  ports:
    - name: controller
      port: 9000
  selector:
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    component: controller
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-pinot-minion-headless
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: minion
spec:
  clusterIP: None
  ports:
    - name: minion
      port: 9514
  selector:
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    component: minion
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-pinot-minion
  annotations:
    type: service
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: minion
spec:
  type: ClusterIP
  ports:
    - name: minion
      port: 9514
  selector:
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    component: minion
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-pinot-server-headless
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: server
spec:
  clusterIP: None
  ports:
    - name: netty
      port: 8098
      protocol: TCP
    - name: admin
      port: 80
      targetPort: 8097
      protocol: TCP
  selector:
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    component: server
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-pinot-server
  annotations:
    type: service
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: server
spec:
  type: ClusterIP
  ports:
    - name: netty
      port: 8098
      protocol: TCP
    - name: admin
      port: 80
      targetPort: 8097
      protocol: TCP
  selector:
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    component: server
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.6
    release: release-name
    heritage: Helm
    component: server
spec:
  serviceName: release-name-zookeeper-headless
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
      release: release-name
      component: server
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: zookeeper
        release: release-name
        component: server
    spec:
      terminationGracePeriodSeconds: 1800
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
        - name: zookeeper
          image: zookeeper:3.5.5
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -xec
            - /config-scripts/run
          ports:
            - name: client
              containerPort: 2181
              protocol: TCP
            - name: election
              containerPort: 3888
              protocol: TCP
            - name: server
              containerPort: 2888
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - sh
                - /config-scripts/ok
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 2
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - sh
                - /config-scripts/ready
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 2
            successThreshold: 1
          env:
            - name: ZK_REPLICAS
              value: "1"
            - name: JMXAUTH
              value: "false"
            - name: JMXDISABLE
              value: "false"
            - name: JMXPORT
              value: "1099"
            - name: JMXSSL
              value: "false"
            - name: ZK_HEAP_SIZE
              value: 256M
            - name: ZK_SYNC_LIMIT
              value: "10"
            - name: ZK_TICK_TIME
              value: "2000"
            - name: ZOO_AUTOPURGE_PURGEINTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_SNAPRETAINCOUNT
              value: "3"
            - name: ZOO_INIT_LIMIT
              value: "5"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_PORT
              value: "2181"
            - name: ZOO_STANDALONE_ENABLED
              value: "false"
            - name: ZOO_TICK_TIME
              value: "2000"
          resources:
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config-scripts
      volumes:
        - name: config
          configMap:
            name: release-name-zookeeper
            defaultMode: 365
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-pinot-broker
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: broker
spec:
  selector:
    matchLabels:
      app: pinot
      chart: pinot-0.2.4
      release: release-name
      component: broker
  serviceName: release-name-pinot-broker-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        helm.sh/chart: pinot-0.2.4
        app: pinot
        chart: pinot-0.2.4
        release: release-name
        app.kubernetes.io/version: 0.2.4
        app.kubernetes.io/managed-by: Helm
        heritage: Helm
        component: broker
      annotations: {}
    spec:
      terminationGracePeriodSeconds: 30
      serviceAccountName: release-name-pinot
      securityContext: {}
      nodeSelector: {}
      affinity: {}
      tolerations: []
      containers:
        - name: broker
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: apachepinot/pinot:latest-jdk11
          imagePullPolicy: IfNotPresent
          args:
            - StartBroker
            - -clusterName
            - pinot-quickstart
            - -zkAddress
            - release-name-zookeeper:2181
            - -configFileName
            - /var/pinot/broker/config/pinot-broker.conf
          env:
            - name: JAVA_OPTS
              value: -Xms256M -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc*:file=/opt/pinot/gc-pinot-broker.log -Dlog4j2.configurationFile=/opt/pinot/conf/log4j2.xml -Dplugins.dir=/opt/pinot/plugins
          envFrom: []
          ports:
            - containerPort: 8099
              protocol: TCP
              name: broker
          volumeMounts:
            - name: config
              mountPath: /var/pinot/broker/config
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            httpGet:
              path: /health
              port: 8099
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            httpGet:
              path: /health
              port: 8099
          resources:
            seccompProfile:
              type: RuntimeDefault
      restartPolicy: Always
      volumes:
        - name: config
          configMap:
            name: release-name-pinot-broker-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-pinot-controller
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: controller
spec:
  selector:
    matchLabels:
      app: pinot
      chart: pinot-0.2.4
      release: release-name
      component: controller
  serviceName: release-name-pinot-controller-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        helm.sh/chart: pinot-0.2.4
        app: pinot
        chart: pinot-0.2.4
        release: release-name
        app.kubernetes.io/version: 0.2.4
        app.kubernetes.io/managed-by: Helm
        heritage: Helm
        component: controller
      annotations: {}
    spec:
      terminationGracePeriodSeconds: 30
      serviceAccountName: release-name-pinot
      securityContext: {}
      nodeSelector: {}
      affinity: {}
      tolerations: []
      containers:
        - name: controller
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: apachepinot/pinot:latest-jdk11
          imagePullPolicy: IfNotPresent
          args:
            - StartController
            - -configFileName
            - /var/pinot/controller/config/pinot-controller.conf
          env:
            - name: JAVA_OPTS
              value: -Xms256M -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc*:file=/opt/pinot/gc-pinot-controller.log -Dlog4j2.configurationFile=/opt/pinot/conf/log4j2.xml -Dplugins.dir=/opt/pinot/plugins
          envFrom: []
          ports:
            - containerPort: 9000
              protocol: TCP
              name: controller
          volumeMounts:
            - name: config
              mountPath: /var/pinot/controller/config
            - name: data
              mountPath: /var/pinot/controller/data
          resources:
            seccompProfile:
              type: RuntimeDefault
      restartPolicy: Always
      volumes:
        - name: config
          configMap:
            name: release-name-pinot-controller-config
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1G
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-pinot-minion
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: minion
spec:
  selector:
    matchLabels:
      app: pinot
      chart: pinot-0.2.4
      release: release-name
      component: minion
  serviceName: release-name-pinot-minion-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        helm.sh/chart: pinot-0.2.4
        app: pinot
        chart: pinot-0.2.4
        release: release-name
        app.kubernetes.io/version: 0.2.4
        app.kubernetes.io/managed-by: Helm
        heritage: Helm
        component: minion
      annotations: {}
    spec:
      terminationGracePeriodSeconds: 30
      serviceAccountName: release-name-pinot
      securityContext: {}
      nodeSelector: {}
      affinity: {}
      tolerations: []
      containers:
        - name: minion
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: apachepinot/pinot:latest-jdk11
          imagePullPolicy: IfNotPresent
          args:
            - StartMinion
            - -clusterName
            - pinot-quickstart
            - -zkAddress
            - release-name-zookeeper:2181
            - -configFileName
            - /var/pinot/minion/config/pinot-minion.conf
          env:
            - name: JAVA_OPTS
              value: -Xms256M -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc*:file=/opt/pinot/gc-pinot-minion.log -Dlog4j2.configurationFile=/opt/pinot/conf/log4j2.xml -Dplugins.dir=/opt/pinot/plugins
          envFrom: []
          ports:
            - containerPort: 9514
              protocol: TCP
              name: minion
          volumeMounts:
            - name: config
              mountPath: /var/pinot/minion/config
            - name: data
              mountPath: /var/pinot/minion/data
          resources:
            seccompProfile:
              type: RuntimeDefault
      restartPolicy: Always
      volumes:
        - name: config
          configMap:
            name: release-name-pinot-minion-config
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 4G
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-pinot-server
  labels:
    helm.sh/chart: pinot-0.2.4
    app: pinot
    chart: pinot-0.2.4
    release: release-name
    app.kubernetes.io/version: 0.2.4
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    component: server
spec:
  selector:
    matchLabels:
      app: pinot
      chart: pinot-0.2.4
      release: release-name
      component: server
  serviceName: release-name-pinot-server-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        helm.sh/chart: pinot-0.2.4
        app: pinot
        chart: pinot-0.2.4
        release: release-name
        app.kubernetes.io/version: 0.2.4
        app.kubernetes.io/managed-by: Helm
        heritage: Helm
        component: server
      annotations: {}
    spec:
      terminationGracePeriodSeconds: 30
      serviceAccountName: release-name-pinot
      securityContext: {}
      nodeSelector: {}
      affinity: {}
      tolerations: []
      containers:
        - name: server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: apachepinot/pinot:latest-jdk11
          imagePullPolicy: IfNotPresent
          args:
            - StartServer
            - -clusterName
            - pinot-quickstart
            - -zkAddress
            - release-name-zookeeper:2181
            - -configFileName
            - /var/pinot/server/config/pinot-server.conf
          env:
            - name: JAVA_OPTS
              value: -Xms512M -Xmx1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc*:file=/opt/pinot/gc-pinot-server.log -Dlog4j2.configurationFile=/opt/pinot/conf/log4j2.xml -Dplugins.dir=/opt/pinot/plugins
          envFrom: []
          ports:
            - containerPort: 8098
              protocol: TCP
              name: netty
            - containerPort: 8097
              protocol: TCP
              name: admin
          volumeMounts:
            - name: config
              mountPath: /var/pinot/server/config
            - name: data
              mountPath: /var/pinot/server/data
          resources:
            seccompProfile:
              type: RuntimeDefault
      restartPolicy: Always
      volumes:
        - name: config
          configMap:
            name: release-name-pinot-server-config
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 4G
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-pinot-controller-headless
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  tls:
    - hosts:
        - chart-example.local
  rules:
    - host: chart-example.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: release-name-pinot-controller-headless
                port:
                  name: controller
---
null
---
null
