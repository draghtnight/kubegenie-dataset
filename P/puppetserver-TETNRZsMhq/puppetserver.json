[
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "TETNRZsMhq"
    },
    "type": "Opaque",
    "data": {
      "postgresql-postgres-password": "dW5icmVha2FibGVQYXNzd29yZA==",
      "postgresql-password": "dW5icmVha2FibGVQYXNzd29yZA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "puppetdb-secret",
      "labels": {
        "component": "puppetdb",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "username": "cHVwcGV0ZGI=",
      "password": "dW5icmVha2FibGVQYXNzd29yZA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "postgresql-custom-extensions",
      "labels": {
        "component": "postgresql",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "data": {
      "extensions.sql": "CREATE EXTENSION IF NOT EXISTS pg_trgm;\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "manifests-config",
      "labels": {
        "component": "puppetserver",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "data": {
      "site.pp": "hiera_include('classes')\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "name": "puppetdb-claim",
      "labels": {
        "component": "puppetdb",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "400Mi"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "name": "puppet-ca-claim",
      "labels": {
        "component": "puppetserver",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "400Mi"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "name": "puppet-code-claim",
      "labels": {
        "component": "puppetserver",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "400Mi"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "name": "puppet-serverdata-claim",
      "labels": {
        "component": "puppetserver",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "400Mi"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "name": "puppet-puppet-claim",
      "labels": {
        "component": "puppetserver",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "400Mi"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      },
      "namespace": "TETNRZsMhq"
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null,
      "namespace": "TETNRZsMhq"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "role": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "puppetdb",
      "labels": {
        "component": "puppetdb",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "pdb-http",
          "port": 8080,
          "targetPort": "pdb-http"
        },
        {
          "name": "pdb-https",
          "port": 8081,
          "targetPort": "pdb-https"
        }
      ],
      "selector": {
        "component": "puppetdb",
        "app": "puppetserver",
        "release": "release-name"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "puppet",
      "labels": {
        "component": "puppetserver",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "puppetserver",
          "port": 8140
        }
      ],
      "selector": {
        "component": "puppetserver",
        "app": "puppetserver",
        "release": "release-name"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "puppetserver-puppetdb",
      "labels": {
        "component": "puppetdb",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "component": "puppetdb",
          "app": "puppetserver",
          "release": "release-name"
        }
      },
      "strategy": {
        "type": "Recreate"
      },
      "template": {
        "metadata": {
          "labels": {
            "component": "puppetdb",
            "app": "puppetserver",
            "release": "release-name",
            "chart": "puppetserver-6.1.0",
            "heritage": "Helm"
          }
        },
        "spec": {
          "hostname": "puppetdb",
          "containers": [
            {
              "name": "puppetdb",
              "image": "puppet/puppetdb:7.7.1",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "PUPPETSERVER_HOSTNAME",
                  "value": "puppet"
                },
                {
                  "name": "PUPPETSERVER_PORT",
                  "value": "8140"
                },
                {
                  "name": "PUPPETDB_POSTGRES_HOSTNAME",
                  "value": "puppetserver-postgresql"
                },
                {
                  "name": "PUPPETDB_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "puppetdb-secret",
                      "key": "password"
                    }
                  }
                },
                {
                  "name": "PUPPETDB_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "puppetdb-secret",
                      "key": "username"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "pdb-http",
                  "containerPort": 8080
                },
                {
                  "name": "pdb-https",
                  "containerPort": 8081
                }
              ],
              "volumeMounts": [
                {
                  "name": "puppetdb-storage",
                  "mountPath": "/opt/puppetlabs/server/data/puppetdb/certs"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "puppetdb-storage",
              "persistentVolumeClaim": {
                "claimName": "puppetdb-claim"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "puppetserver-puppetserver-master",
      "labels": {
        "component": "puppetserver",
        "app": "puppetserver",
        "release": "release-name",
        "chart": "puppetserver-6.1.0",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "component": "puppetserver",
          "app": "puppetserver",
          "release": "release-name"
        }
      },
      "strategy": {
        "rollingUpdate": {
          "maxSurge": "20%",
          "maxUnavailable": "0%"
        },
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "component": "puppetserver",
            "app": "puppetserver",
            "release": "release-name",
            "chart": "puppetserver-6.1.0",
            "heritage": "Helm"
          },
          "annotations": {
            "checksum/hiera-configmap": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b",
            "checksum/crl-config": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
          }
        },
        "spec": {
          "hostname": "puppet",
          "initContainers": [
            {
              "name": "perms-and-dirs",
              "image": "puppet/puppetserver:7.4.2",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "memory": "128Mi",
                  "cpu": "200m"
                },
                "limits": {
                  "memory": "256Mi",
                  "cpu": "300m"
                }
              },
              "command": [
                "sh",
                "-c"
              ],
              "args": [
                "mkdir -p /etc/puppetlabs/puppet/eyaml/keys; mkdir -p /etc/puppetlabs/code/environments; mkdir -p /etc/puppetlabs/puppet/manifests; mkdir -p /etc/puppetlabs/code/r10k_cache; chown -R puppet:puppet /etc/puppetlabs; cp /etc/puppetlabs/puppet/configmap/site.pp /etc/puppetlabs/puppet/manifests/site.pp; chown puppet:puppet /etc/puppetlabs/puppet/manifests/site.pp;"
              ],
              "securityContext": {
                "runAsUser": 0,
                "runAsNonRoot": false,
                "privileged": true
              },
              "volumeMounts": [
                {
                  "name": "puppet-code-storage",
                  "mountPath": "/etc/puppetlabs/code/"
                },
                {
                  "name": "puppet-puppet-storage",
                  "mountPath": "/etc/puppetlabs/puppet/"
                },
                {
                  "name": "manifests-volume",
                  "mountPath": "/etc/puppetlabs/puppet/configmap/site.pp",
                  "subPath": "site.pp"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "release-name-puppetserver",
              "image": "puppet/puppetserver:7.4.2",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "PUPPETSERVER_HOSTNAME",
                  "value": "puppet"
                },
                {
                  "name": "PUPPET_MASTERPORT",
                  "value": "8140"
                },
                {
                  "name": "DNS_ALT_NAMES",
                  "value": "agents-to-puppet,"
                },
                {
                  "name": "PUPPETDB_SERVER_URLS",
                  "value": "https://puppetdb:8081"
                },
                {
                  "name": "CA_ALLOW_SUBJECT_ALT_NAMES",
                  "value": "true"
                }
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/status/v1/simple",
                  "port": 8140,
                  "scheme": "HTTPS"
                },
                "periodSeconds": 60,
                "timeoutSeconds": 20,
                "failureThreshold": 3,
                "successThreshold": 1
              },
              "livenessProbe": {
                "tcpSocket": {
                  "port": 8140
                },
                "periodSeconds": 30,
                "timeoutSeconds": 10,
                "failureThreshold": 3,
                "successThreshold": 1
              },
              "startupProbe": {
                "tcpSocket": {
                  "port": 8140
                },
                "periodSeconds": 15,
                "failureThreshold": 30
              },
              "ports": [
                {
                  "containerPort": 8140
                }
              ],
              "volumeMounts": [
                {
                  "name": "puppet-code-storage",
                  "mountPath": "/etc/puppetlabs/code/"
                },
                {
                  "name": "puppet-puppet-storage",
                  "mountPath": "/etc/puppetlabs/puppet/"
                },
                {
                  "name": "puppet-serverdata-storage",
                  "mountPath": "/opt/puppetlabs/server/data/puppetserver/"
                },
                {
                  "name": "puppet-ca-storage",
                  "mountPath": "/etc/puppetlabs/puppetserver/ca/"
                }
              ]
            }
          ],
          "securityContext": {
            "fsGroup": 999
          },
          "volumes": [
            {
              "name": "puppet-code-storage",
              "persistentVolumeClaim": {
                "claimName": "puppet-code-claim"
              }
            },
            {
              "name": "puppet-ca-storage",
              "persistentVolumeClaim": {
                "claimName": "puppet-ca-claim"
              }
            },
            {
              "name": "puppet-puppet-storage",
              "persistentVolumeClaim": {
                "claimName": "puppet-puppet-claim"
              }
            },
            {
              "name": "puppet-serverdata-storage",
              "persistentVolumeClaim": {
                "claimName": "puppet-serverdata-claim"
              }
            },
            {
              "name": "manifests-volume",
              "configMap": {
                "name": "manifests-config"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null,
      "namespace": "TETNRZsMhq"
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "role": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-10.16.2",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "role": "primary",
            "app.kubernetes.io/component": "primary"
          }
        },
        "spec": {
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "postgresql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/bitnami/postgresql:11.14.0-debian-10-r28",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "securityContext": {
                "runAsUser": 11966,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "POSTGRESQL_INITSCRIPTS_USERNAME",
                  "value": "postgres"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-postgres-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "puppetdb"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "puppetdb"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"puppetdb\" -d \"dbname=puppetdb\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"puppetdb\" -d \"dbname=puppetdb\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "custom-init-scripts",
                  "mountPath": "/docker-entrypoint-initdb.d/"
                },
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql",
                  "subPath": null
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "custom-init-scripts",
              "configMap": {
                "name": "postgresql-custom-extensions"
              }
            },
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "annotations": {
              "helm.sh/resource-policy": "keep"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "10Gi"
              }
            }
          }
        }
      ]
    }
  }
]