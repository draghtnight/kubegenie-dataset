[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "powerdns",
      "namespace": "4Nr0Qi1VEapL7V"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "powerdns-db-init",
      "namespace": "4Nr0Qi1VEapL7V"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "powerdns-db-sync",
      "namespace": "4Nr0Qi1VEapL7V"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "powerdns-etc"
    },
    "type": "Opaque",
    "data": {
      "pdns.conf": "CmFwaSA9IHRydWUKYXBpLWtleSA9IGNoaWF2ZV9zZWdyZXRhCmNhY2hlLXR0bCA9IDAKZG5zdXBkYXRlID0gdHJ1ZQpnbXlzcWwtZGJuYW1lID0gcG93ZXJkbnMKZ215c3FsLWRuc3NlYyA9IHRydWUKZ215c3FsLWhvc3QgPSBtYXJpYWRiLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwKZ215c3FsLXBhc3N3b3JkID0gcGFzc3dvcmQKZ215c3FsLXBvcnQgPSAzMzA2CmdteXNxbC11c2VyID0gcG93ZXJkbnMKbmVncXVlcnktY2FjaGUtdHRsID0gMApvdXQtb2Ytem9uZS1hZGRpdGlvbmFsLXByb2Nlc3NpbmcgPSBmYWxzZQpxdWVyeS1jYWNoZS10dGwgPSAwCnNsYXZlID0gdHJ1ZQp3ZWJzZXJ2ZXIgPSB0cnVlCndlYnNlcnZlci1hZGRyZXNzID0gMC4wLjAuMAp3ZWJzZXJ2ZXItYWxsb3ctZnJvbSA9IDAuMC4wLjAvMA==",
      "my.cnf": "W2NsaWVudF0KZGF0YWJhc2UgPSBwb3dlcmRucwpob3N0ID0gbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsCnBhc3N3b3JkID0gcGFzc3dvcmQKcG9ydCA9IDMzMDYKdXNlciA9IHBvd2VyZG5zCg=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "powerdns-db-admin"
    },
    "type": "Opaque",
    "data": {
      "DB_CONNECTION": "bXlzcWwrcHlteXNxbDovL3Jvb3Q6cGFzc3dvcmRAbWFyaWFkYi5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjMzMDYvcG93ZXJkbnM="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "powerdns-db-user"
    },
    "type": "Opaque",
    "data": {
      "DB_CONNECTION": "bXlzcWwrcHlteXNxbDovL3Bvd2VyZG5zOnBhc3N3b3JkQG1hcmlhZGIuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDozMzA2L3Bvd2VyZG5z"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "powerdns-bin"
    },
    "data": {
      "db-init.py": "#!/usr/bin/env python\n\n# Creates db and user for an OpenStack Service:\n# Set ROOT_DB_CONNECTION and DB_CONNECTION environment variables to contain\n# SQLAlchemy strings for the root connection to the database and the one you\n# wish the service to use. Alternatively, you can use an ini formatted config\n# at the location specified by OPENSTACK_CONFIG_FILE, and extract the string\n# from the key OPENSTACK_CONFIG_DB_KEY, in the section specified by\n# OPENSTACK_CONFIG_DB_SECTION.\n\nimport os\nimport sys\ntry:\n    import ConfigParser\n    PARSER_OPTS = {}\nexcept ImportError:\n    import configparser as ConfigParser\n    PARSER_OPTS = {\"strict\": False}\nimport logging\nfrom sqlalchemy import create_engine\n\n# Create logger, console handler and formatter\nlogger = logging.getLogger('OpenStack-Helm DB Init')\nlogger.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n# Set the formatter and add the handler\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\n\n# Get the connection string for the service db root user\nif \"ROOT_DB_CONNECTION\" in os.environ:\n    db_connection = os.environ['ROOT_DB_CONNECTION']\n    logger.info('Got DB root connection')\nelse:\n    logger.critical('environment variable ROOT_DB_CONNECTION not set')\n    sys.exit(1)\n\nmysql_x509 = os.getenv('MARIADB_X509', \"\")\nssl_args = {}\nif mysql_x509:\n    ssl_args = {'ssl': {'ca': '/etc/mysql/certs/ca.crt',\n                'key': '/etc/mysql/certs/tls.key',\n                'cert': '/etc/mysql/certs/tls.crt'}}\n\n# Get the connection string for the service db\nif \"OPENSTACK_CONFIG_FILE\" in os.environ:\n    os_conf = os.environ['OPENSTACK_CONFIG_FILE']\n    if \"OPENSTACK_CONFIG_DB_SECTION\" in os.environ:\n        os_conf_section = os.environ['OPENSTACK_CONFIG_DB_SECTION']\n    else:\n        logger.critical('environment variable OPENSTACK_CONFIG_DB_SECTION not set')\n        sys.exit(1)\n    if \"OPENSTACK_CONFIG_DB_KEY\" in os.environ:\n        os_conf_key = os.environ['OPENSTACK_CONFIG_DB_KEY']\n    else:\n        logger.critical('environment variable OPENSTACK_CONFIG_DB_KEY not set')\n        sys.exit(1)\n    try:\n        config = ConfigParser.RawConfigParser(**PARSER_OPTS)\n        logger.info(\"Using {0} as db config source\".format(os_conf))\n        config.read(os_conf)\n        logger.info(\"Trying to load db config from {0}:{1}\".format(\n            os_conf_section, os_conf_key))\n        user_db_conn = config.get(os_conf_section, os_conf_key)\n        logger.info(\"Got config from {0}\".format(os_conf))\n    except:\n        logger.critical(\"Tried to load config from {0} but failed.\".format(os_conf))\n        raise\nelif \"DB_CONNECTION\" in os.environ:\n    user_db_conn = os.environ['DB_CONNECTION']\n    logger.info('Got config from DB_CONNECTION env var')\nelse:\n    logger.critical('Could not get db config, either from config file or env var')\n    sys.exit(1)\n\n# Root DB engine\ntry:\n    root_engine_full = create_engine(db_connection)\n    root_user = root_engine_full.url.username\n    root_password = root_engine_full.url.password\n    drivername = root_engine_full.url.drivername\n    host = root_engine_full.url.host\n    port = root_engine_full.url.port\n    root_engine_url = ''.join([drivername, '://', root_user, ':', root_password, '@', host, ':', str (port)])\n    root_engine = create_engine(root_engine_url, connect_args=ssl_args)\n    connection = root_engine.connect()\n    connection.close()\n    logger.info(\"Tested connection to DB @ {0}:{1} as {2}\".format(\n        host, port, root_user))\nexcept:\n    logger.critical('Could not connect to database as root user')\n    raise\n\n# User DB engine\ntry:\n    user_engine = create_engine(user_db_conn, connect_args=ssl_args)\n    # Get our user data out of the user_engine\n    database = user_engine.url.database\n    user = user_engine.url.username\n    password = user_engine.url.password\n    logger.info('Got user db config')\nexcept:\n    logger.critical('Could not get user database config')\n    raise\n\n# Create DB\ntry:\n    root_engine.execute(\"CREATE DATABASE IF NOT EXISTS {0}\".format(database))\n    logger.info(\"Created database {0}\".format(database))\nexcept:\n    logger.critical(\"Could not create database {0}\".format(database))\n    raise\n\n# Create DB User\ntry:\n    root_engine.execute(\n        \"GRANT ALL ON `{0}`.* TO \\'{1}\\'@\\'%%\\' IDENTIFIED BY \\'{2}\\' {3}\".format(\n            database, user, password, mysql_x509))\n    logger.info(\"Created user {0} for {1}\".format(user, database))\nexcept:\n    logger.critical(\"Could not create user {0} for {1}\".format(user, database))\n    raise\n\n# Test connection\ntry:\n    connection = user_engine.connect()\n    connection.close()\n    logger.info(\"Tested connection to DB @ {0}:{1}/{2} as {3}\".format(\n        host, port, database, user))\nexcept:\n    logger.critical('Could not connect to database as user')\n    raise\n\nlogger.info('Finished DB Management')\n",
      "powerdns-mysql-sync.sh": "#!/bin/sh\n\n\n\nset -ex\n\nMYSQLCMD='mysql -r -N'\nif [ $(echo 'show tables' | $MYSQLCMD | wc -c) -eq 0 ]; then\n  $MYSQLCMD < /etc/pdns/schema.sql\nfi\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-powerdns",
      "namespace": "4Nr0Qi1VEapL7V"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-powerdns-db-init",
      "namespace": "4Nr0Qi1VEapL7V"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-default-powerdns-db-sync",
      "namespace": "4Nr0Qi1VEapL7V"
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "services",
          "endpoints",
          "jobs",
          "pods"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-powerdns",
      "namespace": "4Nr0Qi1VEapL7V"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-powerdns"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "powerdns",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-powerdns-db-init",
      "namespace": "4Nr0Qi1VEapL7V"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-powerdns-db-init"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "powerdns-db-init",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-powerdns-db-sync",
      "namespace": "4Nr0Qi1VEapL7V"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-default-powerdns-db-sync"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "powerdns-db-sync",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "powerdns"
    },
    "spec": {
      "ports": [
        {
          "port": 53,
          "name": "pdns-udp",
          "protocol": "UDP"
        },
        {
          "port": 53,
          "name": "pdns-tcp"
        }
      ],
      "selector": {
        "release_group": "release-name",
        "application": "powerdns",
        "component": "server"
      },
      "type": "NodePort",
      "externalTrafficPolicy": "Local"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "powerdns",
      "annotations": {
        "openstackhelm.openstack.org/release_uuid": ""
      },
      "labels": {
        "release_group": "release-name",
        "application": "powerdns",
        "component": "server"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "release_group": "release-name",
          "application": "powerdns",
          "component": "server"
        }
      },
      "revisionHistoryLimit": 3,
      "strategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "maxUnavailable": 1,
          "maxSurge": 3
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "powerdns",
            "component": "server"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": "",
            "configmap-bin-hash": "8ac8204ee6f8f678f39f7dc87b00d470ea89f28a124012f17ef2003aa08eeee9"
          }
        },
        "spec": {
          "serviceAccountName": "powerdns",
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "release_group",
                          "operator": "In",
                          "values": [
                            "release-name"
                          ]
                        },
                        {
                          "key": "application",
                          "operator": "In",
                          "values": [
                            "powerdns"
                          ]
                        },
                        {
                          "key": "component",
                          "operator": "In",
                          "values": [
                            "server"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 10
                }
              ]
            }
          },
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "powerdns-db-init,powerdns-db-sync"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "powerdns",
              "image": "docker.io/psitrax/powerdns:4.1.10",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "pdns_server"
              ],
              "ports": [
                {
                  "containerPort": 53,
                  "name": "pdns-udp",
                  "protocol": "UDP"
                },
                {
                  "containerPort": 53,
                  "name": "pdns-tcp"
                },
                {
                  "containerPort": 8081,
                  "name": "pdns-api"
                }
              ],
              "readinessProbe": {
                "tcpSocket": {
                  "port": 53
                }
              },
              "volumeMounts": [
                {
                  "name": "powerdns-etc",
                  "mountPath": "/etc/pdns/conf.d/pdns.conf",
                  "subPath": "pdns.conf",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "powerdns-etc",
              "secret": {
                "secretName": "powerdns-etc",
                "defaultMode": 292
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "powerdns-db-init",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "spec": {
      "backoffLimit": 1000,
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "powerdns",
            "component": "db-init"
          },
          "annotations": {
            "openstackhelm.openstack.org/release_uuid": ""
          }
        },
        "spec": {
          "serviceAccountName": "powerdns-db-init",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "powerdns-db-init-0",
              "image": "docker.io/openstackhelm/heat:queens-ubuntu_xenial",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "ROOT_DB_CONNECTION",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "powerdns-db-admin",
                      "key": "DB_CONNECTION"
                    }
                  }
                },
                {
                  "name": "DB_CONNECTION",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "powerdns-db-user",
                      "key": "DB_CONNECTION"
                    }
                  }
                }
              ],
              "command": [
                "/tmp/db-init.py"
              ],
              "volumeMounts": [
                {
                  "name": "pod-tmp",
                  "mountPath": "/tmp"
                },
                {
                  "name": "db-init-sh",
                  "mountPath": "/tmp/db-init.py",
                  "subPath": "db-init.py",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "pod-tmp",
              "emptyDir": {}
            },
            {
              "name": "db-init-sh",
              "configMap": {
                "name": "powerdns-bin",
                "defaultMode": 365
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "powerdns-db-sync"
    },
    "spec": {
      "template": {
        "metadata": {
          "labels": {
            "release_group": "release-name",
            "application": "powerdns",
            "component": "db-sync"
          }
        },
        "spec": {
          "serviceAccountName": "powerdns-db-sync",
          "restartPolicy": "OnFailure",
          "nodeSelector": {
            "openstack-control-plane": "enabled"
          },
          "initContainers": [
            {
              "name": "init",
              "image": "quay.io/airshipit/kubernetes-entrypoint:v1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsUser": 65534
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INTERFACE_NAME",
                  "value": "eth0"
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "default:mariadb"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "powerdns-db-init"
                },
                {
                  "name": "DEPENDENCY_DAEMONSET",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CONTAINER",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": ""
                },
                {
                  "name": "DEPENDENCY_CUSTOM_RESOURCE",
                  "value": ""
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "powerdns-db-sync",
              "image": "docker.io/psitrax/powerdns:4.1.10",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/tmp/powerdns-mysql-sync.sh"
              ],
              "volumeMounts": [
                {
                  "name": "powerdns-bin",
                  "mountPath": "/tmp/powerdns-mysql-sync.sh",
                  "subPath": "powerdns-mysql-sync.sh",
                  "readOnly": true
                },
                {
                  "name": "powerdns-etc",
                  "mountPath": "/etc/mysql/my.cnf",
                  "subPath": "my.cnf",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "powerdns-bin",
              "configMap": {
                "name": "powerdns-bin",
                "defaultMode": 365
              }
            },
            {
              "name": "powerdns-etc",
              "secret": {
                "secretName": "powerdns-etc",
                "defaultMode": 292
              }
            }
          ]
        }
      }
    }
  }
]