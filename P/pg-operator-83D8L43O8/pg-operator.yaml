apiVersion: v1
kind: ServiceAccount
metadata:
  name: pgo-deployer-sa
  namespace: 83D8L43O8
  labels:
    helm.sh/chart: pg-operator-1.2.0
    app.kubernetes.io/name: pg-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.2.0
    app.kubernetes.io/managed-by: Helm
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-pg-operator-cm
  namespace: 83D8L43O8
  labels:
    helm.sh/chart: pg-operator-1.2.0
    app.kubernetes.io/name: pg-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.2.0
    app.kubernetes.io/managed-by: Helm
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
data:
  values.yaml: |
    ---
    archive_mode: "true"
    archive_timeout: "60"
    backrest_aws_s3_bucket: ""
    backrest_aws_s3_endpoint: ""
    backrest_aws_s3_key: ""
    backrest_aws_s3_region: ""
    backrest_aws_s3_secret: ""
    backrest_aws_s3_uri_style: ""
    backrest_aws_s3_verify_tls: "true"
    backrest_gcs_bucket: ""
    backrest_gcs_endpoint: ""
    backrest_gcs_key_type: ""
    backrest_port: "2022"
    backrest_storage: "default"
    backup_storage: "default"
    badger: "false"
    ccp_image_prefix: "percona/percona-postgresql-operator"
    ccp_image_pull_secret: ""
    ccp_image_pull_secret_manifest: ""
    ccp_image_tag: "1.2.0-postgres-ha"
    create_rbac: "true"
    crunchy_debug: "false"
    db_name: ""
    db_password_age_days: "0"
    db_password_length: "24"
    db_port: "5432"
    db_replicas: "0"
    db_user: "testuser"
    default_exporter_memory: "24Mi"
    default_instance_memory: "128Mi"
    default_pgbackrest_memory: "48Mi"
    default_pgbouncer_memory: "24Mi"
    delete_operator_namespace: "false"
    delete_watched_namespaces: "false"
    disable_auto_failover: "false"
    exporterport: "9187"
    metrics: "false"
    namespace: "default"
    namespace_mode: "disabled"
    pgadmin_storage: "default"
    pgbadgerport: "10000"
    pgo_add_os_ca_store: "false"
    pgo_admin_password: "examplepassword"
    pgo_admin_perms: "*"
    pgo_admin_role_name: "pgoadmin"
    pgo_admin_username: "admin"
    pgo_apiserver_port: "8443"
    pgo_apiserver_url: "https://postgres-operator"
    pgo_client_cert_secret: "pgo.tls"
    pgo_client_container_install: "false"
    pgo_client_install: "false"
    pgo_client_version: "4.6.2"
    pgo_cluster_admin: "false"
    pgo_disable_eventing: "false"
    pgo_disable_tls: "false"
    pgo_image_prefix: "percona/percona-postgresql-operator"
    pgo_image_pull_policy: "Always"
    pgo_image_pull_secret: ""
    pgo_image_pull_secret_manifest: ""
    pgo_image_tag: "1.2.0"
    pgo_installation_name: "devtest"
    pgo_noauth_routes: ""
    pgo_operator_namespace: "default"
    pgo_tls_ca_store: ""
    pgo_tls_no_verify: "false"
    pod_anti_affinity: "preferred"
    pod_anti_affinity_pgbackrest: ""
    pod_anti_affinity_pgbouncer: ""
    primary_storage: "default"
    reconcile_rbac: "true"
    replica_storage: "default"
    scheduler_timeout: "3600"
    service_type: "ClusterIP"
    storage1_access_mode: "ReadWriteOnce"
    storage1_name: "default"
    storage1_size: "1G"
    storage1_type: "dynamic"
    storage2_access_mode: "ReadWriteMany"
    storage2_name: "hostpathstorage"
    storage2_size: "1G"
    storage2_type: "create"
    storage3_access_mode: "ReadWriteMany"
    storage3_name: "nfsstorage"
    storage3_size: "1G"
    storage3_supplemental_groups: "65534"
    storage3_type: "create"
    storage4_access_mode: "ReadWriteMany"
    storage4_match_labels: "crunchyzone=red"
    storage4_name: "nfsstoragered"
    storage4_size: "1G"
    storage4_supplemental_groups: "65534"
    storage4_type: "create"
    storage5_access_mode: "ReadWriteOnce"
    storage5_class: "fast"
    storage5_name: "storageos"
    storage5_size: "5Gi"
    storage5_type: "dynamic"
    storage6_access_mode: "ReadWriteOnce"
    storage6_class: "primarysite"
    storage6_name: "primarysite"
    storage6_size: "4G"
    storage6_type: "dynamic"
    storage7_access_mode: "ReadWriteOnce"
    storage7_class: "alternatesite"
    storage7_name: "alternatesite"
    storage7_size: "4G"
    storage7_type: "dynamic"
    storage8_access_mode: "ReadWriteOnce"
    storage8_class: "standard"
    storage8_name: "gce"
    storage8_size: "300M"
    storage8_type: "dynamic"
    storage9_access_mode: "ReadWriteOnce"
    storage9_class: "rook-ceph-block"
    storage9_name: "rook"
    storage9_size: "1Gi"
    storage9_type: "dynamic"
    sync_replication: "false"
    wal_storage: ""
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-pg-operator-cr
  labels:
    helm.sh/chart: pg-operator-1.2.0
    app.kubernetes.io/name: pg-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.2.0
    app.kubernetes.io/managed-by: Helm
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
  annotations:
    helm.sh/hook: post-install,post-upgrade,pre-delete
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-10"
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - create
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - list
      - get
      - create
      - delete
      - patch
  - apiGroups:
      - ""
    resources:
      - configmaps
      - services
      - persistentvolumeclaims
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - get
      - create
      - delete
      - patch
      - list
  - apiGroups:
      - apps
      - extensions
    resources:
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
      - create
      - delete
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - create
      - delete
      - patch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterroles
      - clusterrolebindings
      - roles
      - rolebindings
    verbs:
      - get
      - create
      - delete
      - bind
      - escalate
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
    verbs:
      - create
      - delete
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - delete
      - list
  - apiGroups:
      - pg.percona.com
    resources:
      - perconapgclusters
      - perconapgclusters/status
      - pgclusters
      - pgreplicas
      - pgpolicies
      - pgtasks
    verbs:
      - delete
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-pg-operator-crb
  labels:
    helm.sh/chart: pg-operator-1.2.0
    app.kubernetes.io/name: pg-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.2.0
    app.kubernetes.io/managed-by: Helm
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
  annotations:
    helm.sh/hook: post-install,post-upgrade,pre-delete
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-10"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-pg-operator-cr
subjects:
  - kind: ServiceAccount
    name: pgo-deployer-sa
    namespace: default
---
apiVersion: batch/v1
kind: Job
metadata:
  name: pgo-deploy-install
  namespace: 83D8L43O8
  labels:
    helm.sh/chart: pg-operator-1.2.0
    app.kubernetes.io/name: pg-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.2.0
    app.kubernetes.io/managed-by: Helm
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  backoffLimit: 0
  template:
    metadata:
      name: pgo-deploy
      labels:
        helm.sh/chart: pg-operator-1.2.0
        app.kubernetes.io/name: pg-operator
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: 1.2.0
        app.kubernetes.io/managed-by: Helm
        meta.helm.sh/release-name: release-name
        meta.helm.sh/release-namespace: default
    spec:
      serviceAccountName: pgo-deployer-sa
      restartPolicy: Never
      containers:
        - name: pgo-deploy
          image: percona/percona-postgresql-operator:1.2.0-pgo-deployer
          imagePullPolicy: IfNotPresent
          env:
            - name: DEPLOY_ACTION
              value: install
          volumeMounts:
            - name: deployer-conf
              mountPath: /conf
      volumes:
        - name: deployer-conf
          configMap:
            name: release-name-pg-operator-cm
---
apiVersion: batch/v1
kind: Job
metadata:
  name: pgo-deploy-uninstall
  namespace: 83D8L43O8
  labels:
    helm.sh/chart: pg-operator-1.2.0
    app.kubernetes.io/name: pg-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.2.0
    app.kubernetes.io/managed-by: Helm
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  backoffLimit: 0
  template:
    metadata:
      name: pgo-deploy
      labels:
        helm.sh/chart: pg-operator-1.2.0
        app.kubernetes.io/name: pg-operator
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: 1.2.0
        app.kubernetes.io/managed-by: Helm
        meta.helm.sh/release-name: release-name
        meta.helm.sh/release-namespace: default
    spec:
      serviceAccountName: pgo-deployer-sa
      restartPolicy: Never
      containers:
        - name: pgo-deploy
          image: percona/percona-postgresql-operator:1.2.0-pgo-deployer
          imagePullPolicy: IfNotPresent
          env:
            - name: DEPLOY_ACTION
              value: uninstall
          volumeMounts:
            - name: deployer-conf
              mountPath: /conf
      volumes:
        - name: deployer-conf
          configMap:
            name: release-name-pg-operator-cm
---
apiVersion: batch/v1
kind: Job
metadata:
  name: pgo-deploy-upgrade
  namespace: 83D8L43O8
  labels:
    helm.sh/chart: pg-operator-1.2.0
    app.kubernetes.io/name: pg-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.2.0
    app.kubernetes.io/managed-by: Helm
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: default
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  backoffLimit: 0
  template:
    metadata:
      name: pgo-deploy
      labels:
        helm.sh/chart: pg-operator-1.2.0
        app.kubernetes.io/name: pg-operator
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: 1.2.0
        app.kubernetes.io/managed-by: Helm
        meta.helm.sh/release-name: release-name
        meta.helm.sh/release-namespace: default
    spec:
      serviceAccountName: pgo-deployer-sa
      restartPolicy: Never
      containers:
        - name: pgo-deploy
          image: percona/percona-postgresql-operator:1.2.0-pgo-deployer
          imagePullPolicy: IfNotPresent
          env:
            - name: DEPLOY_ACTION
              value: update
          volumeMounts:
            - name: deployer-conf
              mountPath: /conf
      volumes:
        - name: deployer-conf
          configMap:
            name: release-name-pg-operator-cm
