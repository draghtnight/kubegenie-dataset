[
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "NetworkPolicy",
    "metadata": {
      "name": "opensearch-cluster-master-opensearch-net",
      "labels": {
        "helm.sh/chart": "opensearch-1.4.2",
        "app.kubernetes.io/name": "opensearch",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "opensearch-cluster-master"
      }
    },
    "spec": {
      "ingress": [
        {
          "from": [
            {
              "podSelector": {
                "matchLabels": {
                  "opensearch-cluster-master-transport-client": "true"
                }
              }
            }
          ]
        }
      ],
      "podSelector": {
        "matchLabels": {
          "opensearch-cluster-master-transport-client": "true"
        }
      }
    }
  },
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "elasticsearch-master-pdb"
    },
    "spec": {
      "maxUnavailable": 1,
      "selector": {
        "matchLabels": {
          "app": "elasticsearch-master"
        }
      }
    }
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "opensearch-cluster-master-pdb",
      "labels": {
        "helm.sh/chart": "opensearch-1.4.2",
        "app.kubernetes.io/name": "opensearch",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "opensearch-cluster-master"
      }
    },
    "spec": {
      "maxUnavailable": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "opensearch",
          "app.kubernetes.io/instance": "release-name"
        }
      }
    }
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "example-app",
      "labels": {
        "name": "example-app",
        "app.kubernetes.io/name": "example-app",
        "app.kubernetes.io/component": "app",
        "app.kubernetes.io/managed-by": "Helm",
        "app.mintel.com/env": "local",
        "app.mintel.com/region": "local"
      },
      "annotations": {
        "helm.sh/chart": "standard-application-stack-3.28.0"
      },
      "namespace": "default"
    },
    "spec": {
      "minAvailable": "50%",
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "example-app",
          "app.kubernetes.io/component": "app"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-localstack",
      "namespace": "0urXMnaC",
      "labels": {
        "helm.sh/chart": "localstack-0.3.5",
        "app.kubernetes.io/name": "localstack",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "latest",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-mailhog",
      "labels": {
        "helm.sh/chart": "mailhog-4.1.0",
        "app.kubernetes.io/name": "mailhog",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.0.1",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "0urXMnaC"
    },
    "imagePullSecrets": []
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-mariadb",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "mariadb",
        "helm.sh/chart": "mariadb-11.0.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "automountServiceAccountToken": false
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-opensearch-dashboards-dashboards",
      "labels": {
        "helm.sh/chart": "opensearch-dashboards-1.0.8",
        "app.kubernetes.io/name": "opensearch-dashboards",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "automountServiceAccountToken": true,
    "metadata": {
      "name": "release-name-redis",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.11.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "example-app",
      "namespace": "0urXMnaC",
      "labels": {
        "name": "example-app",
        "app.kubernetes.io/name": "example-app",
        "app.kubernetes.io/component": "app",
        "app.kubernetes.io/managed-by": "Helm",
        "app.mintel.com/env": "local",
        "app.mintel.com/region": "local"
      }
    },
    "automountServiceAccountToken": true
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-mariadb",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "mariadb",
        "helm.sh/chart": "mariadb-11.0.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "mariadb-root-password": "aHdVUzdDUk84Rg=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.6.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "postgres-password": "ZGREVWpQYVlDSA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-redis",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.11.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "redis-password": "MmR6SnFvcjc0NA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-mariadb",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "mariadb",
        "helm.sh/chart": "mariadb-11.0.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      }
    },
    "data": {
      "my.cnf": "[mysqld]\nskip-name-resolve\nexplicit_defaults_for_timestamp\nbasedir=/opt/bitnami/mariadb\nplugin_dir=/opt/bitnami/mariadb/plugin\nport=3306\nsocket=/opt/bitnami/mariadb/tmp/mysql.sock\ntmpdir=/opt/bitnami/mariadb/tmp\nmax_allowed_packet=16M\nbind-address=*\npid-file=/opt/bitnami/mariadb/tmp/mysqld.pid\nlog-error=/opt/bitnami/mariadb/logs/mysqld.log\ncharacter-set-server=UTF8\ncollation-server=utf8_general_ci\nslow_query_log=0\nslow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log\nlong_query_time=10.0\n\n[client]\nport=3306\nsocket=/opt/bitnami/mariadb/tmp/mysql.sock\ndefault-character-set=UTF8\nplugin_dir=/opt/bitnami/mariadb/plugin\n\n[manager]\nport=3306\nsocket=/opt/bitnami/mariadb/tmp/mysql.sock\npid-file=/opt/bitnami/mariadb/tmp/mysqld.pid"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "opensearch-cluster-master-config",
      "labels": {
        "helm.sh/chart": "opensearch-1.4.2",
        "app.kubernetes.io/name": "opensearch",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "opensearch-cluster-master"
      }
    },
    "data": {
      "opensearch.yml": "cluster.name: opensearch-cluster\n\n# Bind to all interfaces because we don't know what IP address Docker will assign to us.\nnetwork.host: 0.0.0.0\n\n# # minimum_master_nodes need to be explicitly set when bound on a public IP\n# # set to 1 to allow single node clusters\n# discovery.zen.minimum_master_nodes: 1\n\n# Setting network.host to a non-loopback address enables the annoying bootstrap checks. \"Single-node\" mode disables them again.\n# discovery.type: single-node\n\n# Start OpenSearch Security Demo Configuration\n# WARNING: revise all the lines below before you go into production\nplugins:\n  security:\n    ssl:\n      transport:\n        pemcert_filepath: esnode.pem\n        pemkey_filepath: esnode-key.pem\n        pemtrustedcas_filepath: root-ca.pem\n        enforce_hostname_verification: false\n      http:\n        enabled: true\n        pemcert_filepath: esnode.pem\n        pemkey_filepath: esnode-key.pem\n        pemtrustedcas_filepath: root-ca.pem\n    allow_unsafe_democertificates: true\n    allow_default_init_securityindex: true\n    authcz:\n      admin_dn:\n        - CN=kirk,OU=client,O=client,L=test,C=de\n    audit.type: internal_opensearch\n    enable_snapshot_restore_privilege: true\n    check_snapshot_restore_write_privileges: true\n    restapi:\n      roles_enabled: [\"all_access\", \"security_rest_api_access\"]\n    system_indices:\n      enabled: true\n      indices:\n        [\n          \".opendistro-alerting-config\",\n          \".opendistro-alerting-alert*\",\n          \".opendistro-anomaly-results*\",\n          \".opendistro-anomaly-detector*\",\n          \".opendistro-anomaly-checkpoints\",\n          \".opendistro-anomaly-detection-state\",\n          \".opendistro-reports-*\",\n          \".opendistro-notifications-*\",\n          \".opendistro-notebooks\",\n          \".opendistro-asynchronous-search-response*\",\n        ]\n######## End OpenSearch Security Demo Configuration ########\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-configuration",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.11.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "redis.conf": "# User-supplied common configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"\n# End of common configuration",
      "master.conf": "dir /data\n# User-supplied master configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of master configuration",
      "replica.conf": "dir /data\nslave-read-only yes\n# User-supplied replica configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of replica configuration"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-health",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.11.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "ping_readiness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] && [ \"$responseFirstWord\" != \"LOADING\" ] && [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] && [ \"$responseFirstWord\" != \"LOADING\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
      "ping_liveness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-scripts",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.11.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "start-master.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n",
      "start-replica.sh": "#!/bin/bash\n\nget_port() {\n    hostname=\"$1\"\n    type=\"$2\"\n\n    port_var=$(echo \"${hostname^^}_SERVICE_PORT_$type\" | sed \"s/-/_/g\")\n    port=${!port_var}\n\n    if [ -z \"$port\" ]; then\n        case $type in\n            \"SENTINEL\")\n                echo 26379\n                ;;\n            \"REDIS\")\n                echo 6379\n                ;;\n        esac\n    else\n        echo $port\n    fi\n}\n\nget_full_hostname() {\n    hostname=\"$1\"\n    echo \"${hostname}.${HEADLESS_SERVICE}\"\n}\n\nREDISPORT=$(get_port \"$HOSTNAME\" \"REDIS\")\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\nif [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\n\necho \"\" >> /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-port $REDISPORT\" >> /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-ip $(get_full_hostname \"$HOSTNAME\")\" >> /opt/bitnami/redis/etc/replica.conf\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--slaveof\" \"${REDIS_MASTER_HOST}\" \"${REDIS_MASTER_PORT_NUMBER}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_MASTER_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/replica.conf\")\nexec redis-server \"${ARGS[@]}\"\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "labels": {
        "helm.sh/chart": "opensearch-dashboards-1.0.8",
        "app.kubernetes.io/name": "opensearch-dashboards",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "name": "release-name-opensearch-dashboards-dashboards-rolebinding"
    },
    "roleRef": {
      "kind": "Role",
      "name": "release-name-opensearch-dashboards-dashboards",
      "apiGroup": "rbac.authorization.k8s.io"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-opensearch-dashboards-dashboards",
        "namespace": "default"
      }
    ]
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "elasticsearch-master",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {}
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "ports": [
        {
          "name": "http",
          "protocol": "TCP",
          "port": 9200
        },
        {
          "name": "transport",
          "protocol": "TCP",
          "port": 9300
        }
      ]
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "elasticsearch-master-headless",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "selector": {
        "app": "elasticsearch-master"
      },
      "ports": [
        {
          "name": "http",
          "port": 9200
        },
        {
          "name": "transport",
          "port": 9300
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-kibana",
      "labels": {
        "app": "kibana",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 5601,
          "protocol": "TCP",
          "name": "http",
          "targetPort": 5601
        }
      ],
      "selector": {
        "app": "kibana",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-localstack",
      "namespace": "0urXMnaC",
      "labels": {
        "helm.sh/chart": "localstack-0.3.5",
        "app.kubernetes.io/name": "localstack",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "latest",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "edge",
          "port": 4566,
          "targetPort": 4566
        },
        {
          "name": "es",
          "port": 4571,
          "targetPort": 4571
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "localstack",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-mailhog",
      "labels": {
        "helm.sh/chart": "mailhog-4.1.0",
        "app.kubernetes.io/name": "mailhog",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.0.1",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "0urXMnaC"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http",
          "port": 8025,
          "protocol": "TCP",
          "targetPort": "http"
        },
        {
          "name": "tcp-smtp",
          "port": 1025,
          "protocol": "TCP",
          "targetPort": "tcp-smtp"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "mailhog",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-mariadb",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "mariadb",
        "helm.sh/chart": "mariadb-11.0.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "sessionAffinity": "None",
      "ports": [
        {
          "name": "mysql",
          "port": 3306,
          "protocol": "TCP",
          "targetPort": "mysql",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "mariadb",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-opensearch-dashboards",
      "labels": {
        "helm.sh/chart": "opensearch-dashboards-1.0.8",
        "app.kubernetes.io/name": "opensearch-dashboards",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 5601,
          "protocol": "TCP",
          "name": "http",
          "targetPort": 5601
        }
      ],
      "selector": {
        "app": "opensearch-dashboards",
        "release": "release-name"
      }
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "opensearch-cluster-master",
      "labels": {
        "helm.sh/chart": "opensearch-1.4.2",
        "app.kubernetes.io/name": "opensearch",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "opensearch-cluster-master"
      },
      "annotations": {}
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "app.kubernetes.io/name": "opensearch",
        "app.kubernetes.io/instance": "release-name"
      },
      "ports": [
        {
          "name": "http",
          "protocol": "TCP",
          "port": 9200
        },
        {
          "name": "transport",
          "protocol": "TCP",
          "port": 9300
        }
      ]
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "opensearch-cluster-master-headless",
      "labels": {
        "helm.sh/chart": "opensearch-1.4.2",
        "app.kubernetes.io/name": "opensearch",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "opensearch-cluster-master"
      },
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "selector": {
        "app.kubernetes.io/name": "opensearch",
        "app.kubernetes.io/instance": "release-name"
      },
      "ports": [
        {
          "name": "http",
          "port": 9200
        },
        {
          "name": "transport",
          "port": 9300
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-hl",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.6.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.6.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "sessionAffinity": "None",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-headless",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.11.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-master",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.11.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "master"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "internalTrafficPolicy": "Cluster",
      "sessionAffinity": "None",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "master"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-replicas",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.11.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "replica"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "internalTrafficPolicy": "Cluster",
      "sessionAffinity": "None",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "replica"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "example-app",
      "namespace": "0urXMnaC",
      "labels": {
        "name": "example-app",
        "app.kubernetes.io/name": "example-app",
        "app.kubernetes.io/component": "app",
        "app.kubernetes.io/managed-by": "Helm",
        "app.mintel.com/env": "local",
        "app.mintel.com/region": "local"
      },
      "annotations": {
        "helm.sh/chart": "standard-application-stack-3.28.0"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "main-http",
          "port": 8000,
          "targetPort": 8000
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "example-app",
        "app.kubernetes.io/component": "app"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-kibana",
      "labels": {
        "app": "kibana",
        "release": "release-name"
      }
    },
    "spec": {
      "replicas": 1,
      "strategy": {
        "type": "Recreate"
      },
      "selector": {
        "matchLabels": {
          "app": "kibana",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "kibana",
            "release": "release-name"
          },
          "annotations": null
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1000
          },
          "volumes": null,
          "containers": [
            {
              "name": "kibana",
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "runAsNonRoot": true,
                "runAsUser": 11540,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "image": "docker.elastic.co/kibana/kibana:7.5.2",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "SERVER_HOST",
                  "value": "0.0.0.0"
                }
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 3,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "#!/usr/bin/env bash -e\nhttp () {\n    local path=\"${1}\"\n    set -- -XGET -s --fail\n\n    if [ -n \"${ELASTICSEARCH_USERNAME}\" ] && [ -n \"${ELASTICSEARCH_PASSWORD}\" ]; then\n      set -- \"$@\" -u \"${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\"\n    fi\n\n    STATUS=$(curl --output /dev/null --write-out \"%{http_code}\" -k \"$@\" \"http://localhost:5601${path}\")\n    if [[ \"${STATUS}\" -eq 200 ]]; then\n      exit 0\n    fi\n\n    echo \"Error: Got HTTP code ${STATUS} but expected a 200\"\n    exit 1\n}\n\nhttp \"/app/kibana\"\n"
                  ]
                }
              },
              "ports": [
                {
                  "containerPort": 5601
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "1000m",
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "500Mi"
                }
              },
              "volumeMounts": null
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-localstack",
      "namespace": "0urXMnaC",
      "labels": {
        "helm.sh/chart": "localstack-0.3.5",
        "app.kubernetes.io/name": "localstack",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "latest",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "localstack",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "localstack",
            "app.kubernetes.io/instance": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-localstack",
          "securityContext": {},
          "containers": [
            {
              "name": "localstack",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "localstack/localstack:latest",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "edge",
                  "containerPort": 4566,
                  "protocol": "TCP"
                },
                {
                  "name": "es",
                  "containerPort": 4571,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "httpGet": {
                  "path": "/health",
                  "port": "edge"
                }
              },
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 0,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "httpGet": {
                  "path": "/health",
                  "port": "edge"
                }
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "dind-tls",
                  "mountPath": "/opt/docker/tls"
                },
                {
                  "name": "release-name-localstack-init-scripts-config",
                  "mountPath": "/docker-entrypoint-initaws.d"
                }
              ],
              "env": [
                {
                  "name": "DEBUG",
                  "value": "0"
                },
                {
                  "name": "SERVICES",
                  "value": "sns, sqs, s3"
                },
                {
                  "name": "DOCKER_HOST",
                  "value": "tcp://localhost:2376"
                },
                {
                  "name": "DOCKER_TLS_VERIFY",
                  "value": "1"
                },
                {
                  "name": "DOCKER_CERT_PATH",
                  "value": "/opt/docker/tls/client"
                },
                {
                  "name": "AWS_DEFAULT_REGION",
                  "value": "us-east-1"
                },
                {
                  "name": "AWS_ACCESS_KEY_ID",
                  "value": "test"
                },
                {
                  "name": "AWS_SECRET_ACCESS_KEY",
                  "value": "test"
                }
              ]
            },
            {
              "name": "dind",
              "image": "docker:20.10-dind",
              "securityContext": {
                "privileged": true
              },
              "env": [
                {
                  "name": "DOCKER_TLS_CERTDIR",
                  "value": "/opt/docker/tls"
                }
              ],
              "volumeMounts": [
                {
                  "name": "dind-storage",
                  "mountPath": "/var/lib/docker"
                },
                {
                  "name": "dind-tls",
                  "mountPath": "/opt/docker/tls"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "dind-storage",
              "emptyDir": {}
            },
            {
              "name": "dind-tls",
              "emptyDir": {}
            },
            {
              "name": "release-name-localstack-init-scripts-config",
              "configMap": {
                "name": "release-name-localstack-init-scripts-config"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-mailhog",
      "labels": {
        "helm.sh/chart": "mailhog-4.1.0",
        "app.kubernetes.io/name": "mailhog",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.0.1",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "0urXMnaC"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "mailhog",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "mailhog",
            "app.kubernetes.io/instance": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-mailhog",
          "automountServiceAccountToken": false,
          "securityContext": {
            "fsGroup": 1000,
            "runAsGroup": 1000,
            "runAsNonRoot": true,
            "runAsUser": 1000
          },
          "containers": [
            {
              "name": "mailhog",
              "image": "docker.io/mailhog/mailhog:v1.0.1",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "MH_HOSTNAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8025,
                  "protocol": "TCP"
                },
                {
                  "name": "tcp-smtp",
                  "containerPort": 1025,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "tcpSocket": {
                  "port": "tcp-smtp"
                },
                "initialDelaySeconds": 10,
                "timeoutSeconds": 1
              },
              "readinessProbe": {
                "tcpSocket": {
                  "port": "tcp-smtp"
                }
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "privileged": false,
                "readOnlyRootFilesystem": true
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-opensearch-dashboards",
      "labels": {
        "helm.sh/chart": "opensearch-dashboards-1.0.8",
        "app.kubernetes.io/name": "opensearch-dashboards",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "strategy": {
        "type": "Recreate"
      },
      "selector": {
        "matchLabels": {
          "app": "opensearch-dashboards",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opensearch-dashboards",
            "release": "release-name"
          },
          "annotations": null
        },
        "spec": {
          "securityContext": {},
          "serviceAccountName": "release-name-opensearch-dashboards-dashboards",
          "volumes": null,
          "containers": [
            {
              "name": "dashboards",
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "runAsNonRoot": true,
                "runAsUser": 11243,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "image": "opensearchproject/opensearch-dashboards:1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "OPENSEARCH_HOSTS",
                  "value": "https://opensearch-cluster-master:9200"
                },
                {
                  "name": "SERVER_HOST",
                  "value": "0.0.0.0"
                }
              ],
              "ports": [
                {
                  "containerPort": 5601,
                  "name": "http",
                  "protocol": "TCP"
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "512M"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "512M"
                }
              },
              "volumeMounts": null
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "example-app",
      "namespace": "0urXMnaC",
      "annotations": {
        "helm.sh/chart": "standard-application-stack-3.28.0",
        "secret.reloader.stakater.com/reload": "example-app-app"
      },
      "labels": {
        "name": "example-app",
        "app.kubernetes.io/name": "example-app",
        "app.kubernetes.io/component": "app",
        "app.kubernetes.io/managed-by": "Helm",
        "app.mintel.com/env": "local",
        "app.mintel.com/region": "local"
      }
    },
    "spec": {
      "minReadySeconds": 10,
      "replicas": 2,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "example-app",
          "app.kubernetes.io/component": "app"
        }
      },
      "strategy": {
        "rollingUpdate": {
          "maxSurge": "15%",
          "maxUnavailable": "10%"
        },
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "name": "example-app",
            "app.kubernetes.io/name": "example-app",
            "app.kubernetes.io/component": "app",
            "app.kubernetes.io/managed-by": "Helm",
            "app.mintel.com/env": "local",
            "app.mintel.com/region": "local"
          }
        },
        "spec": {
          "imagePullSecrets": [
            {
              "name": "image-pull-gitlab"
            },
            {
              "name": "image-pull-docker-hub"
            }
          ],
          "securityContext": {
            "runAsUser": 1000
          },
          "serviceAccountName": "example-app",
          "terminationGracePeriodSeconds": 30,
          "containers": [
            {
              "name": "main",
              "image": "k3d-default.localhost:5000/test:auto-replaced",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/app/docker-entrypoint.sh"
              ],
              "env": [
                {
                  "name": "KUBERNETES_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "INIT_DB",
                  "value": "1"
                },
                {
                  "name": "SENTRY_DONT_SEND_EVENTS",
                  "value": "1"
                },
                {
                  "name": "DEBUG",
                  "value": "1"
                },
                {
                  "name": "APP_ENVIRONMENT",
                  "value": "local"
                },
                {
                  "name": "RUNTIME_ENVIRONMENT",
                  "value": "kubernetes"
                }
              ],
              "envFrom": null,
              "ports": [
                {
                  "containerPort": 8000,
                  "name": "http"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 0,
                "timeoutSeconds": 1,
                "periodSeconds": 10
              },
              "startupProbe": {
                "httpGet": {
                  "path": "/healthz",
                  "port": "http",
                  "scheme": "HTTP"
                },
                "failureThreshold": 60,
                "periodSeconds": 5
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/readiness",
                  "port": "http",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 0,
                "timeoutSeconds": 1,
                "periodSeconds": 10
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": null
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "elasticsearch-master",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {
        "esMajorVersion": "7"
      }
    },
    "spec": {
      "serviceName": "elasticsearch-master-headless",
      "selector": {
        "matchLabels": {
          "app": "elasticsearch-master"
        }
      },
      "replicas": 3,
      "podManagementPolicy": "Parallel",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "elasticsearch-master"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "30Gi"
              }
            }
          }
        }
      ],
      "template": {
        "metadata": {
          "name": "elasticsearch-master",
          "labels": {
            "heritage": "Helm",
            "release": "release-name",
            "chart": "elasticsearch",
            "app": "elasticsearch-master"
          },
          "annotations": null
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1000,
            "runAsUser": 1000
          },
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "app",
                        "operator": "In",
                        "values": [
                          "elasticsearch-master"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              ]
            }
          },
          "terminationGracePeriodSeconds": 120,
          "volumes": null,
          "initContainers": [
            {
              "name": "configure-sysctl",
              "securityContext": {
                "runAsUser": 11567,
                "privileged": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "image": "docker.elastic.co/elasticsearch/elasticsearch:7.5.2",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sysctl",
                "-w",
                "vm.max_map_count=262144"
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "containers": [
            {
              "name": "elasticsearch",
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "runAsNonRoot": true,
                "runAsUser": 10201,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "image": "docker.elastic.co/elasticsearch/elasticsearch:7.5.2",
              "imagePullPolicy": "IfNotPresent",
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 3,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "#!/usr/bin/env bash -e\n# If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=green&timeout=1s' )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\nhttp () {\n    local path=\"${1}\"\n    if [ -n \"${ELASTIC_USERNAME}\" ] && [ -n \"${ELASTIC_PASSWORD}\" ]; then\n      BASIC_AUTH=\"-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}\"\n    else\n      BASIC_AUTH=''\n    fi\n    curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200${path}\n}\n\nif [ -f \"${START_FILE}\" ]; then\n    echo 'Elasticsearch is already running, lets check the node is healthy and there are master nodes available'\n    http \"/_cluster/health?timeout=0s\"\nelse\n    echo 'Waiting for elasticsearch cluster to become cluster to be ready (request params: \"wait_for_status=green&timeout=1s\" )'\n    if http \"/_cluster/health?wait_for_status=green&timeout=1s\" ; then\n        touch ${START_FILE}\n        exit 0\n    else\n        echo 'Cluster is not yet ready (request params: \"wait_for_status=green&timeout=1s\" )'\n        exit 1\n    fi\nfi\n"
                  ]
                }
              },
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9200
                },
                {
                  "name": "transport",
                  "containerPort": 9300
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "1000m",
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "2Gi"
                }
              },
              "env": [
                {
                  "name": "node.name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "cluster.initial_master_nodes",
                  "value": "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
                },
                {
                  "name": "discovery.seed_hosts",
                  "value": "elasticsearch-master-headless"
                },
                {
                  "name": "cluster.name",
                  "value": "elasticsearch"
                },
                {
                  "name": "network.host",
                  "value": "0.0.0.0"
                },
                {
                  "name": "ES_JAVA_OPTS",
                  "value": "-Xmx1g -Xms1g"
                },
                {
                  "name": "node.data",
                  "value": "true"
                },
                {
                  "name": "node.ingest",
                  "value": "true"
                },
                {
                  "name": "node.master",
                  "value": "true"
                }
              ],
              "volumeMounts": [
                {
                  "name": "elasticsearch-master",
                  "mountPath": "/usr/share/elasticsearch/data"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-mariadb",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "mariadb",
        "helm.sh/chart": "mariadb-11.0.10",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      }
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 10,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "mariadb",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "primary"
        }
      },
      "serviceName": "release-name-mariadb",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configuration": "16c9d408aace65890f44730fa15a5bb9c5549b3a1ae1aa792c0e7802fb4c2d4a"
          },
          "labels": {
            "app.kubernetes.io/name": "mariadb",
            "helm.sh/chart": "mariadb-11.0.10",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "primary"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-mariadb",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "mariadb",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "containers": [
            {
              "name": "mariadb",
              "image": "docker.io/bitnami/mariadb:10.6.8-debian-10-r0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 11816,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MARIADB_ROOT_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-mariadb",
                      "key": "mariadb-root-password"
                    }
                  }
                },
                {
                  "name": "MARIADB_DATABASE",
                  "value": "my_database"
                }
              ],
              "ports": [
                {
                  "name": "mysql",
                  "containerPort": 3306
                }
              ],
              "livenessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 120,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "password_aux=\"${MARIADB_ROOT_PASSWORD:-}\"\nif [[ -f \"${MARIADB_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MARIADB_ROOT_PASSWORD_FILE\")\nfi\nmysqladmin status -uroot -p\"${password_aux}\"\n"
                  ]
                }
              },
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "password_aux=\"${MARIADB_ROOT_PASSWORD:-}\"\nif [[ -f \"${MARIADB_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MARIADB_ROOT_PASSWORD_FILE\")\nfi\nmysqladmin status -uroot -p\"${password_aux}\"\n"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/bitnami/mariadb"
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/mariadb/conf/my.cnf",
                  "subPath": "my.cnf"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-mariadb"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "labels": {
              "app.kubernetes.io/name": "mariadb",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/component": "primary"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "opensearch-cluster-master",
      "labels": {
        "helm.sh/chart": "opensearch-1.4.2",
        "app.kubernetes.io/name": "opensearch",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.1.0",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "opensearch-cluster-master"
      },
      "annotations": {
        "majorVersion": "1"
      }
    },
    "spec": {
      "serviceName": "opensearch-cluster-master-headless",
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "opensearch",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "replicas": 3,
      "podManagementPolicy": "Parallel",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "opensearch-cluster-master"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ],
      "template": {
        "metadata": {
          "name": "opensearch-cluster-master",
          "labels": {
            "helm.sh/chart": "opensearch-1.4.2",
            "app.kubernetes.io/name": "opensearch",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/version": "1.1.0",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "opensearch-cluster-master"
          },
          "annotations": {
            "configchecksum": "c9fbae0fd4d86750538bcd0a2a95194687759588059c5c1eada21050286c6f8"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1000,
            "runAsUser": 1000
          },
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "topologyKey": "kubernetes.io/hostname",
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app.kubernetes.io/instance",
                          "operator": "In",
                          "values": [
                            "release-name"
                          ]
                        },
                        {
                          "key": "app.kubernetes.io/name",
                          "operator": "In",
                          "values": [
                            "opensearch"
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "terminationGracePeriodSeconds": 120,
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "opensearch-cluster-master-config"
              }
            }
          ],
          "enableServiceLinks": true,
          "initContainers": [
            {
              "name": "fsgroup-volume",
              "image": "busybox:latest",
              "command": [
                "sh",
                "-c"
              ],
              "args": [
                "chown -R 1000:1000 /usr/share/opensearch/data"
              ],
              "securityContext": {
                "runAsUser": 11536,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "volumeMounts": [
                {
                  "name": "opensearch-cluster-master",
                  "mountPath": "/usr/share/opensearch/data"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "opensearch",
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "runAsNonRoot": true,
                "runAsUser": 11723,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "image": "opensearchproject/opensearch:1.1.0",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9200
                },
                {
                  "name": "transport",
                  "containerPort": 9300
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "1000m",
                  "memory": "100Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "node.name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "cluster.initial_master_nodes",
                  "value": "opensearch-cluster-master-0,opensearch-cluster-master-1,opensearch-cluster-master-2,"
                },
                {
                  "name": "discovery.seed_hosts",
                  "value": "opensearch-cluster-master-headless"
                },
                {
                  "name": "cluster.name",
                  "value": "opensearch-cluster"
                },
                {
                  "name": "network.host",
                  "value": "0.0.0.0"
                },
                {
                  "name": "OPENSEARCH_JAVA_OPTS",
                  "value": "-Xmx512M -Xms512M"
                },
                {
                  "name": "node.roles",
                  "value": "master,ingest,data,remote_cluster_client,"
                }
              ],
              "volumeMounts": [
                {
                  "name": "opensearch-cluster-master",
                  "mountPath": "/usr/share/opensearch/data"
                },
                {
                  "name": "config",
                  "mountPath": "/usr/share/opensearch/config/opensearch.yml",
                  "subPath": "opensearch.yml"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.6.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "replicas": 1,
      "serviceName": "release-name-postgresql-hl",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-11.6.3",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "primary"
          },
          "annotations": null
        },
        "spec": {
          "serviceAccountName": "default",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "postgresql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "hostNetwork": false,
          "hostIPC": false,
          "initContainers": null,
          "containers": [
            {
              "name": "postgresql",
              "image": "docker.io/bitnami/postgresql:13.5.0-debian-10-r52",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 11482,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgres-password"
                    }
                  }
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432"
                  ]
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-redis-master",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.11.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "master"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "master"
        }
      },
      "serviceName": "release-name-redis-headless",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.11.2",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "master"
          },
          "annotations": {
            "checksum/configmap": "5d04c5c92bc38b8e2568385079acc7e58f4409e8d6f63e2fb5cb504aa8ce3ac4",
            "checksum/health": "4600852b99df1cdb15d8cae7b65a1fc14ea6d1472bb419a0fc81eb4c91b52339",
            "checksum/scripts": "b413bd776fb2b1a1b9b17ba0355e75ab3fdc12c7793245a95ccb59f8b2ff9747",
            "checksum/secret": "8378466bbb456e68d63ec26d9c42560a4adfe425318adb52568edd447359f06b"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "serviceAccountName": "release-name-redis",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "redis",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "master"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "terminationGracePeriodSeconds": 30,
          "containers": [
            {
              "name": "redis",
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r23",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 10435,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master"
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no"
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379"
                }
              ],
              "ports": [
                {
                  "name": "redis",
                  "containerPort": 6379
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 6,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 2,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "start-scripts",
                  "mountPath": "/opt/bitnami/scripts/start-scripts"
                },
                {
                  "name": "health",
                  "mountPath": "/health"
                },
                {
                  "name": "redis-data",
                  "mountPath": "/data",
                  "subPath": null
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/redis/mounted-etc"
                },
                {
                  "name": "redis-tmp-conf",
                  "mountPath": "/opt/bitnami/redis/etc/"
                },
                {
                  "name": "tmp",
                  "mountPath": "/tmp"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "start-scripts",
              "configMap": {
                "name": "release-name-redis-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "health",
              "configMap": {
                "name": "release-name-redis-health",
                "defaultMode": 493
              }
            },
            {
              "name": "config",
              "configMap": {
                "name": "release-name-redis-configuration"
              }
            },
            {
              "name": "redis-tmp-conf",
              "emptyDir": {}
            },
            {
              "name": "tmp",
              "emptyDir": {}
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "redis-data",
            "labels": {
              "app.kubernetes.io/name": "redis",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/component": "master"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-redis-replicas",
      "namespace": "0urXMnaC",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.11.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "replica"
      }
    },
    "spec": {
      "replicas": 0,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "replica"
        }
      },
      "serviceName": "release-name-redis-headless",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.11.2",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "replica"
          },
          "annotations": {
            "checksum/configmap": "5d04c5c92bc38b8e2568385079acc7e58f4409e8d6f63e2fb5cb504aa8ce3ac4",
            "checksum/health": "4600852b99df1cdb15d8cae7b65a1fc14ea6d1472bb419a0fc81eb4c91b52339",
            "checksum/scripts": "b413bd776fb2b1a1b9b17ba0355e75ab3fdc12c7793245a95ccb59f8b2ff9747",
            "checksum/secret": "96080fc2ad24a025955784ad2e3d3e205f35678102ffe1aa099977dbfd59b86a"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "serviceAccountName": "release-name-redis",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "redis",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "replica"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "terminationGracePeriodSeconds": 30,
          "containers": [
            {
              "name": "redis",
              "image": "docker.io/bitnami/redis:6.2.7-debian-10-r23",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 11454,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-replica.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "slave"
                },
                {
                  "name": "REDIS_MASTER_HOST",
                  "value": "release-name-redis-master-0.release-name-redis-headless.default.svc.cluster.local"
                },
                {
                  "name": "REDIS_MASTER_PORT_NUMBER",
                  "value": "6379"
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no"
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_MASTER_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379"
                }
              ],
              "ports": [
                {
                  "name": "redis",
                  "containerPort": 6379
                }
              ],
              "startupProbe": {
                "failureThreshold": 22,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "tcpSocket": {
                  "port": "redis"
                }
              },
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 6,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local_and_master.sh 5"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 2,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local_and_master.sh 1"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "start-scripts",
                  "mountPath": "/opt/bitnami/scripts/start-scripts"
                },
                {
                  "name": "health",
                  "mountPath": "/health"
                },
                {
                  "name": "redis-data",
                  "mountPath": "/data",
                  "subPath": null
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/redis/mounted-etc"
                },
                {
                  "name": "redis-tmp-conf",
                  "mountPath": "/opt/bitnami/redis/etc"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "start-scripts",
              "configMap": {
                "name": "release-name-redis-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "health",
              "configMap": {
                "name": "release-name-redis-health",
                "defaultMode": 493
              }
            },
            {
              "name": "config",
              "configMap": {
                "name": "release-name-redis-configuration"
              }
            },
            {
              "name": "redis-tmp-conf",
              "emptyDir": {}
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "redis-data",
            "labels": {
              "app.kubernetes.io/name": "redis",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/component": "replica"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-ovbkh-test",
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "release-name-nfjaw-test",
          "image": "docker.elastic.co/elasticsearch/elasticsearch:7.5.2",
          "command": [
            "sh",
            "-c",
            "#!/usr/bin/env bash -e\ncurl -XGET --fail 'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'\n"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]