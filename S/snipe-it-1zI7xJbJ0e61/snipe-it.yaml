apiVersion: v1
kind: Secret
metadata:
  name: release-name-mariadb-credentials
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 10.7.4
    helm-revision: "1"
    helm.sh/chart: mariadb-3.0.5
stringData:
  mariadb-password: testpass
  mariadb-root-password: testroot
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis-credentials
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.1
    helm-revision: "1"
    helm.sh/chart: redis-3.0.5
stringData:
  redis-password: testpass
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: snipe-it-4.0.1
    app.kubernetes.io/name: snipe-it
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 6.0.2
    app.kubernetes.io/managed-by: Helm
  name: rediscreds
data:
  redis-password: b2hNenpWcmZHVkYwcVl3YkRWc2ZhOUpmTGxMUnVFbzBwZXlGeDlQTmZlMW1ROVlLZ1c=
  url: cmVkaXM6Ly88bmlsPjpvaE16elZyZkdWRjBxWXdiRFZzZmE5SmZMbExSdUVvMHBleUZ4OVBOZmUxbVE5WUtnV0ByZWxlYXNlLW5hbWUtcmVkaXM6NjM3OS8w
  plainporthost: cmVsZWFzZS1uYW1lLXJlZGlzOjYzNzk=
  plainhost: cmVsZWFzZS1uYW1lLXJlZGlz
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: snipe-it-4.0.1
    app.kubernetes.io/name: snipe-it
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 6.0.2
    app.kubernetes.io/managed-by: Helm
  name: mariadbcreds
data:
  mariadb-password: b0ZSVm0yZHV1ck13Zm12T3RSYUd1TzBqNjFZMEpsdXhjNW1Bb2NsSGZNb29IUXhseGE=
  mariadb-root-password: NXBxM244cFdtZ3c5M0luTE1IR29yZldGVG1wMVpxR0JIa1JIcXZvemFHU09qR2pqaGQ=
  url: c3FsOi8vc25pcGUtaXQ6b0ZSVm0yZHV1ck13Zm12T3RSYUd1TzBqNjFZMEpsdXhjNW1Bb2NsSGZNb29IUXhseGFAcmVsZWFzZS1uYW1lLW1hcmlhZGI6MzMwNi9zbmlwZS1pdA==
  urlnossl: c3FsOi8vc25pcGUtaXQ6b0ZSVm0yZHV1ck13Zm12T3RSYUd1TzBqNjFZMEpsdXhjNW1Bb2NsSGZNb29IUXhseGFAcmVsZWFzZS1uYW1lLW1hcmlhZGI6MzMwNi9zbmlwZS1pdD9zc2xtb2RlPWRpc2FibGU=
  plainporthost: cmVsZWFzZS1uYW1lLW1hcmlhZGI6MzMwNg==
  plainhost: cmVsZWFzZS1uYW1lLW1hcmlhZGI=
  jdbc: amRiYzpzcWxzZXJ2ZXI6Ly9yZWxlYXNlLW5hbWUtbWFyaWFkYjozMzA2L3NuaXBlLWl0
  jdbc-mysql: amRiYzpteXNxbDovL3JlbGVhc2UtbmFtZS1tYXJpYWRiOjMzMDYvc25pcGUtaXQ=
  jdbc-mariadb: amRiYzptYXJpYWRiOi8vcmVsZWFzZS1uYW1lLW1hcmlhZGI6MzMwNi9zbmlwZS1pdA==
type: Opaque
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: snipeit-secrets
data:
  APP_KEY: WGV1d3dnZ2E2ZEJZUGJuVWk4eW9BZVZSSkR5Q0hKREE=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.1
    helm-revision: "1"
    helm.sh/chart: redis-3.0.5
data:
  ping_liveness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "failed to connect using password: $REDIS_PASSWORD response: $response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-snipe-it-backups
  labels:
    helm.sh/chart: snipe-it-4.0.1
    app.kubernetes.io/name: snipe-it
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 6.0.2
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 999Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-snipe-it-data
  labels:
    helm.sh/chart: snipe-it-4.0.1
    app.kubernetes.io/name: snipe-it
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 6.0.2
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 999Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-snipe-it-logs
  labels:
    helm.sh/chart: snipe-it-4.0.1
    app.kubernetes.io/name: snipe-it
    app.kubernetes.io/instance: release-name
    helm-revision: "1"
    app.kubernetes.io/version: 6.0.2
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 999Gi
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-mariadb
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 10.7.4
    helm-revision: "1"
    helm.sh/chart: mariadb-3.0.5
  annotations: null
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP
      name: main
  selector:
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.1
    helm-revision: "1"
    helm.sh/chart: redis-3.0.5
  annotations: null
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
      name: main
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-snipe-it
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: snipe-it
    app.kubernetes.io/version: 6.0.2
    helm-revision: "1"
    helm.sh/chart: snipe-it-4.0.1
  annotations: null
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  ports:
    - port: 10120
      targetPort: 80
      protocol: TCP
      name: main
  selector:
    app.kubernetes.io/name: snipe-it
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-snipe-it
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: snipe-it
    app.kubernetes.io/version: 6.0.2
    helm-revision: "1"
    helm.sh/chart: snipe-it-4.0.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: snipe-it
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations: null
      labels:
        app.kubernetes.io/name: snipe-it
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 50
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 1000
        runAsUser: 0
        supplementalGroups:
          - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: autopermissions
          image: ghcr.io/truecharts/alpine:v3.15.2@sha256:29ed3480a0ee43f7af681fed5d4fc215516abf1c41eade6938b26d8c9c2c7583
          securityContext:
            runAsUser: 11378
            privileged: true
            allowPrivilegeEscalation: false
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - /bin/sh
            - -c
            - |
              /bin/bash <<'EOF'
              echo "Automatically correcting permissions..."
              echo "increasing inotify limits..."
              ( sysctl -w fs.inotify.max_user_watches=524288 || echo "error setting inotify") && ( sysctl -w fs.inotify.max_user_instances=512 || echo "error setting inotify")
              EOF
          volumeMounts: null
        - name: mariadb-init
          image: ghcr.io/truecharts/mariadb:v10.7.4@sha256:dd2042a79c38b92ec14b4c55b97c615c1c5f437f4f5b3e796a8fa7aa1c0a0865
          env:
            - name: MARIADB_HOST
              valueFrom:
                secretKeyRef:
                  name: mariadbcreds
                  key: plainhost
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadbcreds
                  key: mariadb-root-password
          securityContext:
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - bash
            - -ec
          args:
            - |
              until
                mysqladmin -uroot -h"${MARIADB_HOST}" -p"${MARIADB_ROOT_PASSWORD}" ping \
                && mysqladmin -uroot -h"${MARIADB_HOST}" -p"${MARIADB_ROOT_PASSWORD}" status;
                do sleep 2;
              done
          imagePullPolicy: IfNotPresent
      containers:
        - name: release-name-snipe-it
          image: tccr.io/truecharts/snipe-it:v6.0.2@sha256:3acd046042d62cc699ae9b8498eb88a9464b4767341e89bc7ca86dcc6a860625
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PUID
              value: "568"
            - name: USER_ID
              value: "568"
            - name: UID
              value: "568"
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: PGID
              value: "50"
            - name: GROUP_ID
              value: "50"
            - name: GID
              value: "50"
            - name: NVIDIA_VISIBLE_DEVICES
              value: void
            - name: TZ
              value: UTC
            - name: API_TOKEN_EXPIRATION_YEARS
              value: "40"
            - name: APP_ENV
              value: production
            - name: APP_KEY
              valueFrom:
                secretKeyRef:
                  key: APP_KEY
                  name: snipeit-secrets
            - name: APP_LOCALE
              value: en
            - name: APP_TIMEZONE
              value: UTC
            - name: APP_URL
              value: http://localhost:80
            - name: COOKIE_NAME
              value: snipeit_session
            - name: DB_CONNECTION
              value: mysql
            - name: DB_DATABASE
              value: snipe-it
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: plainhost
                  name: mariadbcreds
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mariadb-password
                  name: mariadbcreds
            - name: DB_PORT
              value: "3306"
            - name: DB_USERNAME
              value: snipe-it
            - name: ENCRYPT
              value: "false"
            - name: EXPIRE_ON_CLOSE
              value: "false"
            - name: FILESYSTEM_DISK
              value: local
            - name: IMAGE_LIB
              value: gd
            - name: LOGIN_LOCKOUT_DURATION
              value: "60"
            - name: LOGIN_MAX_ATTEMPTS
              value: "5"
            - name: MAX_RESULTS
              value: "500"
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  key: plainhost
                  name: rediscreds
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: redis-password
                  name: rediscreds
            - name: REDIS_PORT
              value: "6379"
            - name: SECURE_COOKIES
              value: "false"
            - name: SESSION_LIFETIME
              value: "30"
          envFrom: null
          ports:
            - name: main
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/snipeit/dumps
              name: backups
            - mountPath: /var/lib/snipeit/data
              name: data
            - mountPath: /var/www/html/storage/logs
              name: logs
            - mountPath: /shared
              name: shared
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 10
            failureThreshold: 60
            timeoutSeconds: 2
            periodSeconds: 5
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: backups
          persistentVolumeClaim:
            claimName: release-name-snipe-it-backups
        - name: data
          persistentVolumeClaim:
            claimName: release-name-snipe-it-data
        - name: logs
          persistentVolumeClaim:
            claimName: release-name-snipe-it-logs
        - name: shared
          emptyDir: {}
        - name: temp
          emptyDir:
            medium: Memory
        - name: varlogs
          emptyDir: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-mariadb
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 10.7.4
    helm-revision: "1"
    helm.sh/chart: mariadb-3.0.5
spec:
  revisionHistoryLimit: 3
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/instance: release-name
  serviceName: release-name-mariadb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mariadb
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 568
        supplementalGroups:
          - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: autopermissions
          image: ghcr.io/truecharts/alpine:v3.15.2@sha256:29ed3480a0ee43f7af681fed5d4fc215516abf1c41eade6938b26d8c9c2c7583
          securityContext:
            runAsUser: 10063
            privileged: true
            allowPrivilegeEscalation: false
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - /bin/sh
            - -c
            - |
              /bin/bash <<'EOF'
              echo "Automatically correcting permissions..."
              echo "increasing inotify limits..."
              ( sysctl -w fs.inotify.max_user_watches=524288 || echo "error setting inotify") && ( sysctl -w fs.inotify.max_user_instances=512 || echo "error setting inotify")
              EOF
          volumeMounts: null
      containers:
        - name: release-name-mariadb
          image: ghcr.io/truecharts/mariadb:v10.7.4@sha256:dd2042a79c38b92ec14b4c55b97c615c1c5f437f4f5b3e796a8fa7aa1c0a0865
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PUID
              value: "568"
            - name: USER_ID
              value: "568"
            - name: UID
              value: "568"
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: PGID
              value: "568"
            - name: GROUP_ID
              value: "568"
            - name: GID
              value: "568"
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: NVIDIA_VISIBLE_DEVICES
              value: void
            - name: TZ
              value: UTC
            - name: MARIADB_DATABASE
              value: snipe-it
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mariadb-password
                  name: mariadbcreds
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mariadb-root-password
                  name: mariadbcreds
            - name: MARIADB_USER
              value: snipe-it
          envFrom: null
          ports:
            - name: main
              containerPort: 3306
              protocol: TCP
          volumeMounts:
            - mountPath: /shared
              name: shared
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /bitnami/mariadb
              name: data
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - until /opt/bitnami/scripts/mariadb/healthcheck.sh; do sleep 2; done
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - until /opt/bitnami/scripts/mariadb/healthcheck.sh; do sleep 2; done
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - until /opt/bitnami/scripts/mariadb/healthcheck.sh; do sleep 2; done
            failureThreshold: 60
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: shared
          emptyDir: {}
        - name: temp
          emptyDir:
            medium: Memory
        - name: varlogs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 999Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.1
    helm-revision: "1"
    helm.sh/chart: redis-3.0.5
spec:
  revisionHistoryLimit: 3
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
  serviceName: release-name-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 568
        supplementalGroups:
          - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: autopermissions
          image: ghcr.io/truecharts/alpine:v3.15.2@sha256:29ed3480a0ee43f7af681fed5d4fc215516abf1c41eade6938b26d8c9c2c7583
          securityContext:
            runAsUser: 11003
            privileged: true
            allowPrivilegeEscalation: false
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - /bin/sh
            - -c
            - |
              /bin/bash <<'EOF'
              echo "Automatically correcting permissions..."
              echo "increasing inotify limits..."
              ( sysctl -w fs.inotify.max_user_watches=524288 || echo "error setting inotify") && ( sysctl -w fs.inotify.max_user_instances=512 || echo "error setting inotify")
              EOF
          volumeMounts: null
      containers:
        - name: release-name-redis
          image: ghcr.io/truecharts/redis:v7.0.1@sha256:70d9d52b81f61be9507fd3e2e3a79eb3642b29cf5a5b7a650f3473509f195f19
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PUID
              value: "568"
            - name: USER_ID
              value: "568"
            - name: UID
              value: "568"
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: PGID
              value: "568"
            - name: GROUP_ID
              value: "568"
            - name: GID
              value: "568"
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: NVIDIA_VISIBLE_DEVICES
              value: void
            - name: TZ
              value: UTC
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: redis-password
                  name: rediscreds
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_REPLICATION_MODE
              value: master
          envFrom: null
          ports:
            - name: main
              containerPort: 6379
              protocol: TCP
          volumeMounts:
            - mountPath: /health
              name: redis-health
            - mountPath: /shared
              name: shared
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /bitnami/redis
              name: data
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 2
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 2
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 2
            failureThreshold: 60
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: redis-health
          configMap:
            defaultMode: 493
            name: release-name-redis-health
        - name: shared
          emptyDir: {}
        - name: temp
          emptyDir:
            medium: Memory
        - name: varlogs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 999Gi
