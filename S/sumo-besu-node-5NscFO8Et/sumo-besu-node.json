[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "sumo-besu-node-release-name-sa",
      "namespace": "5NscFO8Et"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "sumo-besu-node-release-name-besu-config",
      "labels": {
        "app": "sumo-besu-node",
        "chart": "sumo-besu-node-0.1.65",
        "release": "release-name",
        "heritage": "Helm",
        "namespace": "default",
        "app.kubernetes.io/name": "sumo-besu-node",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "helm.sh/chart": "sumo-besu-node-0.1.65"
      },
      "namespace": "5NscFO8Et"
    },
    "data": {
      "config.toml": "# Every possible CLI should be in this file.\n#\n# Please use a plausible value, besu has to at least be able to parse it.\n# If it is a multi-valued CLI make it a TOML array.\n# If it is a number or boolean make it a number or boolean\n# All other config options are strings, and must be quoted.\n\n# Node Information\ndata-path=\"/data/besu\"\ngenesis-file=\"/etc/genesis/genesis.json\"\nlogging=\"INFO\"\nnode-private-key-file=\"/keys/private.key\"\n\n# Transaction Pool\ntx-pool-retention-hours=999\ntx-pool-max-size=4096\n\n# P2P network\np2p-enabled=true\ndiscovery-enabled=true\nstatic-nodes-file=\"/config/static/static-nodes.json\"\np2p-host=\"0.0.0.0\"\np2p-port=30303\nmax-peers=25\n\n\n\nhost-allowlist=[\"*\"]\n\n\n# JSON-RPC\nrpc-http-enabled=true\nrpc-http-host=\"0.0.0.0\"\nrpc-http-port=8545\nrpc-http-api=[\"DEBUG\",\"ETH\",\"TXPOOL\",\"ADMIN\", \"WEB3\", \"IBFT\", \"NET\"]\nrpc-http-cors-origins=[\"all\"]\nrpc-http-authentication-enabled=false\nrpc-http-max-active-connections=80\n\n\n\n\n\n\n\n\n\n\n# Metrics\nmetrics-enabled=true\nmetrics-host=\"0.0.0.0\"\nmetrics-port=9545\n\n\n\n\n# DEBUG REMOVE BEFORE ACTUAL PRODUCTION TESTING\nrevert-reason-enabled=true"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "name": "sumo-besu-node-release-name-pvc",
      "namespace": "default"
    },
    "spec": {
      "storageClassName": "gp2",
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "300Gi"
        }
      }
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "sumo-besu-node-release-name-role",
      "namespace": "5NscFO8Et"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "services"
        ],
        "verbs": [
          "get",
          "list"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "sumo-besu-node-release-name-rb",
      "namespace": "5NscFO8Et"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "sumo-besu-node-release-name-role"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "sumo-besu-node-release-name-sa",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "sumo-besu-node-release-name",
      "labels": {
        "app": "sumo-besu-node-release-name",
        "chart": "sumo-besu-node-0.1.65",
        "release": "release-name",
        "heritage": "Helm",
        "namespace": "default",
        "app.kubernetes.io/name": "sumo-besu-node-release-name",
        "helm.sh/chart": "sumo-besu-node-0.1.65",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "release-name"
      },
      "namespace": "5NscFO8Et"
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "app": "sumo-besu-node-release-name",
        "release": "release-name",
        "component": "release-name",
        "app.kubernetes.io/name": "sumo-besu-node-release-name",
        "app.kubernetes.io/instance": "release-name"
      },
      "ports": [
        {
          "name": "json-rpc",
          "port": 8545,
          "targetPort": "json-rpc",
          "protocol": "TCP"
        },
        {
          "name": "ws",
          "port": 8546,
          "targetPort": "ws",
          "protocol": "TCP"
        },
        {
          "name": "graphql",
          "port": 8547,
          "targetPort": "graphql",
          "protocol": "TCP"
        },
        {
          "name": "rlpx",
          "port": 30303,
          "targetPort": "rlpx",
          "protocol": "TCP"
        },
        {
          "name": "discovery",
          "port": 30303,
          "targetPort": "discovery",
          "protocol": "UDP"
        },
        {
          "name": "metrics",
          "port": 9545,
          "targetPort": "metrics",
          "protocol": "TCP"
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "sumo-besu-node-release-name",
      "labels": {
        "app": "sumo-besu-node-release-name",
        "chart": "sumo-besu-node-0.1.65",
        "release": "release-name",
        "heritage": "Helm",
        "namespace": "default",
        "component": "release-name",
        "app.kubernetes.io/name": "sumo-besu-node-release-name",
        "helm.sh/chart": "sumo-besu-node-0.1.65",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "type": "besu-node"
      },
      "namespace": "5NscFO8Et"
    },
    "spec": {
      "replicas": 1,
      "podManagementPolicy": "OrderedReady",
      "selector": {
        "matchLabels": {
          "app": "sumo-besu-node-release-name",
          "release": "release-name",
          "component": "release-name",
          "app.kubernetes.io/name": "sumo-besu-node-release-name",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "serviceName": "sumo-besu-node-release-name",
      "template": {
        "metadata": {
          "labels": {
            "app": "sumo-besu-node-release-name",
            "release": "release-name",
            "component": "release-name",
            "app.kubernetes.io/name": "sumo-besu-node-release-name",
            "app.kubernetes.io/instance": "release-name",
            "type": "besu-node"
          },
          "annotations": {
            "prometheus.io/scrape": "true",
            "prometheus.io/port": "9545",
            "prometheus.io/path": "/metrics"
          }
        },
        "spec": {
          "serviceAccountName": "sumo-besu-node-release-name-sa",
          "initContainers": [
            {
              "name": "init-bootnode",
              "image": "curlimages/curl:latest",
              "command": [
                "/bin/sh",
                "-c",
                "curl -X GET --connect-timeout 30 --max-time 10 --retry 6 --retry-delay 0 --retry-max-time 300 besu-node-bootnode-1.default.svc.cluster.local:8545/liveness"
              ]
            },
            {
              "name": "volume-permission-besu",
              "image": "busybox",
              "command": [
                "sh",
                "-c",
                "chown -R 1000:1000 /data"
              ],
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/data"
                }
              ],
              "securityContext": {
                "runAsUser": 0
              }
            }
          ],
          "containers": [
            {
              "name": "release-name-besu",
              "image": "hyperledger/besu:22.4-openjdk-latest",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "limits": {
                  "cpu": 12,
                  "memory": "64G"
                },
                "requests": {
                  "cpu": 12,
                  "memory": "32G"
                }
              },
              "env": [
                {
                  "name": "POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "BOOTNODE1_PUBKEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "besu-node-bootnode-1-keys",
                      "key": "enode"
                    }
                  }
                },
                {
                  "name": "BOOTNODE2_PUBKEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "besu-node-bootnode-2-keys",
                      "key": "enode"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "besu-keys",
                  "mountPath": "/keys",
                  "readOnly": true
                },
                {
                  "name": "genesis",
                  "mountPath": "/etc/genesis",
                  "readOnly": true
                },
                {
                  "name": "static-nodes",
                  "mountPath": "/config/static"
                },
                {
                  "name": "besu-config",
                  "mountPath": "/etc/besu",
                  "readOnly": true
                },
                {
                  "name": "data",
                  "mountPath": "/data/besu"
                }
              ],
              "ports": [
                {
                  "name": "json-rpc",
                  "containerPort": 8545,
                  "protocol": "TCP"
                },
                {
                  "name": "ws",
                  "containerPort": 8546,
                  "protocol": "TCP"
                },
                {
                  "name": "graphql",
                  "containerPort": 8547,
                  "protocol": "TCP"
                },
                {
                  "name": "rlpx",
                  "containerPort": 30303,
                  "protocol": "TCP"
                },
                {
                  "name": "discovery",
                  "containerPort": 30303,
                  "protocol": "UDP"
                },
                {
                  "name": "metrics",
                  "containerPort": 9545,
                  "protocol": "TCP"
                }
              ],
              "command": [
                "/bin/sh",
                "-c"
              ],
              "args": [
                "exec\nexport BOOTNODE_ENODE1=\"enode://${BOOTNODE1_PUBKEY}@besu-node-bootnode-1-0.besu-node-bootnode-1.default.svc.cluster.local:30303\" ;\nexport BOOTNODE_ENODE2=\"enode://${BOOTNODE2_PUBKEY}@besu-node-bootnode-2-0.besu-node-bootnode-2.default.svc.cluster.local:30303\" ;\n/opt/besu/bin/besu \\\n  --config-file=/etc/besu/config.toml \\\n  --Xdns-enabled=true --Xdns-update-enabled=true --Xnat-kube-service-name=sumo-besu-node-release-name \\\n  --min-gas-price=0 \\\n  --bootnodes=${BOOTNODE_ENODE1},${BOOTNODE_ENODE2}\n"
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/liveness",
                  "port": 8545
                },
                "initialDelaySeconds": 180,
                "periodSeconds": 60
              }
            }
          ],
          "volumes": [
            {
              "name": "besu-keys",
              "secret": {
                "secretName": "sumo-besu-node-release-name-keys"
              }
            },
            {
              "name": "genesis",
              "configMap": {
                "name": "besu-genesis",
                "items": [
                  {
                    "key": "genesis.json",
                    "path": "genesis.json"
                  }
                ]
              }
            },
            {
              "name": "static-nodes",
              "configMap": {
                "name": "besu-node-enodes",
                "items": [
                  {
                    "key": "static-nodes.json",
                    "path": "static-nodes.json"
                  }
                ]
              }
            },
            {
              "name": "besu-config",
              "configMap": {
                "name": "sumo-besu-node-release-name-besu-config"
              }
            },
            {
              "name": "data",
              "persistentVolumeClaim": {
                "claimName": "sumo-besu-node-release-name-pvc"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "monitoring.coreos.com/v1",
    "kind": "ServiceMonitor",
    "metadata": {
      "name": "sumo-besu-node-release-name",
      "labels": {
        "helm.sh/chart": "sumo-besu-node-0.1.65",
        "app": "sumo-besu-node-release-name",
        "chart": "sumo-besu-node-0.1.65",
        "release": "release-name",
        "heritage": "Helm",
        "namespace": "default",
        "app.kubernetes.io/name": "sumo-besu-node-release-name",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "latest",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "release-name"
      }
    },
    "spec": {
      "endpoints": [
        {
          "port": "metrics"
        }
      ],
      "namespaceSelector": {
        "matchNames": [
          "default"
        ]
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "sumo-besu-node-release-name",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "release-name"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "sumo-besu-node-release-name-hooks-sa",
      "namespace": "5NscFO8Et",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation",
        "helm.sh/hook": "pre-install,pre-delete,post-delete"
      }
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "sumo-besu-node-release-name-hooks-role",
      "namespace": "5NscFO8Et",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation",
        "helm.sh/hook": "pre-install,pre-delete,post-delete"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets",
          "configmaps"
        ],
        "verbs": [
          "create",
          "get",
          "list",
          "update",
          "delete"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "services"
        ],
        "verbs": [
          "get",
          "list"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "sumo-besu-node-release-name-hooks-rb",
      "namespace": "5NscFO8Et",
      "annotations": {
        "helm.sh/hook-delete-policy": "before-hook-creation",
        "helm.sh/hook": "pre-install,pre-delete,post-delete"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "sumo-besu-node-release-name-hooks-role"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "sumo-besu-node-release-name-hooks-sa",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "sumo-besu-node-release-name-pre-install-hook",
      "namespace": "5NscFO8Et",
      "annotations": {
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-weight": "0",
        "helm.sh/hook-delete-policy": "hook-succeeded"
      }
    },
    "spec": {
      "backoffLimit": 1,
      "completions": 1,
      "template": {
        "spec": {
          "serviceAccountName": "sumo-besu-node-release-name-hooks-sa",
          "restartPolicy": "OnFailure",
          "containers": [
            {
              "name": "sumo-besu-node-release-name-pre-start-hook",
              "image": "consensys/quorum-k8s-hooks:latest",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 11902,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/bin/bash",
                "-c"
              ],
              "args": [
                "\nfunction update_enodes_configmap {\n  kubectl -n default get configmap besu-node-enodes -o json\n  if [ $? -ne 0 ]; then\n  echo \"[]\" > /tmp/static-nodes.json.raw\n  fi\n  # update the entries\n  echo \"updating besu-node-enodes...\"\n  pubkey=$(cat /tmp/enode )\n  echo $(kubectl -n default get configmap besu-node-enodes -o jsonpath='{.data.static-nodes\\.json}' ) > /tmp/static-nodes.json.raw\n  NEEDLE=\"enode://$pubkey@sumo-besu-node-release-name-0.sumo-besu-node-release-name.default.svc.cluster.local:30303?discport=0\"\n  cat /tmp/static-nodes.json.raw | jq --arg NEEDLE \"$NEEDLE\" '. += [ $NEEDLE ] | unique ' > /tmp/static-nodes.json\n  kubectl -n default create configmap besu-node-enodes --from-file=static-nodes.json=/tmp/static-nodes.json -o yaml --dry-run=client | kubectl replace -f -\n}\n\nfunction update_tessera_peers_configmap {\n  kubectl -n default get configmap tessera-peers -o json\n  # first time a tx node is deployed and there is no configmap\n  if [ $? -ne 0 ]; then\n    echo \"No tessera-peers found, creating a new one...\"\n    echo \"[{ \\\"url\\\": \\\"http://sumo-besu-node-release-name.default.svc.cluster.local:9000\\\" }]\"  > /tmp/tessera-peers\n    kubectl --namespace default create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers\n\n  # update the entries\n  else\n    echo \"Tessera-peers found, updating existing...\"\n    echo $(kubectl -n default get configmap tessera-peers -o jsonpath='{.data.tesseraPeers}' ) > /tmp/tessera-peers.raw\n    NEEDLE=\"http://sumo-besu-node-release-name.default.svc.cluster.local:9000\"\n    cat /tmp/tessera-peers.raw | jq --arg NEEDLE \"$NEEDLE\" '. += [{\"url\": $NEEDLE}] | unique ' > /tmp/tessera-peers\n    kubectl -n default create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers -o yaml --dry-run=client | kubectl replace -f -\n  fi\n}\n\necho \"sumo-besu-node-release-name hook ...\"\n\necho \"hook completed\"\n"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "sumo-besu-node-release-name-keys-pre-delete-hook",
      "namespace": "5NscFO8Et",
      "annotations": {
        "helm.sh/hook-weight": "0",
        "helm.sh/hook": "pre-delete",
        "helm.sh/hook-delete-policy": "hook-succeeded"
      }
    },
    "spec": {
      "backoffLimit": 1,
      "completions": 1,
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "sumo-besu-node",
            "app.kubernetes.io/instance": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "sumo-besu-node-release-name-hooks-sa",
          "restartPolicy": "OnFailure",
          "containers": [
            {
              "name": "delete-keys",
              "image": "consensys/quorum-k8s-hooks:latest",
              "securityContext": {
                "runAsUser": 11106,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "imagePullPolicy": null,
              "command": [
                "/bin/bash",
                "-c"
              ],
              "args": [
                "\nfunction delete_node_from_tessera_peers_configmap {\n  kubectl -n default get configmap tessera-peers -o json\n  # if there is no configmap, do nothing\n  if [ $? -ne 0 ]; then\n    echo \"No tessera-peers found, nothing to do...\"\n  # delete the one\n  else\n    echo \"tessera-peers found, deleting sumo-besu-node-release-name...\"\n    echo $(kubectl -n default get configmap tessera-peers -o jsonpath='{.data.tesseraPeers}' ) > /tmp/tessera-peers.raw\n    cat /tmp/tessera-peers.raw | jq --arg NEEDLE \"sumo-besu-node-release-name\" 'del(.[] | select( .url | contains($NEEDLE) ))' > /tmp/tessera-peers\n    kubectl -n default create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers -o yaml --dry-run=client | kubectl replace -f -\n  fi\n}\n\nfunction delete_node_from_enodes_configmap {\n  kubectl -n default  get configmap besu-node-enodes -o json\n  # if there is no configmap, do nothing\n  if [ $? -ne 0 ]; then\n    echo \"No peers found, nothing to do...\"\n  # delete the one\n  else\n    echo \"besu-node-enodes found, deleting sumo-besu-node-release-name...\"\n    echo $(kubectl -n default get configmap besu-node-enodes -o jsonpath='{.data.static-nodes\\.json}' ) > /tmp/static-nodes.json.raw\n    cat /tmp/static-nodes.json.raw | jq --arg NEEDLE \"sumo-besu-node-release-name\" 'del(.[] | select( . | contains($NEEDLE) ))' > /tmp/static-nodes.json\n    kubectl -n default create configmap besu-node-enodes --from-file=static-nodes.json=/tmp/static-nodes.json -o yaml --dry-run=client | kubectl replace -f -\n  fi\n}\n\ndelete_node_from_enodes_configmap\ndelete_node_from_tessera_peers_configmap\necho \"Completed\"\n"
              ]
            }
          ]
        }
      }
    }
  }
]