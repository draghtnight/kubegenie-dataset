[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-spring-boot-admin",
      "labels": {
        "app.kubernetes.io/name": "spring-boot-admin",
        "helm.sh/chart": "spring-boot-admin-0.0.18",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-spring-boot-admin",
      "labels": {
        "app.kubernetes.io/name": "spring-boot-admin",
        "helm.sh/chart": "spring-boot-admin-0.0.18",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "application.yaml": "server:\n  forward-headers-strategy: NATIVE\nspring:\n  cloud:\n    kubernetes:\n      discovery:\n        # set this to false if running namespaced\n        all-namespaces: true\n  boot:\n    admin:\n      # set this to the ingress url and protocol\n      # ui:\n      #   public-url: http://chart-example.local\n      discovery:\n        instances-metadata:\n          spring-boot: \"true\""
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "name": "release-name-spring-boot-admin",
      "labels": {
        "app.kubernetes.io/name": "spring-boot-admin",
        "helm.sh/chart": "spring-boot-admin-0.0.18",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "services",
          "pods",
          "endpoints"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "name": "release-name-spring-boot-admin",
      "labels": {
        "app.kubernetes.io/name": "spring-boot-admin",
        "helm.sh/chart": "spring-boot-admin-0.0.18",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "release-name-spring-boot-admin"
    },
    "subjects": [
      {
        "apiGroup": "",
        "kind": "ServiceAccount",
        "name": "release-name-spring-boot-admin",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-spring-boot-admin",
      "labels": {
        "app.kubernetes.io/name": "spring-boot-admin",
        "helm.sh/chart": "spring-boot-admin-0.0.18",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 80,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "spring-boot-admin",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-spring-boot-admin",
      "labels": {
        "app.kubernetes.io/name": "spring-boot-admin",
        "helm.sh/chart": "spring-boot-admin-0.0.18",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "spring-boot-admin",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/config": "2dc8153f0bfc9ad5a2fedc031d7516756ba6d2fd99b1adbbcd17bcba524246a7"
          },
          "labels": {
            "app.kubernetes.io/name": "spring-boot-admin",
            "app.kubernetes.io/instance": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-spring-boot-admin",
          "securityContext": {},
          "containers": [
            {
              "name": "spring-boot-admin",
              "securityContext": {
                "readOnlyRootFilesystem": true,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "image": "quay.io/evryfs/spring-boot-admin:2.6.7",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "LOADER_PATH",
                  "value": "/app/resources"
                }
              ],
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/app/resources"
                },
                {
                  "name": "tmp",
                  "mountPath": "/tmp"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8080,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "actuator/health/liveness",
                  "port": "http"
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "actuator/health/readiness",
                  "port": "http"
                }
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-spring-boot-admin"
              }
            },
            {
              "name": "tmp",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  }
]