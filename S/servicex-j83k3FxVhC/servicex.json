[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-minio-update-prometheus-secret",
      "labels": {
        "app": "minio-update-prometheus-secret",
        "chart": "minio-8.0.10",
        "release": "release-name",
        "heritage": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-minio",
      "namespace": "j83k3FxVhC",
      "labels": {
        "app": "minio",
        "chart": "minio-8.0.10",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "j83k3FxVhC",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.24.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "automountServiceAccountToken": true,
    "secrets": [
      {
        "name": "release-name-rabbitmq"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-servicex",
      "labels": {
        "app": "servicex",
        "chart": "servicex-1.0.30",
        "release": "release-name",
        "heritage": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-8.0.10",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "accesskey": "bWluaW91c2Vy",
      "secretkey": "bGVmdGZvb3Qx"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "j83k3FxVhC",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.24.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "rabbitmq-password": "bGVmdGZvb3Qx",
      "rabbitmq-erlang-cookie": "NUpyZzhjbW9SeEhCdTN5M05EbUgzbXZEemtWUk9wNVc="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-x509-proxy",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "servicex-1.0.30",
        "app": "release-name"
      }
    },
    "type": "Opaque"
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-8.0.10",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "initialize": "#!/bin/sh\nset -e ; # Have script exit in the event of a failed command.\nMC_CONFIG_DIR=\"/etc/minio/mc/\"\nMC=\"/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}\"\n\n# connectToMinio\n# Use a check-sleep-check loop to wait for Minio service to be available\nconnectToMinio() {\n  SCHEME=$1\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n\n# checkBucketExists ($bucket)\n# Check if the bucket exists, by using the exit code of `mc ls`\ncheckBucketExists() {\n  BUCKET=$1\n  CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)\n  return $?\n}\n\n# createBucket ($bucket, $policy, $purge)\n# Ensure bucket exists, purging if asked to\ncreateBucket() {\n  BUCKET=$1\n  POLICY=$2\n  PURGE=$3\n  VERSIONING=$4\n\n  # Purge the bucket, if set & exists\n  # Since PURGE is user input, check explicitly for `true`\n  if [ $PURGE = true ]; then\n    if checkBucketExists $BUCKET ; then\n      echo \"Purging bucket '$BUCKET'.\"\n      set +e ; # don't exit if this fails\n      ${MC} rm -r --force myminio/$BUCKET\n      set -e ; # reset `e` as active\n    else\n      echo \"Bucket '$BUCKET' does not exist, skipping purge.\"\n    fi\n  fi\n\n  # Create the bucket if it does not exist\n  if ! checkBucketExists $BUCKET ; then\n    echo \"Creating bucket '$BUCKET'\"\n    ${MC} mb myminio/$BUCKET\n  else\n    echo \"Bucket '$BUCKET' already exists.\"\n  fi\n\n\n  # set versioning for bucket\n  if [ ! -z $VERSIONING ] ; then\n    if [ $VERSIONING = true ] ; then\n        echo \"Enabling versioning for '$BUCKET'\"\n        ${MC} version enable myminio/$BUCKET\n    elif [ $VERSIONING = false ] ; then\n        echo \"Suspending versioning for '$BUCKET'\"\n        ${MC} version suspend myminio/$BUCKET\n    fi\n  else\n      echo \"Bucket '$BUCKET' versioning unchanged.\"\n  fi\n\n  # At this point, the bucket should exist, skip checking for existence\n  # Set policy on the bucket\n  echo \"Setting policy of bucket '$BUCKET' to '$POLICY'.\"\n  ${MC} policy set $POLICY myminio/$BUCKET\n}\n\n# Try connecting to Minio instance\nscheme=http\nconnectToMinio $scheme"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-rabbitmq-config",
      "namespace": "j83k3FxVhC",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.24.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "rabbitmq.conf": "## Username and password\n##\ndefault_user = user\ndefault_pass = CHANGEME\n## Clustering\n##\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator = min-masters\n# enable guest user\nloopback_users.guest = false\n#default_vhost = default-vhost\n#disk_free_limit.absolute = 50MB\n#load_definitions = /app/load_definition.json"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-flask-config",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "servicex-1.0.30",
        "app": "release-name"
      }
    },
    "data": {
      "app.conf": "INSTANCE_NAME = 'release-name'\n\nCHART = 'servicex-1.0.30'\nAPP_IMAGE_TAG = '20220418-1418-stable'\n\n#SERVER_NAME = '127.0.0.1:5000'\n# this is the session secret, used to protect the Flask session. You should\n# use a longer secret string known only to your application\n# details are beyond the scope of this example\nSECRET_KEY = 'abc123!'\n\n# Base url of documentation - autopopulated from chart version\n# Must be activated at https://readthedocs.org/projects/servicex/versions/\nDOCS_BASE_URL = 'https://servicex.readthedocs.io/en/v20220418-1418-stable'\n\n# Enable JWT auth on public endpoints\nENABLE_AUTH=False\n\n# Globus configuration\nGLOBUS_CLIENT_ID = ''\nGLOBUS_CLIENT_SECRET = ''\n\n# Specify an email address for the first admin user\nJWT_ADMIN = 'admin@example.com'\n\n# Number of seconds the JWT is valid for\nJWT_REFRESH_TOKEN_EXPIRES=False\nJWT_ACCESS_TOKEN_EXPIRES=21600\n\n# Slack webhooks\n\n\n\n# Mailgun configuration\nMAILGUN_API_KEY = ''\nMAILGUN_DOMAIN = ''\n\n\nSQLALCHEMY_DATABASE_URI = 'sqlite:////sqlite/app.db'\n\n\nSQLALCHEMY_TRACK_MODIFICATIONS = False\nSECRET_KEY = 'some-secret-string'\nJWT_SECRET_KEY = 'jwt-secret-string'\nRABBIT_MQ_URL= 'amqp://user:leftfoot1@release-name-rabbitmq:5672/%2F'\nTRANSFORMER_RABBIT_MQ_URL= 'amqp://user:leftfoot1@release-name-rabbitmq:5672/%2F?heartbeat=9000'\n\n# Keep retrying to connect to Rabbit if its not yet up\nRABBIT_RETRIES = 12\nRABBIT_RETRY_INTERVAL = 10\n\nADVERTISED_HOSTNAME= 'release-name-servicex-app:8000'\n\n\n\nTRANSFORMER_NAMESPACE=\"default\"\n\n\n\nTRANSFORMER_PULL_POLICY = 'Always'\n\nTRANSFORMER_MANAGER_ENABLED = True\n\nTRANSFORMER_AUTOSCALE_ENABLED =True\nTRANSFORMER_CPU_LIMIT = 1\nTRANSFORMER_CPU_SCALE_THRESHOLD = 30\nTRANSFORMER_MIN_REPLICAS = 1\nTRANSFORMER_MAX_REPLICAS = 20\nTRANSFORMER_MANAGER_MODE = 'internal-kubernetes'\nTRANSFORMER_X509_SECRET=\"release-name-x509-proxy\"\nTRANSFORMER_VALIDATE_DOCKER_IMAGE =True\nTRANSFORMER_MESSAGING = 'none'\nTRANSFORMER_DEFAULT_IMAGE = \"sslhep/servicex_func_adl_xaod_transformer:20220418-1418-stable\"\n\n\nTRANSFORMER_PERSISTENCE_PROVIDED_CLAIM = \"\"\nTRANSFORMER_PERSISTENCE_SUBDIR = \"\"\n\n\n\nOBJECT_STORE_ENABLED = True\n# default to using a https connection to the client unless explicitly\n# turned off\n  \nMINIO_ENCRYPT_PUBLIC = True\n  \n  \n# using internal minio \nMINIO_URL = 'release-name-minio:9000'\nMINIO_URL_TRANSFORMER = 'release-name-minio:9000'\n    # No minio ingress\nMINIO_PUBLIC_URL = 'release-name--minio:9000'\n    \n  \nMINIO_ACCESS_KEY = 'miniouser'\nMINIO_SECRET_KEY = 'leftfoot1'\n\n\n\n\nCODE_GEN_SERVICE_URL = 'http://release-name-code-gen:8000'\nCODE_GEN_IMAGE = 'sslhep/servicex_code_gen_atlas_xaod:20220418-1418-stable'\n\nDID_CERNOPENDATA_FINDER_TAG = '20220418-1418-stable'\nDID_RUCIO_FINDER_TAG = '20220418-1418-stable'\nDID_FINDER_DEFAULT_SCHEME = 'rucio'\nVALID_DID_SCHEMES = [ \"cernopendata\",\"rucio\" ]\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-rucio-config",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "servicex-1.0.30",
        "app": "release-name"
      }
    },
    "data": {
      "rucio.cfg": "[client]\nrucio_host = https://voatlasrucio-server-prod.cern.ch:443\nauth_host = https://voatlasrucio-auth-prod.cern.ch:443\nauth_type = x509_proxy\nca_cert = /etc/pki/tls/certs/ca-bundle.crt\naccount = <your account>\nclient_x509_proxy = $X509_USER_PROXY\nrequest_retries = 3\n\n[policy]\npermission = atlas\nschema = atlas\nlfn2pfn_algorithm_default = hash\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-minio-update-prometheus-secret",
      "labels": {
        "app": "minio-update-prometheus-secret",
        "chart": "minio-8.0.10",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "get",
          "create",
          "update",
          "patch"
        ],
        "resourceNames": [
          "release-name-minio-prometheus"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "create"
        ]
      },
      {
        "apiGroups": [
          "monitoring.coreos.com"
        ],
        "resources": [
          "servicemonitors"
        ],
        "verbs": [
          "get"
        ],
        "resourceNames": [
          "release-name-minio"
        ]
      }
    ]
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "namespace": "j83k3FxVhC",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.24.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create"
        ]
      }
    ]
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-servicex-job-manager",
      "labels": {
        "app": "servicex",
        "chart": "servicex-1.0.30",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "apps"
        ],
        "resources": [
          "deployments"
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "create",
          "update",
          "patch",
          "delete"
        ]
      },
      {
        "apiGroups": [
          "autoscaling"
        ],
        "resources": [
          "horizontalpodautoscalers"
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "create",
          "update",
          "patch",
          "delete"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "persistentvolumeclaims"
        ],
        "verbs": [
          "get",
          "list"
        ]
      }
    ]
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-servicex-x509-secret-manager",
      "labels": {
        "app": "servicex",
        "chart": "servicex-1.0.30",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "secrets"
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "create",
          "update",
          "patch",
          "delete"
        ]
      }
    ]
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-servicex-configmap-manager",
      "labels": {
        "app": "servicex",
        "chart": "servicex-1.0.30",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "configmaps"
        ],
        "verbs": [
          "get",
          "list",
          "watch",
          "create",
          "update",
          "patch",
          "delete"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-minio-update-prometheus-secret",
      "labels": {
        "app": "minio-update-prometheus-secret",
        "chart": "minio-8.0.10",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-minio-update-prometheus-secret"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-minio-update-prometheus-secret",
        "namespace": "default"
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "namespace": "j83k3FxVhC",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.24.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-rabbitmq"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-rabbitmq-endpoint-reader"
    }
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-servicex-job-manager",
      "labels": {
        "app": "servicex",
        "chart": "servicex-1.0.30",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-servicex"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-servicex-job-manager"
    }
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-servicex-x509-secret-manager",
      "labels": {
        "app": "servicex",
        "chart": "servicex-1.0.30",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-servicex"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-servicex-x509-secret-manager"
    }
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-servicex-configmap-manager",
      "labels": {
        "app": "servicex",
        "chart": "servicex-1.0.30",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-servicex"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-servicex-configmap-manager"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-8.0.10",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http",
          "port": 9000,
          "protocol": "TCP",
          "targetPort": 9000
        }
      ],
      "selector": {
        "app": "minio",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq-headless",
      "namespace": "j83k3FxVhC",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.24.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd"
        },
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp"
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist"
        },
        {
          "name": "http-stats",
          "port": 15672,
          "targetPort": "stats"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "rabbitmq",
        "app.kubernetes.io/instance": "release-name"
      },
      "publishNotReadyAddresses": true
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "j83k3FxVhC",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.24.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp",
          "nodePort": null
        },
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd",
          "nodePort": null
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist",
          "nodePort": null
        },
        {
          "name": "http-stats",
          "port": 15672,
          "targetPort": "stats",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "rabbitmq",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-servicex-app"
    },
    "spec": {
      "ports": [
        {
          "port": 8000,
          "targetPort": 5000,
          "name": "tcp",
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app": "release-name-servicex-app"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-code-gen"
    },
    "spec": {
      "ports": [
        {
          "port": 8000,
          "targetPort": 5000,
          "name": "tcp",
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app": "release-name-code-gen"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-minio",
      "labels": {
        "app": "minio",
        "chart": "minio-8.0.10",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "strategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "maxSurge": "100%",
          "maxUnavailable": 0
        }
      },
      "selector": {
        "matchLabels": {
          "app": "minio",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-minio",
          "labels": {
            "app": "minio",
            "release": "release-name"
          },
          "annotations": {
            "checksum/secrets": "326d19eeef734075766b2fe5fbda0ea3308f13d49350dcc548aa99b61b0fa104",
            "checksum/config": "9ec705e3000d8e1f256b822bee35dc238f149dbb09229548a99c6409154a12b8"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-minio",
          "containers": [
            {
              "name": "minio",
              "image": "minio/minio:RELEASE.2021-02-14T04-01-33Z",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "-ce",
                "/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export"
              ],
              "volumeMounts": null,
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9000
                }
              ],
              "env": [
                {
                  "name": "MINIO_ACCESS_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-minio",
                      "key": "accesskey"
                    }
                  }
                },
                {
                  "name": "MINIO_SECRET_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-minio",
                      "key": "secretkey"
                    }
                  }
                }
              ],
              "resources": {
                "requests": {
                  "memory": "4Gi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "export",
              "emptyDir": {}
            },
            {
              "name": "minio-user",
              "secret": {
                "secretName": "release-name-minio"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-servicex-app"
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "release-name-servicex-app"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-servicex-app",
            "helm.sh/chart": "servicex-1.0.30"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-servicex",
          "containers": [
            {
              "name": "release-name-servicex-app",
              "image": "sslhep/servicex_app:20220418-1418-stable",
              "env": [
                {
                  "name": "APP_CONFIG_FILE",
                  "value": "/opt/servicex/app.conf"
                },
                {
                  "name": "INSTANCE_NAME",
                  "value": "release-name"
                }
              ],
              "tty": true,
              "stdin": true,
              "imagePullPolicy": "Always",
              "volumeMounts": [
                {
                  "name": "app-cfg",
                  "mountPath": "/opt/servicex"
                },
                {
                  "name": "sqlite",
                  "mountPath": "/sqlite"
                }
              ],
              "ports": [
                {
                  "containerPort": 5000
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "app-cfg",
              "configMap": {
                "name": "release-name-flask-config"
              }
            },
            {
              "name": "sqlite",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-code-gen"
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "release-name-code-gen"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-code-gen"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-servicex",
          "containers": [
            {
              "name": "release-name-code-gen",
              "image": "sslhep/servicex_code_gen_atlas_xaod:20220418-1418-stable",
              "env": [
                {
                  "name": "APP_CONFIG_FILE",
                  "value": "/opt/servicex/app.conf"
                },
                {
                  "name": "INSTANCE_NAME",
                  "value": "release-name"
                }
              ],
              "tty": true,
              "stdin": true,
              "imagePullPolicy": "Always",
              "volumeMounts": [
                {
                  "name": "app-cfg",
                  "mountPath": "/opt/servicex"
                }
              ],
              "ports": [
                {
                  "containerPort": 5000
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "app-cfg",
              "configMap": {
                "name": "release-name-flask-config"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-did-finder-cernopendata"
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "release-name-did-finder-cernopendata"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-did-finder-cernopendata"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "release-name-did-finder-cernopendata",
              "image": "sslhep/servicex-did-finder-cernopendata:20220418-1418-stable",
              "imagePullPolicy": "Always",
              "env": [
                {
                  "name": "INSTANCE_NAME",
                  "value": "release-name"
                }
              ],
              "args": [
                "--rabbit-uri",
                "amqp://user:leftfoot1@release-name-rabbitmq:5672"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-did-finder-rucio"
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "release-name-did-finder-rucio"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-did-finder-rucio"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "release-name-did-finder-rucio",
              "image": "sslhep/servicex-did-finder:20220418-1418-stable",
              "command": [
                "/usr/src/app/runme.sh"
              ],
              "imagePullPolicy": "Always",
              "env": [
                {
                  "name": "RMQ_URI",
                  "value": "amqp://user:leftfoot1@release-name-rabbitmq:5672/?heartbeat=9000"
                },
                {
                  "name": "RUCIO_LATITUDE",
                  "value": "41.78"
                },
                {
                  "name": "RUCIO_LONGITUDE",
                  "value": "-87.7"
                },
                {
                  "name": "INSTANCE_NAME",
                  "value": "release-name"
                }
              ],
              "volumeMounts": [
                {
                  "name": "rucio-cfg",
                  "mountPath": "/opt/rucio/etc/"
                },
                {
                  "name": "x509-secret",
                  "mountPath": "/etc/grid-security-ro",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "rucio-cfg",
              "configMap": {
                "name": "release-name-rucio-config"
              }
            },
            {
              "name": "x509-secret",
              "secret": {
                "defaultMode": 292,
                "secretName": "release-name-x509-proxy"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-x509-secrets"
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "release-name-x509-secrets"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-x509-secrets"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-servicex",
          "initContainers": [
            {
              "name": "take-data-dir-ownership",
              "image": "alpine:3.6",
              "command": [
                "/bin/sh",
                "-c"
              ],
              "args": [
                "cp /etc/grid-certs-ro/usercert.pem /etc/grid-certs; chmod 600 /etc/grid-certs/usercert.pem; cp /etc/grid-certs-ro/userkey.pem /etc/grid-certs; chmod 400 /etc/grid-certs/userkey.pem"
              ],
              "env": [
                {
                  "name": "INSTANCE_NAME",
                  "value": "release-name"
                }
              ],
              "volumeMounts": [
                {
                  "name": "grid-certs-rw-copy",
                  "mountPath": "/etc/grid-certs/"
                },
                {
                  "name": "grid-secret",
                  "mountPath": "/etc/grid-certs-ro/"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "release-name-x509-secrets",
              "image": "sslhep/x509-secrets:20220418-1418-stable",
              "command": [
                "bash",
                "-c"
              ],
              "args": [
                "python3 x509_updater.py --secret release-name-x509-proxy --voms atlas"
              ],
              "env": [
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                }
              ],
              "tty": true,
              "stdin": true,
              "imagePullPolicy": "Always",
              "volumeMounts": [
                {
                  "name": "grid-certs-rw-copy",
                  "mountPath": "/etc/grid-certs/"
                },
                {
                  "name": "grid-secret",
                  "mountPath": "/etc/grid-certs-ro/"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "grid-secret",
              "secret": {
                "secretName": "grid-certs-secret"
              }
            },
            {
              "name": "grid-certs-rw-copy",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "j83k3FxVhC",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.24.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-rabbitmq-headless",
      "podManagementPolicy": "OrderedReady",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "rabbitmq",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "rabbitmq",
            "helm.sh/chart": "rabbitmq-8.24.13",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm"
          },
          "annotations": {
            "checksum/config": "75eeca9128ad58cd5e32a35d0ab19a0152868840f9272a9127560c98da7ca3ec",
            "checksum/secret": "9d5d872b3d58ded94d0dd5b7117a0ef78e3e796ecefe1c613475907581e4bd6a"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-rabbitmq",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "rabbitmq",
                        "app.kubernetes.io/instance": "release-name"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001,
            "runAsUser": 1001
          },
          "terminationGracePeriodSeconds": 120,
          "containers": [
            {
              "name": "rabbitmq",
              "image": "docker.io/bitnami/rabbitmq:3.9.11-debian-10-r28",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MY_POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "K8S_SERVICE_NAME",
                  "value": "release-name-rabbitmq-headless"
                },
                {
                  "name": "K8S_ADDRESS_TYPE",
                  "value": "hostname"
                },
                {
                  "name": "RABBITMQ_FORCE_BOOT",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_NODE_NAME",
                  "value": "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "K8S_HOSTNAME_SUFFIX",
                  "value": ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "RABBITMQ_MNESIA_DIR",
                  "value": "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
                },
                {
                  "name": "RABBITMQ_LDAP_ENABLE",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_LOGS",
                  "value": "-"
                },
                {
                  "name": "RABBITMQ_ULIMIT_NOFILES",
                  "value": "65536"
                },
                {
                  "name": "RABBITMQ_USE_LONGNAME",
                  "value": "true"
                },
                {
                  "name": "RABBITMQ_ERL_COOKIE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-rabbitmq",
                      "key": "rabbitmq-erlang-cookie"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_LOAD_DEFINITIONS",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_SECURE_PASSWORD",
                  "value": "yes"
                },
                {
                  "name": "RABBITMQ_USERNAME",
                  "value": "user"
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PLUGINS",
                  "value": "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
                }
              ],
              "ports": [
                {
                  "name": "amqp",
                  "containerPort": 5672
                },
                {
                  "name": "dist",
                  "containerPort": 25672
                },
                {
                  "name": "stats",
                  "containerPort": 15672
                },
                {
                  "name": "epmd",
                  "containerPort": 4369
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "rabbitmq-diagnostics -q ping"
                  ]
                },
                "initialDelaySeconds": 120,
                "periodSeconds": 30,
                "timeoutSeconds": 20,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 30,
                "timeoutSeconds": 20,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/bin/bash",
                      "-ec",
                      "if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t \"120\" -d  \"false\"\nelse\n    rabbitmqctl stop_app\nfi\n"
                    ]
                  }
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "configuration",
                  "mountPath": "/bitnami/rabbitmq/conf"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/rabbitmq/mnesia"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "configuration",
              "configMap": {
                "name": "release-name-rabbitmq-config",
                "items": [
                  {
                    "key": "rabbitmq.conf",
                    "path": "rabbitmq.conf"
                  }
                ]
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  }
]