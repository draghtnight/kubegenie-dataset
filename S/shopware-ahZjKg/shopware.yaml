apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-mariadb
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-9.8.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-minio
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-9.2.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: release-name-minio
---
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: release-name-redis
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mariadb
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-9.8.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mariadb-root-password: c2hvcHdhcmVSb290UGFzc3dvcmQ=
  mariadb-password: c2hvcHdhcmU=
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-minio
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-9.2.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  root-user: c2hvcHdhcmVNaW5pbw==
  root-password: c2hvcHdhcmVNaW5pb1Bhc3N3b3Jk
  key.json: ""
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-shopware-jwt
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  public.pem: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFwYVNiUE9lSlNQcVcza3RoY2hadApyeElhL0hZUk1nQVR4cWxzWWpSVU1qWExVWDVwTE9CVTRReU51emdUZkNHL2NnVFRSTTJ1UFVJUm5HS2NCYlZLCmY2cDlPSWx1cXlQVi9iM09Ybk9XMDZVRVZ5ZzJNcFdhVDZSSmR6SnJZQjFuV29MbW1tY2pFLzBaMk5WNnk0aHkKQVdMWWJoSXYzdTQ2eW1ZUmZUWkExTE5XalkxMTlXT204bHlBbmk5cW92VmVid2JDWVZ3cDQzUWgxYWc3c0NVcQp5cjBKTXlYS0ZVRW9oV2ZIZzgyVytMUTNUbGVMZWJLVzRXUUxKSUNRYVZQWTlmZ3JkRHNzNWhuWUtuSlk3azMxCjNHanR4cXZhdXUrNHZNdGZReFU2QkhNVjVtUXdaSHgyYndPVFBkSHI1RE45VnJZWTA0ZzR4cjdDU21sOFhVczUKOVFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==
  private.pem: LS0tLS1CRUdJTiBFTkNSWVBURUQgUFJJVkFURSBLRVktLS0tLQpNSUlGSERCT0Jna3Foa2lHOXcwQkJRMHdRVEFwQmdrcWhraUc5dzBCQlF3d0hBUUlPbVNNbkZoSHNLMENBZ2dBCk1Bd0dDQ3FHU0liM0RRSUpCUUF3RkFZSUtvWklodmNOQXdjRUNMR1VEa3ZYZFBsUEJJSUV5TVgzQnBOMDhmMkUKVEpXNmpyZmJ5OEdSVFBKa0xUOUVsdURsUTh6ZmsxdXl4OXBvR0lRbnRKUnJBK2dNcUt1OUx5VU9Td2lVWW9tRQpjUEhpa3REVXhrOUJQMmR6aFZFUG81c1FiRHlLaEJtZ0lvbXphdVdGOHNmLy9CQ09NazhYQ1E5Lzk0MzE4eDNXCjA4SjRxOGtZZGZkY3VVTjlUc0xrRG9BUTgrc0xvdmEzWmJrbndzVFRmOExkZG9IWkVUbjZ6WDE4eFFmU1Z1bDEKZTZZSERrWjB3Y0ZhZHVSSmUzQUNoTVhteE5pUm1YejBVZUNYcS9TY1NXbXFGSkdnMTVZY0g3SXNlckFUNlV1cgpZaVliUjhSVW10VjRZdGQ4UkduU09zM0k5RjBXZGpHeVZHaU5KbWpTejVvd2xtOFRQNjVQVjJtNHNpSTJ0QmtqCm1vbVRZMkFSZkROQVNrd252c1pkUFltQW9tWG5BbHBaV2tvWWh6MzFPWVdUUVZNY2NaRWZEMURsTXhwRUxReDEKR1gyNG5qNThvOTlXV2JUZGUzTlAvbUhFYVFTclJzZTZoalI1clJjUHZhcFpwUm80U2lWd1dIcWhZQmV6NC9zSQpZclFkY3NMSWFwQXF0d1NJUDdxNkc2a0ZjOWFmUTZBNm9zbitEaVNjb2ZmcmtzMWJaSEkvb1owRDFvWVZJcHltCjBmeTNmd0V4aGJoSHFYTXkwYXlUd3ByWWtRYzl6VjlhVExVbnZwZkFzVXBGc0pDMjY2Tlk4YnpkcTJlN2c5MFUKdTFJcUZDaFc2Q21ZMlMvaG9pQXNSUitTSy9SWENrZ3hDRm9xdGF5Wk1GeG5yRWhhS0xPajEwQkRiMXd4TnJmMApWMnFDaE5xNzZQSVhSamZBNmo5cGZkUmZKa1A2TG84cC96VEhYYis4blhhakxXR24ycUxQeVlVNDYwNnI3eFNtCmFkbGI1VmlZRkZabFpzaUVSMXh1bVVueERYcUFFdDZnQlpwKzQxdGtPenc4RVNIZDdsWGZtbjZyT0pINWlkd1MKb3RJY0J0UVhkUFB0TUF1UEs5Y2lHeE0zN2I2Vkh6MzFTenM0ZDUrcE1PdVpmWStlQTFoc09GL05wWEZ3THBCVQo2K2RKc3JjdTRUSE8veXpEMi9NN21PY2ViZVcyNWU5RmY5MVRpVkpnanJsNm4yWjlqL2NkQ0FjRXJjRHl0TEkzCm1EaXRSR2RFTGVwM2VBVmFuWDJVMDVxNysycml5emd3TWw1TjROOE9sbjZISWE1YzJUc3dOZG53UFJVNU9CK3gKVk42enZGaVpqRnFCZEoyaDB1QXJ4MDlhOHVkYXBBZUtiTk9EaUI1M3h6djVSUmY1RUx1VnJWTStVcjNoaHVCQQpGdGg0cWcyRHFod1RLT3pncTBjRGxXTXV3dXNNekhFU3hycVc1WHdpaFRxMkNLNktIbVl3aTcrWHlPTGpkRVNoCjJpUkhEaTFTZkN0LzZibXpoaEJsUmhmNmlQdC9XN1ZuKzJNMk4zOXcxMEljcnpINFNiMGhuZkk1M1psaFYxZWYKVU4zd01tZ1YwNnYycG5Pb1dCMjBQSUVrL1ExMGhIRHRlQ09HTVZvS0c2UHdQdmVRc2tNWHVBOG04NkJqMytQNQpuckx5ditYVGU0MkFpRUdYYjQ2ZlRzV0lJTHpnWnNaaW9rN1ZERkEwQ0RNbGVlLzM2YzVUTlZaU1J6S2tBQW05CjdxSTNQckJFWVc0b1dkQmx4ZEU3VlBEcXphWGpML2NwNStVSTlNZ2RsRys1RU1OSW5Dc0Zscm5YdUtERXVOdGwKQXNINEpTNkpEOEhWdVlnckV0RS9VUjA5dUJzSEltVTBzUDgzRVg0V2RlQzU3NC9HaFdWNWV0cVVRNmJUcUgrSgp1WmxZSmxnaUNvREJMaXdPdjAyN2tIZmg2Ky9QWWRVNWJNWVRNaGxTRnZNZStya2VIcUpSRWY4Uk92UW4xOFBxCm8wZEZQbVMrMTJYU2FSVmJ6U29jWWQvdmZ6cWZSWi8wdytuWDVlNm1zMndUczgrWXdlWVZKeitKYnRmZzVUTkIKempzOHJoZy8ybEFaMnVzclJqeTFUZ29DMlJiZjd5Sk93NE5rVFdkampCZndIU2ZXMUFOMEdNY0VRbmp4SWlWbgptOVFlNDdLT0xYajZDZ3lDQmdFZ0F3PT0KLS0tLS1FTkQgRU5DUllQVEVEIFBSSVZBVEUgS0VZLS0tLS0K
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-shopware
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  INSTANCE_ID: bHhwV3gwaGp0STlBTHRGY0xDeUlBSEhzUjVLNHgzckd5bVc2emdmN0VZYXVKZGpZakd3R2NJQlBPNlIyT3RaNw==
  APP_SECRET: NTd0a2VZSTAxTHIwQUR3dDlRUEtoenRRdnhkaENPMjBrS0NBZWpOSmRnQWUzdjZMQVNpdE40Rkc5YXdRcUNxMQ==
  DATABASE_URL: bXlzcWw6Ly9zaG9wd2FyZTpzaG9wd2FyZUByZWxlYXNlLW5hbWUtbWFyaWFkYi9zaG9wd2FyZQ==
  MAILER_URL: bnVsbDovL2xvY2FsaG9zdA==
  INSTALL_ADMIN_PASSWORD: RmpqbVBhSUdqWQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mariadb
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-9.8.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    plugin_dir=/opt/bitnami/mariadb/plugin
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci

    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mariadb/plugin

    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-configuration
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-shopware-custom
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  custom.yml: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-shopware-minio
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  storage.yml: |-
    shopware:
      filesystem:
        private:
          type: "amazon-s3"
          config:
            bucket: "documents"
            endpoint: http://release-name-shopware-minio:9000
            use_path_style_endpoint: true
            region: 'local'
            credentials:
              key: shopwareMinio
              secret: shopwareMinioPassword
            options:
              visibility: "private"
        public:
          type: "amazon-s3"
          url: http://shopware.local/media
          config:
            bucket: "media"
            endpoint: http://release-name-shopware-minio:9000
            use_path_style_endpoint: true
            region: 'local'
            credentials:
              key: shopwareMinio
              secret: shopwareMinioPassword
            options:
              visibility: "public"
        theme:
          type: "amazon-s3"
          url: http://shopware.local/theme
          config:
            bucket: "theme"
            endpoint: http://release-name-shopware-minio:9000
            use_path_style_endpoint: true
            region: 'local'
            credentials:
              key: shopwareMinio
              secret: shopwareMinioPassword
            options:
              visibility: "public"
        asset:
          type: "amazon-s3"
          url: http://shopware.local/asset
          config:
            bucket: "asset"
            endpoint: http://release-name-shopware-minio:9000
            use_path_style_endpoint: true
            region: 'local'
            credentials:
              key: shopwareMinio
              secret: shopwareMinioPassword
            options:
              visibility: "public"
        sitemap:
          type: "amazon-s3"
          url: http://shopware.local/sitemap
          config:
            bucket: "sitemap"
            endpoint: http://release-name-shopware-minio:9000
            use_path_style_endpoint: true
            region: 'local'
            credentials:
              key: shopwareMinio
              secret: shopwareMinioPassword
            options:
              visibility: "public"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-shopware
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  APP_DEBUG: "false"
  APP_ENV: prod
  APP_URL: http://shopware.local
  DATABASE_HOST: release-name-mariadb
  SHOPWARE_ES_ENABLED: "true"
  SHOPWARE_ES_INDEXING_ENABLED: "true"
  SHOPWARE_ES_HOSTS: release-name-elasticsearch-coordinating-only
  SHOPWARE_HTTP_CACHE_ENABLED: "true"
  SHOPWARE_HTTP_DEFAULT_TTL: "7200"
  DISABLE_ADMIN_WORKER: "true"
  INSTALL_LOCALE: de-DE
  INSTALL_CURRENCY: EUR
  INSTALL_ADMIN_USERNAME: admin
  CACHE_ADAPTER: redis
  REDIS_CACHE_HOST: release-name-redis-master.default.svc.cluster.local
  REDIS_CACHE_PORT: "6379"
  REDIS_CACHE_DATABASE: "0"
  SESSION_ADAPTER: redis
  REDIS_SESSION_HOST: release-name-redis-master.default.svc.cluster.local
  REDIS_SESSION_PORT: "6379"
  REDIS_SESSION_DATABASE: "1"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-9.2.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-elasticsearch-coordinating-only
  labels:
    app.kubernetes.io/name: elasticsearch
    helm.sh/chart: elasticsearch-17.5.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinating-only
  annotations: {}
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 9200
      targetPort: http
      nodePort: null
    - name: tcp-transport
      port: 9300
  selector:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: coordinating-only
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-elasticsearch-data
  labels:
    app.kubernetes.io/name: elasticsearch
    helm.sh/chart: elasticsearch-17.5.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: data
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 9200
      targetPort: http
    - name: tcp-transport
      port: 9300
      targetPort: transport
      nodePort: null
  selector:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: data
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-elasticsearch-master
  labels:
    app.kubernetes.io/name: elasticsearch
    helm.sh/chart: elasticsearch-17.5.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
  annotations: {}
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 9200
      targetPort: http
    - name: tcp-transport
      port: 9300
      targetPort: transport
      nodePort: null
  selector:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-mariadb
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-9.8.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
spec:
  type: ClusterIP
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-minio
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-9.2.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-shopware
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: shopware
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-minio
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-9.2.5
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: release-name
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-9.2.5
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/credentials-secret: 9e07b7de785bf41f307f299493f42aa51a1d4ff2d95bddd9c91de4a07cd55d9c
    spec:
      serviceAccountName: release-name-minio
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: minio
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2021.12.10-debian-10-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 11623
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: http
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: release-name-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-minio
                  key: root-password
            - name: MINIO_DEFAULT_BUCKETS
              value: documents, media:public, theme:public, asset:public, sitemap:public
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: public
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
          envFrom: null
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: release-name-minio
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-elasticsearch-coordinating-only
  labels:
    app.kubernetes.io/name: elasticsearch
    helm.sh/chart: elasticsearch-17.5.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinating-only
    app: coordinating-only
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: coordinating-only
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: release-name-elasticsearch-coordinating-only
  template:
    metadata:
      labels:
        app.kubernetes.io/name: elasticsearch
        helm.sh/chart: elasticsearch-17.5.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: coordinating-only
        app: coordinating-only
      annotations: null
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity: null
        nodeAffinity: null
      serviceAccountName: default
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: sysctl
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r273
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
          resources:
            limits: {}
            requests: {}
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:7.16.0-debian-10-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10459
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: elastic
            - name: ELASTICSEARCH_CLUSTER_HOSTS
              value: release-name-elasticsearch-master.default.svc.cluster.local,release-name-elasticsearch-coordinating-only.default.svc.cluster.local,release-name-elasticsearch-data.default.svc.cluster.local,
            - name: ELASTICSEARCH_TOTAL_NODES
              value: "2"
            - name: ELASTICSEARCH_CLUSTER_MASTER_HOSTS
              value: release-name-elasticsearch-master-0
            - name: ELASTICSEARCH_MINIMUM_MASTER_NODES
              value: "1"
            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
              value: $(MY_POD_NAME).release-name-elasticsearch-coordinating-only.default.svc.cluster.local
            - name: ELASTICSEARCH_HEAP_SIZE
              value: 128m
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "yes"
            - name: ELASTICSEARCH_NODE_TYPE
              value: coordinating
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          readinessProbe:
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits: {}
            requests:
              cpu: 25m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes:
        - name: data
          emptyDir: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-elasticsearch-data
  labels:
    app.kubernetes.io/name: elasticsearch
    helm.sh/chart: elasticsearch-17.5.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: data
    app: data
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: data
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: release-name-elasticsearch-data
  template:
    metadata:
      labels:
        app.kubernetes.io/name: elasticsearch
        helm.sh/chart: elasticsearch-17.5.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: data
        app: data
      annotations: null
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity: null
        nodeAffinity: null
      serviceAccountName: default
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: sysctl
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r273
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
          resources:
            limits: {}
            requests: {}
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:7.16.0-debian-10-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10712
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: elastic
            - name: ELASTICSEARCH_CLUSTER_HOSTS
              value: release-name-elasticsearch-master.default.svc.cluster.local,release-name-elasticsearch-coordinating-only.default.svc.cluster.local,release-name-elasticsearch-data.default.svc.cluster.local,
            - name: ELASTICSEARCH_TOTAL_NODES
              value: "2"
            - name: ELASTICSEARCH_HEAP_SIZE
              value: 1024m
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "yes"
            - name: ELASTICSEARCH_NODE_TYPE
              value: data
            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
              value: $(MY_POD_NAME).release-name-elasticsearch-data.default.svc.cluster.local
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          readinessProbe:
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits: {}
            requests:
              cpu: 25m
              memory: 2048Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes: null
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-elasticsearch-master
  labels:
    app.kubernetes.io/name: elasticsearch
    helm.sh/chart: elasticsearch-17.5.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
    app: master
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: master
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: release-name-elasticsearch-master
  template:
    metadata:
      labels:
        app.kubernetes.io/name: elasticsearch
        helm.sh/chart: elasticsearch-17.5.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
        app: master
      annotations: null
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity: null
        nodeAffinity: null
      serviceAccountName: default
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: sysctl
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r273
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
          resources:
            limits: {}
            requests: {}
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:7.16.0-debian-10-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10546
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: elastic
            - name: ELASTICSEARCH_CLUSTER_HOSTS
              value: release-name-elasticsearch-master.default.svc.cluster.local,release-name-elasticsearch-coordinating-only.default.svc.cluster.local,release-name-elasticsearch-data.default.svc.cluster.local,
            - name: ELASTICSEARCH_TOTAL_NODES
              value: "2"
            - name: ELASTICSEARCH_CLUSTER_MASTER_HOSTS
              value: release-name-elasticsearch-master-0
            - name: ELASTICSEARCH_MINIMUM_MASTER_NODES
              value: "1"
            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
              value: $(MY_POD_NAME).release-name-elasticsearch-master.default.svc.cluster.local
            - name: ELASTICSEARCH_HEAP_SIZE
              value: 128m
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "yes"
            - name: ELASTICSEARCH_NODE_TYPE
              value: master
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          readinessProbe:
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits: {}
            requests:
              cpu: 25m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes: null
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-mariadb
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-9.8.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  serviceName: release-name-mariadb
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 6f46b2d658b36cc9a863719372816d834679c22590127f90a01d8a31361fb8ba
      labels:
        app.kubernetes.io/name: mariadb
        helm.sh/chart: mariadb-9.8.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: release-name-mariadb
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mariadb
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      containers:
        - name: mariadb
          image: docker.io/bitnami/mariadb:10.5.13-debian-10-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10782
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-mariadb
                  key: mariadb-root-password
            - name: MARIADB_USER
              value: shopware
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-mariadb
                  key: mariadb-password
            - name: MARIADB_DATABASE
              value: shopware
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
            - name: config
              mountPath: /opt/bitnami/mariadb/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: release-name-mariadb
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: mariadb
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.4
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: master
  serviceName: release-name-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-15.6.4
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: b1ba2e1f9e1433cab3e89bfe4ac002631647c1d1ae87c0fb54aa4e8659a438d2
        checksum/health: e93cf7d8ccb690b09ced209f8074bce82547bb90303995d0e13e4d59739f15b6
        checksum/scripts: f28e148b5d0dd8da342b99f0bf285bbff03c3ca4a17e3b6774e30621ef08880d
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: release-name-redis
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: master
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.6-debian-10-r53
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10236
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: null
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 493
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-shopware-consumer
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "30"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: shopware
      app.kubernetes.io/instance: release-name
      role: consumer
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  replicas: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: shopware
        app.kubernetes.io/instance: release-name
        role: consumer
    spec:
      serviceAccountName: default
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: shopware
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 33
      containers:
        - name: consumer
          image: docker.io/shyim/shopware:6.4.6.0
          imagePullPolicy: IfNotPresent
          command:
            - bin/console
          args:
            - messenger:consume
            - default
            - --time-limit=600
            - -vv
          securityContext:
            runAsNonRoot: false
            runAsUser: 11046
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          lifecycle:
            preStop:
              exec:
                command:
                  - bin/console
                  - messenger:stop-workers
          envFrom:
            - configMapRef:
                name: release-name-shopware
            - secretRef:
                name: release-name-shopware
          resources:
            limits: {}
            requests:
              cpu: 300m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /var/www/html/config/jwt/
              name: shopware-jwt
            - mountPath: /var/www/html/config/packages/
              name: shopware-minio
            - mountPath: /var/www/html/custom/plugins
              name: shopware-plugins
      volumes:
        - name: shopware-jwt
          secret:
            secretName: release-name-shopware-jwt
        - name: shopware-minio
          configMap:
            name: release-name-shopware-minio
        - name: shopware-plugins
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-shopware
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "20"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: shopware
      app.kubernetes.io/instance: release-name
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: shopware
        helm.sh/chart: shopware-2.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: default
      hostAliases:
        - hostnames:
            - status.localhost
          ip: 127.0.0.1
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: shopware
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 33
      initContainers: null
      containers:
        - name: shopware
          image: docker.io/shyim/shopware:6.4.6.0
          imagePullPolicy: IfNotPresent
          args:
            - web
          securityContext:
            runAsNonRoot: false
            runAsUser: 11678
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          envFrom:
            - configMapRef:
                name: release-name-shopware
            - secretRef:
                name: release-name-shopware
          ports:
            - name: http
              containerPort: 80
          livenessProbe:
            httpGet:
              path: /admin
              port: http
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /admin
              port: http
            periodSeconds: 60
          resources:
            limits: {}
            requests:
              cpu: 300m
              memory: 512Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /var/www/html/config/jwt/
              name: shopware-jwt
            - mountPath: /var/www/html/config/packages/
              name: shopware-minio
            - mountPath: /var/www/html/custom/plugins
              name: shopware-plugins
      volumes:
        - name: shopware-jwt
          secret:
            secretName: release-name-shopware-jwt
        - name: shopware-minio
          configMap:
            name: release-name-shopware-minio
        - name: shopware-plugins
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-shopware-task-runner
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "30"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: shopware
      app.kubernetes.io/instance: release-name
      role: task-runner
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: shopware
        app.kubernetes.io/instance: release-name
        role: task-runner
    spec:
      serviceAccountName: default
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: shopware
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 33
      restartPolicy: Always
      containers:
        - name: task-runner
          image: docker.io/shyim/shopware:6.4.6.0
          imagePullPolicy: IfNotPresent
          command:
            - bin/console
          args:
            - scheduled-task:run
            - --time-limit=60
          securityContext:
            runAsNonRoot: false
            runAsUser: 11592
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          envFrom:
            - configMapRef:
                name: release-name-shopware
            - secretRef:
                name: release-name-shopware
          resources:
            limits: {}
            requests:
              cpu: 300m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /var/www/html/config/jwt/
              name: shopware-jwt
            - mountPath: /var/www/html/config/packages/
              name: shopware-minio
            - mountPath: /var/www/html/custom/plugins
              name: shopware-plugins
      volumes:
        - name: shopware-jwt
          secret:
            secretName: release-name-shopware-jwt
        - name: shopware-minio
          configMap:
            name: release-name-shopware-minio
        - name: shopware-plugins
          emptyDir: {}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-shopware-init
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-weight: "10"
spec:
  template:
    spec:
      securityContext:
        fsGroup: 33
      containers:
        - name: init
          image: docker.io/shyim/shopware:6.4.6.0
          imagePullPolicy: IfNotPresent
          args:
            - maintenance
          securityContext:
            runAsNonRoot: false
            runAsUser: 11511
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          envFrom:
            - configMapRef:
                name: release-name-shopware
            - secretRef:
                name: release-name-shopware
          volumeMounts:
            - mountPath: /var/www/html/config/jwt/
              name: shopware-jwt
            - mountPath: /var/www/html/config/packages/
              name: shopware-minio
            - mountPath: /var/www/html/custom/plugins
              name: shopware-plugins
      restartPolicy: OnFailure
      volumes:
        - name: shopware-jwt
          secret:
            secretName: release-name-shopware-jwt
        - name: shopware-minio
          configMap:
            name: release-name-shopware-minio
        - name: shopware-plugins
          emptyDir: {}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-shopware-update
  namespace: ahZjKg
  labels:
    app.kubernetes.io/name: shopware
    helm.sh/chart: shopware-2.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-weight: "10"
spec:
  template:
    spec:
      securityContext:
        fsGroup: 33
      containers:
        - name: update
          image: docker.io/shyim/shopware:6.4.6.0
          imagePullPolicy: IfNotPresent
          args:
            - maintenance
          securityContext:
            runAsNonRoot: false
            runAsUser: 11018
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: INSTALLED_SHOPWARE_VERSION
              value: "1"
          envFrom:
            - configMapRef:
                name: release-name-shopware
            - secretRef:
                name: release-name-shopware
          volumeMounts:
            - mountPath: /var/www/html/config/jwt/
              name: shopware-jwt
            - mountPath: /var/www/html/config/packages/
              name: shopware-minio
            - mountPath: /var/www/html/custom/plugins
              name: shopware-plugins
      restartPolicy: OnFailure
      volumes:
        - name: shopware-jwt
          secret:
            secretName: release-name-shopware-jwt
        - name: shopware-minio
          configMap:
            name: release-name-shopware-minio
        - name: shopware-plugins
          emptyDir: {}
