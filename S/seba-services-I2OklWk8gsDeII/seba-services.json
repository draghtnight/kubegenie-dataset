[
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "fabric-crossconnect"
    },
    "data": {
      "serviceConfig": "name: fabric-crossconnect\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nevent_bus:\n  endpoint: \"cord-kafka\"\n  kind: kafka\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-kafka:9092\"\n      topic: xos.log.fabric-crossconnect\n  loggers:\n    '':\n      handlers:\n          - console\n          - file\n          - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "fabric"
    },
    "data": {
      "serviceConfig": "name: fabric\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nevent_bus:\n  endpoint: \"cord-kafka\"\n  kind: kafka\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-kafka:9092\"\n      topic: xos.log.fabric\n  loggers:\n    '':\n      handlers:\n          - console\n          - file\n          - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "onos-service"
    },
    "data": {
      "serviceConfig": "name: onos\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nevent_bus:\n  endpoint: \"cord-kafka\"\n  kind: kafka\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-kafka:9092\"\n      topic: xos.log.onos-service\n  loggers:\n    '':\n      handlers:\n        - console\n        - file\n        - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "rcord"
    },
    "data": {
      "serviceConfig": "name: rcord\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-kafka:9092\"\n      topic: xos.log.rcord\n  loggers:\n    '':\n      handlers:\n        - console\n        - file\n        - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "volt"
    },
    "data": {
      "serviceConfig": "name: volt\naccessor:\n  username: \"admin@opencord.org\"\n  password: \"letmein\"\n  endpoint: \"xos-core:50051\"\nevent_bus:\n  endpoint: \"cord-kafka\"\n  kind: kafka\nlogging:\n  version: 1\n  handlers:\n    console:\n      class: logging.StreamHandler\n    file:\n      class: logging.handlers.RotatingFileHandler\n      filename: /var/log/xos.log\n      maxBytes: 10485760\n      backupCount: 5\n    kafka:\n      class: kafkaloghandler.KafkaLogHandler\n      bootstrap_servers:\n        - \"cord-kafka:9092\"\n      topic: xos.log.volt\n  loggers:\n    '':\n      handlers:\n        - console\n        - file\n        - kafka\n      level: DEBUG\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "seba-services-tosca"
    },
    "data": {
      "020-rcord-subscriber-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\nimports:\n  - custom_types/rcordservice.yaml\ndescription: R-CORD service TOSCA\ntopology_template:\n  node_templates:\n    service#rcord:\n      type: tosca.nodes.RCORDService\n      properties:\n        name: rcord\n        kind: data\n",
      "030-volt-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\ndescription: Set up VOLT service\nimports:\n  - custom_types/voltservice.yaml\n\ntopology_template:\n  node_templates:\n    service#volt:\n      type: tosca.nodes.VOLTService\n      properties:\n        name: volt\n        kind: data\n        voltha_url: \"voltha.voltha.svc.cluster.local\"\n        voltha_port: 8882\n",
      "040-fabric-crossconnect-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\ndescription: Set up fabric-crossconnect service\nimports:\n  - custom_types/fabriccrossconnectservice.yaml\n\ntopology_template:\n  node_templates:\n    service#fabric-crossconnect:\n      type: tosca.nodes.FabricCrossconnectService\n      properties:\n        name: fabric-crossconnect\n        kind: data\n",
      "061-onos-service.yaml": "\ntosca_definitions_version: tosca_simple_yaml_1_0\n\nimports:\n   - custom_types/onosapp.yaml\n   - custom_types/onosservice.yaml\n   - custom_types/serviceinstanceattribute.yaml\n\ndescription: Configures the VOLTHA ONOS service\n\ntopology_template:\n  node_templates:\n\n    service#onos:\n      type: tosca.nodes.ONOSService\n      properties:\n          name: onos\n          kind: data\n          rest_hostname: \"onos-ui.default.svc.cluster.local\"\n          rest_port: 8181\n\n    onos_app#openflow-base:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: openflow-base\n        app_id: org.onosproject.openflow-base\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#hostprovider:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: hostprovider\n        app_id: org.onosproject.hostprovider\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#olt:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: olt\n        app_id: org.opencord.olt\n        url: https://oss.sonatype.org/content/groups/public/org/opencord/olt-app/4.0.0/olt-app-4.0.0.oar\n        version: 4.0.0\n        dependencies: org.opencord.sadis\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#sadis:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: sadis\n        app_id: org.opencord.sadis\n        url: https://oss.sonatype.org/content/groups/public/org/opencord/sadis-app/4.0.1/sadis-app-4.0.1.oar\n        version: 4.0.1\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#kafka:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: kafka\n        app_id: org.opencord.kafka\n        url: https://oss.sonatype.org/content/groups/public/org/opencord/kafka/2.1.0/kafka-2.1.0.oar\n        version: 2.1.0\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    # CORD-Configuration\n    kafka-config-attr:\n      type: tosca.nodes.ServiceInstanceAttribute\n      properties:\n        name: /onos/v1/network/configuration/apps/org.opencord.kafka\n        value: >\n          {\n            \"kafka\" : {\n              \"bootstrapServers\" : \"cord-kafka.default.svc.cluster.local:9092\"\n            }\n          }\n      requirements:\n        - service_instance:\n            node: onos_app#kafka\n            relationship: tosca.relationships.BelongsToOne\n\n    sadis-config-attr:\n      type: tosca.nodes.ServiceInstanceAttribute\n      properties:\n        name: /onos/v1/network/configuration/apps/org.opencord.sadis\n        value: >\n          {\n            \"sadis\" : {\n              \"integration\" : {\n                \"cache\" : {\n                  \"maxsize\" : 1000,\n                  \"ttl\": \"PT300S\"\n                },\n                \"url\" : \"http://sadis-service:8000/subscriber/%s\"\n              }\n            },\n            \"bandwidthprofile\":{\n               \"integration\":{\n                  \"url\": \"http://sadis-service:8000/bandwidthprofiles/%s\",\n                  \"cache\":{\n                     \"enabled\":true,\n                     \"maxsize\":40,\n                     \"ttl\":\"PT1m\"\n                  }\n               }\n            }\n          }\n      requirements:\n        - service_instance:\n            node: onos_app#sadis\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#segmentrouting:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: org.onosproject.segmentrouting\n        app_id: org.onosproject.segmentrouting\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#netcfghostprovider:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: org.onosproject.netcfghostprovider\n        app_id: org.onosproject.netcfghostprovider\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    onos_app#openflow:\n      type: tosca.nodes.ONOSApp\n      properties:\n        name: org.onosproject.openflow\n        app_id: org.onosproject.openflow\n      requirements:\n        - owner:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n",
      "070-fabric-service.yaml": "tosca_definitions_version: tosca_simple_yaml_1_0\ndescription: Set up Fabric service\nimports:\n  - custom_types/fabricservice.yaml\n\ntopology_template:\n  node_templates:\n    service#fabric:\n      type: tosca.nodes.FabricService\n      properties:\n        name: fabric\n        kind: data\n",
      "300-service-graph.yaml": "\ntosca_definitions_version: tosca_simple_yaml_1_0\nimports:\n  - custom_types/fabricservice.yaml\n  - custom_types/onosservice.yaml\n  - custom_types/rcordservice.yaml\n  - custom_types/voltservice.yaml\n  - custom_types/fabriccrossconnectservice.yaml\n  - custom_types/servicedependency.yaml\n  - custom_types/servicegraphconstraint.yaml\ndescription: seba service graph\ntopology_template:\n  node_templates:\n\n# These services must be defined before loading the graph\n\n    service#onos:\n      type: tosca.nodes.ONOSService\n      properties:\n        name: onos\n        must-exist: true\n\n    service#fabric:\n      type: tosca.nodes.FabricService\n      properties:\n        name: fabric\n        must-exist: true\n\n    service#rcord:\n      type: tosca.nodes.RCORDService\n      properties:\n        name: rcord\n        must-exist: true\n\n    service#volt:\n      type: tosca.nodes.VOLTService\n      properties:\n        name: volt\n        must-exist: true\n\n    service_dependency#onos-fabric_fabric:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#fabric\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#rcord_volt:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#rcord\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#volt\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#onos_volt:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#volt\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#onos_rcord:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#rcord\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n    service#fabric-crossconnect:\n      type: tosca.nodes.FabricCrossconnectService\n      properties:\n        name: fabric-crossconnect\n        must-exist: true\n\n    service_dependency#volt_fabric-crossconnect:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#volt\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#fabric-crossconnect\n            relationship: tosca.relationships.BelongsToOne\n\n    service_dependency#onos_fabric-crossconnect:\n      type: tosca.nodes.ServiceDependency\n      properties:\n        connect_method: none\n      requirements:\n        - subscriber_service:\n            node: service#fabric-crossconnect\n            relationship: tosca.relationships.BelongsToOne\n        - provider_service:\n            node: service#onos\n            relationship: tosca.relationships.BelongsToOne\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "sadis-service",
      "labels": {
        "app": "sadis-server"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "sadis-service",
          "port": 8000,
          "targetPort": 8000,
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app": "sadis-server",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-fabric-crossconnect",
      "labels": {
        "app": "fabric-crossconnect",
        "chart": "fabric-crossconnect-2.0.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "fabric-crossconnect",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "fabric-crossconnect",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "44da4faed85f464ebb48b378ef8f6f3d4f124e6a7b4483e668bc61fb66f669e2"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "fabric-crossconnect",
              "image": "xosproject/fabric-crossconnect-synchronizer:2.0.0",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "fabric-crossconnect-config",
                  "mountPath": "/opt/xos/synchronizers/fabric-crossconnect/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "fabric-crossconnect-config",
              "configMap": {
                "name": "fabric-crossconnect",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-fabric",
      "labels": {
        "app": "fabric",
        "chart": "fabric-3.0.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "fabric",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "fabric",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "7a2c297919bfa78b99fc69efcfb7c399790f5c5fbdb142f3f8657cb3b6560a90"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "fabric",
              "image": "xosproject/fabric-synchronizer:3.0.0",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "fabric-config",
                  "mountPath": "/opt/xos/synchronizers/fabric/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "fabric-config",
              "configMap": {
                "name": "fabric",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-onos-service",
      "labels": {
        "app": "onos-service",
        "chart": "onos-service-3.0.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "onos-service",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "onos-service",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "7ae1c8b871f40d23c846e2600c757e875eac40e28f54b46226cf6cc6f45abe89"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "onos-service",
              "image": "xosproject/onos-synchronizer:3.0.0",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "onos-service-config",
                  "mountPath": "/opt/xos/synchronizers/onos/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "onos-service-config",
              "configMap": {
                "name": "onos-service",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-rcord",
      "labels": {
        "app": "rcord",
        "chart": "rcord-2.0.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "rcord",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "rcord",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "9a2404feaf652a72140efa424652083eca58f5923bcae49404a5cf97bd5abb46"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "rcord",
              "image": "xosproject/rcord-synchronizer:2.0.0",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "rcord-config",
                  "mountPath": "/opt/xos/synchronizers/rcord/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "rcord-config",
              "configMap": {
                "name": "rcord",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "Deployment",
    "metadata": {
      "name": "sadis-server",
      "labels": {
        "app": "sadis-server"
      }
    },
    "spec": {
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "sadis-server",
            "release": "release-name"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "sadis-server",
              "image": "opencord/sadis-server:1.1.0",
              "imagePullPolicy": "Always",
              "ports": [
                {
                  "containerPort": 8000,
                  "port": 8000,
                  "protocol": "TCP"
                }
              ],
              "env": [
                {
                  "name": "SADISSERVER_PORT",
                  "value": "8000"
                },
                {
                  "name": "SADISSERVER_USERNAME",
                  "value": "admin@opencord.org"
                },
                {
                  "name": "SADISSERVER_PASSWORD",
                  "value": "letmein"
                },
                {
                  "name": "SADISSERVER_XOS",
                  "value": "xos-chameleon:9101"
                },
                {
                  "name": "SADISSERVER_KAFKABROKER",
                  "value": "cord-kafka:9092"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-volt",
      "labels": {
        "app": "volt",
        "chart": "volt-3.0.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "volt",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "volt",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "e24e61e4ff99c4902bc1296acb71a6e5dcb1419260dea762c8a43ae861979fc1"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "volt",
              "image": "xosproject/volt-synchronizer:3.0.0",
              "imagePullPolicy": "Always",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "volt-config",
                  "mountPath": "/opt/xos/synchronizers/volt/mounted_config.yaml",
                  "subPath": "mounted_config.yaml"
                },
                {
                  "name": "certchain-volume",
                  "mountPath": "/usr/local/share/ca-certificates/local_certs.crt",
                  "subPath": "config/ca_cert_chain.pem"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "volt-config",
              "configMap": {
                "name": "volt",
                "items": [
                  {
                    "key": "serviceConfig",
                    "path": "mounted_config.yaml"
                  }
                ]
              }
            },
            {
              "name": "certchain-volume",
              "configMap": {
                "name": "ca-certificates",
                "items": [
                  {
                    "key": "chain",
                    "path": "config/ca_cert_chain.pem"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "release-name-seba-services-tosca-loader",
      "labels": {
        "app": "seba-services",
        "chart": "seba-services-2.0.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "backoffLimit": 12,
      "template": {
        "metadata": {
          "labels": {
            "app": "seba-services",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "3f81bb383e7920751322c0f15bd4ac98c411418ef4883ab5279b0829e5089010"
          }
        },
        "spec": {
          "restartPolicy": "OnFailure",
          "containers": [
            {
              "name": "seba-services-tosca-loader",
              "image": "xosproject/tosca-loader:1.3.1",
              "imagePullPolicy": "Always",
              "env": [
                {
                  "name": "XOS_USER",
                  "value": "admin@opencord.org"
                },
                {
                  "name": "XOS_PASSWD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "xos-admin-passwd-secret",
                      "key": "password"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "seba-services-tosca",
                  "mountPath": "/opt/tosca"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "seba-services-tosca",
              "configMap": {
                "name": "seba-services-tosca"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-api-test",
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "restartPolicy": "Never",
      "containers": [
        {
          "name": "release-name-api-test",
          "image": "xosproject/xos-api-tester:master",
          "imagePullPolicy": "Always",
          "volumeMounts": [
            {
              "name": "log-volume",
              "mountPath": "/src/cord-api/Tests/Log/"
            }
          ],
          "env": [
            {
              "name": "SERVER_IP",
              "value": "xos-chameleon"
            },
            {
              "name": "SERVER_PORT",
              "value": "9101"
            },
            {
              "name": "XOS_USER",
              "value": "admin@opencord.org"
            },
            {
              "name": "XOS_PASSWD",
              "value": "letmein"
            }
          ],
          "command": [
            "pybot",
            "-L",
            "TRACE",
            "-d",
            "Log",
            "-T",
            "WorkflowValidations/ATT_Workflow.robot"
          ]
        }
      ],
      "volumes": [
        {
          "name": "log-volume",
          "hostPath": {
            "path": "/tmp/helm_test_attworkflow_logs_20220612T011621.50Z",
            "type": "DirectoryOrCreate"
          }
        }
      ]
    }
  }
]