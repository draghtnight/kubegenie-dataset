[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-mailhog",
      "labels": {
        "helm.sh/chart": "mailhog-5.0.4",
        "app.kubernetes.io/name": "mailhog",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.0.1",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "F0Src"
    },
    "imagePullSecrets": []
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "automountServiceAccountToken": true,
    "metadata": {
      "name": "release-name-redis",
      "namespace": "F0Src",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "F0Src"
    },
    "type": "Opaque",
    "data": {
      "postgresql-postgres-password": "cUxKRWlCRVplNw==",
      "postgresql-password": "Y0FlbFByOGUyZw=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-configuration",
      "namespace": "F0Src",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "redis.conf": "# User-supplied common configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"\n# End of common configuration",
      "master.conf": "dir /data\n# User-supplied master configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of master configuration",
      "replica.conf": "dir /data\nslave-read-only yes\n# User-supplied replica configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of replica configuration"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-health",
      "namespace": "F0Src",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "ping_readiness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] && [ \"$response\" != \"LOADING Redis is loading the dataset in memory\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] && [ \"$response\" != \"LOADING Redis is loading the dataset in memory\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
      "ping_liveness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-scripts",
      "namespace": "F0Src",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "start-master.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--protected-mode\" \"no\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-jaeger-all-in-one-headless",
      "namespace": "F0Src",
      "labels": {
        "helm.sh/chart": "jaeger-all-in-one-0.1.6",
        "app.kubernetes.io/name": "jaeger-all-in-one",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.22.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "port": 6831,
          "targetPort": "udp-com-thr",
          "protocol": "UDP",
          "name": "udp-com-thr"
        },
        {
          "port": 6832,
          "targetPort": "udp-bin-thr",
          "protocol": "UDP",
          "name": "udp-bin-thr"
        },
        {
          "port": 5775,
          "targetPort": "udp-bin-thr-o",
          "protocol": "UDP",
          "name": "udp-bin-thr-o"
        },
        {
          "port": 5778,
          "targetPort": "http-configs",
          "protocol": "TCP",
          "name": "http-configs"
        },
        {
          "port": 16686,
          "targetPort": "http-ui",
          "protocol": "TCP",
          "name": "http-ui"
        },
        {
          "port": 14250,
          "targetPort": "grpc-proto",
          "protocol": "TCP",
          "name": "grpc-proto"
        },
        {
          "port": 14268,
          "targetPort": "http-bin-thr",
          "protocol": "TCP",
          "name": "http-bin-thr"
        },
        {
          "port": 14269,
          "targetPort": "http-admin",
          "protocol": "TCP",
          "name": "http-admin"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "jaeger-all-in-one",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-jaeger-all-in-one",
      "namespace": "F0Src",
      "labels": {
        "helm.sh/chart": "jaeger-all-in-one-0.1.6",
        "app.kubernetes.io/name": "jaeger-all-in-one",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.22.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "prometheus.io/probe": "true",
        "prometheus.io/probe-path": "/"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 6831,
          "targetPort": "udp-com-thr",
          "protocol": "UDP",
          "name": "udp-com-thr"
        },
        {
          "port": 6832,
          "targetPort": "udp-bin-thr",
          "protocol": "UDP",
          "name": "udp-bin-thr"
        },
        {
          "port": 5775,
          "targetPort": "udp-bin-thr-o",
          "protocol": "UDP",
          "name": "udp-bin-thr-o"
        },
        {
          "port": 5778,
          "targetPort": "http-configs",
          "protocol": "TCP",
          "name": "http-configs"
        },
        {
          "port": 16686,
          "targetPort": "http-ui",
          "protocol": "TCP",
          "name": "http-ui"
        },
        {
          "port": 14250,
          "targetPort": "grpc-proto",
          "protocol": "TCP",
          "name": "grpc-proto"
        },
        {
          "port": 14268,
          "targetPort": "http-bin-thr",
          "protocol": "TCP",
          "name": "http-bin-thr"
        },
        {
          "port": 14269,
          "targetPort": "http-admin",
          "protocol": "TCP",
          "name": "http-admin"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "jaeger-all-in-one",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-mailhog",
      "labels": {
        "helm.sh/chart": "mailhog-5.0.4",
        "app.kubernetes.io/name": "mailhog",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.0.1",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "F0Src"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http",
          "port": 8025,
          "protocol": "TCP",
          "targetPort": "http"
        },
        {
          "name": "tcp-smtp",
          "port": 1025,
          "protocol": "TCP",
          "targetPort": "tcp-smtp"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "mailhog",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      },
      "namespace": "F0Src"
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null,
      "namespace": "F0Src"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "role": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-headless",
      "namespace": "F0Src",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-master",
      "namespace": "F0Src",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "master"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "master"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-mailhog",
      "labels": {
        "helm.sh/chart": "mailhog-5.0.4",
        "app.kubernetes.io/name": "mailhog",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.0.1",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "F0Src"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "mailhog",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "mailhog",
            "app.kubernetes.io/instance": "release-name"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-mailhog",
          "automountServiceAccountToken": false,
          "securityContext": {
            "fsGroup": 1000,
            "runAsGroup": 1000,
            "runAsNonRoot": true,
            "runAsUser": 1000
          },
          "containers": [
            {
              "name": "mailhog",
              "image": "docker.io/mailhog/mailhog:v1.0.1",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "MH_HOSTNAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 8025,
                  "protocol": "TCP"
                },
                {
                  "name": "tcp-smtp",
                  "containerPort": 1025,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "tcpSocket": {
                  "port": "tcp-smtp"
                },
                "initialDelaySeconds": 10,
                "timeoutSeconds": 1
              },
              "readinessProbe": {
                "tcpSocket": {
                  "port": "tcp-smtp"
                }
              },
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "privileged": false,
                "readOnlyRootFilesystem": true
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-saleor-celery-worker",
      "labels": {
        "helm.sh/chart": "saleor-0.1.1",
        "app.kubernetes.io/name": "saleor",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "3.1.0-alpha",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "celery-worker"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "saleor",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "strategy": {
        "type": "Recreate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "saleor",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "celery-worker"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "saleor-celery-worker",
              "image": "registry.example.com/saleor/saleor:3.1.0-a.15",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "-c"
              ],
              "args": [
                "celery -A saleor --app=saleor.celeryconf:app worker --loglevel=debug -B"
              ],
              "env": [
                {
                  "name": "DATABASE_URL",
                  "value": "postgres://saleor_pg_user:@release-name-postgresql:5432/saleor_db"
                },
                {
                  "name": "CELERY_BROKER_URL",
                  "value": "redis://release-name-redis-master:6379/1"
                },
                {
                  "name": "DASHBOARD_URL",
                  "value": "http://dashboard.example.com"
                },
                {
                  "name": "DEFAULT_FROM_EMAIL",
                  "value": "info@example.com"
                },
                {
                  "name": "EMAIL_URL",
                  "value": "smtp://release-name-mailhog:1025"
                },
                {
                  "name": "JAEGER_AGENT_HOST",
                  "value": "release-name-jaeger-all-in-one"
                },
                {
                  "name": "SECRET_KEY",
                  "value": "TheApiSecretKey"
                },
                {
                  "name": "ALLOWED_HOSTS",
                  "value": "api.example.com"
                }
              ],
              "volumeMounts": null
            }
          ],
          "volumes": null,
          "restartPolicy": "Always"
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-jaeger-all-in-one",
      "namespace": "F0Src",
      "labels": {
        "helm.sh/chart": "jaeger-all-in-one-0.1.6",
        "app.kubernetes.io/name": "jaeger-all-in-one",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.22.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-jaeger-all-in-one-headless",
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "jaeger-all-in-one",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "jaeger-all-in-one",
            "app.kubernetes.io/instance": "release-name"
          },
          "annotations": {
            "prometheus.io/path": "/metrics",
            "prometheus.io/port": "14269",
            "prometheus.io/scrape": "true"
          }
        },
        "spec": {
          "terminationGracePeriodSeconds": 10,
          "serviceAccountName": "default",
          "securityContext": {},
          "containers": [
            {
              "name": "jaeger-all-in-one",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "image": "jaegertracing/all-in-one:1.22.0",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "udp-com-thr",
                  "containerPort": 6831,
                  "protocol": "UDP"
                },
                {
                  "name": "udp-bin-thr",
                  "containerPort": 6832,
                  "protocol": "UDP"
                },
                {
                  "name": "udp-bin-thr-o",
                  "containerPort": 5775,
                  "protocol": "UDP"
                },
                {
                  "name": "http-configs",
                  "containerPort": 5778,
                  "protocol": "TCP"
                },
                {
                  "name": "http-ui",
                  "containerPort": 16686,
                  "protocol": "TCP"
                },
                {
                  "name": "grpc-proto",
                  "containerPort": 14250,
                  "protocol": "TCP"
                },
                {
                  "name": "http-bin-thr",
                  "containerPort": 14268,
                  "protocol": "TCP"
                },
                {
                  "name": "http-admin",
                  "containerPort": 14269,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http-admin"
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http-admin"
                }
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "BADGER_DIRECTORY_KEY",
                  "value": "/badger/key"
                },
                {
                  "name": "BADGER_DIRECTORY_VALUE",
                  "value": "/badger/data"
                },
                {
                  "name": "BADGER_EPHEMERAL",
                  "value": "false"
                },
                {
                  "name": "MEMORY_MAX_TRACES",
                  "value": "100000"
                },
                {
                  "name": "SPAN_STORAGE_TYPE",
                  "value": "badger"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null,
      "namespace": "F0Src"
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "role": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-10.16.2",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "role": "primary",
            "app.kubernetes.io/component": "primary"
          }
        },
        "spec": {
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "postgresql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/bitnami/postgresql:11.14.0-debian-10-r28",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "securityContext": {
                "runAsUser": 11227,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-postgres-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "saleor_pg_user"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "saleor_db"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"saleor_pg_user\" -d \"dbname=saleor_db\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"saleor_pg_user\" -d \"dbname=saleor_db\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql",
                  "subPath": null
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "5Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-redis-master",
      "namespace": "F0Src",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "master"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "master"
        }
      },
      "serviceName": "release-name-redis-headless",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-15.7.6",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "master"
          },
          "annotations": {
            "checksum/configmap": "37d1b9b6c7d7fae21c6536b02822996160fe5ce021edbe71a1c854e376b86de9",
            "checksum/health": "fbad1d01596211141d99b8f7c2d82767d233eb545fc5fe167232e4595fc546fa",
            "checksum/scripts": "6a807e4a0d9709a0a7cbb1f3e4491b1d051cf7d5d50c5c4986b6bbe58ef1c243",
            "checksum/secret": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "serviceAccountName": "release-name-redis",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "redis",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "master"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "terminationGracePeriodSeconds": 30,
          "containers": [
            {
              "name": "redis",
              "image": "docker.io/bitnami/redis:6.2.6-debian-10-r97",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 10049,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master"
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "yes"
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379"
                }
              ],
              "ports": [
                {
                  "name": "redis",
                  "containerPort": 6379
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 6,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 2,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                },
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "volumeMounts": [
                {
                  "name": "start-scripts",
                  "mountPath": "/opt/bitnami/scripts/start-scripts"
                },
                {
                  "name": "health",
                  "mountPath": "/health"
                },
                {
                  "name": "redis-data",
                  "mountPath": "/data",
                  "subPath": null
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/redis/mounted-etc"
                },
                {
                  "name": "redis-tmp-conf",
                  "mountPath": "/opt/bitnami/redis/etc/"
                },
                {
                  "name": "tmp",
                  "mountPath": "/tmp"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "start-scripts",
              "configMap": {
                "name": "release-name-redis-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "health",
              "configMap": {
                "name": "release-name-redis-health",
                "defaultMode": 493
              }
            },
            {
              "name": "config",
              "configMap": {
                "name": "release-name-redis-configuration"
              }
            },
            {
              "name": "redis-tmp-conf",
              "emptyDir": {}
            },
            {
              "name": "tmp",
              "emptyDir": {}
            },
            {
              "name": "redis-data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-jaeger-all-in-one-test-connection",
      "labels": {
        "helm.sh/chart": "jaeger-all-in-one-0.1.6",
        "app.kubernetes.io/name": "jaeger-all-in-one",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.22.0",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "wget",
          "image": "busybox",
          "command": [
            "wget"
          ],
          "args": [
            "release-name-jaeger-all-in-one:16686"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]