apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: release-name-zookeeper
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: zookeeper
  maxUnavailable: 1
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-stardog-password
  namespace: ZeDBnDaueBb
  labels:
    helm.sh/chart: stardog-2.0.5
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
type: Opaque
data:
  password: YWRtaW4=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-stardog-log4j
  namespace: ZeDBnDaueBb
  labels:
    helm.sh/chart: stardog-2.0.5
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
data:
  log4j2.xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- Copyright (c) 2010 - 2019, Stardog Union. <http://www.stardog.com> -->\n<!-- For more information about licensing and copyright of this software, please contact -->\n<!-- sales@stardog.com or visit http://stardog.com -->\n\n<Configuration status=\"ERROR\" name=\"default-config\">\n\t<Properties>\n\t\t<Property name=\"STARDOG_LOG\">stardog</Property><!-- do not edit -->\n\t\t<Property name=\"ZOOKEEPER_LOG\">zookeeper</Property>\n\t\t<Property name=\"LOG_DIR\">${sys:stardog.home}</Property>\n\t\t<Property name=\"ARCHIVE\">${LOG_DIR}/.logs_archive</Property><!-- for use with RollingFile -->\n\t\t<Property name=\"PATTERN\">%-5level %d [%t] %c:%M(%L): %m%n</Property>\n\t</Properties>\n\t<Appenders>\n\t\t<Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n\t\t\t<JsonLayout compact=\"true\" eventEol=\"true\" includeStacktrace=\"true\" stacktraceAsString=\"true\" />\n\t\t</Console>\n\n\t\t<File name=\"stardogAppender\"\n\t\t\t  fileName=\"${LOG_DIR}/${STARDOG_LOG}.log\">\n\t\t\t<PatternLayout pattern=\"${PATTERN}\"/>\n\t\t</File>\n\t\t<File name=\"zookeeperAppender\"\n\t\t\t  fileName=\"${LOG_DIR}/${ZOOKEEPER_LOG}.log\">\n\t\t\t<PatternLayout pattern=\"${PATTERN}\"/>\n\t\t</File> \n\t</Appenders>\n\t<Loggers>\n\t\t<Root level=\"WARN\">\n\t\t\t<AppenderRef ref=\"STDOUT\"/>\n\t\t</Root>\n\t\t<Logger name=\"com.complexible.stardog\" level=\"INFO\" additivity=\"false\">\n\t\t\t<AppenderRef ref=\"STDOUT\"/>\n\t\t\t<AppenderRef ref=\"stardogAppender\"/>\n\t\t</Logger>\n\t\t<!-- ignore minor warnings from PDFBox about mis-named Unicode symbols -->\n\t\t<Logger name=\"org.apache.pdfbox.encoding.Encoding\" level=\"ERROR\" additivity=\"false\">\n\t\t\t<AppenderRef ref=\"STDOUT\"/>\n\t\t\t<AppenderRef ref=\"stardogAppender\"/>\n\t\t</Logger>\n\t\t<!-- ignore warning from RIO about our replacing their TurtleWriter -->\n\t\t<Logger name=\"org.com.complexible.common.openrdf.rio.RDFWriterRegistry\" level=\"ERROR\" additivity=\"false\">\n\t\t\t<AppenderRef ref=\"STDOUT\"/>\n\t\t\t<AppenderRef ref=\"stardogAppender\"/>\n\t\t</Logger>\n\t\t<!-- redirect all zookeeper records to its own log file -->\n\t\t<Logger name=\"org.apache.zookeeper\" level=\"INFO\" additivity=\"false\">\n\t\t\t<AppenderRef ref=\"STDOUT\"/>\n\t\t\t<AppenderRef ref=\"zookeeperAppender\"/> \n\t\t</Logger>\n\n\t\t<!-- do not edit -->\n\t\t<Logger name=\"com.complexible.stardog.Kernels\" level=\"INFO\" additivity=\"false\">\n\t\t\t<AppenderRef ref=\"STDOUT\"/>\n\t\t</Logger>\n\t</Loggers>\n</Configuration>"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-stardog-properties
  namespace: ZeDBnDaueBb
  labels:
    helm.sh/chart: stardog-2.0.5
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
data:
  stardog.properties: |
    logging.audit.enabled=true
    logging.audit.type=text
    pack.enabled=true
    pack.zookeeper.address=release-name-zookeeper-0.release-name-zookeeper-headless.default:2181,release-name-zookeeper-1.release-name-zookeeper-headless.default:2181,release-name-zookeeper-2.release-name-zookeeper-headless.default:2181
    pack.node.join.retry.count=15
    pack.node.join.retry.delay=1m
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-zookeeper-headless
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: client
      port: 2181
      targetPort: client
    - name: follower
      port: 2888
      targetPort: follower
    - name: election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: zookeeper
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-zookeeper
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  ports:
    - name: client
      port: 2181
      targetPort: client
    - name: follower
      port: 2888
      targetPort: follower
    - name: election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: zookeeper
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-stardog
  namespace: ZeDBnDaueBb
  labels:
    app: release-name-stardog
    helm.sh/chart: stardog-2.0.5
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
spec:
  ports:
    - port: 5820
      name: server
  type: LoadBalancer
  selector:
    app: release-name-stardog
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-zookeeper
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.5.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  serviceName: release-name-zookeeper-headless
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: zookeeper
  template:
    metadata:
      name: release-name-zookeeper
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-5.5.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper
    spec:
      securityContext:
        fsGroup: 1001
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.5.7
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10674
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - bash
            - -ec
            - |
              # Execute entrypoint as usual after obtaining ZOO_SERVER_ID based on POD hostname
              HOSTNAME=`hostname -s`
              if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
                ORD=${BASH_REMATCH[2]}
                export ZOO_SERVER_ID=$((ORD+1))
              else
                echo "Failed to get index from hostname $HOST"
                exit 1
              fi
              exec /entrypoint.sh /run.sh
          resources:
            requests:
              cpu: 1
              memory: 2Gi
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: srvr, mntr
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_SERVERS
              value: release-name-zookeeper-0.release-name-zookeeper-headless.default.svc.cluster.local:2888:3888 release-name-zookeeper-1.release-name-zookeeper-headless.default.svc.cluster.local:2888:3888 release-name-zookeeper-2.release-name-zookeeper-headless.default.svc.cluster.local:2888:3888
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: INFO
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            tcpSocket:
              port: client
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: client
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
      volumes: null
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
        storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-stardog
  namespace: ZeDBnDaueBb
  labels:
    helm.sh/chart: stardog-2.0.5
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
    app.kubernetes.io/component: server
spec:
  selector:
    matchLabels:
      app: release-name-stardog
  serviceName: release-name-stardog
  replicas: 3
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: release-name-stardog
        helm.sh/chart: stardog-2.0.5
        app.kubernetes.io/name: stardog
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: latest
        app.kubernetes.io/component: server
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - release-name-stardog
              topologyKey: kubernetes.io/hostname
      initContainers:
        - name: wait-for-zk
          image: busybox:stable
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |2
              while :
               do
                 echo "Checking for ZK followers"
                 ZK_MNTR=$(echo mntr | nc release-name-zookeeper-headless.default 2181)
                 ZK_FOLLOWERS=$(echo "${ZK_MNTR}" | grep zk_synced_followers | awk '{print $2}')
                 echo "Currently ${ZK_FOLLOWERS} ZK followers"
                 if [[ "${ZK_FOLLOWERS}" -gt "1" ]]; then
                   echo "ZK has two sync'd followers (with the leader that makes 3)"
                   exit 0
                 fi
                 sleep 1
               done
      containers:
        - name: release-name-stardog
          imagePullPolicy: IfNotPresent
          image: stardog/stardog:latest
          ports:
            - containerPort: 5820
              name: server
          volumeMounts:
            - name: release-name-stardog-password
              mountPath: /etc/stardog-password
              readOnly: true
            - name: stardog-license
              mountPath: /etc/stardog-license
              readOnly: true
            - name: data
              mountPath: /var/opt/stardog/
              readOnly: false
            - name: release-name-stardog-properties-vol
              mountPath: /etc/stardog-conf/stardog.properties
              subPath: stardog.properties
            - name: release-name-stardog-log4j-vol
              mountPath: /var/opt/stardog/log4j2.xml
              subPath: log4j2.xml
          env:
            - name: PORT
              value: "5820"
            - name: STARDOG_HOME
              value: /var/opt/stardog/
            - name: STARDOG_LICENSE_PATH
              value: /etc/stardog-license/stardog-license-key.bin
            - name: STARDOG_PROPERTIES
              value: /etc/stardog-conf/stardog.properties
            - name: STARDOG_SERVER_JAVA_ARGS
              value: -XX:ActiveProcessorCount=2  -Djava.io.tmpdir=/tmp -Xmx2g -Xms2g -XX:MaxDirectMemorySize=1g
            - name: STARDOG_PERF_JAVA_ARGS
              value: -XX:SoftRefLRUPolicyMSPerMB=1 -XX:+UseG1GC -XX:+UseCompressedOops
            - name: STARDOG_TMP_PATH
              value: /tmp
            - name: STARDOG_SERVER_START_ARGS
              value: ""
          resources:
            requests:
              cpu: 2
              memory: 4Gi
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - "set -ex\n          \nfunction wait_for_start {\n    (\n    HOST=${1}\n    PORT=${2}\n    DELAY=${3}\n    # Wait for stardog to be running\n    RC=1\n    COUNT=0\n    set +e\n    while [[ ${RC} -ne 0 ]];\n    do\n      if [[ ${COUNT} -gt ${DELAY} ]]; then\n          return 1;\n      fi\n      COUNT=$(expr 1 + ${COUNT} )\n      sleep 1\n      curl -v  http://${HOST}:${PORT}/admin/healthcheck\n      RC=$?\n    done\n\n    return 0\n    )\n}\n\nfunction change_pw {\n    (\n    set +ex\n    HOST=${1}\n    PORT=${2}\n\n    echo \"/opt/stardog/bin/stardog-admin --server http://${HOST}:${PORT} user passwd -N xxxxxxxxxxxxxx\"\n    NEW_PW=$(cat /etc/stardog-password/adminpw)\n    /opt/stardog/bin/stardog-admin --server http://${HOST}:${PORT} user passwd -N ${NEW_PW}\n    if [[ $? -eq 0 ]];\n    then\n\t    echo \"Password successfully changed\"\n\t    return 0\n    else\n    \tcurl --fail -u admin:${NEW_PW} http://${HOST}:${PORT}/admin/status\n    \tRC=$?\n    \tif [[ $RC -eq 0 ]];\n      then\n        echo \"Default password was already changed\"\n        return 0\n      elif [[ $RC -eq 22 ]]\n      then\n        echo \"HTTP 4xx error\"\n        return $RC\n      else\n        echo \"Something else went wrong\"\n        return $RC\n      fi\n    fi\n    )\n}\n\nfunction make_temp {\n    (\n    set +e\n    TEMP_PATH=${1}\n\n    if [ ! -d \"$TEMP_PATH\" ]; then\n      mkdir -p $TEMP_PATH\n      if [ $? -ne 0 ]; then\n        echo \"Could not create stardog tmp directory ${TEMP_PATH}\" >&2\n        return 1\n      fi\n    fi\n    )\n}\nmake_temp ${STARDOG_TMP_PATH}\n/opt/stardog/bin/stardog-admin server start --foreground --port ${PORT} --home ${STARDOG_HOME} ${STARDOG_SERVER_START_ARGS}\n"
          livenessProbe:
            httpGet:
              path: /admin/alive
              port: server
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 15
          readinessProbe:
            httpGet:
              path: /admin/healthcheck
              port: server
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    /opt/stardog/bin/stardog-admin server stop -u admin -p $(cat /etc/stardog-password/adminpw)
      terminationGracePeriodSeconds: 300
      imagePullSecrets:
        - name: release-name-image-pull-secret
        - name: release-name-image-busybox-pull-secret
      volumes:
        - name: stardog-license
          secret:
            secretName: stardog-license
        - name: release-name-stardog-properties-vol
          configMap:
            name: release-name-stardog-properties
            items:
              - key: stardog.properties
                path: stardog.properties
        - name: release-name-stardog-log4j-vol
          configMap:
            name: release-name-stardog-log4j
            items:
              - key: log4j2.xml
                path: log4j2.xml
        - name: release-name-stardog-password
          secret:
            secretName: release-name-stardog-password
            items:
              - key: password
                path: adminpw
                mode: 444
      nodeSelector: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-stardog
  namespace: ZeDBnDaueBb
  labels:
    helm.sh/chart: stardog-2.0.5
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  template:
    metadata:
      name: release-name-stardog
      labels:
        helm.sh/chart: stardog-2.0.5
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      restartPolicy: Never
      containers:
        - name: post-install-job
          imagePullPolicy: IfNotPresent
          image: stardog/stardog:latest
          volumeMounts:
            - name: release-name-stardog-password
              mountPath: /etc/stardog-password
              readOnly: true
          env:
            - name: PORT
              value: "5820"
            - name: HOST
              value: release-name-stardog.default
            - name: DELAY
              value: "300"
          command:
            - /bin/sh
            - -c
            - "set -ex\n          \nfunction wait_for_start {\n    (\n    HOST=${1}\n    PORT=${2}\n    DELAY=${3}\n    # Wait for stardog to be running\n    RC=1\n    COUNT=0\n    set +e\n    while [[ ${RC} -ne 0 ]];\n    do\n      if [[ ${COUNT} -gt ${DELAY} ]]; then\n          return 1;\n      fi\n      COUNT=$(expr 1 + ${COUNT} )\n      sleep 1\n      curl -v  http://${HOST}:${PORT}/admin/healthcheck\n      RC=$?\n    done\n\n    return 0\n    )\n}\n\nfunction change_pw {\n    (\n    set +ex\n    HOST=${1}\n    PORT=${2}\n\n    echo \"/opt/stardog/bin/stardog-admin --server http://${HOST}:${PORT} user passwd -N xxxxxxxxxxxxxx\"\n    NEW_PW=$(cat /etc/stardog-password/adminpw)\n    /opt/stardog/bin/stardog-admin --server http://${HOST}:${PORT} user passwd -N ${NEW_PW}\n    if [[ $? -eq 0 ]];\n    then\n\t    echo \"Password successfully changed\"\n\t    return 0\n    else\n    \tcurl --fail -u admin:${NEW_PW} http://${HOST}:${PORT}/admin/status\n    \tRC=$?\n    \tif [[ $RC -eq 0 ]];\n      then\n        echo \"Default password was already changed\"\n        return 0\n      elif [[ $RC -eq 22 ]]\n      then\n        echo \"HTTP 4xx error\"\n        return $RC\n      else\n        echo \"Something else went wrong\"\n        return $RC\n      fi\n    fi\n    )\n}\n\nfunction make_temp {\n    (\n    set +e\n    TEMP_PATH=${1}\n\n    if [ ! -d \"$TEMP_PATH\" ]; then\n      mkdir -p $TEMP_PATH\n      if [ $? -ne 0 ]; then\n        echo \"Could not create stardog tmp directory ${TEMP_PATH}\" >&2\n        return 1\n      fi\n    fi\n    )\n}\nwait_for_start ${HOST} ${PORT} ${DELAY}\nchange_pw ${HOST} ${PORT}\n"
      imagePullSecrets:
        - name: release-name-image-pull-secret
      volumes:
        - name: release-name-stardog-password
          secret:
            secretName: release-name-stardog-password
            items:
              - key: password
                path: adminpw
                mode: 444
