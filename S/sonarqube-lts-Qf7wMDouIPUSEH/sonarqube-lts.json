[
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.6.4",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "postgresql-password": "c29uYXJQYXNz"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-sonarqube-lts-monitoring-passcode",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "SONAR_WEB_SYSTEMPASSCODE": "ZGVmaW5lX2l0"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-sonarqube-lts-config",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": null
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-sonarqube-lts-init-fs",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "init_fs.sh": ""
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-sonarqube-lts-init-sysctl",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "init_sysctl.sh": "if [[ \"$(sysctl -n vm.max_map_count)\" -lt 524288 ]]; then\n  sysctl -w vm.max_map_count=524288\nfi\nif [[ \"$(sysctl -n fs.file-max)\" -lt 131072 ]]; then\n  sysctl -w fs.file-max=131072\nfi\nif [[ \"$(ulimit -n)\" != \"unlimited\" ]]; then\n  if [[ \"$(ulimit -n)\" -lt 131072 ]]; then\n    echo \"ulimit -n 131072\"\n    ulimit -n 131072\n  fi\nfi\nif [[ \"$(ulimit -u)\" != \"unlimited\" ]]; then\n  if [[ \"$(ulimit -u)\" -lt 8192 ]]; then\n    echo \"ulimit -u 8192\"\n    ulimit -u 8192\n  fi\nfi"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-sonarqube-lts-install-plugins",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "install_plugins.sh": ""
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-sonarqube-lts-postgres-config",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "SONAR_JDBC_USERNAME": "sonarUser",
      "SONAR_JDBC_URL": "jdbc:postgresql://release-name-postgresql:5432/sonarDB"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-sonarqube-lts-prometheus-ce-config",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "prometheus-ce-config.yaml": "rules:\n- pattern: .*"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-sonarqube-lts-prometheus-config",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "prometheus-config.yaml": "rules:\n- pattern: .*"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-sonarqube-lts-tests",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "run.sh": "@test \"Testing Sonarqube UI is accessible\" {\n  curl --connect-timeout 5 --retry 12 --retry-delay 1 --retry-max-time 60 release-name-sonarqube-lts:9000/api/system/status\n}"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.6.4",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app": "postgresql",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.6.4",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app": "postgresql",
        "release": "release-name",
        "role": "master"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-sonarqube-lts",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 9000,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app": "sonarqube-lts",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.6.4",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app": "postgresql",
          "release": "release-name",
          "role": "master"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app": "postgresql",
            "chart": "postgresql-8.6.4",
            "release": "release-name",
            "heritage": "Helm",
            "role": "master"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "initContainers": null,
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/bitnami/postgresql:11.7.0-debian-10-r26",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "limits": {
                  "cpu": 2,
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "200Mi"
                }
              },
              "securityContext": {
                "runAsUser": 10017,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "sonarUser"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "sonarDB"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"sonarUser\" -d \"sonarDB\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"sonarUser\" -d \"sonarDB\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql",
                  "subPath": null
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory",
                "sizeLimit": "1Gi"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "20Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-sonarqube-lts",
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm",
        "app.kubernetes.io/name": "sonarqube-lts-release-name-sonarqube-lts",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/part-of": "sonarqube",
        "app.kubernetes.io/component": "release-name-sonarqube-lts",
        "app.kubernetes.io/version": "8.9.8-community"
      }
    },
    "spec": {
      "replicas": 1,
      "serviceName": "release-name-sonarqube-lts",
      "selector": {
        "matchLabels": {
          "app": "sonarqube-lts",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "sonarqube-lts",
            "release": "release-name"
          },
          "annotations": {
            "checksum/init-sysctl": "fbee553c23e4a9021330263a9fcbde825e86bc4be0c75562a8b7dad1a567df07",
            "checksum/init-fs": "7f4f1adc552cf8a97ae3dbb5f69d570a2a436d26baaa50722f8e75f5cd4f9077",
            "checksum/plugins": "fc7509c018f33febb934f21a745e84ddce8fdd87a86681789561d333f34bb38a",
            "checksum/config": "88e1eb4b6a2e76ea11b690703a3b801f1291b02c114aeb2a16f6e2f67006803e",
            "checksum/secret": "24392833972273510395094de182f68bb48613527b4bc15830971d29f3443025",
            "checksum/prometheus-config": "ff27d1e1b4d1dc7a493a13f1b0b04542146ea33b5b9cd5c2cf2caac6adf4b7a6",
            "checksum/prometheus-ce-config": "1aab099c4cf28d8b69a4c6ce8266e7f8f0646614c9826451f3b29a58035b3317"
          }
        },
        "spec": {
          "initContainers": [
            {
              "name": "wait-for-db",
              "image": "busybox:1.32",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "command": [
                "/bin/sh",
                "-c",
                "for i in $(seq 1 200); do nc -z -w3 release-name-postgresql 5432 && exit 0 || sleep 2; done; exit 1"
              ]
            },
            {
              "name": "init-sysctl",
              "image": "busybox:1.32",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "privileged": true
              },
              "resources": {},
              "command": [
                "sh",
                "-e",
                "/tmp/scripts/init_sysctl.sh"
              ],
              "volumeMounts": [
                {
                  "name": "init-sysctl",
                  "mountPath": "/tmp/scripts/"
                }
              ]
            },
            {
              "name": "inject-prometheus-exporter",
              "image": "curlimages/curl:7.76.1",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsGroup": 0,
                "runAsUser": 0
              },
              "resources": {},
              "command": [
                "/bin/sh",
                "-c"
              ],
              "args": [
                "curl -s 'https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.15.0/jmx_prometheus_javaagent-0.15.0.jar'  --output /data/jmx_prometheus_javaagent.jar -v"
              ],
              "volumeMounts": [
                {
                  "mountPath": "/data",
                  "name": "sonarqube",
                  "subPath": "data"
                }
              ],
              "env": [
                {
                  "name": "http_proxy",
                  "value": null
                },
                {
                  "name": "https_proxy",
                  "value": null
                },
                {
                  "name": "no_proxy",
                  "value": null
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "sonarqube-lts",
              "image": "sonarqube:8.9.8-community",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9000,
                  "protocol": "TCP"
                },
                {
                  "name": "monitoring-web",
                  "containerPort": 8000,
                  "protocol": "TCP"
                },
                {
                  "name": "monitoring-ce",
                  "containerPort": 8001,
                  "protocol": "TCP"
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "800m",
                  "memory": "4096M"
                },
                "requests": {
                  "cpu": "400m",
                  "memory": "2Gi"
                }
              },
              "env": [
                {
                  "name": "SONAR_WEB_JAVAOPTS",
                  "value": "-javaagent:/opt/sonarqube/data/jmx_prometheus_javaagent.jar=8000:/opt/sonarqube/conf/prometheus-config.yaml"
                },
                {
                  "name": "SONAR_CE_JAVAOPTS",
                  "value": "-javaagent:/opt/sonarqube/data/jmx_prometheus_javaagent.jar=8001:/opt/sonarqube/conf/prometheus-ce-config.yaml"
                },
                {
                  "name": "SONAR_JDBC_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "SONAR_WEB_SYSTEMPASSCODE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-sonarqube-lts-monitoring-passcode",
                      "key": "SONAR_WEB_SYSTEMPASSCODE"
                    }
                  }
                }
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-sonarqube-lts-postgres-config"
                  }
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "#!/bin/bash\n# A Sonarqube container is considered healthy if the health status is GREEN or YELLOW\nhost=\"$(hostname -i || echo '127.0.0.1')\"\nif wget --header=\"X-Sonar-Passcode: ${SONAR_WEB_SYSTEMPASSCODE}\" -qO- http://${host}:9000/api/system/health | grep -q -e '\"health\":\"GREEN\"' -e '\"health\":\"YELLOW\"'; then\n\texit 0\nfi\nexit 1\n"
                  ]
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 30
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "#!/bin/bash\n# A Sonarqube container is considered ready if the status is UP, DB_MIGRATION_NEEDED or DB_MIGRATION_RUNNING\n# status about migration are added to prevent the node to be kill while sonarqube is upgrading the database.\nhost=\"$(hostname -i || echo '127.0.0.1')\"\nif wget -qO- http://${host}:9000/api/system/status | grep -q -e '\"status\":\"UP\"' -e '\"status\":\"DB_MIGRATION_NEEDED\"' -e '\"status\":\"DB_MIGRATION_RUNNING\"'; then\n\texit 0\nfi\nexit 1\n"
                  ]
                },
                "initialDelaySeconds": 60,
                "periodSeconds": 30,
                "failureThreshold": 6
              },
              "startupProbe": {
                "httpGet": {
                  "scheme": "HTTP",
                  "path": "/api/system/status",
                  "port": 9000
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "failureThreshold": 24
              },
              "securityContext": {
                "runAsUser": 11871,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "volumeMounts": [
                {
                  "mountPath": "/opt/sonarqube/data",
                  "name": "sonarqube",
                  "subPath": "data"
                },
                {
                  "mountPath": "/opt/sonarqube/temp",
                  "name": "sonarqube",
                  "subPath": "temp"
                },
                {
                  "mountPath": "/opt/sonarqube/logs",
                  "name": "sonarqube",
                  "subPath": "logs"
                },
                {
                  "mountPath": "/tmp",
                  "name": "tmp-dir"
                },
                {
                  "mountPath": "/opt/sonarqube/conf/prometheus-config.yaml",
                  "subPath": "prometheus-config.yaml",
                  "name": "prometheus-config"
                },
                {
                  "mountPath": "/opt/sonarqube/conf/prometheus-ce-config.yaml",
                  "subPath": "prometheus-ce-config.yaml",
                  "name": "prometheus-ce-config"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "init-sysctl",
              "configMap": {
                "name": "release-name-sonarqube-lts-init-sysctl",
                "items": [
                  {
                    "key": "init_sysctl.sh",
                    "path": "init_sysctl.sh"
                  }
                ]
              }
            },
            {
              "name": "init-fs",
              "configMap": {
                "name": "release-name-sonarqube-lts-init-fs",
                "items": [
                  {
                    "key": "init_fs.sh",
                    "path": "init_fs.sh"
                  }
                ]
              }
            },
            {
              "name": "install-plugins",
              "configMap": {
                "name": "release-name-sonarqube-lts-install-plugins",
                "items": [
                  {
                    "key": "install_plugins.sh",
                    "path": "install_plugins.sh"
                  }
                ]
              }
            },
            {
              "name": "prometheus-config",
              "configMap": {
                "name": "release-name-sonarqube-lts-prometheus-config",
                "items": [
                  {
                    "key": "prometheus-config.yaml",
                    "path": "prometheus-config.yaml"
                  }
                ]
              }
            },
            {
              "name": "prometheus-ce-config",
              "configMap": {
                "name": "release-name-sonarqube-lts-prometheus-ce-config",
                "items": [
                  {
                    "key": "prometheus-ce-config.yaml",
                    "path": "prometheus-ce-config.yaml"
                  }
                ]
              }
            },
            {
              "name": "sonarqube",
              "emptyDir": {}
            },
            {
              "name": "tmp-dir",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-ui-test",
      "annotations": {
        "helm.sh/hook": "test-success"
      },
      "labels": {
        "app": "sonarqube-lts",
        "chart": "sonarqube-lts-1.0.26_289",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "initContainers": [
        {
          "name": "bats",
          "image": "bats/bats:1.2.1",
          "imagePullPolicy": "IfNotPresent",
          "command": [
            "bash",
            "-c"
          ],
          "args": [
            "set -ex\ncp -R /opt/bats /tools/bats/"
          ],
          "volumeMounts": [
            {
              "mountPath": "/tools",
              "name": "tools"
            }
          ]
        }
      ],
      "containers": [
        {
          "name": "release-name-ui-test",
          "image": "bitnami/minideb-extras",
          "imagePullPolicy": "IfNotPresent",
          "command": [
            "/tools/bats/bin/bats",
            "--tap",
            "/tests/run.sh"
          ],
          "volumeMounts": [
            {
              "mountPath": "/tests",
              "name": "tests",
              "readOnly": true
            },
            {
              "mountPath": "/tools",
              "name": "tools"
            }
          ]
        }
      ],
      "volumes": [
        {
          "name": "tests",
          "configMap": {
            "name": "release-name-sonarqube-lts-tests"
          }
        },
        {
          "name": "tools",
          "emptyDir": {}
        }
      ],
      "restartPolicy": "Never"
    }
  }
]