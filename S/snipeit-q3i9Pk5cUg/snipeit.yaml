apiVersion: v1
kind: Secret
metadata:
  name: release-name-mysql
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mysql-1.0.0
type: Opaque
data:
  mysql-root-password: ZHY1TDBTZTBMVQ==
  mysql-password: c25pcGVpdA==
---
kind: Secret
apiVersion: v1
metadata:
  name: release-name-snipeit
  labels:
    app.kubernetes.io/name: snipeit
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: snipeit-3.3.0
data:
  MYSQL_USER: c25pcGVpdA==
  MYSQL_DATABASE: ZGItc25pcGVpdA==
  MYSQL_PASSWORD: c25pcGVpdA==
  MYSQL_PORT_3306_TCP_ADDR: cmVsZWFzZS1uYW1lLW15c3Fs
  MYSQL_PORT_3306_TCP_PORT: MzMwNg==
  APP_KEY: null
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mysql-test
  namespace: q3i9Pk5cUg
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mysql-1.0.0
data:
  run.sh: ""
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-mysql
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mysql-1.0.0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-snipeit
  labels:
    app.kubernetes.io/name: snipeit
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: snipeit-3.3.0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-mysql
  namespace: q3i9Pk5cUg
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mysql-1.0.0
  annotations: null
spec:
  type: ClusterIP
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-snipeit
  labels:
    app.kubernetes.io/name: snipeit
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: snipeit-3.3.0
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
  selector:
    app.kubernetes.io/name: snipeit
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mysql
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mysql-1.0.0
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      initContainers:
        - name: remove-lost-found
          image: busybox:1.32
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 10m
              memory: 10Mi
          command:
            - rm
            - -fr
            - /var/lib/mysql/lost+found
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
      containers:
        - name: release-name-mysql
          image: mysql:5.7.32
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-mysql
                  key: mysql-root-password
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-mysql
                  key: mysql-password
            - name: MYSQL_USER
              value: snipeit
            - name: MYSQL_DATABASE
              value: db-snipeit
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: release-name-mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-snipeit
  labels:
    app.kubernetes.io/name: snipeit
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: snipeit-3.3.0
spec:
  replicas: 1
  revisionHistoryLimit: 0
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: snipeit
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: snipeit
        app.kubernetes.io/instance: release-name
      annotations:
        checksum/secret: 0ef60926d31b831d302139087753f5f635b7b18b2f5530fa0ec46405cf672b1c
    spec:
      initContainers:
        - name: config-data
          image: busybox
          command:
            - sh
            - -c
            - find /var/www/html/storage/framework/sessions -not -user 1000 -exec chown 1000 {} \+
          volumeMounts:
            - name: data
              mountPath: /var/www/html/storage/framework/sessions
              subPath: sessions
      containers:
        - name: release-name-snipeit
          image: snipe/snipe-it:v5.3.0
          imagePullPolicy: IfNotPresent
          env:
            - name: APP_ENV
              value: production
            - name: APP_DEBUG
              value: "false"
            - name: APP_URL
              value: http://example.local
            - name: APP_TIMEZONE
              value: Europe/Berlin
            - name: APP_LOCALE
              value: en
          envFrom:
            - secretRef:
                name: release-name-snipeit
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            periodSeconds: 15
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            periodSeconds: 15
            timeoutSeconds: 3
          volumeMounts:
            - name: data
              mountPath: /var/lib/snipeit
              subPath: www
            - name: data
              mountPath: /var/www/html/storage/framework/sessions
              subPath: sessions
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: release-name-snipeit
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-snipeit
  labels:
    app.kubernetes.io/name: snipeit
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: snipeit-3.3.0
spec:
  rules:
    - host: example.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-snipeit
                port:
                  number: 80
