apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis
  namespace: KXDou
  labels:
    app: redis
    chart: redis-10.7.4
    release: release-name
    heritage: Helm
type: Opaque
data:
  redis-password: NWYwWFlkbzd4ZA==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-snappass
  labels:
    app.kubernetes.io/name: snappass
    helm.sh/chart: snappass-0.2.14
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.4.2
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  secretKey: SGd2QWQwQk9uNWZ4OGVOcExOeWVUbE9YdExuUDR3YnczbGRndHlkOQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis
  namespace: KXDou
  labels:
    app: redis
    chart: redis-10.7.4
    heritage: Helm
    release: release-name
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: KXDou
  labels:
    app: redis
    chart: redis-10.7.4
    heritage: Helm
    release: release-name
data:
  ping_readiness_local.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_PASSWORD $no_auth_warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_PASSWORD $no_auth_warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
     response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD $no_auth_warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD $no_auth_warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: KXDou
  labels:
    app: redis
    chart: redis-10.7.4
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: KXDou
  labels:
    app: redis
    chart: redis-10.7.4
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
    role: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-slave
  namespace: KXDou
  labels:
    app: redis
    chart: redis-10.7.4
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
    role: slave
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-snappass
  labels:
    app.kubernetes.io/name: snappass
    helm.sh/chart: snappass-0.2.14
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.4.2
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: snappass
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-snappass
  labels:
    app.kubernetes.io/name: snappass
    helm.sh/chart: snappass-0.2.14
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.4.2
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: snappass
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: snappass
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: default
      securityContext: {}
      initContainers:
        - name: wait-for-redis
          image: docker.io/busybox:1
          env:
            - name: REDIS_HOST
              value: release-name-redis-master
            - name: REDIS_PORT
              value: "6379"
          command:
            - /bin/sh
            - -c
            - until nc -zv ${REDIS_HOST} ${REDIS_PORT} -w1; do sleep 1; done
      containers:
        - name: snappass
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10558
            allowPrivilegeEscalation: false
          image: docker.io/samueldg/snappass:latest@sha256:3987195edbe623a9a7400fbb68318059d4fc8c20d48f73a6bd52598e56b3b9b3
          imagePullPolicy: IfNotPresent
          env:
            - name: NO_SSL
              value: "true"
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: release-name-snappass
                  key: secretKey
            - name: REDIS_HOST
              value: release-name-redis-master
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: SNAPPASS_REDIS_DB
              value: "0"
          command:
            - /bin/sh
          args:
            - -c
            - exec env REDIS_URL=redis://redis:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(SNAPPASS_REDIS_DB) snappass
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 60
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: KXDou
  labels:
    app: redis
    chart: redis-10.7.4
    release: release-name
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: release-name
      role: master
  serviceName: release-name-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-10.7.4
        release: release-name
        role: master
      annotations:
        checksum/health: 8d4a6dc082095246fabf677d05f9d2d1eb0f46a403e3306317cf0129004b0bd3
        checksum/configmap: 5c839493f05a7337cea5e3885a4ef5eafec8b326e5dd691d78b736329d35153e
        checksum/secret: 8f92c07b562e51733ede55cb1973dd3e26ae0c3737b24d41d75df1ee2d6e4fb8
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.0.5-debian-10-r10
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11242
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
            - -c
            - |
              if [[ -n $REDIS_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_PASSWORD_FILE}`
                export REDIS_PASSWORD=$password_aux
              fi
              if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
              fi
              if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
              fi
              ARGS=("--port" "${REDIS_PORT}")
              ARGS+=("--requirepass" "${REDIS_PASSWORD}")
              ARGS+=("--masterauth" "${REDIS_PASSWORD}")
              ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
              ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
              /run.sh ${ARGS[@]}
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 5
          resources: null
          volumeMounts:
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: null
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
      volumes:
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: release-name-redis
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: release-name
          heritage: Helm
          component: master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
        selector: null
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-slave
  namespace: KXDou
  labels:
    app: redis
    chart: redis-10.7.4
    release: release-name
    heritage: Helm
spec:
  replicas: 2
  serviceName: release-name-redis-headless
  selector:
    matchLabels:
      app: redis
      release: release-name
      role: slave
  template:
    metadata:
      labels:
        app: redis
        release: release-name
        chart: redis-10.7.4
        role: slave
      annotations:
        checksum/health: 8d4a6dc082095246fabf677d05f9d2d1eb0f46a403e3306317cf0129004b0bd3
        checksum/configmap: 5c839493f05a7337cea5e3885a4ef5eafec8b326e5dd691d78b736329d35153e
        checksum/secret: d31fcae11d3b2385cefcd433dc552c53c4a04f29f4e365a42628e6f904aa1a67
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.0.5-debian-10-r10
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11380
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
            - -c
            - |
              if [[ -n $REDIS_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_PASSWORD_FILE}`
                export REDIS_PASSWORD=$password_aux
              fi
              if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
                export REDIS_MASTER_PASSWORD=$password_aux
              fi
              if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
              fi
              if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
              fi
              ARGS=("--port" "${REDIS_PORT}")
              ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
              ARGS+=("--requirepass" "${REDIS_PASSWORD}")
              ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
              ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
              ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
              /run.sh "${ARGS[@]}"
          env:
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: release-name-redis-master-0.release-name-redis-headless.default.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 5
          resources: null
          volumeMounts:
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: release-name-redis
        - name: sentinel-tmp-conf
          emptyDir: {}
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: release-name
          heritage: Helm
          component: slave
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
        selector: null
  updateStrategy:
    type: RollingUpdate
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-snappass-test-connection
  labels:
    app.kubernetes.io/name: snappass
    helm.sh/chart: snappass-0.2.14
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.4.2
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-snappass:80
  restartPolicy: Never
