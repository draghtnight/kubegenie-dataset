apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-strapi
  labels:
    helm.sh/chart: strapi-0.1.47
    app.kubernetes.io/name: strapi
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.16.0
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: 9bUZnA9
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.28
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: dVJhTlExZnlnVw==
  password: RGh6WVU0c01EYVNxTW5BaGQzMzQ5OXZvNDl0OQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql-crt
  namespace: 9bUZnA9
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.28
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRUkV6Y0p6SldNYVFiRkc3bUNmZnorakFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxd2IzTjBaM0psYzNGc0xXTmhNQjRYRFRJeU1EWXhNakUwTURFek5sb1hEVEl6TURZeApNakUwTURFek5sb3dHREVXTUJRR0ExVUVBeE1OY0c5emRHZHlaWE54YkMxallUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMZjNscnNQOUY5Q1ZwOVlhWjJST2RGVTJqMjd3TlNQaktweW1IczQKeExGbG5aTUh4WFh2ZGNvZDlHajQ1cWpnTUJxZjVDdDJsMTlCMEdSWHh6VDFCR05uQk1EZjd1S1Y4TmtRNWh2SApPSC93YStnVzdyQjYvUjFkODZtZUs3MUk0bnArak5FdkhWRWRmKzFBQ0JkMnJyL1FGY3M1ZGdpcjFNblVNRWwvCkorOXdUWHFJNDQrOWxmV05ORzFLWnEvQVlxL0c3Z2hoL2hGRzFUWWlwMnE1eml6UXhLcHh2bGNKNzhHYmJjYWgKanpQU2hSWm9HcW9kd2wzSUhtQlIyR0I0VmpEblVzNmZyZEw5RnRlVHdtekE5SWdGUnhyNEdDT3pvN0FyV3lPbQovdkdlTHc3NXJZNER6elR2ZEZWVXFIaVArUy9lY2xibE1CeDlOT1hBVjNWclAvRUNBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCVEJ2eXhyRHpkTUdaMTBSZzBoNWw5TGRuNGVoakFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQVJPNTZDeU9DRCtNb3Jvc1hXWXdWOEY0NHpvZURENTVrcmxpY2FkanFXbWR1CnZ2MHhZUEh0TWQ2SWtTV3pRMlpPS3BQQzBqREFkOUIyNWs0dFBSV2tWenhjMEVpYmZaNHU5K20zYjRPZ0dGUDYKZXZjY1pxM2ZjSXp1UkNIMG1BWjNlMUZ1NnpmQ2ZuKzMwcUtGRE5WbEorT3ZUSzcxOE5mU3crQXJab3dTUkFDTQp4WWtTckVNNkNudENvVFlTYTI4WTJwdisxNXFmUXI2QUN1TjQ3TS80SWg5U1oxUEU2c3lhZENXa2RmVkxZby9QClhwa1dPampFT2IvY3AvTDg1dWJmZjkvb0hpbUxrYm5yY0orNHF6ZkZ5dWFaUWJGVW9FY0kwRkp5MVlUKzdTUTYKVWJKbytxVW1VQ0NFTzVIR1pZalpESEhzUUFUajZlQlMrbnZyOTdGRzdnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVvRENDQTRpZ0F3SUJBZ0lRVG5zdTZqclc3YVRucUd3ai9IaVNQakFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxd2IzTjBaM0psYzNGc0xXTmhNQjRYRFRJeU1EWXhNakUwTURFek5sb1hEVEl6TURZeApNakUwTURFek5sb3dJakVnTUI0R0ExVUVBeE1YY21Wc1pXRnpaUzF1WVcxbExYQnZjM1JuY21WemNXd3dnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRERuQXAxY0RBWnBXeDJDbWJEUHR4SU51eGQKclp6NE12eUowRUlTajBEbERzZVREUk55eWlKSHBFclNqNE1DMDRTWEE3VnRYeHY4ZFc1NFRlMC9FQWUyYWRZZgowbEZUcS9PbnlFOE9RSy9OUFd5eUR4S252dDFmS005U0JWZUlKdEVLaHBkQWtZbTc2Wnl6ME5HMWwvM1FzcFVXCjVWWGtLMlFjRjFQVWxla293WlpJYmtRWllUVjZKdDRjZnNQTkMvcVJITTRPMDlHQVNEUE84eTBIcm0wM3o2RHMKKzNFZFhYRVlkamxvNXJqampzQ2l3d3c5SXh6T08yZGNhNEVubmExNGhDQlRJZmdwV3NoMkEwRE9hSDhaWUYzegpKZDYzck5ieWtURFhBWFZRQUY0MklvUytwbU9FeXY4RzBySnlMb2pkNGJtZnFoT1N0blJ3aU9WbFYyOVJBZ01CCkFBR2pnZ0hhTUlJQjFqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUcKQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVd2I4c2F3ODNUQm1kZEVZTgpJZVpmUzNaK0hvWXdnZ0YwQmdOVkhSRUVnZ0ZyTUlJQlo0SXpLaTV5Wld4bFlYTmxMVzVoYldVdGNHOXpkR2R5ClpYTnhiQzVrWldaaGRXeDBMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNnakZ5Wld4bFlYTmxMVzVoYldVdGNHOXoKZEdkeVpYTnhiQzVrWldaaGRXeDBMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNnallxTG5KbGJHVmhjMlV0Ym1GdApaUzF3YjNOMFozSmxjM0ZzTFdoc0xtUmxabUYxYkhRdWMzWmpMbU5zZFhOMFpYSXViRzlqWVd5Q05ISmxiR1ZoCmMyVXRibUZ0WlMxd2IzTjBaM0psYzNGc0xXaHNMbVJsWm1GMWJIUXVjM1pqTG1Oc2RYTjBaWEl1Ykc5allXeUMKT3lvdWNtVnNaV0Z6WlMxdVlXMWxMWEJ2YzNSbmNtVnpjV3d0Y21WaFpDMW9iQzVrWldaaGRXeDBMbk4yWXk1agpiSFZ6ZEdWeUxteHZZMkZzZ2pseVpXeGxZWE5sTFc1aGJXVXRjRzl6ZEdkeVpYTnhiQzF5WldGa0xXaHNMbVJsClptRjFiSFF1YzNaakxtTnNkWE4wWlhJdWJHOWpZV3lDRjNKbGJHVmhjMlV0Ym1GdFpTMXdiM04wWjNKbGMzRnMKTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDVmczMWtjWFh3WUN0TllBdmh5RUlRS2FodTdobURGZFI5LzBWegpZNzNWUE1jeUhybUZYQ0tnZEo5YmM4K24zbjMvbVB0S2V1KzQ4c21FeFNYN0s1blpWZ29MOEZiMDB3czFuRWFJCjVmQkFPbStEU3pla3NEN3hXMHlDVE1rczVRMlBhZTc1aFhlOTVxRHdJOTZPbXp1RlBNa29Zb2wzMkp3em44NEQKck9RMjRYUHZXYms2WjB0MmdSNzFZK2Z0bjhNcWFmTzBpcWZPY3RueWhvSHZ3SXkwbllZNFptZEZXOGgxVXh3NQpxSXZNTlQrUG5IWVRZWjR6aHRYVVhOYmFUS21OMWo3UEh1SFpQajM1RjhuQi9RL3ozUWthRzRJRHZsdTZpUWJyClpWUTNoVzZnSzdZNCtKMVhmckszd0tNS1JqQ3o4Mm9TWWlTZ1NaTjRkNzJ2TWZzRAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdzV3S2RYQXdHYVZzZGdwbXd6N2NTRGJzWGEyYytETDhpZEJDRW85QTVRN0hrdzBUCmNzb2lSNlJLMG8rREF0T0Vsd08xYlY4Yi9IVnVlRTN0UHhBSHRtbldIOUpSVTZ2enA4aFBEa0N2elQxc3NnOFMKcDc3ZFh5alBVZ1ZYaUNiUkNvYVhRSkdKdSttY3M5RFJ0WmY5MExLVkZ1VlY1Q3RrSEJkVDFKWHBLTUdXU0c1RQpHV0UxZWliZUhIN0R6UXY2a1J6T0R0UFJnRWd6enZNdEI2NXROOCtnN1B0eEhWMXhHSFk1YU9hNDQ0N0Fvc01NClBTTWN6anRuWEd1Qko1MnRlSVFnVXlINEtWcklkZ05Bem1oL0dXQmQ4eVhldDZ6VzhwRXcxd0YxVUFCZU5pS0UKdnFaamhNci9CdEt5Y2k2STNlRzVuNm9Ua3JaMGNJamxaVmR2VVFJREFRQUJBb0lCQUJ6am04dlNZTmc0elRiMQp2RTJUcUJibVBheHNLcVdoYWhpMGNEMnJlSXNienEvU0c1QTFlRENhZkE1eThZZG1VOHUxMllLb3JFcHgwWG5sCkVHZmk1ekN5bXRRaVRLNk4wN053NnZRUTY2WGxMM3R3ckhHbng2djVLLzFTR3FaYURUOS90ekRyRGF0NkNoR28KZ29CT1RVY1lTTnFUemthZmZlNkVKM1piR1k5U0hkVHZuMVh4cG4wQ2MwUTlkNzdKVFg2Tm1NVUduSkJTZzFRNgpSc0FyYi9BdzFlMFl2ZnFhN3RpSWFDZVMyZ0p4bWdhT2hzdlF0UkF4RG5zNkxpRGRKRHhrV2YrMlB2N2Y5SFRGCmNmQ1dDZXdUNzdSdE0wTmsxNFU5aDBRR09rMjV5L0ZMdHB0eHFvUDZoSnRyd1Q3d1lwVkRMRVN3TzVrU2MwQm8KTzgzQVlKMENnWUVBNFp5TTFUTHNVY29oclVDL25qaFpnY1g1YVVLdDY5bFlWb01KVzVJZmFKVG1Jd3JlSlF4TApzWVRGU0hydXl2SUhMY1F0OHRWUlVCYVhLRGZJUC9MZHUrRG5OWDRxazd3bVQwbi9Nalhjc0l6aDI1amN4bXVGCjlDOEZTNlRuNkFCb2ErNG9LOXdGYjlIZyt2Nit4VmNpK1NaZlJKTVJ2MEM3VksrejlvSWVxZDhDZ1lFQTNmVDUKUWE4U25yRHIwYVp1dHpxVmgzbjlncDJQclhNZkR3Y004V3lkS2x6TlBiaEJJakJPMVdsVzhZTVB0OWp4T2FCVgpVa01LeGlraGtoc3RqQlVBK3EwMHpieCttMzEvdGtiQ0oxbnhIcHRjdlZNS2Y1Q3RzdHpOMGIyMkNzbElaWVJlCndBOEhoYlR6SnRCSmpCS0RDMUtJb2R1RTFERnlpR09xWHdGZWJNOENnWUFmWFZzNjNIeDhGbVMrS0UwN1dzd2UKdlg0aUF4SVl3cnVFTTIxZW5KN2ZOQ3dXWFJGckJ4MlN6VWw3L1JNcmhhQTMzWmtodEVROHBSZFlrUUMyMnpXMgpROXNBMWN4bmczV3oraTZQTld1NzQ2b1dsRmJGQXZlNWJid0h1eUkrWDZna3NSUkduS3pvMGIyOFJ5UVFYVC9RCmNXUTNMVmIvUnFtRWFYVFVaVnlMOHdLQmdFKzAvSm9ROC8vWEN5aWp1eGpEeWhUM3d3bFg2ZFBoQnFOUDVkOEIKSVVPb1JmQkhMZVRJTWxkRFYveXRFMFR6ZkZVMGRjOXYwZnV0bzZlamFPem9VZ3l6ak1YaFRob3FyR1ZaN2JsUgovRndBY1FKd1F0SGlzKzRLaTBNcC9Lak05ZG0yK292QUdmUnpNZXFiVy80WVc4VUNJNXowaHpQb2VmZnV5cTBKCmdjNVRBb0dBY0lmZWhBTlBOR094QXg3dVJkTjlnaHBXalM2MXNQMjUvNUxMdktiSjFpK0lWbkZaTjJpYWtEUXMKWDg4TDBRdE1sTmVibmZoR2phZFR0UEdpNmt6aDBRaVFvWmxpMmN0VlY3TllkTENkWWt0NTBxZk44YUFFZEtxdwo4SzNwM3grbzBHcVRjMG15OVNVQ0ZHd3FNSVJGUlV1bmh6YmJuQ3Y5UTNEaHBmZGU4Y3M9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-strapi
type: Opaque
data:
  ADMIN_JWT_SECRET: JFhYMlVuTWNONiUlYkBDa0ZvZio=
  DATABASE_URL: cG9zdGdyZXNxbDovL3N0cmFwaTpEaHpZVTRzTURhU3FNbkFoZDMzNDk5dm80OXQ5QHJlbGVhc2UtbmFtZS1wb3N0Z3Jlc3FsOjU0MzIvc3RyYXBp
  POSTGRES_DB_PASSWORD: RGh6WVU0c01EYVNxTW5BaGQzMzQ5OXZvNDl0OQ==
  POSTGRES_DB_USER: c3RyYXBp
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: ""
  AWS_ENDPOINT: czMudXMtZWFzdC0yLmFtYXpvbmF3cy5jb20=
  AWS_BUCKET: c3RyYXBp
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: 9bUZnA9
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.28
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: 9bUZnA9
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.28
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-strapi
  labels:
    helm.sh/chart: strapi-0.1.47
    app.kubernetes.io/name: strapi
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.16.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: strapi
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-strapi
  labels:
    helm.sh/chart: strapi-0.1.47
    app.kubernetes.io/name: strapi
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.16.0
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: strapi
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: strapi
        app.kubernetes.io/instance: release-name
    spec:
      imagePullSecrets:
        - name: github
      serviceAccountName: release-name-strapi
      securityContext: {}
      containers:
        - name: strapi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: ghrc.io/strapi/:1.16.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 1337
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /_health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /_health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            limits: null
            requests:
              cpu: 150m
              memory: 100Mi
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: STRAPI_API_URL
              value: https://strapi.example.com
          envFrom:
            - secretRef:
                name: release-name-strapi
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: release-name-strapi
  labels:
    helm.sh/chart: strapi-0.1.47
    app.kubernetes.io/name: strapi
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.16.0
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: release-name-strapi
  minReplicas: 1
  maxReplicas: 2
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: 9bUZnA9
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.1.28
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.1.28
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations: null
    spec:
      serviceAccountName: default
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r416
          imagePullPolicy: IfNotPresent
          resources:
            limits: {}
            requests: {}
          command:
            - /bin/sh
            - -ec
            - |
              chmod -R 777 /dev/shm
              cp /tmp/certs/* /opt/bitnami/postgresql/certs/
              chown -R 1001:1001 /opt/bitnami/postgresql/certs/
              chmod 600 /opt/bitnami/postgresql/certs/tls.key
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: raw-certificates
              mountPath: /tmp/certs
            - name: postgresql-certificates
              mountPath: /opt/bitnami/postgresql/certs
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:13.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10287
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_USER
              value: strapi
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: POSTGRES_DB
              value: strapi
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "yes"
            - name: POSTGRESQL_TLS_PREFER_SERVER_CIPHERS
              value: "yes"
            - name: POSTGRESQL_TLS_CERT_FILE
              value: /opt/bitnami/postgresql/certs/tls.crt
            - name: POSTGRESQL_TLS_KEY_FILE
              value: /opt/bitnami/postgresql/certs/tls.key
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "strapi" -d "dbname=strapi" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "strapi" -d "dbname=strapi sslcert=/opt/bitnami/postgresql/certs/tls.crt sslkey=/opt/bitnami/postgresql/certs/tls.key" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: postgresql-certificates
              mountPath: /opt/bitnami/postgresql/certs
              readOnly: true
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: raw-certificates
          secret:
            secretName: release-name-postgresql-crt
        - name: postgresql-certificates
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-strapi
  labels:
    helm.sh/chart: strapi-0.1.47
    app.kubernetes.io/name: strapi
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.16.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetess.io/cors-allow-origin: https://dashboard.domain.com
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 20m
spec:
  tls:
    - hosts:
        - chart-example.local
      secretName: release-name-strapi-tls-secret
  rules:
    - host: chart-example.local
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: release-name-strapi
                port:
                  number: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-strapi-test-connection
  labels:
    helm.sh/chart: strapi-0.1.47
    app.kubernetes.io/name: strapi
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 1.16.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-strapi:80
  restartPolicy: Never
