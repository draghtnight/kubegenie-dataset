[
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "release-name-cp-zookeeper-pdb",
      "labels": {
        "app": "cp-zookeeper",
        "chart": "cp-zookeeper-0.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "cp-zookeeper",
          "release": "release-name"
        }
      },
      "maxUnavailable": 1
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "syncope",
      "labels": {
        "app": "sitewhere-infra-core",
        "chart": "sitewhere-infra-core-0.2.8",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "postgresql-password": "c3luY29wZQ=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-syncope-environment-config"
    },
    "data": {
      "DBMS": "postgresql",
      "DB_URL": "jdbc:postgresql://release-name-postgresql-headless:5432/syncope",
      "DB_USER": "syncope",
      "DB_POOL_MAX": "10",
      "DB_POOL_MIN": "2",
      "OPENJPA_REMOTE_COMMIT": "sjvm",
      "CORE_SCHEME": "http",
      "CORE_HOST": "release-name-syncope",
      "CORE_PORT": "8080",
      "security.properties": "conf.directory=/etc/apache-syncope\nadminUser=synadmin\nadminPassword=DE088591C00CC98B36F5ADAAF7DA2B004CF7F2FE7BBB45B766B6409876E2F3DB13C7905C6AA59464\nadminPasswordAlgorithm=SSHA256\nanonymousUser=anonymous\nanonymousKey=anonymousKey\nsecretKey=1abcdefghilmnopqrstuvz2!\njwtIssuer=ApacheSyncope\njwsAlgorithm=HS512\njwsKey=ZW7pRixehFuNUtnY5Se47IemgMryTzazPPJ9CGX5LTCmsOJpOgHAQEuPQeV9A28f\ndigester.saltIterations=1\ndigester.saltSizeBytes=8\ndigester.invertPositionOfPlainSaltInEncryptionResults=true\ndigester.invertPositionOfSaltInMessageBeforeDigesting=true\ndigester.useLenientSaltSizeCheck=true\npasswordGenerator=org.apache.syncope.core.spring.security.DefaultPasswordGenerator\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-cp-kafka-headless",
      "labels": {
        "app": "cp-kafka",
        "chart": "cp-kafka-0.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "port": 9092,
          "name": "broker"
        }
      ],
      "clusterIP": "None",
      "selector": {
        "app": "cp-kafka",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-cp-kafka",
      "labels": {
        "app": "cp-kafka",
        "chart": "cp-kafka-0.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "port": 9092,
          "name": "broker"
        }
      ],
      "selector": {
        "app": "cp-kafka",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-cp-zookeeper-headless",
      "labels": {
        "app": "cp-zookeeper",
        "chart": "cp-zookeeper-0.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "port": 2888,
          "name": "server"
        },
        {
          "port": 3888,
          "name": "leader-election"
        }
      ],
      "clusterIP": "None",
      "selector": {
        "app": "cp-zookeeper",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-cp-zookeeper",
      "labels": {
        "app": "cp-zookeeper",
        "chart": "cp-zookeeper-0.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": null,
      "ports": [
        {
          "port": 2181,
          "name": "client"
        }
      ],
      "selector": {
        "app": "cp-zookeeper",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.6.4",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app": "postgresql",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.6.4",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app": "postgresql",
        "release": "release-name",
        "role": "master"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-syncope-console"
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "name": "release-name-syncope-console"
      },
      "ports": [
        {
          "port": 8080,
          "name": "http-api"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-syncope"
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "name": "release-name-syncope"
      },
      "ports": [
        {
          "port": 8080,
          "name": "http-api"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-syncope-enduser"
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "name": "release-name-syncope-enduser"
      },
      "ports": [
        {
          "port": 8080,
          "name": "http-api"
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-syncope-console"
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "release-name-syncope-console",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "sidecar.istio.io/inject": "false"
          },
          "labels": {
            "name": "release-name-syncope-console",
            "app.kubernetes.io/name": "release-name-syncope-console",
            "app.kubernetes.io/instance": "release-name",
            "sitewhere.io/role": "infrastructure",
            "sitewhere.io/name": "syncope-console"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "syncope-console",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-syncope-environment-config"
                  }
                }
              ],
              "image": "apache/syncope-console:2.1.4",
              "ports": [
                {
                  "containerPort": 8080
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "restartPolicy": "Always"
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-syncope"
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "release-name-syncope",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "sidecar.istio.io/inject": "false"
          },
          "labels": {
            "name": "release-name-syncope",
            "app.kubernetes.io/name": "release-name-syncope",
            "app.kubernetes.io/instance": "release-name",
            "sitewhere.io/role": "infrastructure",
            "sitewhere.io/name": "syncope"
          }
        },
        "spec": {
          "initContainers": [
            {
              "name": "check-db-ready",
              "image": "postgres:9.6.5",
              "command": [
                "sh",
                "-c",
                "until pg_isready -h release-name-postgresql-headless -p 5432; do echo waiting for database; sleep 2; done;"
              ]
            }
          ],
          "containers": [
            {
              "name": "syncope",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-syncope-environment-config"
                  }
                }
              ],
              "env": [
                {
                  "name": "DB_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "syncope",
                      "key": "postgresql-password"
                    }
                  }
                }
              ],
              "image": "apache/syncope:2.1.4",
              "ports": [
                {
                  "containerPort": 8080
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/etc/apache-syncope/security.properties",
                  "subPath": "security.properties"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config-volume",
              "configMap": {
                "name": "release-name-syncope-environment-config"
              }
            }
          ],
          "restartPolicy": "Always"
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-syncope-enduser"
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "release-name-syncope-enduser",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "sidecar.istio.io/inject": "false"
          },
          "labels": {
            "name": "release-name-syncope-enduser",
            "app.kubernetes.io/name": "release-name-syncope-enduser",
            "app.kubernetes.io/instance": "release-name",
            "sitewhere.io/role": "infrastructure",
            "sitewhere.io/name": "syncope-enduser"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "syncope-enduser",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-syncope-environment-config"
                  }
                }
              ],
              "image": "apache/syncope-enduser:2.1.4",
              "ports": [
                {
                  "containerPort": 8080
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "restartPolicy": "Always"
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-cp-kafka",
      "labels": {
        "app": "cp-kafka",
        "chart": "cp-kafka-0.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "cp-kafka",
          "release": "release-name"
        }
      },
      "serviceName": "release-name-cp-kafka-headless",
      "podManagementPolicy": "Parallel",
      "replicas": 3,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "cp-kafka",
            "release": "release-name"
          },
          "annotations": {
            "sidecar.istio.io/inject": "false"
          }
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": [
                            "cp-kafka"
                          ]
                        },
                        {
                          "key": "release",
                          "operator": "In",
                          "values": [
                            "release-name"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  }
                }
              ]
            }
          },
          "containers": [
            {
              "name": "cp-kafka-broker",
              "image": "confluentinc/cp-enterprise-kafka:5.5.0",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "containerPort": 9092,
                  "name": "kafka"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "HOST_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.hostIP"
                    }
                  }
                },
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "KAFKA_HEAP_OPTS",
                  "value": "-Xms512M -Xmx512M"
                },
                {
                  "name": "KAFKA_ZOOKEEPER_CONNECT",
                  "value": "release-name-cp-zookeeper-headless:2181"
                },
                {
                  "name": "KAFKA_LOG_DIRS",
                  "value": "/opt/kafka/data-0/logs"
                },
                {
                  "name": "KAFKA_METRIC_REPORTERS",
                  "value": "io.confluent.metrics.reporter.ConfluentMetricsReporter"
                },
                {
                  "name": "CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS",
                  "value": "PLAINTEXT://release-name-cp-kafka-headless:9092"
                },
                {
                  "name": "KAFKA_AUTO_CREATE_TOPICS_ENABLE",
                  "value": "false"
                },
                {
                  "name": "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP",
                  "value": "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
                },
                {
                  "name": "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR",
                  "value": "3"
                },
                {
                  "name": "KAFKA_JMX_PORT",
                  "value": "5555"
                }
              ],
              "command": [
                "sh",
                "-exc",
                "export KAFKA_BROKER_ID=${HOSTNAME##*-} && \\\nexport KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.release-name-cp-kafka-headless.${POD_NAMESPACE}:9092,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \\\nexec /etc/confluent/docker/run\n"
              ],
              "volumeMounts": [
                {
                  "name": "datadir-0",
                  "mountPath": "/opt/kafka/data-0"
                }
              ]
            }
          ],
          "volumes": null
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "datadir-0"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-cp-zookeeper",
      "labels": {
        "app": "cp-zookeeper",
        "chart": "cp-zookeeper-0.1.0",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "cp-zookeeper",
          "release": "release-name"
        }
      },
      "serviceName": "release-name-cp-zookeeper-headless",
      "podManagementPolicy": "Parallel",
      "replicas": 3,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "cp-zookeeper",
            "release": "release-name"
          },
          "annotations": {
            "sidecar.istio.io/inject": "false"
          }
        },
        "spec": {
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": [
                            "cp-zookeeper"
                          ]
                        },
                        {
                          "key": "release",
                          "operator": "In",
                          "values": [
                            "release-name"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  }
                }
              ]
            }
          },
          "containers": [
            {
              "name": "cp-zookeeper-server",
              "image": "confluentinc/cp-zookeeper:5.5.0",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "containerPort": 2181,
                  "name": "client"
                },
                {
                  "containerPort": 2888,
                  "name": "server"
                },
                {
                  "containerPort": 3888,
                  "name": "leader-election"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "KAFKA_HEAP_OPTS",
                  "value": "-Xms512M -Xmx512M"
                },
                {
                  "name": "KAFKA_JMX_PORT",
                  "value": "5555"
                },
                {
                  "name": "ZOOKEEPER_TICK_TIME",
                  "value": "2000"
                },
                {
                  "name": "ZOOKEEPER_SYNC_LIMIT",
                  "value": "5"
                },
                {
                  "name": "ZOOKEEPER_INIT_LIMIT",
                  "value": "10"
                },
                {
                  "name": "ZOOKEEPER_MAX_CLIENT_CNXNS",
                  "value": "60"
                },
                {
                  "name": "ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT",
                  "value": "3"
                },
                {
                  "name": "ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL",
                  "value": "24"
                },
                {
                  "name": "ZOOKEEPER_CLIENT_PORT",
                  "value": "2181"
                },
                {
                  "name": "ZOOKEEPER_SERVERS",
                  "value": "release-name-cp-zookeeper-0.release-name-cp-zookeeper-headless.default:2888:3888;release-name-cp-zookeeper-1.release-name-cp-zookeeper-headless.default:2888:3888;release-name-cp-zookeeper-2.release-name-cp-zookeeper-headless.default:2888:3888"
                },
                {
                  "name": "ZOOKEEPER_SERVER_ID",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                }
              ],
              "command": [
                "bash",
                "-c",
                "ZK_FIX_HOST_REGEX=\"s/${HOSTNAME}\\.[^:]*:/0.0.0.0:/g\"\nZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1)) \\\nZOOKEEPER_SERVERS=`echo $ZOOKEEPER_SERVERS | sed -e \"$ZK_FIX_HOST_REGEX\"` \\\n/etc/confluent/docker/run\n"
              ],
              "volumeMounts": [
                {
                  "name": "datadir",
                  "mountPath": "/var/lib/zookeeper/data"
                },
                {
                  "name": "datalogdir",
                  "mountPath": "/var/lib/zookeeper/log"
                }
              ]
            }
          ],
          "volumes": null
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "datadir"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "4Gi"
              }
            }
          }
        },
        {
          "metadata": {
            "name": "datalogdir"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "4Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app": "postgresql",
        "chart": "postgresql-8.6.4",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app": "postgresql",
          "release": "release-name",
          "role": "master"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app": "postgresql",
            "chart": "postgresql-8.6.4",
            "release": "release-name",
            "heritage": "Helm",
            "role": "master"
          },
          "annotations": {
            "sidecar.istio.io/inject": "false"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "initContainers": null,
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/bitnami/postgresql:11.7.0-debian-10-r9",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "securityContext": {
                "runAsUser": 10941,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "syncope"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "syncope",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "syncope"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"syncope\" -d \"syncope\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"syncope\" -d \"syncope\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql",
                  "subPath": null
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory",
                "sizeLimit": "1Gi"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "4Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-canary",
      "annotations": {
        "helm.sh/hook": "test-success",
        "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "release-name-canary",
          "image": "confluentinc/cp-enterprise-kafka:5.5.0",
          "imagePullPolicy": "IfNotPresent",
          "command": [
            "sh",
            "-c",
            "# Delete the topic if it exists\nkafka-topics --zookeeper release-name-cp-zookeeper-headless:2181 --topic release-name-cp-kafka-canary-topic --delete --if-exists\n# Create the topic\nkafka-topics --zookeeper release-name-cp-zookeeper-headless:2181 --topic release-name-cp-kafka-canary-topic --create --partitions 1 --replication-factor 1 --if-not-exists && \\\n# Create a message\nMESSAGE=\"`date -u`\" && \\\n# Produce a test message to the topic\necho \"$MESSAGE\" | kafka-console-producer --broker-list release-name-cp-kafka:9092 --topic release-name-cp-kafka-canary-topic && \\\n# Consume a test message from the topic\nkafka-console-consumer --bootstrap-server release-name-cp-kafka-headless:9092 --topic release-name-cp-kafka-canary-topic --from-beginning --timeout-ms 2000 | grep \"$MESSAGE\"\n"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]