apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: release-name-redis
  namespace: 32xUKoNKf2
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-netbox
  labels:
    helm.sh/chart: netbox-4.0.1
    app.kubernetes.io/name: netbox
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v3.0.11
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: 32xUKoNKf2
type: Opaque
data:
  postgresql-postgres-password: dnh1aW1zTGpKTQ==
  postgresql-password: cE1UeVRRRVlEQQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis
  namespace: 32xUKoNKf2
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: MXl0c2hicm92Uw==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-netbox
  labels:
    helm.sh/chart: netbox-4.0.1
    app.kubernetes.io/name: netbox
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v3.0.11
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  email_password: ""
  napalm_password: ""
  secret_key: MSY/T25qMlBGbEZ1fVo0KURIXWFue218ZkBsfGdvI0ByKj5VXVElfjl5dV56PHNlQD1bJCkwJ0lkXFog
  superuser_password: YWRtaW4=
  superuser_api_token: MDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nw==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-configuration
  namespace: 32xUKoNKf2
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: 32xUKoNKf2
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: 32xUKoNKf2
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: "#!/bin/bash\n\nget_port() {\n    hostname=\"$1\"\n    type=\"$2\"\n\n    port_var=$(echo \"${hostname^^}_SERVICE_PORT_$type\" | sed \"s/-/_/g\")\n    port=${!port_var}\n    \n    if [ -z \"$port\" ]; then\n        case $type in\n            \"SENTINEL\")\n                echo 26379\n                ;;\n            \"REDIS\")\n                echo 6379\n                ;;\n        esac\n    else\n        echo $port\n    fi\n}\n\nget_full_hostname() {\n    hostname=\"$1\"\n    echo \"${hostname}.${HEADLESS_SERVICE}\"\n}\n\nREDISPORT=$(get_port \"$HOSTNAME\" \"REDIS\")\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\nif [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\n\necho \"\" >> /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-port $REDISPORT\" >> /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-ip $(get_full_hostname \"$HOSTNAME\")\" >> /opt/bitnami/redis/etc/replica.conf\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--slaveof\" \"${REDIS_MASTER_HOST}\" \"${REDIS_MASTER_PORT_NUMBER}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_MASTER_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/replica.conf\")\nexec redis-server \"${ARGS[@]}\"\n"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-netbox
  labels:
    helm.sh/chart: netbox-4.0.1
    app.kubernetes.io/name: netbox
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v3.0.11
    app.kubernetes.io/managed-by: Helm
data:
  configuration.py: |
    import re
    import yaml

    from pathlib import Path

    def _load_yaml():
      extraConfigBase = Path('/run/config/extra')
      configFiles = [Path('/run/config/netbox/netbox.yaml')]

      configFiles.extend(sorted(extraConfigBase.glob('*/*.yaml')))

      for configFile in configFiles:
        with open(configFile, 'r') as f:
          config = yaml.safe_load(f)

        globals().update(config)

    def _load_secret(name, key):
      path = "/run/secrets/{name}/{key}".format(name=name, key=key)
      with open(path, 'r') as f:
        return f.read()

    _load_yaml()

    DATABASE['PASSWORD'] = _load_secret('netbox', 'db_password')
    EMAIL['PASSWORD'] = _load_secret('netbox', 'email_password')
    NAPALM_PASSWORD = _load_secret('netbox', 'napalm_password')
    REDIS['tasks']['PASSWORD'] = _load_secret('netbox', 'redis_tasks_password')
    REDIS['caching']['PASSWORD'] = _load_secret('netbox', 'redis_cache_password')
    SECRET_KEY = _load_secret('netbox', 'secret_key')

    # Post-process certain values
    CORS_ORIGIN_REGEX_WHITELIST = [re.compile(r) for r
                                   in CORS_ORIGIN_REGEX_WHITELIST]
  netbox.yaml: "ALLOWED_HOSTS: [\"*\"]\n\nDATABASE:\n  HOST: \"release-name-postgresql\"\n  USER: \"netbox\"\n  NAME: \"netbox\"\n  PORT: 5432\n  OPTIONS:\n    sslmode: \"prefer\"\n  CONN_MAX_AGE: 300\n\nADMINS: []\nALLOWED_URL_SCHEMES: [\"file\",\"ftp\",\"ftps\",\"http\",\"https\",\"irc\",\"mailto\",\"sftp\",\"ssh\",\"tel\",\"telnet\",\"tftp\",\"vnc\",\"xmpp\"]\nBANNER_TOP: \"\"\nBANNER_BOTTOM: \"\"\nBANNER_LOGIN: \"\"\nBASE_PATH: \"\"\nCHANGELOG_RETENTION: 90\nCORS_ORIGIN_ALLOW_ALL: false\nCORS_ORIGIN_WHITELIST: []\nCORS_ORIGIN_REGEX_WHITELIST: []\nDEBUG: false\n\nEMAIL:\n  SERVER: \"localhost\"\n  PORT: 25\n  USERNAME: \"\"\n  USE_SSL: false\n  USE_TLS: false\n  TIMEOUT: 10\n  FROM_EMAIL: \"\"\n\nENFORCE_GLOBAL_UNIQUE: false\nEXEMPT_VIEW_PERMISSIONS: []\nGRAPHQL_ENABLED: true\nHTTP_PROXIES: null\nINTERNAL_IPS: [\"127.0.0.1\",\"::1\"]\nLOGGING: {}\nLOGIN_PERSISTENCE: false\nLOGIN_REQUIRED: false\nLOGIN_TIMEOUT: 1209600\nMAINTENANCE_MODE: false\nMAPS_URL: \"https://maps.google.com/?q=\"\nMAX_PAGE_SIZE: 1000\nMEDIA_ROOT: /opt/netbox/netbox/media\nSTORAGE_BACKEND: \nSTORAGE_CONFIG:  {}\nMETRICS_ENABLED: false\nNAPALM_USERNAME: \"\"\nNAPALM_TIMEOUT: 30\nNAPALM_ARGS: {}\nPAGINATE_COUNT: 50\nPLUGINS: []\nPLUGINS_CONFIG: {}\nPREFER_IPV4: false\nRACK_ELEVATION_DEFAULT_UNIT_HEIGHT: 22\nRACK_ELEVATION_DEFAULT_UNIT_WIDTH: 220\nREMOTE_AUTH_ENABLED: false\nREMOTE_AUTH_BACKEND: \"netbox.authentication.RemoteUserBackend\"\nREMOTE_AUTH_HEADER: \"HTTP_REMOTE_USER\"\nREMOTE_AUTH_AUTO_CREATE_USER: true\nREMOTE_AUTH_DEFAULT_GROUPS: []\nREMOTE_AUTH_DEFAULT_PERMISSIONS: {}\nREMOTE_AUTH_GROUP_SYNC_ENABLED: false\nREMOTE_AUTH_GROUP_HEADER: \"HTTP_REMOTE_USER_GROUP\"\nREMOTE_AUTH_SUPERUSER_GROUPS: []\nREMOTE_AUTH_SUPERUSERS: []\nREMOTE_AUTH_STAFF_GROUPS: []\nREMOTE_AUTH_STAFF_USERS: []\nREMOTE_AUTH_GROUP_SEPARATOR: \"|\"\nRELEASE_CHECK_URL: null\n\nREDIS:\n  tasks:\n    HOST: \"release-name-redis-master\"\n    PORT: 6379\n    DATABASE: 0\n    SSL: false\n    INSECURE_SKIP_TLS_VERIFY: false\n  caching:\n    HOST: \"release-name-redis-master\"\n    PORT: 6379\n    DATABASE: 1\n    SSL: false\n    INSECURE_SKIP_TLS_VERIFY: false\n\nREPORTS_ROOT: /opt/netbox/netbox/reports\nRQ_DEFAULT_TIMEOUT: 300\nSCRIPTS_ROOT: /opt/netbox/netbox/scripts\nSESSION_COOKIE_NAME: sessionid\nTIME_ZONE: \"UTC\"\nDATE_FORMAT: \"N j, Y\"\nSHORT_DATE_FORMAT: \"Y-m-d\"\nTIME_FORMAT: \"g:i a\"\nSHORT_TIME_FORMAT: \"H:i:s\"\nDATETIME_FORMAT: \"N j, Y g:i a\"\nSHORT_DATETIME_FORMAT: \"Y-m-d H:i\"\n"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-netbox-media
  labels:
    helm.sh/chart: netbox-4.0.1
    app.kubernetes.io/name: netbox
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v3.0.11
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: 32xUKoNKf2
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
  namespace: 32xUKoNKf2
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: 32xUKoNKf2
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: 32xUKoNKf2
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-replicas
  namespace: 32xUKoNKf2
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: replica
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-netbox
  labels:
    helm.sh/chart: netbox-4.0.1
    app.kubernetes.io/name: netbox
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v3.0.11
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: netbox
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: netbox
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-netbox
  labels:
    helm.sh/chart: netbox-4.0.1
    app.kubernetes.io/name: netbox
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v3.0.11
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: netbox
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: netbox
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: netbox
  template:
    metadata:
      annotations:
        checksum/config: dcb4c2d92cd48f73aef71762ff028cea324481b475da40872d05a4e617f7ae3d
        checksum/secret: f945e59f4a779383e34e226e435149a6f01e5e7a111d04b1fbd801bffe8ad157
      labels:
        app.kubernetes.io/name: netbox
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: netbox
    spec:
      serviceAccountName: release-name-netbox
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      initContainers:
        - name: init-dirs
          image: busybox:1.32.1
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - mkdir -p /opt/unit/state /opt/unit/tmp
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          volumeMounts:
            - name: optunit
              mountPath: /opt/unit
      containers:
        - name: netbox
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 11248
            allowPrivilegeEscalation: false
          image: netboxcommunity/netbox:v3.0.11
          imagePullPolicy: IfNotPresent
          env:
            - name: SUPERUSER_NAME
              value: admin
            - name: SUPERUSER_EMAIL
              value: admin@example.com
            - name: SKIP_STARTUP_SCRIPTS
              value: "true"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /login/
              port: http
          volumeMounts:
            - name: config
              mountPath: /etc/netbox/config/configuration.py
              subPath: configuration.py
              readOnly: true
            - name: config
              mountPath: /run/config/netbox
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/netbox
              readOnly: true
            - name: netbox-tmp
              mountPath: /tmp
            - name: media
              mountPath: /opt/netbox/netbox/media
              subPath: ""
            - name: optunit
              mountPath: /opt/unit
            - name: secrets
              mountPath: /run/secrets/superuser_password
              subPath: superuser_password
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/superuser_api_token
              subPath: superuser_api_token
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: release-name-netbox
        - name: secrets
          projected:
            sources:
              - secret:
                  name: release-name-netbox
                  items:
                    - key: superuser_password
                      path: superuser_password
                    - key: superuser_api_token
                      path: superuser_api_token
                    - key: email_password
                      path: email_password
                    - key: napalm_password
                      path: napalm_password
                    - key: secret_key
                      path: secret_key
              - secret:
                  name: release-name-postgresql
                  items:
                    - key: postgresql-password
                      path: db_password
              - secret:
                  name: release-name-redis
                  items:
                    - key: redis-password
                      path: redis_tasks_password
              - secret:
                  name: release-name-redis
                  items:
                    - key: redis-password
                      path: redis_cache_password
        - name: netbox-tmp
          emptyDir:
            medium: Memory
        - name: optunit
          emptyDir:
            medium: Memory
        - name: media
          persistentVolumeClaim:
            claimName: release-name-netbox-media
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-netbox-worker
  labels:
    helm.sh/chart: netbox-4.0.1
    app.kubernetes.io/name: netbox
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v3.0.11
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: netbox
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: worker
  template:
    metadata:
      annotations:
        checksum/config: dcb4c2d92cd48f73aef71762ff028cea324481b475da40872d05a4e617f7ae3d
        checksum/secret: 32df2257e9c78fca021a0e79f23422b2ac74fe70dbafe34f04ec3b7f979e869e
      labels:
        app.kubernetes.io/name: netbox
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: worker
    spec:
      serviceAccountName: release-name-netbox
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      containers:
        - name: netbox-worker
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 11580
            allowPrivilegeEscalation: false
          image: netboxcommunity/netbox:v3.0.11
          command:
            - /opt/netbox/venv/bin/python
            - /opt/netbox/netbox/manage.py
            - rqworker
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: /etc/netbox/config/configuration.py
              subPath: configuration.py
              readOnly: true
            - name: config
              mountPath: /run/config/netbox
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/netbox
              readOnly: true
            - name: netbox-tmp
              mountPath: /tmp
            - name: media
              mountPath: /opt/netbox/netbox/media
              subPath: ""
      volumes:
        - name: config
          configMap:
            name: release-name-netbox
        - name: secrets
          projected:
            sources:
              - secret:
                  name: release-name-netbox
                  items:
                    - key: email_password
                      path: email_password
                    - key: napalm_password
                      path: napalm_password
                    - key: secret_key
                      path: secret_key
              - secret:
                  name: release-name-postgresql
                  items:
                    - key: postgresql-password
                      path: db_password
              - secret:
                  name: release-name-redis
                  items:
                    - key: redis-password
                      path: redis_tasks_password
              - secret:
                  name: release-name-redis
                  items:
                    - key: redis-password
                      path: redis_cache_password
        - name: netbox-tmp
          emptyDir:
            medium: Memory
        - name: media
          persistentVolumeClaim:
            claimName: release-name-netbox-media
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.9
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
  namespace: 32xUKoNKf2
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.13.9
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: release-name-postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r0
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          securityContext:
            runAsUser: 11020
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: netbox
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: netbox
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "netbox" -d "dbname=netbox" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "netbox" -d "dbname=netbox" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: null
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: 32xUKoNKf2
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: master
  serviceName: release-name-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-15.6.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 61004255edf3c97bf460016668c4b041893c2148a674c016a8e1dcc1359aa55e
        checksum/health: 7f8d416353dd5002dd7d12be81d752ecd388d092f0f432e3663ace04b898ee53
        checksum/scripts: d295b3639ed539fe5886687f7ebab2e4e767d1bfdba3adb5244b49162010aff9
        checksum/secret: 62066e3a8792b4a7ba47f1361661b9a39253d8bbe7ba3f916cf4f36fa9c8e937
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: release-name-redis
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: master
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.6-debian-10-r49
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10892
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: null
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 493
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-replicas
  namespace: 32xUKoNKf2
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: replica
  serviceName: release-name-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-15.6.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 61004255edf3c97bf460016668c4b041893c2148a674c016a8e1dcc1359aa55e
        checksum/health: 7f8d416353dd5002dd7d12be81d752ecd388d092f0f432e3663ace04b898ee53
        checksum/scripts: d295b3639ed539fe5886687f7ebab2e4e767d1bfdba3adb5244b49162010aff9
        checksum/secret: b2dc0e347da0182aa0d63a3574bf0308f2acd0d348cae0b014ea1d93ee78843e
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: release-name-redis
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: replica
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.6-debian-10-r49
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 11805
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: release-name-redis-master-0.release-name-redis-headless.default.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: null
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 493
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: release-name-netbox-housekeeping
  labels:
    helm.sh/chart: netbox-4.0.1
    app.kubernetes.io/name: netbox
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v3.0.11
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: housekeeping
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 5
  schedule: 0 0 * * *
  successfulJobsHistoryLimit: 5
  suspend: false
  jobTemplate:
    metadata:
      labels:
        helm.sh/chart: netbox-4.0.1
        app.kubernetes.io/name: netbox
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: v3.0.11
        app.kubernetes.io/managed-by: Helm
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: netbox
            app.kubernetes.io/instance: release-name
            app.kubernetes.io/component: housekeeping
        spec:
          serviceAccountName: release-name-netbox
          securityContext:
            fsGroup: 1000
            runAsNonRoot: true
          containers:
            - name: netbox-housekeeping
              securityContext:
                capabilities:
                  drop:
                    - ALL
                readOnlyRootFilesystem: true
                runAsGroup: 1000
                runAsNonRoot: true
                runAsUser: 1000
              image: netboxcommunity/netbox:v3.0.11
              command:
                - /opt/netbox/venv/bin/python
                - /opt/netbox/netbox/manage.py
                - housekeeping
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: config
                  mountPath: /etc/netbox/config/configuration.py
                  subPath: configuration.py
                  readOnly: true
                - name: config
                  mountPath: /run/config/netbox
                  readOnly: true
                - name: secrets
                  mountPath: /run/secrets/netbox
                  readOnly: true
                - name: netbox-tmp
                  mountPath: /tmp
                - name: media
                  mountPath: /opt/netbox/netbox/media
                  subPath: ""
          volumes:
            - name: config
              configMap:
                name: release-name-netbox
            - name: secrets
              projected:
                sources:
                  - secret:
                      name: release-name-netbox
                      items:
                        - key: email_password
                          path: email_password
                        - key: napalm_password
                          path: napalm_password
                        - key: secret_key
                          path: secret_key
                  - secret:
                      name: release-name-postgresql
                      items:
                        - key: postgresql-password
                          path: db_password
                  - secret:
                      name: release-name-redis
                      items:
                        - key: redis-password
                          path: redis_tasks_password
                  - secret:
                      name: release-name-redis
                      items:
                        - key: redis-password
                          path: redis_cache_password
            - name: netbox-tmp
              emptyDir:
                medium: Memory
            - name: media
              persistentVolumeClaim:
                claimName: release-name-netbox-media
          restartPolicy: OnFailure
---
apiVersion: v1
kind: Pod
metadata:
  name: release-name-netbox-test-connection
  labels:
    helm.sh/chart: netbox-4.0.1
    app.kubernetes.io/name: netbox
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v3.0.11
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - release-name-netbox:80
  restartPolicy: Never
