apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-rabbitmq
  namespace: qrsNgXHzhtIwJ1
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.6.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: release-name-rabbitmq
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-postgres-password: MnRvNTBHdUJiTQ==
  postgresql-password: IUNoYW5nZU1lIQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-rabbitmq
  namespace: qrsNgXHzhtIwJ1
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.6.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-password: IWNoYW5nZU1lIQ==
  rabbitmq-erlang-cookie: aWdGYXlBMElWN1o1YmpCWmVydVZ0Q3A2cUhwZFU5OXA=
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-notification-component-dependencies
  labels:
    app.kubernetes.io/name: release-name
    app.kubernetes.io/part-of: release-name
    helm.sh/chart: notification-component-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
stringData:
  dependencies.yaml: |
    parameters:
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-notification-component
  labels:
    app.kubernetes.io/name: release-name
    app.kubernetes.io/part-of: release-name
    helm.sh/chart: notification-component-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  database-url: cGdzcWw6Ly9leGFtcGxlOiFDaGFuZ2VNZSFAcmVsZWFzZS1uYW1lLXBvc3RncmVzcWwvYXBpP3NlcnZlclZlcnNpb249MTA=
  app_application_key: NDVjMWE0YjYtNTlkMy00YTZlLTg2YmYtODhhODcyZjM1ODQ1
  rabbitmq-username: ZXhhbXBsZQ==
  rabbitmq-password: IWNoYW5nZU1lIQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-rabbitmq-config
  namespace: qrsNgXHzhtIwJ1
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.6.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-
    ## Username and password
    default_user = example
    default_pass = CHANGEME
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    #default_vhost = default-vhost
    #disk_free_limit.absolute = 50MB
    #load_definitions = /app/load_definition.json
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-notification-component
  labels:
    app.kubernetes.io/name: release-name
    app.kubernetes.io/part-of: release-name
    helm.sh/chart: notification-component-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  app-version: V1.0
  app-corsAllowOrigin: '[*]'
  cache: "true"
  debug: "0"
  trusted-proxies: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
  trusted-hosts: ^.+$
  php-service: release-name-php
  url: https://notification-component.local/
  rabbitmq-host: release-name-rabbitmq
  rabbitmq-port: "5672"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rabbitmq-endpoint-reader
  namespace: qrsNgXHzhtIwJ1
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.6.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: release-name-rabbitmq-endpoint-reader
  namespace: qrsNgXHzhtIwJ1
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.6.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: release-name-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-rabbitmq-endpoint-reader
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-rabbitmq-headless
  namespace: qrsNgXHzhtIwJ1
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.6.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-rabbitmq
  namespace: qrsNgXHzhtIwJ1
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.6.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name
  labels:
    app.kubernetes.io/name: release-name
    app.kubernetes.io/part-of: release-name
    helm.sh/chart: notification-component-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 443
      targetPort: 80
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: release-name-nginx
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-php
  labels:
    app.kubernetes.io/name: release-name-php
    app.kubernetes.io/part-of: release-name
    helm.sh/chart: notification-component-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9000
  selector:
    app.kubernetes.io/name: release-name-php
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-nginx
  labels:
    app.kubernetes.io/name: release-name-nginx
    app.kubernetes.io/part-of: release-name
    helm.sh/chart: notification-component-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: release-name-nginx
  replicas: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: release-name-nginx
        app.kubernetes.io/part-of: release-name
        helm.sh/chart: notification-component-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: release-name-nginx
          image: ghcr.io/conductionnl/notification-component-nginx:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
            - name: PHP_SERVICE
              value: release-name-php
            - name: NGINX_HOST
              value: release-name-php
            - name: BACKENDS
              value: release-name-php
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-php
  labels:
    app.kubernetes.io/name: release-name-php
    app.kubernetes.io/part-of: release-name
    helm.sh/chart: notification-component-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: release-name-php
  replicas: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: release-name-php
        app.kubernetes.io/part-of: release-name
        helm.sh/chart: notification-component-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      volumes:
        - name: dependencies
          secret:
            secretName: release-name-notification-component-dependencies
            defaultMode: 420
      containers:
        - name: release-name-php
          image: ghcr.io/conductionnl/notification-component-php:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 9000
          volumeMounts:
            - mountPath: /srv/api/config/packages/dependencies.yaml
              subPath: dependencies.yaml
              name: dependencies
              readOnly: true
          env:
            - name: JWT_SECRET_KEY
              value: '%kernel.project_dir%/config/jwt/private.pem'
            - name: JWT_PUBLIC_KEY
              value: '%kernel.project_dir%/config/jwt/public.pem'
            - name: JWT_PASSPHRASE
              value: bafe1dc254b45471754c221081f874aa
            - name: APP_ENV
              value: prod
            - name: TRUSTED_HOSTS
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: trusted-hosts
            - name: TRUSTED_PROXIES
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: trusted-proxies
            - name: APP_VERSION
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: app-version
            - name: APP_DEBUG
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: debug
            - name: APP_CACHE
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: cache
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: release-name-notification-component
                  key: database-url
            - name: CORS_ALLOW_ORIGIN
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: app-corsAllowOrigin
            - name: APP_APPLICATION_KEY
              valueFrom:
                secretKeyRef:
                  name: release-name-notification-component
                  key: app_application_key
            - name: RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: rabbitmq-host
            - name: RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: rabbitmq-port
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: release-name-notification-component
                  key: rabbitmq-username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-notification-component
                  key: rabbitmq-password
            - name: APP_URL
              valueFrom:
                configMapKeyRef:
                  key: url
                  name: release-name-notification-component
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-worker
  labels:
    app.kubernetes.io/name: release-name-worker
    app.kubernetes.io/part-of: release-name
    helm.sh/chart: notification-component-1.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: release-name-worker
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: release-name-worker
        app.kubernetes.io/part-of: release-name
        helm.sh/chart: notification-component-1.0.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: release-name-worker
          image: ghcr.io/conductionnl/notification-component-php:latest
          imagePullPolicy: Always
          args:
            - supervisord
            - -c
            - /srv/api/config/supervisord.conf
          env:
            - name: JWT_SECRET_KEY
              value: '%kernel.project_dir%/config/jwt/private.pem'
            - name: JWT_PUBLIC_KEY
              value: '%kernel.project_dir%/config/jwt/public.pem'
            - name: JWT_PASSPHRASE
              value: bafe1dc254b45471754c221081f874aa
            - name: APP_ENV
              value: prod
            - name: TRUSTED_HOSTS
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: trusted-hosts
            - name: TRUSTED_PROXIES
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: trusted-proxies
            - name: APP_VERSION
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: app-version
            - name: APP_DEBUG
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: debug
            - name: APP_CACHE
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: cache
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: release-name-notification-component
                  key: database-url
            - name: CORS_ALLOW_ORIGIN
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: app-corsAllowOrigin
            - name: APP_APPLICATION_KEY
              valueFrom:
                secretKeyRef:
                  name: release-name-notification-component
                  key: app_application_key
            - name: RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: rabbitmq-host
            - name: RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  name: release-name-notification-component
                  key: rabbitmq-port
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: release-name-notification-component
                  key: rabbitmq-username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-notification-component
                  key: rabbitmq-password
            - name: APP_URL
              value: https:////
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations: null
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.1.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
    spec:
      securityContext:
        fsGroup: 1001
      containers:
        - name: release-name-postgresql
          image: docker.io/bitnami/postgresql:11.10.0-debian-10-r9
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          securityContext:
            runAsUser: 10427
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: example
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: api
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "example" -d "dbname=api" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "example" -d "dbname=api" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: null
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-rabbitmq
  namespace: qrsNgXHzhtIwJ1
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.6.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: release-name-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.6.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 28adccb3d79e1065dcc1e45477a0c28a8ee0496ca4e508d8877f7ec3f5ee3fbb
        checksum/secret: 534ab4529524c76240aa224811efe1844418d2e487366de884a7ab49e6a971e9
    spec:
      serviceAccountName: release-name-rabbitmq
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: release-name
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.8.9-debian-10-r64
          imagePullPolicy: IfNotPresent
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: release-name-rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: K8S_HOSTNAME_SUFFIX
              value: .$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: RABBITMQ_MNESIA_DIR
              value: /bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: '-'
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: release-name-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_USERNAME
              value: example
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits: {}
            requests: {}
            seccompProfile:
              type: RuntimeDefault
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: release-name-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: rabbitmq
          app.kubernetes.io/instance: release-name
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
