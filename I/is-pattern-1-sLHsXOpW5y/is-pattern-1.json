[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "wso2is-mysql-db-service",
      "namespace": "sLHsXOpW5y",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.2.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "secrets": [
      {
        "name": "wso2is-mysql-db-service"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "wso2is-pattern-1-svc-account",
      "namespace": "sLHsXOpW5y"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "wso2is-mysql-db-service",
      "namespace": "sLHsXOpW5y",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.2.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "mysql-root-password": "SmhSMVFwWFI3Tw==",
      "mysql-password": "NW5Nd1VaUlFmaA=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "wso2is-mysql-db-service",
      "namespace": "sLHsXOpW5y",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.2.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      }
    },
    "data": {
      "my.cnf": "\n[mysqld]\ndefault_authentication_plugin=mysql_native_password\nskip-name-resolve\nexplicit_defaults_for_timestamp\nbasedir=/opt/bitnami/mysql\nplugin_dir=/opt/bitnami/mysql/plugin\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\ndatadir=/bitnami/mysql/data\ntmpdir=/opt/bitnami/mysql/tmp\nmax_allowed_packet=16M\nbind-address=0.0.0.0\npid-file=/opt/bitnami/mysql/tmp/mysqld.pid\nlog-error=/opt/bitnami/mysql/logs/mysqld.log\ncharacter-set-server=UTF8\ncollation-server=utf8_general_ci\n\n[client]\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\ndefault-character-set=UTF8\nplugin_dir=/opt/bitnami/mysql/plugin\n\n[manager]\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\npid-file=/opt/bitnami/mysql/tmp/mysqld.pid"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "wso2is-pattern-1-identity-server-bin",
      "namespace": "sLHsXOpW5y"
    },
    "data": {
      "wso2server.sh": "#!/bin/sh\n# ----------------------------------------------------------------------------\n#  Copyright 2005-2012 WSO2, Inc. http://www.wso2.org\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n\n# ----------------------------------------------------------------------------\n# Main Script for the WSO2 Carbon Server\n#\n# Environment Variable Prequisites\n#\n#   CARBON_HOME   Home of WSO2 Carbon installation. If not set I will  try\n#                   to figure it out.\n#\n#   JAVA_HOME       Must point at your Java Development Kit installation.\n#\n#   JAVA_OPTS       (Optional) Java runtime options used when the commands\n#                   is executed.\n#\n# NOTE: Borrowed generously from Apache Tomcat startup scripts.\n# -----------------------------------------------------------------------------\n\n# OS specific support.  $var _must_ be set to either true or false.\n#ulimit -n 100000\n\ncygwin=false;\ndarwin=false;\nos400=false;\nmingw=false;\ncase \"`uname`\" in\nCYGWIN*) cygwin=true;;\nMINGW*) mingw=true;;\nOS400*) os400=true;;\nDarwin*) darwin=true\n        if [ -z \"$JAVA_VERSION\" ] ; then\n             JAVA_VERSION=\"CurrentJDK\"\n           else\n             echo \"Using Java version: $JAVA_VERSION\"\n           fi\n           if [ -z \"$JAVA_HOME\" ] ; then\n             JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/${JAVA_VERSION}/Home\n           fi\n           ;;\nesac\n\n# resolve links - $0 may be a softlink\nPRG=\"$0\"\n\nwhile [ -h \"$PRG\" ]; do\n  ls=`ls -ld \"$PRG\"`\n  link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n  if expr \"$link\" : '.*/.*' > /dev/null; then\n    PRG=\"$link\"\n  else\n    PRG=`dirname \"$PRG\"`/\"$link\"\n  fi\ndone\n\n# Get standard environment variables\nPRGDIR=`dirname \"$PRG\"`\n\n# Only set CARBON_HOME if not already set\n[ -z \"$CARBON_HOME\" ] && CARBON_HOME=`cd \"$PRGDIR/..\" ; pwd`\n\n# Set AXIS2_HOME. Needed for One Click JAR Download\nAXIS2_HOME=\"$CARBON_HOME\"\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin; then\n  [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n  [ -n \"$CARBON_HOME\" ] && CARBON_HOME=`cygpath --unix \"$CARBON_HOME\"`\n  [ -n \"$AXIS2_HOME\" ] && CARBON_HOME=`cygpath --unix \"$CARBON_HOME\"`\nfi\n\n# For OS400\nif $os400; then\n  # Set job priority to standard for interactive (interactive - 6) by using\n  # the interactive priority - 6, the helper threads that respond to requests\n  # will be running at the same priority as interactive jobs.\n  COMMAND='chgjob job('$JOBNAME') runpty(6)'\n  system $COMMAND\n\n  # Enable multi threading\n  QIBM_MULTI_THREADED=Y\n  export QIBM_MULTI_THREADED\nfi\n\n# For Migwn, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$CARBON_HOME\" ] &&\n    CARBON_HOME=\"`(cd \"$CARBON_HOME\"; pwd)`\"\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\n  [ -n \"$AXIS2_HOME\" ] &&\n    CARBON_HOME=\"`(cd \"$CARBON_HOME\"; pwd)`\"\n  # TODO classpath?\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=java\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\"\n  echo \" CARBON cannot execute $JAVACMD\"\n  exit 1\nfi\n\n# if JAVA_HOME is not set we're not happy\nif [ -z \"$JAVA_HOME\" ]; then\n  echo \"You must set the JAVA_HOME variable before running CARBON.\"\n  exit 1\nfi\n\nif [ -e \"$CARBON_HOME/wso2carbon.pid\" ]; then\n  PID=`cat \"$CARBON_HOME\"/wso2carbon.pid`\nfi\n\n# ----- Process the input command ----------------------------------------------\nargs=\"\"\nfor c in $*\ndo\n    if [ \"$c\" = \"--debug\" ] || [ \"$c\" = \"-debug\" ] || [ \"$c\" = \"debug\" ]; then\n          CMD=\"--debug\"\n          continue\n    elif [ \"$CMD\" = \"--debug\" ]; then\n          if [ -z \"$PORT\" ]; then\n                PORT=$c\n          fi\n    elif [ \"$c\" = \"--stop\" ] || [ \"$c\" = \"-stop\" ] || [ \"$c\" = \"stop\" ]; then\n          CMD=\"stop\"\n    elif [ \"$c\" = \"--start\" ] || [ \"$c\" = \"-start\" ] || [ \"$c\" = \"start\" ]; then\n          CMD=\"start\"\n    elif [ \"$c\" = \"--version\" ] || [ \"$c\" = \"-version\" ] || [ \"$c\" = \"version\" ]; then\n          CMD=\"version\"\n    elif [ \"$c\" = \"--restart\" ] || [ \"$c\" = \"-restart\" ] || [ \"$c\" = \"restart\" ]; then\n          CMD=\"restart\"\n    elif [ \"$c\" = \"--test\" ] || [ \"$c\" = \"-test\" ] || [ \"$c\" = \"test\" ]; then\n          CMD=\"test\"\n    else\n        args=\"$args $c\"\n    fi\ndone\n\nif [ \"$CMD\" = \"--debug\" ]; then\n  if [ \"$PORT\" = \"\" ]; then\n    echo \" Please specify the debug port after the --debug option\"\n    exit 1\n  fi\n  if [ -n \"$JAVA_OPTS\" ]; then\n    echo \"Warning !!!. User specified JAVA_OPTS will be ignored, once you give the --debug option.\"\n  fi\n  CMD=\"RUN\"\n  JAVA_OPTS=\"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=$PORT\"\n  echo \"Please start the remote debugging client to continue...\"\nelif [ \"$CMD\" = \"start\" ]; then\n  if [ -e \"$CARBON_HOME/wso2carbon.pid\" ]; then\n    if  ps -p $PID > /dev/null ; then\n      echo \"Process is already running\"\n      exit 0\n    fi\n  fi\n  export CARBON_HOME=\"$CARBON_HOME\"\n# using nohup sh to avoid erros in solaris OS.TODO\n  nohup sh \"$CARBON_HOME\"/bin/wso2server.sh $args > /dev/null 2>&1 &\n  exit 0\nelif [ \"$CMD\" = \"stop\" ]; then\n  export CARBON_HOME=\"$CARBON_HOME\"\n  kill -term `cat \"$CARBON_HOME\"/wso2carbon.pid`\n  exit 0\nelif [ \"$CMD\" = \"restart\" ]; then\n  export CARBON_HOME=\"$CARBON_HOME\"\n  kill -term `cat \"$CARBON_HOME\"/wso2carbon.pid`\n  process_status=0\n  pid=`cat \"$CARBON_HOME\"/wso2carbon.pid`\n  while [ \"$process_status\" -eq \"0\" ]\n  do\n        sleep 1;\n        ps -p$pid 2>&1 > /dev/null\n        process_status=$?\n  done\n\n# using nohup sh to avoid erros in solaris OS.TODO\n  nohup sh \"$CARBON_HOME\"/bin/wso2server.sh $args > /dev/null 2>&1 &\n  exit 0\nelif [ \"$CMD\" = \"test\" ]; then\n    JAVACMD=\"exec \"$JAVACMD\"\"\nelif [ \"$CMD\" = \"version\" ]; then\n  cat \"$CARBON_HOME\"/bin/version.txt\n  cat \"$CARBON_HOME\"/bin/wso2carbon-version.txt\n  exit 0\nfi\n\n# ---------- Handle the SSL Issue with proper JDK version --------------------\njava_version=$(\"$JAVACMD\" -version 2>&1 | awk -F '\"' '/version/ {print $2}')\njava_version_formatted=$(echo \"$java_version\" | awk -F. '{printf(\"%02d%02d\",$1,$2);}')\nif [ $java_version_formatted -lt 0107 ] || [ $java_version_formatted -gt 1100 ]; then\n   echo \" Starting WSO2 Carbon (in unsupported JDK)\"\n   echo \" [ERROR] CARBON is supported only on JDK 1.7, 1.8, 9, 10 and 11\"\nfi\n\nCARBON_XBOOTCLASSPATH=\"\"\nfor f in \"$CARBON_HOME\"/lib/xboot/*.jar\ndo\n    if [ \"$f\" != \"$CARBON_HOME/lib/xboot/*.jar\" ];then\n        CARBON_XBOOTCLASSPATH=\"$CARBON_XBOOTCLASSPATH\":$f\n    fi\ndone\n\n\nCARBON_CLASSPATH=\"\"\nif [ -e \"$JAVA_HOME/lib/tools.jar\" ]; then\n    CARBON_CLASSPATH=\"$JAVA_HOME/lib/tools.jar\"\nfi\nfor f in \"$CARBON_HOME\"/bin/*.jar\ndo\n    if [ \"$f\" != \"$CARBON_HOME/bin/*.jar\" ];then\n        CARBON_CLASSPATH=\"$CARBON_CLASSPATH\":$f\n    fi\ndone\nfor t in \"$CARBON_HOME\"/lib/*.jar\ndo\n    CARBON_CLASSPATH=\"$CARBON_CLASSPATH\":$t\ndone\n\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  JAVA_HOME=`cygpath --absolute --windows \"$JAVA_HOME\"`\n  CARBON_HOME=`cygpath --absolute --windows \"$CARBON_HOME\"`\n  AXIS2_HOME=`cygpath --absolute --windows \"$CARBON_HOME\"`\n  CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n  CARBON_CLASSPATH=`cygpath --path --windows \"$CARBON_CLASSPATH\"`\n  CARBON_XBOOTCLASSPATH=`cygpath --path --windows \"$CARBON_XBOOTCLASSPATH\"`\nfi\n\n# ----- Execute The Requested Command -----------------------------------------\n\necho JAVA_HOME environment variable is set to $JAVA_HOME\necho CARBON_HOME environment variable is set to \"$CARBON_HOME\"\n\ncd \"$CARBON_HOME\"\n\nTMP_DIR=\"$CARBON_HOME\"/tmp\nif [ -d \"$TMP_DIR\" ]; then\nrm -rf \"$TMP_DIR\"/*\nfi\n\nSTART_EXIT_STATUS=121\nstatus=$START_EXIT_STATUS\n\nif [ -z \"$JVM_MEM_OPTS\" ]; then\n   java_version=$(\"$JAVACMD\" -version 2>&1 | awk -F '\"' '/version/ {print $2}')\n   JVM_MEM_OPTS=\"-Xms256m -Xmx1024m\"\n   if [ \"$java_version\" \\< \"1.8\" ]; then\n      JVM_MEM_OPTS=\"$JVM_MEM_OPTS -XX:MaxPermSize=256m\"\n   fi\nfi\necho \"Using Java memory options: $JVM_MEM_OPTS\"\n\n#To monitor a Carbon server in remote JMX mode on linux host machines, set the below system property.\n#   -Djava.rmi.server.hostname=\"your.IP.goes.here\"\n\nJAVA_VER_BASED_OPTS=\"\"\n\nNASHRON_ARGS=\"\"\n\nif [ $java_version_formatted -ge 1100 ]; then\n NASHRON_ARGS=\"--no-deprecation-warning\"\n    JAVA_VER_BASED_OPTS=\"--add-opens=java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens java.rmi/sun.rmi.transport=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED\"\nfi\n\n\nwhile [ \"$status\" = \"$START_EXIT_STATUS\" ]\ndo\n    $JAVACMD \\\n    -Xbootclasspath/a:\"$CARBON_XBOOTCLASSPATH\" \\\n    $JVM_MEM_OPTS \\\n    -XX:+HeapDumpOnOutOfMemoryError \\\n    -XX:HeapDumpPath=\"$CARBON_HOME/repository/logs/heap-dump.hprof\" \\\n    $JAVA_OPTS \\\n    -Dcom.sun.management.jmxremote \\\n    -classpath \"$CARBON_CLASSPATH\" \\\n    $JAVA_VER_BASED_OPTS \\\n    -Djava.io.tmpdir=\"$CARBON_HOME/tmp\" \\\n    -Dcatalina.base=\"$CARBON_HOME/lib/tomcat\" \\\n    -Dwso2.server.standalone=true \\\n    -Dcarbon.registry.root=/ \\\n    -Djava.command=\"$JAVACMD\" \\\n    -Dcarbon.home=\"$CARBON_HOME\" \\\n    -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \\\n    -Dcarbon.config.dir.path=\"$CARBON_HOME/repository/conf\" \\\n    -Djava.util.logging.config.file=\"$CARBON_HOME/repository/conf/etc/logging-bridge.properties\" \\\n    -Dcomponents.repo=\"$CARBON_HOME/repository/components/plugins\" \\\n    -Dconf.location=\"$CARBON_HOME/repository/conf\"\\\n    -Dcom.atomikos.icatch.file=\"$CARBON_HOME/lib/transactions.properties\" \\\n    -Dcom.atomikos.icatch.hide_init_file_path=true \\\n    -Dorg.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING=false \\\n    -Dorg.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true \\\n    -Dcom.sun.jndi.ldap.connect.pool.authentication=simple  \\\n    -Dcom.sun.jndi.ldap.connect.pool.timeout=3000  \\\n    -Dorg.terracotta.quartz.skipUpdateCheck=true \\\n    -Djava.security.egd=file:/dev/./urandom \\\n    -Dfile.encoding=UTF8 \\\n    -Djava.net.preferIPv4Stack=true \\\n    -Dcom.ibm.cacheLocalHost=true \\\n    -DworkerNode=false \\\n    -DenableCorrelationLogs=false \\\n    -Dhttpclient.hostnameVerifier=\"DefaultAndLocalhost\" \\\n    -Dorg.apache.xml.security.ignoreLineBreaks=false \\\n    -Dnashorn.args=\"$NASHRON_ARGS\" \\\n    -Dcarbon.new.config.dir.path=\"$CARBON_HOME/repository/resources/conf\" \\\n    -Djdk.tls.client.protocols=TLSv1.2 \\\n    org.wso2.carbon.bootstrap.Bootstrap $*\n    status=$?\ndone"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "wso2is-pattern-1-identity-server-conf",
      "namespace": "sLHsXOpW5y"
    },
    "data": {
      "deployment.toml": "# Deployment config for Identity Server deployment\n[server]\nhostname = \"identity.wso2.com\"\nnode_ip = \"$env{NODE_IP}\"\nbase_path = \"https://$ref{server.hostname}:${carbon.management.port}\"\n\n[super_admin]\nusername = \"admin\"\npassword = \"admin\"\ncreate_admin_account = true\n\n[user_store]\ntype = \"database_unique_id\"\n\n[database.user]\nurl = \"jdbc:mysql://wso2is-mysql-db-service:3306/WSO2IS_SHARED_DB?autoReconnect=true&amp;useSSL=false\"\nusername = \"wso2carbon\"\npassword = \"wso2carbon\"\ndriver = \"com.mysql.cj.jdbc.Driver\"\n\n[database.user.pool_options]\nvalidationQuery = \"SELECT 1\"\n\n[transport.https.properties]\nproxyPort=\"443\"\n\n[database.identity_db]\nurl = \"jdbc:mysql://wso2is-mysql-db-service:3306/WSO2IS_IDENTITY_DB?autoReconnect=true&amp;useSSL=false\"\nusername = \"wso2carbon\"\npassword = \"wso2carbon\"\ndriver = \"com.mysql.cj.jdbc.Driver\"\n\n[database.identity_db.pool_options]\nvalidationQuery = \"SELECT 1\"\n\n[database.shared_db]\nurl = \"jdbc:mysql://wso2is-mysql-db-service:3306/WSO2IS_SHARED_DB?autoReconnect=true&amp;useSSL=false\"\nusername = \"wso2carbon\"\npassword = \"wso2carbon\"\ndriver = \"com.mysql.cj.jdbc.Driver\"\n\n[truststore]\nfile_name=\"client-truststore.jks\"\npassword=\"wso2carbon\"\ntype=\"JKS\"\n\n[account_recovery.endpoint.auth]\nhash= \"66cd9688a2ae068244ea01e70f0e230f5623b7fa4cdecb65070a09ec06452262\"\n\n[identity.auth_framework.endpoint]\napp_password= \"dashboard\"\n\n[database.shared_db.pool_options]\nvalidationQuery = \"SELECT 1\"\n\n[database.bps_database]\nurl = \"jdbc:mysql://wso2is-mysql-db-service:3306/WSO2IS_BPS_DB?autoReconnect=true&amp;useSSL=false\"\nusername = \"wso2carbon\"\npassword = \"wso2carbon\"\ndriver = \"com.mysql.cj.jdbc.Driver\"\n\n[database.bps_database.pool_options]\nvalidationQuery = \"SELECT 1\"\n\n[[datasource]]\nid = \"WSO2ConsentDS\"\nurl = \"jdbc:mysql://wso2is-mysql-db-service:3306/WSO2IS_CONSENT_DB?autoReconnect=true&amp;useSSL=false\"\nusername = \"wso2carbon\"\npassword = \"wso2carbon\"\ndriver = \"com.mysql.cj.jdbc.Driver\"\npool_options.validationQuery=\"SELECT 1\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\npool_options.jmxEnabled = false\n[authentication.consent]\ndata_source=\"jdbc/WSO2ConsentDS\"\n\n[keystore.primary]\nname = \"wso2carbon.jks\"\npassword = \"wso2carbon\"\n\n[clustering]\nmembership_scheme = \"kubernetes\"\ndomain = \"wso2.carbon.domain\"\nproperties.membershipSchemeClassName = \"org.wso2.carbon.membership.scheme.kubernetes.KubernetesMembershipScheme\"\nproperties.KUBERNETES_NAMESPACE = \"default\"\nproperties.KUBERNETES_SERVICES = \"wso2is-pattern-1-identity-service\"\nproperties.KUBERNETES_MASTER_SKIP_SSL_VERIFICATION = \"true\"\nproperties.USE_DNS = \"false\""
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "namespace": "sLHsXOpW5y",
      "name": "wso2is-pattern-1-endpoints-reader-role"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "verbs": [
          "get",
          "list"
        ],
        "resources": [
          "endpoints"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "wso2is-pattern-1-endpoints-reader-role-wso2-binding",
      "namespace": "sLHsXOpW5y"
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "wso2is-pattern-1-endpoints-reader-role"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "wso2is-pattern-1-svc-account",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "wso2is-mysql-db-service-headless",
      "namespace": "sLHsXOpW5y",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.2.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "mysql",
          "port": 3306,
          "targetPort": "mysql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "mysql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "wso2is-mysql-db-service",
      "namespace": "sLHsXOpW5y",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.2.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "mysql",
          "port": 3306,
          "protocol": "TCP",
          "targetPort": "mysql",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "mysql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "wso2is-pattern-1-identity-service",
      "namespace": "sLHsXOpW5y",
      "labels": {
        "deployment": "wso2is",
        "monitoring": "jmx"
      }
    },
    "spec": {
      "selector": {
        "deployment": "wso2is"
      },
      "ports": [
        {
          "name": "servlet-http",
          "port": 9763,
          "targetPort": 9763,
          "protocol": "TCP"
        },
        {
          "name": "servlet-https",
          "port": 9443,
          "targetPort": 9443,
          "protocol": "TCP"
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "wso2is-mysql-db-service",
      "namespace": "sLHsXOpW5y",
      "labels": {
        "app.kubernetes.io/name": "mysql",
        "helm.sh/chart": "mysql-8.2.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "mysql",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "primary"
        }
      },
      "serviceName": "wso2is-mysql-db-service",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configuration": "f27e0cc4b4175d05841dd0c0d11aa4c05b99f28b5ea30eda04616d7ecc50076d"
          },
          "labels": {
            "app.kubernetes.io/name": "mysql",
            "helm.sh/chart": "mysql-8.2.3",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "primary"
          }
        },
        "spec": {
          "serviceAccountName": "wso2is-mysql-db-service",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "mysql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "containers": [
            {
              "name": "mysql",
              "image": "docker.io/bitnami/mysql:8.0.22-debian-10-r44",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 10724,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MYSQL_ROOT_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "wso2is-mysql-db-service",
                      "key": "mysql-root-password"
                    }
                  }
                },
                {
                  "name": "MYSQL_DATABASE",
                  "value": "my_database"
                }
              ],
              "ports": [
                {
                  "name": "mysql",
                  "containerPort": 3306
                }
              ],
              "livenessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 120,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\nif [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\nfi\nmysqladmin status -uroot -p\"${password_aux}\"\n"
                  ]
                }
              },
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 1,
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\nif [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n    password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\nfi\nmysqladmin status -uroot -p\"${password_aux}\"\n"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/bitnami/mysql"
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/mysql/conf/my.cnf",
                  "subPath": "my.cnf"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "wso2is-mysql-db-service"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "labels": {
              "app.kubernetes.io/name": "mysql",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/component": "primary"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "wso2is-pattern-1-identity-server-statefulset",
      "namespace": "sLHsXOpW5y"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "deployment": "wso2is",
          "monitoring": "jmx"
        }
      },
      "replicas": 2,
      "serviceName": "wso2is-pattern-1-identity-service",
      "template": {
        "metadata": {
          "annotations": {
            "checksum.is.bin": "518d688918b5606a367a9f59377acb68c901c6fe2c9ff56fb0b039f6726ca8ca",
            "checksum.is.conf": "fa06dc4a51e4cfba106590410a93151fd9f030b57b1c6de23e7f5100a53055a6"
          },
          "labels": {
            "deployment": "wso2is",
            "monitoring": "jmx"
          }
        },
        "spec": {
          "initContainers": null,
          "containers": [
            {
              "name": "identity-server",
              "image": "massimolauri/wso2is:5.11.0-centos",
              "imagePullPolicy": "Always",
              "env": [
                {
                  "name": "NODE_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "JVM_MEM_OPTS",
                  "value": "-Xms2048m -Xmx2048m"
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "nc -z localhost 9443"
                  ]
                },
                "initialDelaySeconds": 120,
                "periodSeconds": 10
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "nc -z localhost 9443"
                  ]
                },
                "initialDelaySeconds": 120,
                "periodSeconds": 10
              },
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "sh",
                      "-c",
                      "${WSO2_SERVER_HOME}/bin/wso2server.sh stop"
                    ]
                  }
                }
              },
              "resources": {
                "requests": {
                  "memory": "3Gi",
                  "cpu": "3000m"
                },
                "limits": {
                  "memory": "4Gi",
                  "cpu": "4000m"
                }
              },
              "securityContext": {
                "runAsUser": 10204,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "ports": [
                {
                  "containerPort": 9763,
                  "protocol": "TCP"
                },
                {
                  "containerPort": 9443,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "identity-server-conf",
                  "mountPath": "/home/wso2carbon/wso2-config-volume/repository/conf/deployment.toml",
                  "subPath": "deployment.toml"
                },
                {
                  "name": "identity-server-bin",
                  "mountPath": "/home/wso2carbon/wso2-config-volume/bin"
                }
              ]
            }
          ],
          "serviceAccountName": "wso2is-pattern-1-svc-account",
          "volumes": [
            {
              "name": "identity-server-conf",
              "configMap": {
                "name": "wso2is-pattern-1-identity-server-conf"
              }
            },
            {
              "name": "identity-server-bin",
              "configMap": {
                "name": "wso2is-pattern-1-identity-server-bin"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "Ingress",
    "metadata": {
      "name": "wso2is-pattern-1-identity-server-ingress",
      "namespace": "sLHsXOpW5y",
      "annotations": {
        "kubernetes.io/ingress.class": "nginx",
        "nginx.ingress.kubernetes.io/affinity": "cookie",
        "nginx.ingress.kubernetes.io/backend-protocol": "HTTPS",
        "nginx.ingress.kubernetes.io/session-cookie-hash": "sha1",
        "nginx.ingress.kubernetes.io/session-cookie-name": "route"
      }
    },
    "spec": {
      "tls": [
        {
          "hosts": [
            "identity.wso2.com"
          ]
        }
      ],
      "rules": [
        {
          "host": "identity.wso2.com",
          "http": {
            "paths": [
              {
                "path": "/",
                "backend": {
                  "serviceName": "wso2is-pattern-1-identity-service",
                  "servicePort": 9443
                }
              }
            ]
          }
        }
      ]
    }
  }
]