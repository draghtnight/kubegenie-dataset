apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-hasura
  labels:
    helm.sh/chart: hasura-0.1.5
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.3.3.cli-migrations-v2
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-hbp
  labels:
    helm.sh/chart: hbp-0.1.9
    app.kubernetes.io/name: hbp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.0.0
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-vue
  labels:
    helm.sh/chart: vue-0.1.6
    app.kubernetes.io/name: vue
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-hasura
type: Opaque
data:
  adminSecret: UUc4RkxXTDhIVlk5V2tVUjd2d2I4M0dibDFhTFIzS0NzTnltaVJIaWJjZzZtMHdpSEJ3NzV2NXFqTGY5eGFObg==
  jwt.secret: eyJ0eXBlIjogIkhTMjU2IiwgImtleSI6ICJTN0JJUVZZbG1QeUdrbGx2UFlRYTBEdGdZUmE0WnlIbGRKY3oxbHpEcEhpdTdXRmZXTDJPYUE4WVByYlpiRkxrIiwgImNsYWltc19uYW1lc3BhY2UiOiAiaHR0cHM6Ly9oYXN1cmEuaW8vand0L2NsYWltcyJ9
  jwt.key: UzdCSVFWWWxtUHlHa2xsdlBZUWEwRHRnWVJhNFp5SGxkSmN6MWx6RHBIaXU3V0ZmV0wyT2FBOFlQcmJaYkZMaw==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
type: Opaque
data:
  postgresql-password: cUVWSUhhMkU1bEFPd241Q3NDeXN2YlJkMUNhM1h3aEI=
  databaseUrl: cG9zdGdyZXM6Ly9wb3N0Z3JlczpxRVZJSGEyRTVsQU93bjVDc0N5c3ZiUmQxQ2EzWHdoQkByZWxlYXNlLW5hbWUtcG9zdGdyZXNxbDo1NDMyL2hhc3VyYQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-hbp
type: Opaque
data:
  adminSecret: V0NHZ0d0YjFqU3B6SG8zMlVSOWhicTBmcWFYNnNhamdRS3BCSHdmME93YUZuaWRHWDl5azk0RWVMb3k1eExJSw==
  cookies.secret: ZUpWVkNzTE1rdVdJaTh3TEduVzNsR3lEMnpIQVNudzlTclk4UG9XaFJxMlhIUVJWZjhjRTdQZTFObE9FWWNYYQ==
  jwt.secret: eyJ0eXBlIjogIkhTMjU2IiwgImtleSI6ICJkekU5a2JNWlJwRnlPMm9oZkFtOEVVeW5KY0hqVzM5Tnd4TmdpUXJ0SmZSMlZ3ZXBoZjM2YUxQSHRCeVo0TEVPIiwgImNsYWltc19uYW1lc3BhY2UiOiAiaHR0cHM6Ly9oYXN1cmEuaW8vand0L2NsYWltcyJ9
  jwt.key: ZHpFOWtiTVpScEZ5TzJvaGZBbThFVXluSmNIalczOU53eE5naVFydEpmUjJWd2VwaGYzNmFMUEh0QnlaNExFTw==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-hasura-metadata
  namespace: DyoOQD
binaryData: null
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-hasura-migrations
  namespace: DyoOQD
binaryData: null
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-hasura
  namespace: DyoOQD
data:
  jwt.algorithm: HS256
  jwt.claims.namespace: https://hasura.io/jwt/claims
  endpoint: http://release-name-hasura/v1/graphql
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-hbp
  namespace: DyoOQD
data:
  jwt.expires.in: "15"
  jwt.expires.refresh: "43200"
  jwt.customFields: ""
  jwt.algorithm: HS256
  jwt.claims.namespace: https://hasura.io/jwt/claims
  hasura.endpoint: http://release-name-hasura/v1/graphql
  emails.enabled: "false"
  limiter.max-requests: "1000"
  limiter.time-frame: "900000"
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.10.13
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.10.13
    release: release-name
    heritage: Helm
  annotations: null
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: release-name
    role: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-hasura
  labels:
    helm.sh/chart: hasura-0.1.5
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.3.3.cli-migrations-v2
    app.kubernetes.io/managed-by: Helm
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
    traefik.ingress.kubernetes.io/session-cookie-name: sticky
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-hbp
  labels:
    helm.sh/chart: hbp-0.1.9
    app.kubernetes.io/name: hbp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hbp
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-vue
  labels:
    helm.sh/chart: vue-0.1.6
    app.kubernetes.io/name: vue
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: vue
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-hasura
  labels:
    helm.sh/chart: hasura-0.1.5
    app.kubernetes.io/name: hasura
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: v1.3.3.cli-migrations-v2
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hasura
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 993ec325cf0090c6d5e6e8577eac70875d2b46c9aafbe158baa5305fb61a3c08
        checksum/hasura-secrets: b50002f29f3a70ce0b20d8b9501696a61b4fc42b1076c18ef28122f92c672b6a
        checksum/postgresql-secrets: f5d99c2aa2f6f0ff7b363b559ae2ee0eade48119ce3bf2f551fef2aea3ee310d
      labels:
        app.kubernetes.io/name: hasura
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-hasura
      securityContext: {}
      volumes:
        - name: hasura-migrations
          configMap:
            name: release-name-hasura-migrations
        - name: hasura-metadata
          configMap:
            name: release-name-hasura-metadata
      containers:
        - name: hasura
          volumeMounts: null
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: hasura/graphql-engine:v1.3.3.cli-migrations-v2
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          env:
            - name: HASURA_GRAPHQL_MIGRATIONS_DIR
              value: /hasura-migrations
            - name: HASURA_GRAPHQL_METADATA_DIR
              value: /hasura-metadata
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: "false"
            - name: HASURA_GRAPHQL_CONSOLE_ASSETS_DIR
              value: /srv/console-assets
            - name: HASURA_GRAPHQL_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: databaseUrl
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-hasura
                  key: adminSecret
            - name: HASURA_GRAPHQL_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-hasura
                  key: jwt.secret
            - name: HASURA_GRAPHQL_UNAUTHORIZED_ROLE
              value: anonymous
            - name: HASURA_GRAPHQL_CORS_DOMAIN
              value: '*'
            - name: HASURA_GRAPHQL_DISABLE_CORS
              value: "false"
            - name: HASURA_GRAPHQL_WS_READ_COOKIE
              value: "false"
            - name: HASURA_GRAPHQL_ENABLE_TELEMETRY
              value: "false"
            - name: HASURA_GRAPHQL_EVENTS_HTTP_POOL_SIZE
              value: "100"
            - name: HASURA_GRAPHQL_EVENTS_FETCH_INTERVAL
              value: "3000000"
            - name: HASURA_GRAPHQL_PG_STRIPES
              value: "1"
            - name: HASURA_GRAPHQL_PG_CONNECTIONS
              value: "50"
            - name: HASURA_GRAPHQL_PG_TIMEOUT
              value: "180"
            - name: HASURA_GRAPHQL_USE_PREPARED_STATEMENTS
              value: "true"
            - name: HASURA_GRAPHQL_TX_ISOLATION
              value: read-committed
            - name: HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES
              value: "false"
            - name: HASURA_GRAPHQL_ENABLED_APIS
              value: metadata,graphql,pgdump
            - name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
              value: startup,http-log,webhook-log,websocket-log
            - name: HASURA_GRAPHQL_LOG_LEVEL
              value: info
            - name: HASURA_GRAPHQL_DEV_MODE
              value: "false"
            - name: HASURA_GRAPHQL_ADMIN_INTERNAL_ERRORS
              value: "true"
            - name: HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL
              value: "1000"
            - name: HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_BATCH_SIZE
              value: "100"
            - name: HASURA_GRAPHQL_ENABLE_ALLOWLIST
              value: "false"
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-hbp
  labels:
    helm.sh/chart: hbp-0.1.9
    app.kubernetes.io/name: hbp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 2.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hbp
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        rollme: a05bv
      labels:
        app.kubernetes.io/name: hbp
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-hbp
      securityContext: {}
      volumes: null
      containers:
        - name: hbp
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: nhost/hasura-backend-plus:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          volumeMounts: null
          env:
            - name: HASURA_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: release-name-hbp
                  key: hasura.endpoint
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-hasura
                  key: adminSecret
            - name: JWT_KEY
              valueFrom:
                secretKeyRef:
                  name: release-name-hasura
                  key: jwt.key
            - name: JWT_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura
                  key: jwt.algorithm
            - name: JWT_CLAIMS_NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: release-name-hasura
                  key: jwt.claims.namespace
            - name: JWT_EXPIRES_IN
              valueFrom:
                configMapKeyRef:
                  name: release-name-hbp
                  key: jwt.expires.in
            - name: JWT_REFRESH_EXPIRES_IN
              valueFrom:
                configMapKeyRef:
                  name: release-name-hbp
                  key: jwt.expires.refresh
            - name: JWT_CUSTOM_FIELDS
              valueFrom:
                configMapKeyRef:
                  name: release-name-hbp
                  key: jwt.customFields
            - name: AUTO_MIGRATE
              value: "true"
            - name: AUTH_ENABLE
              value: "true"
            - name: AUTH_LOCAL_USERS_ENABLE
              value: "true"
            - name: CHANGE_EMAIL_ENABLE
              value: "true"
            - name: NOTIFY_EMAIL_CHANGE
              value: "false"
            - name: ANONYMOUS_USERS_ENABLE
              value: "false"
            - name: ALLOW_USER_SELF_DELETE
              value: "false"
            - name: VERIFY_EMAILS
              value: "false"
            - name: LOST_PASSWORD_ENABLE
              value: "false"
            - name: ALLOWED_EMAIL_DOMAINS
              value: ""
            - name: DEFAULT_USER_ROLE
              value: user
            - name: DEFAULT_ANONYMOUS_ROLE
              value: anonymous
            - name: AUTO_ACTIVATE_NEW_USERS
              value: "true"
            - name: HIBP_ENABLE
              value: "false"
            - name: REGISTRATION_CUSTOM_FIELDS
              value: ""
            - name: MIN_PASSWORD_LENGTH
              value: "3"
            - name: DEFAULT_ALLOWED_USER_ROLES
              value: user,me
            - name: COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-hbp
                  key: cookies.secret
            - name: COOKIE_SECURE
              value: "false"
            - name: COOKIE_SAME_SITE
              value: lax
            - name: MFA_ENABLE
              value: "true"
            - name: OTP_ISSUER
              value: HBP
            - name: REDIRECT_URL_SUCCESS
              value: ""
            - name: REDIRECT_URL_ERROR
              value: ""
            - name: MINIO_NAME
              value: release-name-hbpfalse
            - name: STORAGE_ENABLE
              value: "false"
            - name: MAX_REQUESTS
              valueFrom:
                configMapKeyRef:
                  name: release-name-hbp
                  key: limiter.max-requests
            - name: TIME_FRAME
              valueFrom:
                configMapKeyRef:
                  name: release-name-hbp
                  key: limiter.time-frame
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-vue
  labels:
    helm.sh/chart: vue-0.1.6
    app.kubernetes.io/name: vue
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vue
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        rollme: 1qTi5
      labels:
        app.kubernetes.io/name: vue
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-vue
      securityContext: {}
      containers:
        - name: vue
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: :latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env: null
          resources:
            seccompProfile:
              type: RuntimeDefault
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.10.13
    release: release-name
    heritage: Helm
  annotations: null
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: release-name
      role: master
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.10.13
        release: release-name
        heritage: Helm
        role: master
    spec:
      securityContext:
        fsGroup: 1001
      containers:
        - name: release-name-postgresql
          image: docker.io/bitnami/postgresql:12.3.0
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            seccompProfile:
              type: RuntimeDefault
          securityContext:
            runAsUser: 11955
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: hasura
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "hasura" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "hasura" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: null
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: release-name-hasura
  annotations: null
  labels: null
spec:
  rules: null
  tls: null
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: release-name-hbp
  annotations: null
  labels: null
spec:
  rules: null
  tls: null
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: release-name-vue
  annotations: null
  labels: null
spec:
  rules: null
  tls: null
