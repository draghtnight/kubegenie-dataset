[
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-iotagent-json",
      "labels": {
        "app.kubernetes.io/name": "iotagent-json",
        "helm.sh/chart": "iotagent-json-0.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.14.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "config.js": "let config = {};\n\n/**\n * Configuration for the HTTP transport binding.\n */\nconfig.http = {\n    /**\n     * South Port where the Ultralight transport binding for HTTP will be listening for device requests.\n     */\n    port: 7896,\n    /**\n     * HTTP Timeout for the http command endpoint (in milliseconds).\n     */\n    timeout: 1000\n    /**\n     * Path to your private key for HTTPS binding\n     */\n    // key: <path_to_private_key>\n    /**\n     * Path to your certificate for HTTPS binding\n     */\n    // cert: <path_to_cert>\n};\n\nconfig.iota = {\n    /**\n     * Configures the log level. Appropriate values are: FATAL, ERROR, INFO, WARN and DEBUG.\n     */\n    logLevel: 'DEBUG',\n\n    /**\n     * When this flag is active, the IoTAgent will add the TimeInstant attribute to every entity created, as well\n     * as a TimeInstant metadata to each attribute, with the current timestamp.\n     */\n    timestamp: true,\n\n    /**\n     * Context Broker configuration. Defines the connection information to the instance of the Context Broker where\n     * the IoT Agent will send the device data.\n     */\n    contextBroker: {\n        /**\n         * Host where the Context Broker is located.\n         */\n        host: 'orion',\n\n        /**\n         * Port where the Context Broker is listening.\n         */\n        port: '1026'\n    },\n\n    /**\n     * Configuration of the North Port of the IoT Agent.\n     */\n    server: {\n        /**\n         * Port where the IoT Agent will be listening for NGSI and Provisioning requests.\n         */\n        port: 4041\n    },\n\n    /**\n     * Configuration for secured access to instances of the Context Broker secured with a PEP Proxy.\n     * For the authentication mechanism to work, the authentication attribute in the configuration has to be fully\n     * configured, and the authentication.enabled subattribute should have the value `true`.\n     *\n     * The Username and password should be considered as sensitive data and should not be stored in plaintext.\n     * Either encrypt the config and decrypt when initializing the instance or use environment variables secured by\n     * docker secrets.\n     */\n\n    /**\n     * Configuration for the IoT Manager. If the IoT Agent is part of a configuration composed of multiple IoTAgents\n     * coordinated by an IoT Manager, this section defines the information that will be used to connect with that\n     * manager.\n     */\n    /**\n     * Defines the configuration for the Device Registry, where all the information about devices and configuration\n     * groups will be stored. There are currently just two types of registries allowed:\n     *\n     * - 'memory': transient memory-based repository for testing purposes. All the information in the repository is\n     *             wiped out when the process is restarted.\n     *\n     * - 'mongodb': persistent MongoDB storage repository. All the details for the MongoDB configuration will be read\n     *             from the 'mongoDb' configuration property.\n     */\n    deviceRegistry: {\n        type: 'memory'\n    },\n\n    /**\n     * Mongo DB configuration section. This section will only be used if the deviceRegistry property has the type\n     * 'mongodb'.\n     */\n    /**\n     *  Types array for static configuration of services. Check documentation in the IoT Agent Library for Node.js for\n     *  further details:\n     *\n     *      https://github.com/telefonicaid/iotagent-node-lib#type-configuration\n     */\n    types: {},\n\n    /**\n     * Default service, for IoT Agent installations that won't require preregistration.\n     */\n    service: 'howtoService',\n\n    /**\n     * Default subservice, for IoT Agent installations that won't require preregistration.\n     */\n    subservice: '/howto',\n\n    /**\n     * URL Where the IoT Agent Will listen for incoming updateContext and queryContext requests (for commands and\n     * passive attributes). This URL will be sent in the Context Registration requests.\n     */\n    providerUrl: 'http://localhost:4041',\n\n    /**\n     * Default maximum expire date for device registrations.\n     */\n    deviceRegistrationDuration: 'P20Y',\n\n    /**\n     * Default type, for IoT Agent installations that won't require preregistration.\n     */\n    defaultType: 'Thing',\n\n    /**\n     * flag indicating whether the incoming measures to the IoTAgent should be processed as per the \"attributes\" field.\n     */\n    explicitAttrs: false\n};\n\n/**\n * flag indicating whether the incoming notifications to the IoTAgent should be processed using the bidirectionality\n * plugin from the latest versions of the library or the UL-specific configuration retrieval mechanism.\n */\nconfig.configRetrieval = false;\n\n/**\n * Default API Key, to use with device that have been provisioned without a Configuration Group.\n */\nconfig.defaultKey = 'TEF';\n\n/**\n * Default transport protocol when no transport is provisioned through the Device Provisioning API.\n */\nconfig.defaultTransport = 'HTTP';\n\nmodule.exports = config;"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-iotagent-json",
      "labels": {
        "app.kubernetes.io/name": "iotagent-json",
        "helm.sh/chart": "iotagent-json-0.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.14.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "http-north",
          "port": 4041,
          "protocol": "TCP",
          "targetPort": 4041
        },
        {
          "name": "http-south",
          "port": 7896,
          "protocol": "TCP",
          "targetPort": 7896
        },
        {
          "name": "mqtt",
          "port": 1883,
          "protocol": "TCP",
          "targetPort": 1883
        },
        {
          "name": "amqp",
          "port": 5672,
          "protocol": "TCP",
          "targetPort": 5672
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "iotagent-json",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-iotagent-json",
      "labels": {
        "app.kubernetes.io/name": "iotagent-json",
        "helm.sh/chart": "iotagent-json-0.0.3",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "1.14.0",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 3,
      "strategy": {
        "rollingUpdate": {
          "maxSurge": 1,
          "maxUnavailable": 0
        },
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "iotagent-json",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "iotagent-json",
            "helm.sh/chart": "iotagent-json-0.0.3",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/version": "1.14.0",
            "app.kubernetes.io/managed-by": "Helm"
          }
        },
        "spec": {
          "serviceAccountName": "default",
          "containers": [
            {
              "name": "iotagent-json",
              "imagePullPolicy": "IfNotPresent",
              "image": "fiware/iotagent-json:1.14.0",
              "ports": [
                {
                  "name": "http-north",
                  "containerPort": 4041,
                  "protocol": "TCP"
                },
                {
                  "name": "http-south",
                  "containerPort": 7896,
                  "protocol": "TCP"
                },
                {
                  "name": "mqtt",
                  "containerPort": 1883,
                  "protocol": "TCP"
                },
                {
                  "name": "amqp",
                  "containerPort": 5672,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/iot/about",
                  "port": "http-north"
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/iot/about",
                  "port": "http-north"
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 31
              },
              "env": null,
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "config-volume",
                  "mountPath": "/opt/iotajson/config.js",
                  "subPath": "config.js"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config-volume",
              "configMap": {
                "name": "release-name-iotagent-json",
                "items": [
                  {
                    "key": "config.js",
                    "path": "config.js"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  }
]