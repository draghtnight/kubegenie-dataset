[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-ipfs",
      "labels": {
        "app.kubernetes.io/name": "ipfs",
        "helm.sh/chart": "ipfs-1.0.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-ipfs",
      "labels": {
        "app.kubernetes.io/name": "ipfs",
        "helm.sh/chart": "ipfs-1.0.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "IPFS_PATH": "/data/ipfs",
      "IPFS_PROFILE": "server",
      "IPFS_FD_MAX": "8192",
      "LIBP2P_TCP_REUSEPORT": "true",
      "IPFS_LOGGING": "error",
      "IPFS_LOGGING_FMT": "color",
      "IPFS_FUSE_DEBUG": "false",
      "YAMUX_DEBUG": "false"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-ipfs-entrypoint",
      "labels": {
        "app.kubernetes.io/name": "ipfs",
        "helm.sh/chart": "ipfs-1.0.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "start_ipfs": "#!/bin/sh\nset -e\nuser=ipfs\nrepo=\"$IPFS_PATH\"\n\nif [ `id -u` -eq 0 ]; then\n  echo \"Changing user to $user\"\n  # ensure folder is writable\n  su-exec \"$user\" test -w \"$repo\" || chown -R -- \"$user\" \"$repo\"\n  # restart script with new privileges\n  exec su-exec \"$user\" \"$0\" \"$@\"\nfi\n\n# 2nd invocation with regular user\nipfs version\n\nif [ -e \"$repo/config\" ]; then\n  echo \"Found IPFS fs-repo at $repo\"\nelse\n  case \"$IPFS_PROFILE\" in\n    \"\") INIT_ARGS=\"\" ;;\n    *) INIT_ARGS=\"--profile=$IPFS_PROFILE\" ;;\n  esac\n  ipfs init $INIT_ARGS\n  ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001\n  ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080\n  ipfs config --json Peering.Peers \"[{\\\"Addrs\\\":[\\\"/ip6/2606:4700:60::6/tcp/4009\\\",\\\"/ip4/172.65.0.13/tcp/4009\\\"],\\\"ID\\\": \\\"QmcfgsJsMtx6qJb74akCw1M24X1zFwgGo11h1cuhwQjtJP\\\"},{\\\"Addrs\\\":[\\\"/dnsaddr/fra1-1.hostnodes.pinata.cloud\\\"],\\\"ID\\\": \\\"QmWaik1eJcGHq1ybTWe7sezRfqKNcDRNkeBaLnGwQJz1Cj\\\"},{\\\"Addrs\\\":[\\\"/dnsaddr/fra1-2.hostnodes.pinata.cloud\\\"],\\\"ID\\\": \\\"QmNfpLrQQZr5Ns9FAJKpyzgnDL2GgC6xBug1yUZozKFgu4\\\"},{\\\"Addrs\\\":[\\\"/dnsaddr/fra1-3.hostnodes.pinata.cloud\\\"],\\\"ID\\\": \\\"QmPo1ygpngghu5it8u4Mr3ym6SEU2Wp2wA66Z91Y1S1g29\\\"},{\\\"Addrs\\\":[\\\"/dnsaddr/nyc1-1.hostnodes.pinata.cloud\\\"],\\\"ID\\\": \\\"QmRjLSisUCHVpFa5ELVvX3qVPfdxajxWJEHs9kN3EcxAW6\\\"},{\\\"Addrs\\\":[\\\"/dnsaddr/nyc1-2.hostnodes.pinata.cloud\\\"],\\\"ID\\\": \\\"QmPySsdmbczdZYBpbi2oq2WMJ8ErbfxtkG8Mo192UHkfGP\\\"},{\\\"Addrs\\\":[\\\"/dnsaddr/nyc1-3.hostnodes.pinata.cloud\\\"],\\\"ID\\\": \\\"QmSarArpxemsPESa6FNkmuu9iSE1QWqPX2R3Aw6f5jq4D5\\\"},{\\\"Addrs\\\":[\\\"/dns/cluster0.fsn.dwebops.pub\\\"],\\\"ID\\\": \\\"QmUEMvxS2e7iDrereVYc5SWPauXPyNwxcy9BXZrC1QTcHE\\\"},{\\\"Addrs\\\":[\\\"/dns/cluster1.fsn.dwebops.pub\\\"],\\\"ID\\\": \\\"QmNSYxZAiJHeLdkBg38roksAR9So7Y5eojks1yjEcUtZ7i\\\"},{\\\"Addrs\\\":[\\\"/dns/cluster2.fsn.dwebops.pub\\\"],\\\"ID\\\": \\\"QmUd6zHcbkbcs7SMxwLs48qZVX3vpcM8errYS7xEczwRMA\\\"},{\\\"Addrs\\\":[\\\"/dns/cluster3.fsn.dwebops.pub\\\"],\\\"ID\\\": \\\"QmbVWZQhCGrS7DhgLqWbgvdmKN7JueKCREVanfnVpgyq8x\\\"},{\\\"Addrs\\\":[\\\"/dns/cluster4.fsn.dwebops.pub\\\"],\\\"ID\\\": \\\"QmdnXwLrC8p1ueiq2Qya8joNvk3TVVDAut7PrikmZwubtR\\\"},{\\\"Addrs\\\":[\\\"/dns4/nft-storage-am6.nft.dwebops.net/tcp/18402\\\"],\\\"ID\\\": \\\"12D3KooWCRscMgHgEo3ojm8ovzheydpvTEqsDtq7Vby38cMHrYjt\\\"},{\\\"Addrs\\\":[\\\"/dns4/nft-storage-dc13.nft.dwebops.net/tcp/18402\\\"],\\\"ID\\\": \\\"12D3KooWQtpvNvUYFzAo1cRYkydgk15JrMSHp6B6oujqgYSnvsVm\\\"},{\\\"Addrs\\\":[\\\"/dns4/nft-storage-sv15.nft.dwebops.net/tcp/18402\\\"],\\\"ID\\\": \\\"12D3KooWQcgCwNCTYkyLXXQSZuL5ry1TzpM8PRe9dKddfsk1BxXZ\\\"},{\\\"Addrs\\\":[\\\"/ip4/104.210.43.77\\\"],\\\"ID\\\": \\\"QmR69wtWUMm1TWnmuD4JqC1TWLZcc8iR2KrTenfZZbiztd\\\"}]\"\n\n  # Set up the swarm key, if provided\n\n  SWARM_KEY_FILE=\"$repo/swarm.key\"\n  SWARM_KEY_PERM=0400\n\n  # Create a swarm key from a given environment variable\n  if [ ! -z \"$IPFS_SWARM_KEY\" ] ; then\n    echo \"Copying swarm key from variable...\"\n    echo -e \"$IPFS_SWARM_KEY\" >\"$SWARM_KEY_FILE\" || exit 1\n    chmod $SWARM_KEY_PERM \"$SWARM_KEY_FILE\"\n  fi\n\n  # Unset the swarm key variable\n  unset IPFS_SWARM_KEY\n\n  # Check during initialization if a swarm key was provided and\n  # copy it to the ipfs directory with the right permissions\n  # WARNING: This will replace the swarm key if it exists\n  if [ ! -z \"$IPFS_SWARM_KEY_FILE\" ] ; then\n    echo \"Copying swarm key from file...\"\n    install -m $SWARM_KEY_PERM \"$IPFS_SWARM_KEY_FILE\" \"$SWARM_KEY_FILE\" || exit 1\n  fi\n\n  # Unset the swarm key file variable\n  unset IPFS_SWARM_KEY_FILE\n\nfi\n\nexec ipfs \"$@\"\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-ipfs",
      "labels": {
        "app.kubernetes.io/name": "ipfs",
        "helm.sh/chart": "ipfs-1.0.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 4001,
          "targetPort": "p2p-tcp",
          "protocol": "TCP",
          "name": "p2p-tcp"
        },
        {
          "port": 4001,
          "targetPort": "p2p-udp",
          "protocol": "UDP",
          "name": "p2p-udp"
        },
        {
          "port": 5001,
          "targetPort": "api",
          "protocol": "TCP",
          "name": "api"
        },
        {
          "port": 8080,
          "targetPort": "gateway",
          "protocol": "TCP",
          "name": "gateway"
        },
        {
          "port": 8081,
          "targetPort": "websocket",
          "protocol": "TCP",
          "name": "websocket"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "ipfs",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "kind": "StatefulSet",
    "apiVersion": "apps/v1",
    "metadata": {
      "name": "release-name-ipfs",
      "labels": {
        "app.kubernetes.io/name": "ipfs",
        "helm.sh/chart": "ipfs-1.0.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "ipfs",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "serviceName": "release-name-ipfs",
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "ipfs",
            "app.kubernetes.io/instance": "release-name"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001,
            "runAsUser": 1001
          },
          "serviceAccountName": "release-name-ipfs",
          "priorityClassName": "",
          "initContainers": [
            {
              "name": "init-chown",
              "image": "busybox:1.34",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 0
              },
              "command": [
                "chown",
                "-R",
                "1001:1001",
                "/data/ipfs"
              ],
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/data/ipfs"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "release-name-ipfs",
              "image": "ipfs/go-ipfs:v0.12.0",
              "imagePullPolicy": "IfNotPresent",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-ipfs"
                  }
                }
              ],
              "ports": [
                {
                  "containerPort": 4001,
                  "name": "p2p-tcp",
                  "protocol": "TCP"
                },
                {
                  "containerPort": 4001,
                  "name": "p2p-udp",
                  "protocol": "UDP"
                },
                {
                  "containerPort": 5001,
                  "name": "api",
                  "protocol": "TCP"
                },
                {
                  "containerPort": 8080,
                  "name": "gateway",
                  "protocol": "TCP"
                },
                {
                  "containerPort": 8081,
                  "name": "websocket",
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/data/ipfs"
                },
                {
                  "name": "fuse-ipfs",
                  "mountPath": "/ipfs"
                },
                {
                  "name": "fuse-ipns",
                  "mountPath": "/ipns"
                },
                {
                  "name": "entrypoint",
                  "subPath": "start_ipfs",
                  "mountPath": "/usr/local/bin/start_ipfs"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/debug/metrics/prometheus",
                  "port": "api"
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 3
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/debug/metrics/prometheus",
                  "port": "api"
                },
                "initialDelaySeconds": 15,
                "periodSeconds": 3
              }
            }
          ],
          "volumes": [
            {
              "name": "entrypoint",
              "configMap": {
                "name": "release-name-ipfs-entrypoint",
                "defaultMode": 511
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "labels": {
              "app.kubernetes.io/name": "ipfs",
              "helm.sh/chart": "ipfs-1.0.2",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/managed-by": "Helm"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "storageClassName": null,
            "resources": {
              "requests": {
                "storage": "25Gi"
              }
            }
          }
        },
        {
          "metadata": {
            "name": "fuse-ipfs",
            "labels": {
              "app.kubernetes.io/name": "ipfs",
              "helm.sh/chart": "ipfs-1.0.2",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/managed-by": "Helm"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "storageClassName": null,
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        },
        {
          "metadata": {
            "name": "fuse-ipns",
            "labels": {
              "app.kubernetes.io/name": "ipfs",
              "helm.sh/chart": "ipfs-1.0.2",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/managed-by": "Helm"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "storageClassName": null,
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        }
      ]
    }
  }
]