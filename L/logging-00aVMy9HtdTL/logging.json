[
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "elasticsearch-master-pdb"
    },
    "spec": {
      "maxUnavailable": 1,
      "selector": {
        "matchLabels": {
          "app": "elasticsearch-master"
        }
      }
    }
  },
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "release-name-logstash",
      "labels": {
        "app": "logstash",
        "chart": "logstash-1.4.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "logstash",
          "release": "release-name"
        }
      },
      "maxUnavailable": 1
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-logstash-patterns",
      "labels": {
        "app": "logstash",
        "chart": "logstash-1.4.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": null
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-logstash-pipeline",
      "labels": {
        "app": "logstash",
        "chart": "logstash-1.4.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "input_main": "input {\n  kafka {\n    auto_offset_reset => \"earliest\" # get all previous items from new topics\n    bootstrap_servers => \"cord-kafka:9092\"\n    client_id => \"logstash_ck\"\n    codec => json { charset => \"UTF-8\" }\n    consumer_threads => 1\n    decorate_events => true\n    group_id => \"logstash_ck\"\n    metadata_max_age_ms => 60000 # recheck for new topics every minute\n    # other topics that are not indexed: xos.gui_events, voltha.kpis, voltha.heartbeat\n    topics_pattern => '.*\\.events|dhcp.*|onos.*|.*\\.log.*'\n    type => \"cord-kafka\"\n  }\n}",
      "filter_main": "filter {\n  mutate {\n    add_field => {\n      \"kafka_topic\" => \"%{[@metadata][kafka][topic]}\"\n      \"kafka_key\" => \"%{[@metadata][kafka][key]}\"\n      \"kafka_timestamp\" => \"%{[@metadata][kafka][timestamp]}\"\n    }\n  }\n\n  json {\n    source => \"data\"\n    target => \"data\"\n    skip_on_invalid_json => true\n  }\n}",
      "output_main": "output {\n  elasticsearch {\n    hosts => [\"${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}\"]\n  }\n}"
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "elasticsearch-master",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {}
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "ports": [
        {
          "name": "http",
          "protocol": "TCP",
          "port": 9200
        },
        {
          "name": "transport",
          "protocol": "TCP",
          "port": 9300
        }
      ]
    }
  },
  {
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
      "name": "elasticsearch-master-headless",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "selector": {
        "app": "elasticsearch-master"
      },
      "ports": [
        {
          "name": "http",
          "port": 9200
        },
        {
          "name": "transport",
          "port": 9300
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-kibana",
      "labels": {
        "app": "kibana",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "type": "NodePort",
      "ports": [
        {
          "port": 5601,
          "nodePort": 30601,
          "protocol": "TCP",
          "name": "http",
          "targetPort": 5601
        }
      ],
      "selector": {
        "app": "kibana",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-logstash",
      "labels": {
        "app": "logstash",
        "chart": "logstash-1.4.2",
        "release": "release-name",
        "heritage": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "beats",
          "port": 5044,
          "protocol": "TCP",
          "targetPort": "beats"
        }
      ],
      "selector": {
        "app": "logstash",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-kibana",
      "labels": {
        "app": "kibana",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "strategy": {
        "type": "Recreate"
      },
      "selector": {
        "matchLabels": {
          "app": "kibana",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "kibana",
            "release": "release-name"
          },
          "annotations": null
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1000
          },
          "volumes": null,
          "containers": [
            {
              "name": "kibana",
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "runAsNonRoot": true,
                "runAsUser": 10179,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "image": "docker.elastic.co/kibana/kibana:7.10.1",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "ELASTICSEARCH_HOSTS",
                  "value": "http://elasticsearch-master:9200"
                },
                {
                  "name": "SERVER_HOST",
                  "value": "0.0.0.0"
                },
                {
                  "name": "NODE_OPTIONS",
                  "value": "--max-old-space-size=1800"
                }
              ],
              "readinessProbe": {
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 3,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "#!/usr/bin/env bash -e\n\n# Disable nss cache to avoid filling dentry cache when calling curl\n# This is required with Kibana Docker using nss < 3.52\nexport NSS_SDB_USE_CACHE=no\n\nhttp () {\n    local path=\"${1}\"\n    set -- -XGET -s --fail -L\n\n    if [ -n \"${ELASTICSEARCH_USERNAME}\" ] && [ -n \"${ELASTICSEARCH_PASSWORD}\" ]; then\n      set -- \"$@\" -u \"${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\"\n    fi\n\n    STATUS=$(curl --output /dev/null --write-out \"%{http_code}\" -k \"$@\" \"http://localhost:5601${path}\")\n    if [[ \"${STATUS}\" -eq 200 ]]; then\n      exit 0\n    fi\n\n    echo \"Error: Got HTTP code ${STATUS} but expected a 200\"\n    exit 1\n}\n\nhttp \"/app/kibana\"\n"
                  ]
                }
              },
              "ports": [
                {
                  "containerPort": 5601
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "1000m",
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": "1000m",
                  "memory": "2Gi"
                }
              },
              "volumeMounts": null
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "elasticsearch-master",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "elasticsearch",
        "app": "elasticsearch-master"
      },
      "annotations": {
        "esMajorVersion": "7"
      }
    },
    "spec": {
      "serviceName": "elasticsearch-master-headless",
      "selector": {
        "matchLabels": {
          "app": "elasticsearch-master"
        }
      },
      "replicas": 3,
      "podManagementPolicy": "Parallel",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "elasticsearch-master"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "30Gi"
              }
            }
          }
        }
      ],
      "template": {
        "metadata": {
          "name": "elasticsearch-master",
          "labels": {
            "release": "release-name",
            "chart": "elasticsearch",
            "app": "elasticsearch-master"
          },
          "annotations": null
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1000,
            "runAsUser": 1000
          },
          "affinity": {
            "podAntiAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": [
                {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "app",
                        "operator": "In",
                        "values": [
                          "elasticsearch-master"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              ]
            }
          },
          "terminationGracePeriodSeconds": 120,
          "volumes": null,
          "enableServiceLinks": true,
          "initContainers": [
            {
              "name": "configure-sysctl",
              "securityContext": {
                "runAsUser": 10402,
                "privileged": true,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                }
              },
              "image": "docker.elastic.co/elasticsearch/elasticsearch:7.10.1",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sysctl",
                "-w",
                "vm.max_map_count=262144"
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "containers": [
            {
              "name": "elasticsearch",
              "securityContext": {
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "runAsNonRoot": true,
                "runAsUser": 10720,
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true
              },
              "image": "docker.elastic.co/elasticsearch/elasticsearch:7.10.1",
              "imagePullPolicy": "IfNotPresent",
              "readinessProbe": {
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "#!/usr/bin/env bash -e\n# If the node is starting up wait for the cluster to be ready (request params: \"wait_for_status=green&timeout=1s\" )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\n# Disable nss cache to avoid filling dentry cache when calling curl\n# This is required with Elasticsearch Docker using nss < 3.52\nexport NSS_SDB_USE_CACHE=no\n\nhttp () {\n  local path=\"${1}\"\n  local args=\"${2}\"\n  set -- -XGET -s\n\n  if [ \"$args\" != \"\" ]; then\n    set -- \"$@\" $args\n  fi\n\n  if [ -n \"${ELASTIC_USERNAME}\" ] && [ -n \"${ELASTIC_PASSWORD}\" ]; then\n    set -- \"$@\" -u \"${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}\"\n  fi\n\n  curl --output /dev/null -k \"$@\" \"http://127.0.0.1:9200${path}\"\n}\n\nif [ -f \"${START_FILE}\" ]; then\n  echo 'Elasticsearch is already running, lets check the node is healthy'\n  HTTP_CODE=$(http \"/\" \"-w %{http_code}\")\n  RC=$?\n  if [[ ${RC} -ne 0 ]]; then\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}\"\n    exit ${RC}\n  fi\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\n  if [[ ${HTTP_CODE} == \"200\" ]]; then\n    exit 0\n  elif [[ ${HTTP_CODE} == \"503\" && \"7\" == \"6\" ]]; then\n    exit 0\n  else\n    echo \"curl --output /dev/null -k -XGET -s -w '%{http_code}' \\${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\"\n    exit 1\n  fi\n\nelse\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \"wait_for_status=green&timeout=1s\" )'\n  if http \"/_cluster/health?wait_for_status=green&timeout=1s\" \"--fail\" ; then\n    touch ${START_FILE}\n    exit 0\n  else\n    echo 'Cluster is not yet ready (request params: \"wait_for_status=green&timeout=1s\" )'\n    exit 1\n  fi\nfi\n"
                  ]
                },
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 3,
                "timeoutSeconds": 5
              },
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9200
                },
                {
                  "name": "transport",
                  "containerPort": 9300
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "1000m",
                  "memory": "2Gi"
                },
                "requests": {
                  "cpu": "1000m",
                  "memory": "2Gi"
                }
              },
              "env": [
                {
                  "name": "node.name",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "cluster.initial_master_nodes",
                  "value": "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
                },
                {
                  "name": "discovery.seed_hosts",
                  "value": "elasticsearch-master-headless"
                },
                {
                  "name": "cluster.name",
                  "value": "elasticsearch"
                },
                {
                  "name": "network.host",
                  "value": "0.0.0.0"
                },
                {
                  "name": "ES_JAVA_OPTS",
                  "value": "-Xmx1g -Xms1g"
                },
                {
                  "name": "node.data",
                  "value": "true"
                },
                {
                  "name": "node.ingest",
                  "value": "true"
                },
                {
                  "name": "node.master",
                  "value": "true"
                },
                {
                  "name": "node.remote_cluster_client",
                  "value": "true"
                }
              ],
              "volumeMounts": [
                {
                  "name": "elasticsearch-master",
                  "mountPath": "/usr/share/elasticsearch/data"
                }
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1beta2",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-logstash",
      "labels": {
        "app": "logstash",
        "chart": "logstash-1.4.2",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-logstash",
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "logstash",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "logstash",
            "release": "release-name"
          },
          "annotations": {
            "checksum/patterns": "a69757e5e9577df9ceada45ef3ea819ea491f266ababe973b7f9d6c42e5d6c5b",
            "checksum/pipeline": "eb1140fef8d902a103cdab1328204c6a4e5b4adb7d21e48fc3be0754a8ff4647"
          }
        },
        "spec": {
          "securityContext": {
            "runAsUser": 1000,
            "fsGroup": 1000
          },
          "containers": [
            {
              "name": "logstash",
              "image": "docker.elastic.co/logstash/logstash-oss:6.5.4",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "monitor",
                  "containerPort": 9600,
                  "protocol": "TCP"
                },
                {
                  "containerPort": 5044,
                  "name": "beats",
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "monitor"
                },
                "initialDelaySeconds": 120
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "monitor"
                },
                "initialDelaySeconds": 120
              },
              "env": [
                {
                  "name": "HTTP_HOST",
                  "value": "0.0.0.0"
                },
                {
                  "name": "HTTP_PORT",
                  "value": "9600"
                },
                {
                  "name": "ELASTICSEARCH_HOST",
                  "value": "logging-elasticsearch-client"
                },
                {
                  "name": "ELASTICSEARCH_PORT",
                  "value": "9200"
                },
                {
                  "name": "CONFIG_RELOAD_AUTOMATIC",
                  "value": "true"
                },
                {
                  "name": "PATH_CONFIG",
                  "value": "/usr/share/logstash/pipeline"
                },
                {
                  "name": "PATH_DATA",
                  "value": "/usr/share/logstash/data"
                },
                {
                  "name": "QUEUE_CHECKPOINT_WRITES",
                  "value": "1"
                },
                {
                  "name": "QUEUE_DRAIN",
                  "value": "true"
                },
                {
                  "name": "QUEUE_MAX_BYTES",
                  "value": "1gb"
                },
                {
                  "name": "QUEUE_TYPE",
                  "value": "persisted"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                },
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "volumeMounts": [
                {
                  "mountPath": "/usr/share/logstash/data",
                  "name": "data"
                },
                {
                  "mountPath": "/usr/share/logstash/patterns",
                  "name": "patterns"
                },
                {
                  "mountPath": "/usr/share/logstash/pipeline",
                  "name": "pipeline"
                }
              ]
            }
          ],
          "terminationGracePeriodSeconds": 30,
          "volumes": [
            {
              "name": "patterns",
              "configMap": {
                "name": "release-name-logstash-patterns"
              }
            },
            {
              "name": "pipeline",
              "configMap": {
                "name": "release-name-logstash-pipeline"
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-szpja-test",
      "annotations": {
        "helm.sh/hook": "test",
        "helm.sh/hook-delete-policy": "hook-succeeded"
      }
    },
    "spec": {
      "securityContext": {
        "fsGroup": 1000,
        "runAsUser": 1000
      },
      "containers": [
        {
          "name": "release-name-igiej-test",
          "image": "docker.elastic.co/elasticsearch/elasticsearch:7.10.1",
          "imagePullPolicy": "IfNotPresent",
          "command": [
            "sh",
            "-c",
            "#!/usr/bin/env bash -e\ncurl -XGET --fail 'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'\n"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]