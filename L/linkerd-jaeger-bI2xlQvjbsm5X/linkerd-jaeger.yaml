kind: ServiceAccount
apiVersion: v1
metadata:
  name: collector
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger-injector
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger
---
kind: Secret
apiVersion: v1
metadata:
  name: jaeger-injector-k8s-tls
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQakNDQWlhZ0F3SUJBZ0lSQUwvL0RQdWhMMG1Ub0tMT3ZVVjlXZ1l3RFFZSktvWklodmNOQVFFTEJRQXcKSmpFa01DSUdBMVVFQXhNYmFtRmxaMlZ5TFdsdWFtVmpkRzl5TG1SbFptRjFiSFF1YzNaak1CNFhEVEl5TURZeApNakV4TWpreU9Wb1hEVEl6TURZeE1qRXhNamt5T1Zvd0pqRWtNQ0lHQTFVRUF4TWJhbUZsWjJWeUxXbHVhbVZqCmRHOXlMbVJsWm1GMWJIUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKdEt0NzlKQUdhMTNkWlJuNGFKVmdrdWI3YzBYUUI1Zmk4ajhaZUQ2d1VBNWxDU0E4L01SU1pDdnJmUVZUamRGTQpyVjV2aGNkalMyWUQwQWI2K3pKSHFaMlQwN0ZYWTBGTDVQaVArU2hpaU5hTm1YV3dXb0tMUzAyclNYV3Zkd29KCkpIcGxBRDFwS2E1LzJKdVFjc2xTdnpOSDhZQlVxOVhjRngyek5IUTg1ZXRncEJnOWpyRXhSTTQvVEpVTFJHemoKNitLWnp5Z1NFeEY4dFJkWnFSaFdDaDIvbTNxNFJiZUhldk1HeFVkdUVRWEtzME40akZ5VnUxdXNxOVd3VHgzRwpsejdDNUpSTHIrMEExSVVjQmZlWlh6aEdBTmh6eThwa0tFTXA4SnBheXB2RWNSbzNSYkIxK3ZBR3lMN2dPK2VqCmJOdk9BYkdENlJzeUFLY2xXclIrVHdJREFRQUJvMmN3WlRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGwKQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0pnWURWUjBSQkI4dwpIWUliYW1GbFoyVnlMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQUl1WFROeEZKSzVpd2p4VnNUQXhrSDZYTUREUjd2OTlaWk1XVGZXRGUxd2ptUGVIa1lSUGRSZmhrRjNnSG0KUGEzNS9qS0xXaUxPWEhFbzZNblZFTGFNN2krQUE1Z05zc2QzcW5GOWkzb3RDbDIwVnBPVDNSUnhpNTRRbm5xZQorNGNUT2c3Y3ZMUGk3V2pLRnJaM3NDMHZqRDNXZ3NXcFFac3NtNnhEWnlDa0ZEL0xOZHJwS1M0b2VqVDVMY3A3CjBLT2tRZDRlWERObEQxWW1UNFVBbUJEOUN4ZlZIQ29rVkZUdGxwUlFtamVUYkc3aHJYbWhjVmVMWDhMcE9yOEcKRHltTlJLMnZkOHpwYW9ucDNJbHQrTGhUc3NsYVZseGxPTjVERUtXM3F0TUtBY0ZiZkVCMkJHV3lkaDUzL29FagpJMDF4Y3pXTWU4TlhlVzFTeTJzOWFzam0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdEt0NzlKQUdhMTNkWlJuNGFKVmdrdWI3YzBYUUI1Zmk4ajhaZUQ2d1VBNWxDU0E4Ci9NUlNaQ3ZyZlFWVGpkRk1yVjV2aGNkalMyWUQwQWI2K3pKSHFaMlQwN0ZYWTBGTDVQaVArU2hpaU5hTm1YV3cKV29LTFMwMnJTWFd2ZHdvSkpIcGxBRDFwS2E1LzJKdVFjc2xTdnpOSDhZQlVxOVhjRngyek5IUTg1ZXRncEJnOQpqckV4Uk00L1RKVUxSR3pqNitLWnp5Z1NFeEY4dFJkWnFSaFdDaDIvbTNxNFJiZUhldk1HeFVkdUVRWEtzME40CmpGeVZ1MXVzcTlXd1R4M0dsejdDNUpSTHIrMEExSVVjQmZlWlh6aEdBTmh6eThwa0tFTXA4SnBheXB2RWNSbzMKUmJCMSt2QUd5TDdnTytlamJOdk9BYkdENlJzeUFLY2xXclIrVHdJREFRQUJBb0lCQVFDbHMxMlZlUDZhUEZXUQpvMWdFTzNSK1p5Q1pvWjdoUi9tYWFpcm04TC91UExXSHdDeVBPMVBCa2RLQ01IOW9ZMXlxNlNEcGxteElPOEVsCmF6R0hiNTd3UHBqVklDSmc0d05EZG9FOWFEK3U5dkNabmFubjZURHVHTWNQTWNPREx3NGhpYXZXbzN3dkFWODUKLzd0a3U2YUx1L0d3MmgxT0dHK3FOOUFqUExTWnZWTCtqZDdHMitGUmQ0L21BbEJoZkg3S1BpOFNqczBUQTJ6SQpyL0ZieHJZeUV3QndXUmEzalFOcUhUckNoSGRaRFN1eUZmejFtQUhGazdKZ0E1ZVg3ZmVZMStyb3dCR0NLNEYxCjdYZ1FIVlRaTTIwN2lJRHl1NjNUMXY4L3RGeXdOVVpXd1U2T3FaeUQyQlQwVGNuSm1ZTTd3NzJnVi9sdXRaMmkKalBFb1ErVnBBb0dCQU1va2pEMEU4RmwzWEs0b2J0bDNZc0N3QXBsSGtnUDM4UDVjTDZoc09Zaythd3o4YUkybwpGRE9tQUF2cHRUQ2Y2SHBnallVRzBLOHN1dTdObWtaNWdxOW5CK2hKYXBidXRNdC9sQTBiNUNFaGZZdzJQMml3CldXWDhaMUE3d0Mza25MbGI4NTFrOFZRUFFkWnY2cmRwRXE0cXVCRmVnMUJyNWpJT3huZzZDMUt0QW9HQkFPVE8KV0RPdGpFa0lYMlZ0akpPaDlhbkE1aEROL1RoSytLRW01VzBpN0hyeEJ5ZytIcFhzczBZSlFaMmRiQUxiS3R6cAorQUF3bnVsYmJHQm9oQWhCd1FoTGtGZWpCbmNsY3I4ZnFrczRaeWdHQlFLNE9zVmpzcmRweFBkTzZ0T2hUM1RjClhLRmRrUVhsOUNVY0kxa1Y4TmF3bUM2MlI2UTZZY3A5RDhkUjZyQnJBb0dCQUkwWDFZc0IxNEdhL3VYUTh3NTMKZGtab2xHZkl2UEpvTFo1ZFdpYUU0K1FYM1VERExYY3l5bWNDaHlYSml0N1Z2cjhzaFp0RWxvU3ZCQXVMRnhQNQozRzN4ekdNbVcyL2VUZk44cVNvOVBZNmlnYTlNYmhYMGdYSGVLMzZsTmc3U2MxSXVER3pmK0ZKa0UrQkpYZHVIClM3S2x2clRnODJjKzZQNG5zZ0JaQTI1QkFvR0JBTFY2aVBEc1RTRzhOMVlPcnZxRjhvRWpGQmZ1R2xOays1RnUKZFhpN3c0Kzd6eTUzSHZGUlhkeEdDVHBIbTEwa2t2bkh4Y0g0em9KTzFrWWRmK1BBcTZlMXI1WWpJMFNyZWpqbgpsNzJ6emZZcjJCdVJIbVJqc0dQVHk3dFFaK2RWd2R6eHo3TFpzT1padnUwVVJXRXFpdXp1QXJiQ00wNnFVOWcwCm02Zy9iQU5qQW9HQUVrUGNHVm5nVWhtajUweW5BWFVkeFROaHJ2RTVCdVNIZUpsTmJiSVY0ck4reUJzRGhERXIKNTc3bzNkUDRPTGFJT3J2QVZtVEwvZFBaQXltMkpFRzBFSzNZdW5HeWdsNXBzZHlyajdRcFJzTzJzaXU3RFRzcwowVzZDVE1LMTMzdnpjRzdDa0E2UlMvZml0UDBNdVZwd2dZUVZzNTJnWTBQRXBiUGFGQTRHQURNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-config
  labels:
    linkerd.io/extension: jaeger
    component: collector
data:
  collector-config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      opencensus:
      zipkin:
      jaeger:
        protocols:
          grpc:
          thrift_http:
          thrift_compact:
          thrift_binary:
    processors:
      batch:
    extensions:
      health_check:
    exporters:
      jaeger:
        endpoint: jaeger.${POD_NAMESPACE}:14250
        insecure: true
    service:
      extensions: [health_check]
      pipelines:
        traces:
          receivers: [otlp,opencensus,zipkin,jaeger]
          processors: [batch]
          exporters: [jaeger]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
subjects:
  - kind: ServiceAccount
    name: jaeger-injector
    namespace: default
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-jaeger-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: Service
apiVersion: v1
metadata:
  name: jaeger-injector
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  ports:
    - name: jaeger-injector
      port: 443
      targetPort: jaeger-injector
---
apiVersion: v1
kind: Service
metadata:
  name: collector
  labels:
    linkerd.io/extension: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
    - name: otlp
      port: 4317
      protocol: TCP
      targetPort: 4317
    - name: opencensus
      port: 55678
      protocol: TCP
      targetPort: 55678
    - name: zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
    - name: jaeger-thrift
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: jaeger-grpc
      port: 14250
      protocol: TCP
      targetPort: 14250
  selector:
    component: collector
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
spec:
  type: ClusterIP
  selector:
    component: jaeger
  ports:
    - name: collection
      port: 14268
    - name: grpc
      port: 14250
    - name: ui
      port: 16686
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.12.4
    component: jaeger-injector
  name: jaeger-injector
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  template:
    metadata:
      annotations:
        checksum/config: ec1278cd5932d7b2c50a4f5ceaf66d6c6068ad25813909a8925012caeeeef3be
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: enabled
      labels:
        linkerd.io/extension: jaeger
        component: jaeger-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - -collector-svc-addr=collector.linkerd-jaeger:55678
            - -collector-svc-account=collector
            - -log-level=info
            - -cluster-domain=cluster.local
            - -linkerd-namespace=linkerd
          image: cr.l5d.io/linkerd/jaeger-webhook:edge-21.12.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9995
            initialDelaySeconds: 10
          name: jaeger-injector
          ports:
            - containerPort: 8443
              name: jaeger-injector
            - containerPort: 9995
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9995
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: tls
              readOnly: true
      serviceAccountName: jaeger-injector
      volumes:
        - name: tls
          secret:
            secretName: jaeger-injector-k8s-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: collector
    app.kubernetes.io/part-of: Linkerd
    component: collector
  name: collector
spec:
  replicas: 1
  selector:
    matchLabels:
      component: collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: enabled
        prometheus.io/path: /metrics
        prometheus.io/port: "8888"
        prometheus.io/scrape: "true"
      labels:
        linkerd.io/extension: jaeger
        component: collector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - command:
            - /otelcol
            - --config=/conf/collector-config.yaml
          env:
            - name: GOGC
              value: "80"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          image: otel/opentelemetry-collector:0.27.0
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          name: ot-collector
          ports:
            - containerPort: 13133
            - containerPort: 4317
            - containerPort: 55678
            - containerPort: 9411
            - containerPort: 14268
            - containerPort: 14250
            - containerPort: 8888
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources: null
          volumeMounts:
            - mountPath: /conf
              name: collector-config-val
      serviceAccountName: collector
      volumes:
        - configMap:
            items:
              - key: collector-config
                path: collector-config.yaml
            name: collector-config
          name: collector-config-val
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/part-of: Linkerd
    component: jaeger
  name: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      component: jaeger
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: enabled
        prometheus.io/path: /metrics
        prometheus.io/port: "14269"
        prometheus.io/scrape: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - --query.base-path=/jaeger
          image: jaegertracing/all-in-one:1.19.2
          imagePullPolicy: Always
          name: jaeger
          ports:
            - containerPort: 14269
              name: admin
            - containerPort: 14268
              name: collection
            - containerPort: 14250
              name: grpc
            - containerPort: 16686
              name: ui
          resources: null
      dnsPolicy: ClusterFirst
      serviceAccountName: jaeger
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-jaeger-injector-webhook-config
  labels:
    linkerd.io/extension: jaeger
webhooks:
  - name: jaeger-injector.linkerd.io
    clientConfig:
      service:
        name: jaeger-injector
        namespace: default
        path: /
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQakNDQWlhZ0F3SUJBZ0lSQUwvL0RQdWhMMG1Ub0tMT3ZVVjlXZ1l3RFFZSktvWklodmNOQVFFTEJRQXcKSmpFa01DSUdBMVVFQXhNYmFtRmxaMlZ5TFdsdWFtVmpkRzl5TG1SbFptRjFiSFF1YzNaak1CNFhEVEl5TURZeApNakV4TWpreU9Wb1hEVEl6TURZeE1qRXhNamt5T1Zvd0pqRWtNQ0lHQTFVRUF4TWJhbUZsWjJWeUxXbHVhbVZqCmRHOXlMbVJsWm1GMWJIUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKdEt0NzlKQUdhMTNkWlJuNGFKVmdrdWI3YzBYUUI1Zmk4ajhaZUQ2d1VBNWxDU0E4L01SU1pDdnJmUVZUamRGTQpyVjV2aGNkalMyWUQwQWI2K3pKSHFaMlQwN0ZYWTBGTDVQaVArU2hpaU5hTm1YV3dXb0tMUzAyclNYV3Zkd29KCkpIcGxBRDFwS2E1LzJKdVFjc2xTdnpOSDhZQlVxOVhjRngyek5IUTg1ZXRncEJnOWpyRXhSTTQvVEpVTFJHemoKNitLWnp5Z1NFeEY4dFJkWnFSaFdDaDIvbTNxNFJiZUhldk1HeFVkdUVRWEtzME40akZ5VnUxdXNxOVd3VHgzRwpsejdDNUpSTHIrMEExSVVjQmZlWlh6aEdBTmh6eThwa0tFTXA4SnBheXB2RWNSbzNSYkIxK3ZBR3lMN2dPK2VqCmJOdk9BYkdENlJzeUFLY2xXclIrVHdJREFRQUJvMmN3WlRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGwKQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0pnWURWUjBSQkI4dwpIWUliYW1GbFoyVnlMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQUl1WFROeEZKSzVpd2p4VnNUQXhrSDZYTUREUjd2OTlaWk1XVGZXRGUxd2ptUGVIa1lSUGRSZmhrRjNnSG0KUGEzNS9qS0xXaUxPWEhFbzZNblZFTGFNN2krQUE1Z05zc2QzcW5GOWkzb3RDbDIwVnBPVDNSUnhpNTRRbm5xZQorNGNUT2c3Y3ZMUGk3V2pLRnJaM3NDMHZqRDNXZ3NXcFFac3NtNnhEWnlDa0ZEL0xOZHJwS1M0b2VqVDVMY3A3CjBLT2tRZDRlWERObEQxWW1UNFVBbUJEOUN4ZlZIQ29rVkZUdGxwUlFtamVUYkc3aHJYbWhjVmVMWDhMcE9yOEcKRHltTlJLMnZkOHpwYW9ucDNJbHQrTGhUc3NsYVZseGxPTjVERUtXM3F0TUtBY0ZiZkVCMkJHV3lkaDUzL29FagpJMDF4Y3pXTWU4TlhlVzFTeTJzOWFzam0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
    failurePolicy: Ignore
    admissionReviewVersions:
      - v1
      - v1beta1
    reinvocationPolicy: IfNeeded
    rules:
      - operations:
          - CREATE
        apiGroups:
          - ""
        apiVersions:
          - v1
        resources:
          - pods
    sideEffects: None
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: jaeger-injector-webhook
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  port: jaeger-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: jaeger-injector-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: proxy-admin
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4317
  proxyProtocol: gRPC
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 55678
  proxyProtocol: gRPC
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 9411
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14268
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14250
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: collector-admin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 13133
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: grpc
  proxyProtocol: gRPC
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: ui
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: jaeger-injector
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    selector:
      matchLabels:
        linkerd.io/extension: jaeger
        component: jaeger-injector
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: proxy-admin
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    name: proxy-admin
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: collector
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    selector:
      matchLabels:
        linkerd.io/extension: jaeger
        component: collector
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    name: jaeger-grpc
  client:
    meshTLS:
      serviceAccounts:
        - name: collector
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    name: jaeger-admin
  client:
    meshTLS:
      serviceAccounts:
        - name: prometheus
          namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    name: jaeger-ui
  client:
    meshTLS:
      serviceAccounts:
        - name: web
          namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    helm.sh/hook: post-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  name: namespace-metadata
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    helm.sh/hook: post-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  name: namespace-metadata
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - patch
    resourceNames:
      - default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    helm.sh/hook: post-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  name: namespace-metadata
roleRef:
  kind: Role
  name: namespace-metadata
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: namespace-metadata
    namespace: default
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    helm.sh/hook: post-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: namespace-metadata
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.12.4
  name: namespace-metadata
spec:
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-21.12.4
      labels:
        app.kubernetes.io/name: namespace-metadata
        app.kubernetes.io/part-of: Linkerd
        app.kubernetes.io/version: edge-21.12.4
    spec:
      restartPolicy: Never
      serviceAccountName: namespace-metadata
      containers:
        - name: namespace-metadata
          image: curlimages/curl:7.78.0
          command:
            - /bin/sh
          args:
            - -c
            - |
              ops=''
              token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              ns=$(curl -kfv -H "Authorization: Bearer $token" \
                "https://kubernetes.default.svc/api/v1/namespaces/default")

              if echo "$ns" | grep -vq 'labels'; then
                ops="$ops{\"op\": \"add\",\"path\": \"/metadata/labels\",\"value\": {}},"
              fi

              ops="$ops{\"op\": \"add\", \"path\": \"/metadata/labels/linkerd.io~1extension\", \"value\": \"jaeger\"}"

              curl -kfv -XPATCH -H "Content-Type: application/json-patch+json" -H "Authorization: Bearer $token" \
                -d "[$ops]" \
                "https://kubernetes.default.svc/api/v1/namespaces/default?fieldManager=kubectl-label"
