kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: enabled
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRYlhhZkt0c1QxdjI0bTMwNDMvRlpzREFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURZeApNakV4TXpBd09Gb1hEVEl6TURZeE1qRXhNekF3T0Zvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1EK05PZHNXcjZCMXQwQk00MjhVODFzVjh5RkdZNTZHSEg2anRRanpkVlJvN2NWMFNieHhpaTQyTVlncGppSwpkN245M3dXcS8vZVMxdDNEL2dERWVBTDFRK0VFeG8rdjMyOU9KaHpIeWdCbnZWdnlJVUgyNWxsT2g3dytlSnVtCkJ6RGRtbElneUI5MGhlNUE0RnpBc1cwbGpOTTIvZ2k0ZHZFdkIrc2F3TVdxZ3VBWXZXR3hkV2h6L2xwQWQzVUMKVXZlTm9MSzZqMkhEdVg1My9NYlBXa3gvQVMwbVlXeFRhOEgxUis3MFZDWG44MWZvTVI2dngrclloRlhaSXBpdAp1bUpScHJUWm15c2NHb0hRbnlWenYwY20wanRzTmFWNnJrZDE3T0trYXlqdHgvdTJ6SUNWZUhEVnNyUFUxb2hkCm5FazJWTGxtaURONHM0a3FuVkdtYlRjQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRjRJd1dXNjlOSFdoY29sR2tEeHBPajBiRzEzL2lSRG91N010ZFNNbVhSYmx1Q3VNT2ZVeFI0L0V0M04KWEdMcjNtN003L3hpSEU0dFpUWERBaDZsSGgrZnZoUXloeHMwTkJvTFVaeXFtZHVpTE44TzRrZTBqYWNFWExCMApLb2xwbnZ3N0hxSWNIby9PMGJKUXRzbmRUVW9UWUZBdHFMcjJJOTdqVmZqZ0hMRmE2WjljVWJsbFdBd0h6SjZsCnI1YkVpVXpzMGp3T256T2VWZDFjWW9WOGE5a2Z2R1ZHU3dpMlFvQUZyMmVKRUl5aStwajY0azVURW55enlRd0cKdkNDK0hhQnRJMnA5bzEvNXI0OVQ0RzlHUVV6S1lWMnh6a0ZjMDhrQjIvTWRjQ0doaDFGcHIvVUxiVjhlR0ZxdgpYa0RkdEdYWnllRi9Kd0tyV3NhWnJiOXhxdXc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBd1A0MDUyeGF2b0hXM1FFempieFR6V3hYeklVWmpub1ljZnFPMUNQTjFWR2p0eFhSCkp2SEdLTGpZeGlDbU9JcDN1ZjNmQmFyLzk1TFczY1ArQU1SNEF2VkQ0UVRHajYvZmIwNG1ITWZLQUdlOVcvSWgKUWZibVdVNkh2RDU0bTZZSE1OMmFVaURJSDNTRjdrRGdYTUN4YlNXTTB6YitDTGgyOFM4SDZ4ckF4YXFDNEJpOQpZYkYxYUhQK1drQjNkUUpTOTQyZ3NycVBZY081Zm5mOHhzOWFUSDhCTFNaaGJGTnJ3ZlZIN3ZSVUplZnpWK2d4CkhxL0g2dGlFVmRraW1LMjZZbEdtdE5tYkt4d2FnZENmSlhPL1J5YlNPMncxcFhxdVIzWHM0cVJyS08zSCs3Yk0KZ0pWNGNOV3lzOVRXaUYyY1NUWlV1V2FJTTNpemlTcWRVYVp0TndJREFRQUJBb0lCQVFDeENvSE5xb0MwTXJmQQpsZEdOUEM1RVRCZGU3dHE2OFJacnVNWTlwWHExTGVkWmxSSUEvOW9na1RHS3ozaXNkWm5QYlN5aUxuUVIwUXA2CjljaVZPNlk4VUhLc2dZMEZVdmxOU2d0OGEyckxaRjg1Y2ExQXJoWXg1dkJ0cDRGTWg4b2c4YWtYbmlyM2NCVk0Kc3djZkQwVzBNclkxTEVWdUNvcFNSaXFsYWkxZEphMzZvdGNObjBObUc3NjBZU0ZQdVQwNVcxejhIbDRVaWpMNQpYVGpXdlIyME9sY2htaXpDaEdnMFhWVlUySTZYTjFMbU02Z3BUTXlxRmtZMEJzRU1zOCtkczdzVXlkSzkwVE9pCnVQNVJkR2ZTUXNRSlBiaXQrSUlIalhKdFpPQ3VQS0NXZDBJUjFqYjFVTkV3MHVMOGwrTWZUK3h4bmgrQjJwQWcKVEUrdEF6WEJBb0dCQU5MdjBVdDNlZWdySTNZNW9nVlNFSXkzcXVtYkp5R3VLYjlCZzBUTXRTL2tzMnZ4cE5tSgpiK2w4SkFNcElYZ21FRWk1a2g0N3VHRmd4QURXcHVlNlduRHZXU3JvQXYzSDBkWXNjcmdKclpCYVRGOGZ6T0lnCmFjTmJ4b3g5dmFmeXZPWTdQSUx2RDNyYjA4dzlZc3hoNGRDeHBsOWFHaHZtZVUwNmcxY1ljRzlGQW9HQkFPbzUKQ2ZNNWRiZGpyUGJXdTNIMmFReTRLdGFheCtFcmsvTTBtKzl6eXJUb3FlbUc2N2dSalpXNGZjMDZpa0IxYVF3NQowT0xEOGluRmxGdnY5d2wrUmx1WmN6ZVpjbmNRNTFYY1BzdjdiMGNNanBmN3c1QStDUHIveVNmTXZEQnlEaEo4CmFvTk41eHRvZkROZitxaXhKcGx6azVaa1ZFbU42c2doWEtNM1FjUkxBb0dCQU5FS2dXdzh0ejl5b080bEo0QUcKV0FoY2JMQ2Q1aVhtcDlDMmFCVGltaDBnbFA5QXRwSXZOZzA1emFha09Gc052YzJVdWszaitWSG54OWJjNHdONwpGdTRkQlUwVUtRSy82Q0JNWkZRbW95OFBqZWduWjdBaFZ5OFg0S2lTWkVYd3RXdWxBTTd4ZzNIS01SZVRManBHCk5yZlBsb1dna1lkYzNKSEFqekRkTTIvUkFvR0JBTml4WEp0QmxiN000TUNkZVYyOTh3SnBnSGg3U21EdnlEbEIKZXVMVjVidnBaUWxBWWVReG1TUGpROEFUWU1TeDJ6WU1aMHprcTY0cHRWQTVlZnUyYjdGZkRsRnFEWlJLZHp2ZwpQOWpJRGZOVmtyYlpuZHhkQ0VIdlUxTVcveVJ5NE1JSmlTRmhlV2JLQzk0YjlmTUxzZ0pXQXowb0pUTEhzV2JtCk5xWnFBTlp4QW9HQkFMNnZtOVY2UmFRQk84dUR5NHptdGpybzBCOGJUZzVZTmFYQjBtdkRRNzNmekNWVlRScGEKaG5uY0lBcjZZdXZ5bEFvSSsxaUxlbVg5T085MjJ1dG9tc2RSOFNVd3l4Tk5qdlFnVG44M2dRYUNEZjQ4NE5UZwoyNzkycTVaZkxjMG9hdGJQUlNEMGNtWnN2M3J4M2xUb1VDcGZINWRGVVZoWjZWL0FlV2p4dGI2dQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQUxHcmk0VnlmR3cvUjY3alNjbXI4aGt3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBMk1USXhNVE13TURoYQpGdzB5TXpBMk1USXhNVE13TURoYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNlUVhoNTlrb1JQRWlTYXloTDMxYlMKWXhzRUd4UHVFWXpjSlZCQ3Q2OE56Z0xybE9WdElxM2x2K2RaZldTOFZYZ09jVytDbkpJUEJsc2pZdVJyYndsWAp1VHpnN2sxZDlkRnNsVU9pUWxXdGNPR0NqZU9sL2JFQXd1dlJGTWR5bktIMUZ1UXFuRGdReUFWMzRxV08waHpTCmxUdmFSZFNlU2ZjdDc5ajd5cngzT3I0RkN1T2c4WFZ3cStrOVJhVlk2dTV1bkJkTmpEQi9zbHhjRDl3Rko1aEcKMGNpdmRPK3FXUUFheVVHMVZoenRpdDc2dW9kRUUrUitucjZrTWlZZHJWdjZUbWhBdmV5UFNpQXRmWitVNDM0SApheFRKUHV0dnJqSnhmS0ZOUGhDcGZXSzlhMC9RVG81ZGJCTi9jU1BVWkx5azBUWWEvL1FuSXFMVGRaTlhQTzVaCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ04rYlUvVXlMT3ByeDdzWXNlb1gwMitkNVhPV0YxCmwxOUF4M1B1TUhINmM2ckxMdFhPVzlXbUxzaGc2VUVEcHg2MzVSZ0FhTTAvanYzMml3WWNjcFQ4aFVTRGJNVSsKU0lhcSt2QTJ2Vm95SGhSWlNlSG5YdHhzWGd6eHJhMHJoWXdiUHBFeitYL2w3bTIzUUlVUjBuQy9acU9XaUdtKwpYQ2pGQzRUU2Zvd2Mvbm9jYUdLK0o2OE9mTlR3d01jeTc2TnpXcVhoT3lBRVJ6b0FvbFFwTjB5NE1JYUhueURmCnNBMWpuWnpDOHhaSSt0aDlrdmhiZGJVTVgvdFMxYThmUHhOWmEvQUJVd3FkSTlJcVBQUkZLZHQ2a1ZDczNjMzAKNTlJUUgvdFgvc01GRHZvb21CRDE0RVY4Zzc1QmUyOHZxaGc0NHZheGhKcU1FQ0dBUHZBMzlISnIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbmtGNGVmWktFVHhJa21zb1M5OVcwbU1iQkJzVDdoR00zQ1ZRUXJldkRjNEM2NVRsCmJTS3Q1Yi9uV1gxa3ZGVjREbkZ2Z3B5U0R3WmJJMkxrYTI4SlY3azg0TzVOWGZYUmJKVkRva0pWclhEaGdvM2oKcGYyeEFNTHIwUlRIY3B5aDlSYmtLcHc0RU1nRmQrS2xqdEljMHBVNzJrWFVua24zTGUvWSs4cThkenErQlFyagpvUEYxY0t2cFBVV2xXT3J1YnB3WFRZd3dmN0pjWEEvY0JTZVlSdEhJcjNUdnFsa0FHc2xCdFZZYzdZcmUrcnFIClJCUGtmcDYrcERJbUhhMWIrazVvUUwzc2owb2dMWDJmbE9OK0Iyc1V5VDdyYjY0eWNYeWhUVDRRcVgxaXZXdFAKMEU2T1hXd1RmM0VqMUdTOHBORTJHdi8wSnlLaTAzV1RWenp1V1FJREFRQUJBb0lCQUM1SCsxRy9vejJUSWE0ZwpSSEtiNkNveTdZMnYxWTVEOTZ2U0JiemROd2FVZnVvaWEwNFZYRUhhYzNBS2FkRmlOWEFUNElhVC8yc0JjdG5RCmEvaTNTa1lyV0JCMzRJeGYvVlVCK2Z1VDVyYUlVb3I1cjkrMVozUlBqT05pYmttb1lQenFLdVFETjZwQXRNaXcKc2JZbzRHRDlYN21mdm1Sa1FUTmY5MWI3blU1SW05cGZzenZLUkZ5bVpDM0lITkVteW1JbS9wNCtKU1BqTktRcwpqeFh4c2VNcnY0WCt4Z1ZKRGlVWWl5Q08zblh5djMzUUNhdlBHSHFDc1QyZldZU3hQSnZqQUQzWHh0Y1ZLY0JTCnpQcTYvZ0JpNldkQ0N0QkRmRHp5cmVhcHJvS2FHT3JaVUV4ZW9lNWo0eVk0SlhlNE1QREpFemJtWVdUbThBenUKL3RXOVZnRUNnWUVBeDlUOUF5dWxTUkN3TGNXMWVQT1hBTVhtdWdsQ25kczVIclBEMjduOUtSSFpTendIMWdPbwp3clg4RkV4bGtadmlybGtBQXZnMWxTYnpWU2lrNzRaMGEzWVowYzFWOEpCOGlpeVpMdkJYemRiWW16RjhnWklxCmtYN1JQREMwbGhaMGlFODRhL1ZNQ0wrdmVlY1d1ZUJ6QW1rTE1kdkJORzEwNFN6WlhxSEtGMkVDZ1lFQXlyelgKd25CQldpYUM4b1d3NDltNTBsaEJHRVpWaklaSVBZZzVYVnUrcFZGZld6VDkzTzN5YXY0VHVkdDJaUEpnK2w1QgpZRFUwWjd6UjIxVlh2a3dRNEwxOFFuTm42L3R2NDQrZUkxMlJKNkxlZXFIa05LeDJuTCtBQUFqYXVoK0Q1M3NnCkVXOEwxMUlPOXg2TC84c2FaMjhRYWozSUFGc2lNSjlVZTJKVzBma0NnWUFEbjFUR3plKzlGMVJhUUE4K0ZneFMKczBPdmM2T0ZnUWZVQ3FZdVFYelpWYjErbzZQd3VUaEI3MUtXZTV3THU2dXNSV2krcFFrem52VWlRZzViV1RDYgpFaFQ5dko4bU1UaFF1T1k5OTVWZjRka2pWdzVPdXZ1U2o1M3pYVjZvcWRlSzhRU3cwRTJFaXhUL1BMVW93V3pVClNsc3RtREkwWlJlTlRXYlRWRk41Z1FLQmdHd2xKZmFyU01FZEQvYnNoN3BUTndOVVhvempYOWtRL0ZJT2E0TTQKWUU3eFJDdHo3Z00rem5SeVNmVjNjd1ZRSVprTVZGVk1yRUsxL3orL200bUFLL1NtUHpWM09EVXlMN0kwdHdkbwpidmkwc1hhN0N1OXFHKzlyVzQwcEsvdml1Y3J0NitKQTJSRW56YUhXb3BsMUx3V0R3ajdaNitqOHRCVTV1S2dFCmdnbUpBb0dCQUwybXZDN09xdVNLcWoxQkZWV2FPMjlKeFJPaWdkU0xHMFN6R2M1eERJRXRoeHN3aDhodkk5eE0KdkRBMjRiNithbEg2OWEzZmpCZm5Wdkl4SHZxSFp1c1hmUDJCR3dmbm44Ymw4Z0xxQWhEellyYjFMaWVoL0dZRAo1cUhsQ2RiNkUvNWZYZmZzN1ZqSFRDVHlVME1hWm1HZ3JNcFpQOTB0NUxDNHFFWWtXdlA0Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
    [log]
    mode = console
    [log.console]
    format = text
    level = info
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true
  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
  - apiGroups:
      - extensions
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - extensions
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
      - endpoints
      - services
      - replicationcontrollers
      - namespaces
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - linkerd.io
    resources:
      - serviceprofiles
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - split.smi-spec.io
    resources:
      - trafficsplits
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - policy.linkerd.io
    resources:
      - servers
      - serverauthorizations
    verbs:
      - list
      - get
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - pods
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - replicationcontrollers
      - namespaces
      - nodes
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - extensions
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - extensions
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - list
      - get
      - watch
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
  - apiGroups:
      - tap.linkerd.io
    resources:
      - '*'
    verbs:
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterroles
      - clusterrolebindings
    verbs:
      - list
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - list
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
      - validatingwebhookconfigurations
    verbs:
      - list
  - apiGroups:
      - linkerd.io
    resources:
      - serviceprofiles
    verbs:
      - list
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
  - apiGroups:
      - apiregistration.k8s.io
    resources:
      - apiservices
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
  - kind: ServiceAccount
    name: metrics-api
    namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
  - kind: ServiceAccount
    name: tap-injector
    namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
    resourceNames:
      - linkerd-config
  - apiGroups:
      - ""
    resources:
      - namespaces
      - configmaps
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
      - pods
    verbs:
      - list
  - apiGroups:
      - apps
    resources:
      - replicasets
    verbs:
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
    - name: http
      port: 3000
      targetPort: 3000
---
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
    - name: http
      port: 8085
      targetPort: 8085
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
    - name: admin-http
      port: 9090
      targetPort: 9090
---
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
    - name: tap-injector
      port: 443
      targetPort: tap-injector
---
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
    - name: grpc
      port: 8088
      targetPort: 8088
    - name: apiserver
      port: 443
      targetPort: apiserver
---
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
    - name: http
      port: 8084
      targetPort: 8084
    - name: admin-http
      port: 9994
      targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - env:
            - name: GF_PATHS_DATA
              value: /data
            - name: GODEBUG
              value: netdns=go
          image: cr.l5d.io/linkerd/grafana:stable-2.11.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
          name: grafana
          ports:
            - containerPort: 3000
              name: http
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources: null
          securityContext:
            runAsUser: 10205
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/grafana
              name: grafana-config
              readOnly: true
      serviceAccountName: grafana
      volumes:
        - emptyDir: {}
          name: data
        - configMap:
            items:
              - key: grafana.ini
                path: grafana.ini
              - key: datasources.yaml
                path: provisioning/datasources/datasources.yaml
              - key: dashboards.yaml
                path: provisioning/dashboards/dashboards.yaml
            name: grafana-config
          name: grafana-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - -controller-namespace=linkerd
            - -log-level=info
            - -log-format=plain
            - -cluster-domain=cluster.local
            - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/metrics-api:stable-2.11.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9995
            initialDelaySeconds: 10
          name: metrics-api
          ports:
            - containerPort: 8085
              name: http
            - containerPort: 9995
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9995
          resources: null
          securityContext:
            runAsUser: 11775
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
      serviceAccountName: metrics-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
        - args:
            - --log.level=info
            - --log.format=logfmt
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/data
            - --storage.tsdb.retention.time=6h
          image: prom/prometheus:v2.19.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          name: prometheus
          ports:
            - containerPort: 9090
              name: admin-http
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources: null
          securityContext:
            runAsNonRoot: true
            runAsUser: 10765
            runAsGroup: 65534
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-config
              subPath: prometheus.yml
              readOnly: true
      serviceAccountName: prometheus
      volumes:
        - name: data
          emptyDir: {}
        - configMap:
            name: prometheus-config
          name: prometheus-config
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 8560d8124d150b7ed7b1818984282a6708ef29b84f8114b4b1dcfc10b8d47ae4
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - injector
            - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
            - -log-level=info
            - -log-format=plain
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/tap:stable-2.11.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9995
            initialDelaySeconds: 10
          name: tap-injector
          ports:
            - containerPort: 8443
              name: tap-injector
            - containerPort: 9995
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9995
          resources: null
          securityContext:
            runAsUser: 10845
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: tls
              readOnly: true
      serviceAccountName: tap-injector
      volumes:
        - name: tls
          secret:
            secretName: tap-injector-k8s-tls
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 63eabadb7988019433361900b53fb005566893605826f8762ae0f109acaf3d7b
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - api
            - -api-namespace=linkerd
            - -log-level=info
            - -log-format=plain
            - -identity-trust-domain=cluster.local
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/tap:stable-2.11.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9998
            initialDelaySeconds: 10
          name: tap
          ports:
            - containerPort: 8088
              name: grpc
            - containerPort: 8089
              name: apiserver
            - containerPort: 9998
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9998
          resources: null
          securityContext:
            runAsUser: 11923
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: tls
              readOnly: true
      serviceAccountName: tap
      volumes:
        - name: tls
          secret:
            secretName: tap-k8s-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.2
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
            - -cluster-domain=cluster.local
            - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
            - -controller-namespace=linkerd
            - -viz-namespace=linkerd-viz
            - -log-level=info
            - -log-format=plain
            - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/web:stable-2.11.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9994
            initialDelaySeconds: 10
          name: web
          ports:
            - containerPort: 8084
              name: http
            - containerPort: 9994
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9994
          resources: null
          securityContext:
            runAsUser: 11552
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
      serviceAccountName: web
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQUxHcmk0VnlmR3cvUjY3alNjbXI4aGt3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBMk1USXhNVE13TURoYQpGdzB5TXpBMk1USXhNVE13TURoYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNlUVhoNTlrb1JQRWlTYXloTDMxYlMKWXhzRUd4UHVFWXpjSlZCQ3Q2OE56Z0xybE9WdElxM2x2K2RaZldTOFZYZ09jVytDbkpJUEJsc2pZdVJyYndsWAp1VHpnN2sxZDlkRnNsVU9pUWxXdGNPR0NqZU9sL2JFQXd1dlJGTWR5bktIMUZ1UXFuRGdReUFWMzRxV08waHpTCmxUdmFSZFNlU2ZjdDc5ajd5cngzT3I0RkN1T2c4WFZ3cStrOVJhVlk2dTV1bkJkTmpEQi9zbHhjRDl3Rko1aEcKMGNpdmRPK3FXUUFheVVHMVZoenRpdDc2dW9kRUUrUitucjZrTWlZZHJWdjZUbWhBdmV5UFNpQXRmWitVNDM0SApheFRKUHV0dnJqSnhmS0ZOUGhDcGZXSzlhMC9RVG81ZGJCTi9jU1BVWkx5azBUWWEvL1FuSXFMVGRaTlhQTzVaCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ04rYlUvVXlMT3ByeDdzWXNlb1gwMitkNVhPV0YxCmwxOUF4M1B1TUhINmM2ckxMdFhPVzlXbUxzaGc2VUVEcHg2MzVSZ0FhTTAvanYzMml3WWNjcFQ4aFVTRGJNVSsKU0lhcSt2QTJ2Vm95SGhSWlNlSG5YdHhzWGd6eHJhMHJoWXdiUHBFeitYL2w3bTIzUUlVUjBuQy9acU9XaUdtKwpYQ2pGQzRUU2Zvd2Mvbm9jYUdLK0o2OE9mTlR3d01jeTc2TnpXcVhoT3lBRVJ6b0FvbFFwTjB5NE1JYUhueURmCnNBMWpuWnpDOHhaSSt0aDlrdmhiZGJVTVgvdFMxYThmUHhOWmEvQUJVd3FkSTlJcVBQUkZLZHQ2a1ZDczNjMzAKNTlJUUgvdFgvc01GRHZvb21CRDE0RVY4Zzc1QmUyOHZxaGc0NHZheGhKcU1FQ0dBUHZBMzlISnIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
  - name: tap-injector.linkerd.io
    clientConfig:
      service:
        name: tap-injector
        namespace: linkerd-viz
        path: /
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRYlhhZkt0c1QxdjI0bTMwNDMvRlpzREFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURZeApNakV4TXpBd09Gb1hEVEl6TURZeE1qRXhNekF3T0Zvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1EK05PZHNXcjZCMXQwQk00MjhVODFzVjh5RkdZNTZHSEg2anRRanpkVlJvN2NWMFNieHhpaTQyTVlncGppSwpkN245M3dXcS8vZVMxdDNEL2dERWVBTDFRK0VFeG8rdjMyOU9KaHpIeWdCbnZWdnlJVUgyNWxsT2g3dytlSnVtCkJ6RGRtbElneUI5MGhlNUE0RnpBc1cwbGpOTTIvZ2k0ZHZFdkIrc2F3TVdxZ3VBWXZXR3hkV2h6L2xwQWQzVUMKVXZlTm9MSzZqMkhEdVg1My9NYlBXa3gvQVMwbVlXeFRhOEgxUis3MFZDWG44MWZvTVI2dngrclloRlhaSXBpdAp1bUpScHJUWm15c2NHb0hRbnlWenYwY20wanRzTmFWNnJrZDE3T0trYXlqdHgvdTJ6SUNWZUhEVnNyUFUxb2hkCm5FazJWTGxtaURONHM0a3FuVkdtYlRjQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRjRJd1dXNjlOSFdoY29sR2tEeHBPajBiRzEzL2lSRG91N010ZFNNbVhSYmx1Q3VNT2ZVeFI0L0V0M04KWEdMcjNtN003L3hpSEU0dFpUWERBaDZsSGgrZnZoUXloeHMwTkJvTFVaeXFtZHVpTE44TzRrZTBqYWNFWExCMApLb2xwbnZ3N0hxSWNIby9PMGJKUXRzbmRUVW9UWUZBdHFMcjJJOTdqVmZqZ0hMRmE2WjljVWJsbFdBd0h6SjZsCnI1YkVpVXpzMGp3T256T2VWZDFjWW9WOGE5a2Z2R1ZHU3dpMlFvQUZyMmVKRUl5aStwajY0azVURW55enlRd0cKdkNDK0hhQnRJMnA5bzEvNXI0OVQ0RzlHUVV6S1lWMnh6a0ZjMDhrQjIvTWRjQ0doaDFGcHIvVUxiVjhlR0ZxdgpYa0RkdEdYWnllRi9Kd0tyV3NhWnJiOXhxdXc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
    failurePolicy: Ignore
    admissionReviewVersions:
      - v1
      - v1beta1
    reinvocationPolicy: IfNeeded
    rules:
      - operations:
          - CREATE
        apiGroups:
          - ""
        apiVersions:
          - v1
        resources:
          - pods
    sideEffects: None
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: admin
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: grafana
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: metrics-api
  client:
    meshTLS:
      serviceAccounts:
        - name: web
        - name: prometheus
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: proxy-admin
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: tap-injector-webhook
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.2
spec:
  server:
    name: tap-api
  client:
    unauthenticated: true
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
    - name: POST /api/v1/StatSummary
      condition:
        method: POST
        pathRegex: /api/v1/StatSummary
    - name: POST /api/v1/TopRoutes
      condition:
        method: POST
        pathRegex: /api/v1/TopRoutes
    - name: POST /api/v1/ListPods
      condition:
        method: POST
        pathRegex: /api/v1/ListPods
    - name: POST /api/v1/ListServices
      condition:
        method: POST
        pathRegex: /api/v1/ListServices
    - name: POST /api/v1/SelfCheck
      condition:
        method: POST
        pathRegex: /api/v1/SelfCheck
    - name: POST /api/v1/Gateways
      condition:
        method: POST
        pathRegex: /api/v1/Gateways
    - name: POST /api/v1/Edges
      condition:
        method: POST
        pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
    - name: POST /api/v1/query
      condition:
        method: POST
        pathRegex: /api/v1/query
    - name: GET /api/v1/query_range
      condition:
        method: GET
        pathRegex: /api/v1/query_range
    - name: GET /api/v1/series
      condition:
        method: GET
        pathRegex: /api/v1/series
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: grafana.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
    - name: GET /api/annotations
      condition:
        method: GET
        pathRegex: /api/annotations
    - name: GET /api/dashboards/tags
      condition:
        method: GET
        pathRegex: /api/dashboards/tags
    - name: GET /api/dashboards/uid/{uid}
      condition:
        method: GET
        pathRegex: /api/dashboards/uid/.*
    - name: GET /api/dashboard/{dashboard}
      condition:
        method: GET
        pathRegex: /api/dashboard/.*
    - name: GET /api/datasources/proxy/1/api/v1/series
      condition:
        method: GET
        pathRegex: /api/datasources/proxy/1/api/v1/series
    - name: GET /api/datasources/proxy/1/api/v1/query_range
      condition:
        method: GET
        pathRegex: /api/datasources/proxy/1/api/v1/query_range
    - name: GET /api/search
      condition:
        method: GET
        pathRegex: /api/search
    - name: GET /d/{uid}/{dashboard-name}
      condition:
        method: GET
        pathRegex: /d/[^/]*/.*
    - name: GET /public/build/{style}.css
      condition:
        method: GET
        pathRegex: /public/build/.*\.css
    - name: GET /public/fonts/{font}
      condition:
        method: GET
        pathRegex: /public/fonts/.*
    - name: GET /public/img/{img}
      condition:
        method: GET
        pathRegex: /public/img/.*
