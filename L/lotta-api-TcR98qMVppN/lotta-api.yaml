apiVersion: v1
kind: ServiceAccount
metadata:
  name: lotta-api
  labels:
    helm.sh/chart: lotta-api-1.5.2
    app.kubernetes.io/name: lotta-api
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.3"
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis
  namespace: TcR98qMVppN
  labels:
    app: redis
    chart: redis-12.2.3
    release: release-name
    heritage: Helm
type: Opaque
data:
  redis-password: azAwS0NhWlJ1Qw==
---
apiVersion: v1
kind: Secret
metadata:
  name: lotta-api
  labels:
    app: lotta-api
    chart: lotta-api-1.5.2
    release: release-name
    heritage: Helm
type: Opaque
data:
  SECRET_KEY_JWT: NzVqaUFVSVVtcA==
  LIVE_VIEW_SALT_SECRET: eldXcXYxVGNJY3RERXpHYQ==
  SECRET_KEY_BASE: QnBweWFDWDU0Uw==
  AWS_SECRET_ACCESS_KEY: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: TcR98qMVppN
  labels:
    app: redis
    chart: redis-12.2.3
    heritage: Helm
    release: release-name
data:
  start-master.sh: |
    #!/bin/bash
    useradd redis
    chown -R redis /data
    if [[ -n $REDIS_PASSWORD_FILE ]]; then
      password_aux=`cat ${REDIS_PASSWORD_FILE}`
      export REDIS_PASSWORD=$password_aux
    fi
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec /run.sh "${ARGS[@]}"
  start-slave.sh: |
    #!/bin/bash
    useradd redis
    chown -R redis /data
    if [[ -n $REDIS_PASSWORD_FILE ]]; then
      password_aux=`cat ${REDIS_PASSWORD_FILE}`
      export REDIS_PASSWORD=$password_aux
    fi
    if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
      password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
      export REDIS_MASTER_PASSWORD=$password_aux
    fi
    if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec /run.sh "${ARGS[@]}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis
  namespace: TcR98qMVppN
  labels:
    app: redis
    chart: redis-12.2.3
    heritage: Helm
    release: release-name
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: TcR98qMVppN
  labels:
    app: redis
    chart: redis-12.2.3
    heritage: Helm
    release: release-name
data:
  ping_readiness_local.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: lotta-api-env
  labels:
    app.kubernetes.io/name: lotta-api-env
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
data:
  APP_ENVIRONMENT: staging
  APP_REVISION: ""
  HOSTNAME: null
  SHORT_TITLE: info
  TITLE: Infoportal Lotta
  APP_SELECTOR: app.kubernetes.io/name=lotta-api
  APP_NAME: lotta-api
  SERVICE_NAME: lotta-api-headless
  POSTGRES_HOST: localhost
  POSTGRES_USER: external_postgres
  POSTGRES_PASSWORD: ""
  POSTGRES_DB: lotta
  POSTGRES_SCHEMA: public
  LIVE_VIEW_USERNAME: admin
  LIVE_VIEW_PASSWORD: WGxYeEFmclVtUQ==
  REDIS_HOST: release-name-redis-master
  REDIS_PASSWORD: ""
  REMOTE_STORAGE_DEFAULT_STORE: primary-object-storage
  REMOTE_STORAGE_PREFIX: ""
  REMOTE_STORAGE_STORES: object-storage
  REMOTE_STORAGE_OBJECT_STORAGE_BUCKET: B
  REMOTE_STORAGE_OBJECT_STORAGE_ENDPOINT: A
  AWS_ACCESS_KEY_ID: ""
  UGC_S3_COMPAT_ENDPOINT: ""
  UGC_S3_COMPAT_REGION: fra1
  SCHEDULE_PROVIDER_URL: lotta-schedule-provider.lotta
  RABBITMQ_URL: amqp://guest:guest@rabbitmq
  RABBITMQ_PREFIX: lotta
  ELASTICSEARCH_HOST: http://elasticsearch-master.lotta:9200
  ELASTICSEARCH_INDEX_PREFIX: lotta
  DEFAULT_USER_NAME: ""
  DEFAULT_USER_EMAIL: ""
  DEFAULT_USER_PASSWORD: ""
  MAILGUN_API_KEY: ""
  MAILGUN_DOMAIN: ""
  MAILER_DEFAULT_SENDER: info@lotta.schule
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: TcR98qMVppN
  labels:
    app: redis
    chart: redis-12.2.3
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: TcR98qMVppN
  labels:
    app: redis
    chart: redis-12.2.3
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
    role: master
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-slave
  namespace: TcR98qMVppN
  labels:
    app: redis
    chart: redis-12.2.3
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: release-name
    role: slave
---
apiVersion: v1
kind: Service
metadata:
  name: lotta-api
  labels:
    helm.sh/chart: lotta-api-1.5.2
    app.kubernetes.io/name: lotta-api
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: lotta-api
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: lotta-api-headless
  labels:
    helm.sh/chart: lotta-api-1.5.2
    app.kubernetes.io/name: lotta-api
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.3"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/name: lotta-api
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lotta-api
  labels:
    helm.sh/chart: lotta-api-1.5.2
    app.kubernetes.io/name: lotta-api
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: lotta-api
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lotta-api
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: lotta-api
      containers:
        - name: lotta-api
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          image: lotta/api:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          envFrom:
            - configMapRef:
                name: lotta-api-env
            - secretRef:
                name: lotta-api
          livenessProbe:
            httpGet:
              path: /_debug/health
              port: 4000
            initialDelaySeconds: 150
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /_debug/health
              port: 4000
            initialDelaySeconds: 150
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 300m
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 128Mi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: TcR98qMVppN
  labels:
    app: redis
    chart: redis-12.2.3
    release: release-name
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: release-name
      role: master
  serviceName: release-name-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-12.2.3
        release: release-name
        role: master
      annotations:
        checksum/health: 368d85b656b9248d9d14f6a92f117c8687e20e2c89f7ef5e177968bfc50af4fd
        checksum/configmap: e33035c7f8ee2f1e84b287c845843d2719da6a5856da85fe7d32613ec17faacc
        checksum/secret: aa7a559595611f67a317272fcefcd492a3793ce37e0a959100abc8f48459b915
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.0.9-debian-10-r38
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10187
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: null
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 493
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: release-name-redis
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: release-name
          heritage: Helm
          component: master
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 4Gi
        selector: null
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-slave
  namespace: TcR98qMVppN
  labels:
    app: redis
    chart: redis-12.2.3
    release: release-name
    heritage: Helm
spec:
  replicas: 2
  serviceName: release-name-redis-headless
  selector:
    matchLabels:
      app: redis
      release: release-name
      role: slave
  template:
    metadata:
      labels:
        app: redis
        release: release-name
        chart: redis-12.2.3
        role: slave
      annotations:
        checksum/health: 368d85b656b9248d9d14f6a92f117c8687e20e2c89f7ef5e177968bfc50af4fd
        checksum/configmap: e33035c7f8ee2f1e84b287c845843d2719da6a5856da85fe7d32613ec17faacc
        checksum/secret: 7e3d852b9a1b95e5aebf61ba37f15abd5cca1bff01c85ceb62a65ad2f69fef55
    spec:
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.0.9-debian-10-r38
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 10579
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          command:
            - /bin/bash
            - -c
            - /opt/bitnami/scripts/start-scripts/start-slave.sh
          env:
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: release-name-redis-master-0.release-name-redis-headless.default.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 11
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 10
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 493
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: release-name-redis
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: release-name
          heritage: Helm
          component: slave
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 4Gi
        selector: null
  updateStrategy:
    type: RollingUpdate
---
apiVersion: v1
kind: Pod
metadata:
  name: lotta-api-test-connection
  labels:
    app.kubernetes.io/name: lotta-api
    helm.sh/chart: lotta-api-1.5.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - lotta-api:80
  restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: lotta-api-migration
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: before-hook-creation
  labels:
    helm.sh/chart: lotta-api-1.5.2
    app.kubernetes.io/name: lotta-api
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.3"
    app.kubernetes.io/managed-by: Helm
    heritage: Helm
    job: migrate
spec:
  template:
    metadata:
      annotations:
        linkerd.io/inject: disabled
      labels:
        helm.sh/chart: lotta-api-1.5.2
        app.kubernetes.io/name: lotta-api
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "2.3"
        app.kubernetes.io/managed-by: Helm
    spec:
      restartPolicy: OnFailure
      serviceAccountName: lotta-api
      containers:
        - name: lotta-api
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: lotta/api:latest
          imagePullPolicy: Always
          args:
            - eval
            - Api.Release.migrate
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          envFrom:
            - configMapRef:
                name: lotta-api-env
            - secretRef:
                name: lotta-api
