kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: default
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: default
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: default
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROVENDQWgyZ0F3SUJBZ0lSQU1zY2JPSnBodVl0bDBFQ1d6S1dWR2d3RFFZSktvWklodmNOQVFFTEJRQXcKSXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUI0WERUSXlNRFl4TWpFeApNekF5TUZvWERUSXpNRFl4TWpFeE16QXlNRm93SXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsClptRjFiSFF1YzNaak1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOTFJVHYvdkcKZE1GcnRuemlmdTUzRGJZQlEzNlg0NmQ1NzlUV3BFVEFCUHRMaklQSXhlZ3FOKzExcnh6d2puZ2pLd1NTd0NLQQowdThUMFZzUm9WT3VGeDErWWpBem91c3l2QVFTOGNKTER4TmF5YVhJTTBRYllpZEQ5b2gwQStSTDJGUWNlNktvCmNJR09ld1NiK0ErcFlFRHhOREZXOE11YkdPNjk4Mi80U3dvYjdRQ2JNNkltUmd6TG9QazVOZmt4VHk3ekNTTnMKZXFBcWdBM2VhTHFjaS9pQmVqTm5nK083UjRaVCt5MlNJRG9od3JoUXdrQStHb1JENEFTblVrbzhKWW9JcW9wWgp6VWhOTDdXdXNKQkpXRXcrM2liNWZkTWpVYkwvZ1g4OWpqL29NdjlDYmxoRk1XdjZYT2NzcW5WS0xDcHZYTUhlClJadmdxZTBkVnVyV1J3SURBUUFCbzJRd1lqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdJd1lEVlIwUkJCd3dHb0lZZEdGdwpMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCSG9sekw3REVHCk1xak1HSmhoVVVGbTRDRTNqb1FEQmRrL05DQWpicDV0NFlmZTM2bFc0VjgxK1kzNXNsc01UVHdPMkl1MFVNaXgKUXdSRC9JQWdiWEQyZzA1Y1BPc0dJLy8vTUlCYmd6QkFjOVhEUzhPSnVRMjRIaXFyQ0xoT3VNa1dYaSs4b2ZMeAo3QVJqYnBZaTZUdUQ4K0h4blNTOENSZ2ZwK2NFRks1WWlsZG10WnZzdjFWR3lscFh0a1RDOU9aenNzQklZSFRXCksvVHVxTzA3TkRwbTdCRWt3ajRvRWtYN1h0ajBsczNXRkZxTk1WanNOUGt3S1BOc2V5QzNEckp4R0U4akYyMHAKS0xid1lTbmpNM05WdTZCVWl6Q3Z0c0txRklxbWdpQTcvRW5pZ256WlNVM0JNM3ZUNUxtdzNIaGhFdkNEeTNHOQplYXMzSHhKRk5OaTgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBOTFJVHYvdkdkTUZydG56aWZ1NTNEYllCUTM2WDQ2ZDU3OVRXcEVUQUJQdExqSVBJCnhlZ3FOKzExcnh6d2puZ2pLd1NTd0NLQTB1OFQwVnNSb1ZPdUZ4MStZakF6b3VzeXZBUVM4Y0pMRHhOYXlhWEkKTTBRYllpZEQ5b2gwQStSTDJGUWNlNktvY0lHT2V3U2IrQStwWUVEeE5ERlc4TXViR082OTgyLzRTd29iN1FDYgpNNkltUmd6TG9QazVOZmt4VHk3ekNTTnNlcUFxZ0EzZWFMcWNpL2lCZWpObmcrTzdSNFpUK3kyU0lEb2h3cmhRCndrQStHb1JENEFTblVrbzhKWW9JcW9wWnpVaE5MN1d1c0pCSldFdyszaWI1ZmRNalViTC9nWDg5amovb012OUMKYmxoRk1XdjZYT2NzcW5WS0xDcHZYTUhlUlp2Z3FlMGRWdXJXUndJREFRQUJBb0lCQUFFVVRKM0QzWVBZN0QxcApvaHRuc3dGT1VBY1pZRlJRQU1vNUpZNmw5aWlQYUM3K3pEdUEzZDVNblB6Y3BYZ1pzaDJYOFlRQklvckpIRThICmxMWWRoVjc0Yy9xOXR4djQ1c25IUXNYblVTaUpyeFcrTVhkM3pwN0pDUlRrVjQxRXk4ZnY1Z2ZzRjh3VjVLZEkKeDkxM1JBZjFnSmYzdHlkcDNBMXB6VTVvcUs2N0pGM1RlM1J0R1FHUnVrc2czKzIxenZ5ZVNaWWNtQmRYckFrNQpvNUZsTkozM3lic2hrMEdNeTZ6SnQwTG5wazluU0dNV3JMRDBVYXFTLzR5UkdBN25YWW5hV1R1RFNWVGx5bEZBCjV3amEwOUtFekVBdWw2R2krajBUMHZZZUlyQVF5dGlaVWVRaDdKRzJGQ242S0NMOXQ1dk50VGRCQlF5UjN0bHAKbm4yNVFFRUNnWUVBK2hyR0JZUE1wajYweWtSR3ZIQVZwVlVsWm5MOUJ6VWpPWEJ0RklGVWx3QWp0eDB1a29Qawo1ZzhsdmlkWEYrNHJvN3lTaFZNRkNjQ1hnM28xZmZVUEJwWHFLY3NzL3FvNEYvV21uNlBLMGZVRmdnclhGS3VoCkdpeVJBYTh0YVhWVmVtemRLc0VoQ1dTYXcwTGtGMEJMUG44UFIwdXFXQ0RNcGhDa0RyY0xWdEVDZ1lFQS9TYUIKQyt3MDQ2NzNkUFdjRHd2eFBwMllsUzRvQVJPUyt2L09uODJrcXZ4QWVQc3RxUWNjSzRYbXpvNytrSWFQa3l5VQovQm92NkZ6cEQ0NW9qMmg5RFJYOXg3bE9SMGVuU2Naa3V5Q1dVSmFqSThmUTlMcGdzV0FuVTgzQjVBZDZucWVOCkVRR0ZYKzVBVWVlWlcvN2g1b0xBdThzUUY0U29YVUVsVnRJNjBaY0NnWUJhbHZ3RzMxaHZGdU54S0EzZkQxSW4KMHBGN2JFY09KMGNjOVFYdG1YTEVSdjZvd3Q4dG5xeDRVQ0JCb2dvLzFycmowZGZZaHR1YVRySVNvMTlnd2pTeApFL2YvTDJLYTA1a0J4SzZYd0VJa2puVnlSdTdrdzgzVXB6UFd3bGJXamZOcUpxaHRaZ3JMVmk5Z2JvZ2ppOXcxClJOeUozSFJVKzN4azRqNHFQazdUSVFLQmdBOC8vbzRsVUpwV3MvbUx3amIxMVRhY2I5Q3MweVFkZGNGQkg4Vm8Kc2Y3SzYyZGVXa1hRYzlYN1h3Z2FmU05mdDg1NTVRKzYxQi8vV05yakRWRjJUZkkzM08zbkw5d0RhUVI4dXh5Ngp2ZE5rLzdic0ZwNW5pK09qa3pydExqejZabHlnWTFNZThGWHpHRlRXeXRwTDVIZnFjSW5mbGJ5VTlUK0k2U0x0Cnp6VkpBb0dCQUtkYmQ5V3F3c1lhSHQyQUhsaHcrRnh4U3dwWEM2MnZVUW1BWFpmS2NRY0xpREZuUjZOUlRCMFAKc3YvTm9VTnlPME1uZ1Q1bTMwZzliMjdnSDhGMHc5VkphSkFDZ09XRzNtS1JhWjViT1BmUk5YZUM1dGVZZW11OQpoVUsxNkFjU0Q2WFdUTTlsbzcvS0FpSzJEVzhqWStHbm8yYmpBMGwybmgwZmJHUXpqYnY5Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHakNDQWdLZ0F3SUJBZ0lSQUtkYWc5SU5Xc3B1clI5QnhqaXJXeFF3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGRHRndMbVJsWm1GMWJIUXVjM1pqTUI0WERUSXlNRFl4TWpFeE16QXhPVm9YRFRJegpNRFl4TWpFeE16QXhPVm93R2pFWU1CWUdBMVVFQXhNUGRHRndMbVJsWm1GMWJIUXVjM1pqTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBNzNhWXRmL0xSSC81VTFMbUJFVGdCOGRFY05NT3ZoMnoKWFc0WFNFbmFwOTh3ai85REJsUmx6ajAyTCtUbVlRWE0rVmdBWERjMldncXJKSCtqWEFYb3FOR2I5eThjWEtoaQpwUjJPam0zRHFKMjJjUitOSXd3VzlEcGlGR0loRHUwbzhnQUpmMUkvU1Z6VGR6TUViTU5Rb3hscWpOS1Q2aEJJCkczZm9NVWhORm9QbGNla1Uralc4aGVncHQweUdyK1JHaGtoQVdTMGxPaFBWNkttMy9OKzJwNjZOOWtjZmtUOEoKYzRlWFpodERzL3l3TklhSXRjMWVYNDJLVXc4MVJMOWt2b2gwQUlEbjRSdFJNQ2cwc3BsTllpb2M3cDJ3Z2tXOApydEl5UjNMYWZRZ0kvZ3lFa2NreVFCTVRQVXpvRVY3ajdvaVkzRlRVTkdsN0lTY1BZSWtmNHdJREFRQUJvMXN3CldUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUF3R0ExVWRFd0VCL3dRQ01BQXdHZ1lEVlIwUkJCTXdFWUlQZEdGd0xtUmxabUYxYkhRdWMzWmpNQTBHQ1NxRwpTSWIzRFFFQkN3VUFBNElCQVFCQ1kxNEdXaFVzMlNTSS9QUmRBZENBalFEUGQ4ZnFBdWV0Wm1rU1dYVHBPUUFyCkhuQjl2bGsybkV2bmI4bUJrRlVlV1NGRDdiNW54bGtvV2NlM3A2eWxSUHpMNXlNbUIrcFI1cW1wSEZUSVd1ZEQKQjhvS2hibVB6blVTRXhPenduZ01pM3JsRUVSY3NLTWNKYlVTNWJEZGdaK3hqL1hNYVBHVmU3bnczNHRXR0I2MwpORXV4eG5ieHpzMWk0aFdNemlsRmg3Q0YyNEtXb3lNYkE1UFdFYUpRZjlpK2NGYTBPYWNRRUtnZHkxMXFtSE54CjV6dHVsV1VaeGZZMzNOeWlpbGJZaTJDVzJXc3NUOXlKL3UzbWNSbldJdTJLdTFXUms2U2ZVY21SN1pTUy8rT3QKOXM4L2pIaHdmSjdzRVphNVQxZlprMzJyTkFvUHJvWndpS0t1RVFIegotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNzNhWXRmL0xSSC81VTFMbUJFVGdCOGRFY05NT3ZoMnpYVzRYU0VuYXA5OHdqLzlECkJsUmx6ajAyTCtUbVlRWE0rVmdBWERjMldncXJKSCtqWEFYb3FOR2I5eThjWEtoaXBSMk9qbTNEcUoyMmNSK04KSXd3VzlEcGlGR0loRHUwbzhnQUpmMUkvU1Z6VGR6TUViTU5Rb3hscWpOS1Q2aEJJRzNmb01VaE5Gb1BsY2VrVQoralc4aGVncHQweUdyK1JHaGtoQVdTMGxPaFBWNkttMy9OKzJwNjZOOWtjZmtUOEpjNGVYWmh0RHMveXdOSWFJCnRjMWVYNDJLVXc4MVJMOWt2b2gwQUlEbjRSdFJNQ2cwc3BsTllpb2M3cDJ3Z2tXOHJ0SXlSM0xhZlFnSS9neUUKa2NreVFCTVRQVXpvRVY3ajdvaVkzRlRVTkdsN0lTY1BZSWtmNHdJREFRQUJBb0lCQUF4V3p4MnB0WjZzL1hyMgpyWldRdXY2TG5SSTNQZTQ3OTQ4YjZpVTJjUWJ2Y0VBclJoZmdaM0tPSXVtcTROZ2xCVi9mMGZ6dWQyV0NZVGs3ClBuNnlheit2dFZxeVdjTEloblM5cGlmZXJoTlZOUjUxSXIrb2t0STQ0KzdxODRzaVcxYkUrN2hNMDZnREdYNXQKNlk5MUxRV0tmTHdPNmNKSTNuNVQybW9Yc0trMVB5d1k4cUV4ckJaaTAxUlhMZjlka25qWnkra09JaS9lMmZxTQpxZ2wvc3Z2aU5nU3g3bEFWYVludHd6TnNabG9CWkVwbGM5aWs5bmpFRkFSNkM0bU5CRDRLWDJmUTh1MjNBaURhCmNRdnB6NXVhVGlkTUZWVDRzbkVzVzJNaHVDRUdLbXFzakRUeHp4cjM4MDB6OVAwakdiaTFBaEpSVjdOU3lDTG8KT1RMd3JKRUNnWUVBOWZmbE14VkpoU09kK0JJeklJOGZULzNyQ1NNYUR3NGxZVTRPRGdrMUVSK05TOTM3aDlOOApFRzc5TDhqdjd4WGl4ek51S05aQ3ZQa1lxb29NT1R2VDYvcGxmNmV0YzJDYnBiendaMXh1bmxDVVJEY1RHeFdyCkdOMXdvQ043UmRBV3p5WFJ6UVgyNS8wNTl5aENOMjljOTJQdDlvUk5PVkFiZ0VtNElqWWlnS3NDZ1lFQStUckkKZUcrZ1kxajQzK21YRDZxeDN6cFdvM21LRmNyUjQwQnN4VTVHbnVSeXJxaFZFV2tId2h1UUovOXgvK2tYL2hnOApYVW5XV2xCYTQ0aVNMc2ZDZWRLNGZOeG1ZMlVqSHhEdDBuYnRGdEVuOGVvOC9FcEM1bUxlcjRRNzNQQmpXNWRECitYWDg0OGw2R21jZS9kOTY3QzFPWTZCNFFMVDI2eXhQVHBDc2pha0NnWUJuMkZvdS8vekROaTlhYmF5aVFXcXgKNWYwV0pYaTZCSG5wby8reEUxZ1JPNlgyOHVoZ0J2eXBINExMYXVWSnBvN1JGVGljQ3lHd0VPYkdFWFJwc1lXZQphbC94emtRZm94anpsMXBUK1NWR3Q3UnhQR05YbXdWYWdSc3NzTzQ1b2tvTytPT2owTEhXYmdYTUFIWThXMHIvCnMzUGpFU1pkWFNIUFB0Qjd1U2xGOHdLQmdRRFQ1SlZpUjgxK0NidjJheHdDdHVacFdxa2tiWVhvQnpzeFVhbm8KaWlkaW1lbWk4dno0UTJyVUxpait5S0I4cWdtNi81SDY0bmI2N0F5S0hLZmtXL1BOTFVtcTVwdXFiK2RQVjA1TApQTTlRTWQwYlFVSStZVWpGcFZPY3QvbEpXNXV0MkVwemdrdlN3bzRzZW5ZUDgvd0habkdhSkdsNDRpSjRTWURYCjFBclFtUUtCZ0ZIYm96MnBVWlJvSjRCdm90Q09pN2Q1dElad2NLNWJleHJvRzRQRW1MdXplL2VVMVlHTDVFU3QKTFBKRDlsNFZYa2FLVmRHdDdsQ0ozaG9PRzhJQzVMbjFObU9PV3Q5VG9mSUpjZTNtcGVJTzBKOW1yR1Q2WmUrdApZc3dDVHZEUDJiRHVzRWVibHVObzZ1RHFEbERDT0diQkM2bVJKNGdVWllVNi9zUHB3QjhECi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
    [log]
    mode = console
    [log.console]
    format = text
    level = info
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.default.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true
  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['default']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'default'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
  - apiGroups:
      - extensions
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - extensions
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
      - endpoints
      - services
      - replicationcontrollers
      - namespaces
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - linkerd.io
    resources:
      - serviceprofiles
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - policy.linkerd.io
    resources:
      - servers
      - serverauthorizations
    verbs:
      - list
      - get
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - pods
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - replicationcontrollers
      - namespaces
      - nodes
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - extensions
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - extensions
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - list
      - get
      - watch
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
  - apiGroups:
      - tap.linkerd.io
    resources:
      - '*'
    verbs:
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-default-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterroles
      - clusterrolebindings
    verbs:
      - list
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - list
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
      - validatingwebhookconfigurations
    verbs:
      - list
  - apiGroups:
      - linkerd.io
    resources:
      - serviceprofiles
    verbs:
      - list
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
  - apiGroups:
      - apiregistration.k8s.io
    resources:
      - apiservices
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-default-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-metrics-api
subjects:
  - kind: ServiceAccount
    name: metrics-api
    namespace: default
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: default
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
  - kind: ServiceAccount
    name: tap-injector
    namespace: default
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-tap
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-default-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-default-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-default-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: default
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-default-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-default-tap-admin
subjects:
  - kind: ServiceAccount
    name: web
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-default-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-default-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
    resourceNames:
      - linkerd-config
  - apiGroups:
      - ""
    resources:
      - namespaces
      - configmaps
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
      - pods
    verbs:
      - list
  - apiGroups:
      - apps
    resources:
      - replicasets
    verbs:
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-default-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: default
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
    - name: http
      port: 3000
      targetPort: 3000
---
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
    - name: http
      port: 8085
      targetPort: 8085
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
    - name: admin-http
      port: 9090
      targetPort: 9090
---
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
    - name: tap-injector
      port: 443
      targetPort: tap-injector
---
kind: Service
apiVersion: v1
metadata:
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
    - name: grpc
      port: 8088
      targetPort: 8088
    - name: apiserver
      port: 443
      targetPort: apiserver
---
kind: Service
apiVersion: v1
metadata:
  name: web
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: default
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
    - name: http
      port: 8084
      targetPort: 8084
    - name: admin-http
      port: 9994
      targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: enabled
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.12.4
    component: grafana
    namespace: default
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: default
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-21.12.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: default
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - env:
            - name: GF_PATHS_DATA
              value: /data
            - name: GODEBUG
              value: netdns=go
          image: cr.l5d.io/linkerd/grafana:edge-21.12.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
          name: grafana
          ports:
            - containerPort: 3000
              name: http
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources: null
          securityContext:
            runAsUser: 11327
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/grafana
              name: grafana-config
              readOnly: true
      serviceAccountName: grafana
      volumes:
        - emptyDir: {}
          name: data
        - configMap:
            items:
              - key: grafana.ini
                path: grafana.ini
              - key: datasources.yaml
                path: provisioning/datasources/datasources.yaml
              - key: dashboards.yaml
                path: provisioning/dashboards/dashboards.yaml
            name: grafana-config
          name: grafana-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: enabled
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.12.4
    component: metrics-api
  name: metrics-api
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 90b7e27a0c2333c74cdf522cacf6beee88572ac1423b016740156d9c068a513c
        linkerd.io/created-by: linkerd/helm edge-21.12.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - -controller-namespace=linkerd
            - -log-level=info
            - -log-format=plain
            - -cluster-domain=cluster.local
            - -prometheus-url=http://prometheus.default.svc.cluster.local:9090
          image: cr.l5d.io/linkerd/metrics-api:edge-21.12.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9995
            initialDelaySeconds: 10
          name: metrics-api
          ports:
            - containerPort: 8085
              name: http
            - containerPort: 9995
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9995
          resources: null
          securityContext:
            runAsUser: 11618
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
      serviceAccountName: metrics-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: enabled
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.12.4
    component: prometheus
    namespace: default
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: default
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-21.12.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: default
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
        - args:
            - --log.level=info
            - --log.format=logfmt
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/data
            - --storage.tsdb.retention.time=6h
          image: prom/prometheus:v2.30.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          name: prometheus
          ports:
            - containerPort: 9090
              name: admin-http
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources: null
          securityContext:
            runAsNonRoot: true
            runAsUser: 11625
            runAsGroup: 65534
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-config
              subPath: prometheus.yml
              readOnly: true
      serviceAccountName: prometheus
      volumes:
        - name: data
          emptyDir: {}
        - configMap:
            name: prometheus-config
          name: prometheus-config
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: enabled
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 429da7e6834ee077bc4f07b1138fd65e185a0af3fe9b3b82a3c8fb7baffcb7db
        linkerd.io/created-by: linkerd/helm edge-21.12.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - injector
            - -tap-service-name=tap.default.serviceaccount.identity.linkerd.cluster.local
            - -log-level=info
            - -log-format=plain
          image: cr.l5d.io/linkerd/tap:edge-21.12.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9995
            initialDelaySeconds: 10
          name: tap-injector
          ports:
            - containerPort: 8443
              name: tap-injector
            - containerPort: 9995
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9995
          resources: null
          securityContext:
            runAsUser: 10316
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: tls
              readOnly: true
      serviceAccountName: tap-injector
      volumes:
        - name: tls
          secret:
            secretName: tap-injector-k8s-tls
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: enabled
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.12.4
    component: tap
    namespace: default
  name: tap
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: default
  template:
    metadata:
      annotations:
        checksum/config: 7b3a58b6d509c2de58ab1bfdcdeb7a0bfe1b1eae2acf7999842c8cedb70a6d5d
        linkerd.io/created-by: linkerd/helm edge-21.12.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: default
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - api
            - -api-namespace=linkerd
            - -log-level=info
            - -log-format=plain
            - -identity-trust-domain=cluster.local
          image: cr.l5d.io/linkerd/tap:edge-21.12.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9998
            initialDelaySeconds: 10
          name: tap
          ports:
            - containerPort: 8088
              name: grpc
            - containerPort: 8089
              name: apiserver
            - containerPort: 9998
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9998
          resources: null
          securityContext:
            runAsUser: 10890
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: tls
              readOnly: true
      serviceAccountName: tap
      volumes:
        - name: tls
          secret:
            secretName: tap-k8s-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: enabled
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.12.4
    component: web
    namespace: default
  name: web
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: default
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-21.12.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: default
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - args:
            - -linkerd-metrics-api-addr=metrics-api.default.svc.cluster.local:8085
            - -cluster-domain=cluster.local
            - -grafana-addr=grafana.default.svc.cluster.local:3000
            - -controller-namespace=linkerd
            - -viz-namespace=default
            - -log-level=info
            - -log-format=plain
            - -enforced-host=^(localhost|127\.0\.0\.1|web\.default\.svc\.cluster\.local|web\.default\.svc|\[::1\])(:\d+)?$
          image: cr.l5d.io/linkerd/web:edge-21.12.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9994
            initialDelaySeconds: 10
          name: web
          ports:
            - containerPort: 8084
              name: http
            - containerPort: 9994
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9994
          resources: null
          securityContext:
            runAsUser: 11726
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
      serviceAccountName: web
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: default
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHakNDQWdLZ0F3SUJBZ0lSQUtkYWc5SU5Xc3B1clI5QnhqaXJXeFF3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGRHRndMbVJsWm1GMWJIUXVjM1pqTUI0WERUSXlNRFl4TWpFeE16QXhPVm9YRFRJegpNRFl4TWpFeE16QXhPVm93R2pFWU1CWUdBMVVFQXhNUGRHRndMbVJsWm1GMWJIUXVjM1pqTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBNzNhWXRmL0xSSC81VTFMbUJFVGdCOGRFY05NT3ZoMnoKWFc0WFNFbmFwOTh3ai85REJsUmx6ajAyTCtUbVlRWE0rVmdBWERjMldncXJKSCtqWEFYb3FOR2I5eThjWEtoaQpwUjJPam0zRHFKMjJjUitOSXd3VzlEcGlGR0loRHUwbzhnQUpmMUkvU1Z6VGR6TUViTU5Rb3hscWpOS1Q2aEJJCkczZm9NVWhORm9QbGNla1Uralc4aGVncHQweUdyK1JHaGtoQVdTMGxPaFBWNkttMy9OKzJwNjZOOWtjZmtUOEoKYzRlWFpodERzL3l3TklhSXRjMWVYNDJLVXc4MVJMOWt2b2gwQUlEbjRSdFJNQ2cwc3BsTllpb2M3cDJ3Z2tXOApydEl5UjNMYWZRZ0kvZ3lFa2NreVFCTVRQVXpvRVY3ajdvaVkzRlRVTkdsN0lTY1BZSWtmNHdJREFRQUJvMXN3CldUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUF3R0ExVWRFd0VCL3dRQ01BQXdHZ1lEVlIwUkJCTXdFWUlQZEdGd0xtUmxabUYxYkhRdWMzWmpNQTBHQ1NxRwpTSWIzRFFFQkN3VUFBNElCQVFCQ1kxNEdXaFVzMlNTSS9QUmRBZENBalFEUGQ4ZnFBdWV0Wm1rU1dYVHBPUUFyCkhuQjl2bGsybkV2bmI4bUJrRlVlV1NGRDdiNW54bGtvV2NlM3A2eWxSUHpMNXlNbUIrcFI1cW1wSEZUSVd1ZEQKQjhvS2hibVB6blVTRXhPenduZ01pM3JsRUVSY3NLTWNKYlVTNWJEZGdaK3hqL1hNYVBHVmU3bnczNHRXR0I2MwpORXV4eG5ieHpzMWk0aFdNemlsRmg3Q0YyNEtXb3lNYkE1UFdFYUpRZjlpK2NGYTBPYWNRRUtnZHkxMXFtSE54CjV6dHVsV1VaeGZZMzNOeWlpbGJZaTJDVzJXc3NUOXlKL3UzbWNSbldJdTJLdTFXUms2U2ZVY21SN1pTUy8rT3QKOXM4L2pIaHdmSjdzRVphNVQxZlprMzJyTkFvUHJvWndpS0t1RVFIegotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
  - name: tap-injector.linkerd.io
    clientConfig:
      service:
        name: tap-injector
        namespace: default
        path: /
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROVENDQWgyZ0F3SUJBZ0lSQU1zY2JPSnBodVl0bDBFQ1d6S1dWR2d3RFFZSktvWklodmNOQVFFTEJRQXcKSXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUI0WERUSXlNRFl4TWpFeApNekF5TUZvWERUSXpNRFl4TWpFeE16QXlNRm93SXpFaE1COEdBMVVFQXhNWWRHRndMV2x1YW1WamRHOXlMbVJsClptRjFiSFF1YzNaak1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOTFJVHYvdkcKZE1GcnRuemlmdTUzRGJZQlEzNlg0NmQ1NzlUV3BFVEFCUHRMaklQSXhlZ3FOKzExcnh6d2puZ2pLd1NTd0NLQQowdThUMFZzUm9WT3VGeDErWWpBem91c3l2QVFTOGNKTER4TmF5YVhJTTBRYllpZEQ5b2gwQStSTDJGUWNlNktvCmNJR09ld1NiK0ErcFlFRHhOREZXOE11YkdPNjk4Mi80U3dvYjdRQ2JNNkltUmd6TG9QazVOZmt4VHk3ekNTTnMKZXFBcWdBM2VhTHFjaS9pQmVqTm5nK083UjRaVCt5MlNJRG9od3JoUXdrQStHb1JENEFTblVrbzhKWW9JcW9wWgp6VWhOTDdXdXNKQkpXRXcrM2liNWZkTWpVYkwvZ1g4OWpqL29NdjlDYmxoRk1XdjZYT2NzcW5WS0xDcHZYTUhlClJadmdxZTBkVnVyV1J3SURBUUFCbzJRd1lqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdJd1lEVlIwUkJCd3dHb0lZZEdGdwpMV2x1YW1WamRHOXlMbVJsWm1GMWJIUXVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCSG9sekw3REVHCk1xak1HSmhoVVVGbTRDRTNqb1FEQmRrL05DQWpicDV0NFlmZTM2bFc0VjgxK1kzNXNsc01UVHdPMkl1MFVNaXgKUXdSRC9JQWdiWEQyZzA1Y1BPc0dJLy8vTUlCYmd6QkFjOVhEUzhPSnVRMjRIaXFyQ0xoT3VNa1dYaSs4b2ZMeAo3QVJqYnBZaTZUdUQ4K0h4blNTOENSZ2ZwK2NFRks1WWlsZG10WnZzdjFWR3lscFh0a1RDOU9aenNzQklZSFRXCksvVHVxTzA3TkRwbTdCRWt3ajRvRWtYN1h0ajBsczNXRkZxTk1WanNOUGt3S1BOc2V5QzNEckp4R0U4akYyMHAKS0xid1lTbmpNM05WdTZCVWl6Q3Z0c0txRklxbWdpQTcvRW5pZ256WlNVM0JNM3ZUNUxtdzNIaGhFdkNEeTNHOQplYXMzSHhKRk5OaTgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
    failurePolicy: Ignore
    admissionReviewVersions:
      - v1
      - v1beta1
    reinvocationPolicy: IfNeeded
    rules:
      - operations:
          - CREATE
        apiGroups:
          - ""
        apiVersions:
          - v1
        resources:
          - pods
    sideEffects: None
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    name: admin
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    name: grafana
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    name: metrics-api
  client:
    meshTLS:
      serviceAccounts:
        - name: web
        - name: prometheus
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    name: proxy-admin
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    name: tap-injector-webhook
  client:
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
spec:
  server:
    name: tap-api
  client:
    unauthenticated: true
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.default.svc.cluster.local
spec:
  routes:
    - name: POST /api/v1/StatSummary
      condition:
        method: POST
        pathRegex: /api/v1/StatSummary
    - name: POST /api/v1/TopRoutes
      condition:
        method: POST
        pathRegex: /api/v1/TopRoutes
    - name: POST /api/v1/ListPods
      condition:
        method: POST
        pathRegex: /api/v1/ListPods
    - name: POST /api/v1/ListServices
      condition:
        method: POST
        pathRegex: /api/v1/ListServices
    - name: POST /api/v1/SelfCheck
      condition:
        method: POST
        pathRegex: /api/v1/SelfCheck
    - name: POST /api/v1/Gateways
      condition:
        method: POST
        pathRegex: /api/v1/Gateways
    - name: POST /api/v1/Edges
      condition:
        method: POST
        pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.default.svc.cluster.local
spec:
  routes:
    - name: POST /api/v1/query
      condition:
        method: POST
        pathRegex: /api/v1/query
    - name: GET /api/v1/query_range
      condition:
        method: GET
        pathRegex: /api/v1/query_range
    - name: GET /api/v1/series
      condition:
        method: GET
        pathRegex: /api/v1/series
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: grafana.default.svc.cluster.local
spec:
  routes:
    - name: GET /api/annotations
      condition:
        method: GET
        pathRegex: /api/annotations
    - name: GET /api/dashboards/tags
      condition:
        method: GET
        pathRegex: /api/dashboards/tags
    - name: GET /api/dashboards/uid/{uid}
      condition:
        method: GET
        pathRegex: /api/dashboards/uid/.*
    - name: GET /api/dashboard/{dashboard}
      condition:
        method: GET
        pathRegex: /api/dashboard/.*
    - name: GET /api/datasources/proxy/1/api/v1/series
      condition:
        method: GET
        pathRegex: /api/datasources/proxy/1/api/v1/series
    - name: GET /api/datasources/proxy/1/api/v1/query_range
      condition:
        method: GET
        pathRegex: /api/datasources/proxy/1/api/v1/query_range
    - name: GET /api/search
      condition:
        method: GET
        pathRegex: /api/search
    - name: GET /d/{uid}/{dashboard-name}
      condition:
        method: GET
        pathRegex: /d/[^/]*/.*
    - name: GET /public/build/{style}.css
      condition:
        method: GET
        pathRegex: /public/build/.*\.css
    - name: GET /public/fonts/{font}
      condition:
        method: GET
        pathRegex: /public/fonts/.*
    - name: GET /public/img/{img}
      condition:
        method: GET
        pathRegex: /public/img/.*
---
kind: ServiceAccount
apiVersion: v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    helm.sh/hook: post-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  name: namespace-metadata
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    helm.sh/hook: post-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  name: namespace-metadata
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - patch
    resourceNames:
      - default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    helm.sh/hook: post-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  name: namespace-metadata
roleRef:
  kind: Role
  name: namespace-metadata
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: namespace-metadata
    namespace: default
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-21.12.4
    helm.sh/hook: post-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: namespace-metadata
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-21.12.4
  name: namespace-metadata
spec:
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-21.12.4
      labels:
        app.kubernetes.io/name: namespace-metadata
        app.kubernetes.io/part-of: Linkerd
        app.kubernetes.io/version: edge-21.12.4
    spec:
      restartPolicy: Never
      serviceAccountName: namespace-metadata
      containers:
        - name: namespace-metadata
          image: curlimages/curl:7.78.0
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - -c
            - |
              ops=''
              token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              ns=$(curl -kfv -H "Authorization: Bearer $token" \
                "https://kubernetes.default.svc/api/v1/namespaces/default")

              if echo "$ns" | grep -vq 'labels'; then
                ops="$ops{\"op\": \"add\",\"path\": \"/metadata/labels\",\"value\": {}},"
              fi
              if echo "$ns" | grep -vq 'annotations'; then
                ops="$ops{\"op\": \"add\", \"path\": \"/metadata/annotations\", \"value\": {}},"
              fi
              ops="$ops{\"op\": \"add\", \"path\": \"/metadata/labels/linkerd.io~1extension\", \"value\": \"viz\"}"

              curl -kfv -XPATCH -H "Content-Type: application/json-patch+json" -H "Authorization: Bearer $token" \
                -d "[$ops]" \
                "https://kubernetes.default.svc/api/v1/namespaces/default?fieldManager=kubectl-label"
