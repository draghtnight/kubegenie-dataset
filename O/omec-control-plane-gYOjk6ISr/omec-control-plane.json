[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "hss",
      "namespace": "gYOjk6ISr",
      "labels": {
        "release": "release-name",
        "app": "hss"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "mme",
      "namespace": "gYOjk6ISr",
      "labels": {
        "release": "release-name",
        "app": "mme"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "spgwc",
      "namespace": "gYOjk6ISr",
      "labels": {
        "release": "release-name",
        "app": "spgwc"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "hss",
      "labels": {
        "release": "release-name",
        "app": "hss"
      }
    },
    "data": {
      "acl.conf": "ALLOW_OLD_TLS *.cluster.local\n",
      "hss.conf": "Identity = \"hss.default.svc.cluster.local\";\nRealm = \"default.svc.cluster.local\";\nTLS_Cred = \"/opt/c3po/hss/conf/hss.cert.pem\",\n           \"/opt/c3po/hss/conf/hss.key.pem\";\nTLS_CA = \"/opt/c3po/hss/conf/cacert.pem\";\nNo_SCTP;\nPrefer_TCP;\nNo_IPv6;\nSCTP_streams = 3;\nNoRelay;\nAppServThreads = 4;\nPort = 3868;\nSecPort = 5868;\nLoadExtension = \"/usr/local/lib/freeDiameter/acl_wl.fdx\" : \"/opt/c3po/hss/conf/acl.conf\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_3gpp2_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_draftload_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_etsi283034_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc4004_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc4006bis_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc4072_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc4590_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc5447_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc5580_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc5777_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc5778_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc6734_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc6942_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc7155_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc7683_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc7944_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29061_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29128_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29154_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29173_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29212_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29214_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29215_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29217_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29229_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29272_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29273_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29329_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29336_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29337_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29338_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29343_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29344_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29345_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29368_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29468_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts32299_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_S6as6d.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_S6t.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_S6c.fdx\";\n",
      "hss-run.sh": "#!/bin/bash\n\n# Copyright 2019-present Open Networking Foundation\n#\n# SPDX-License-Identifier: LicenseRef-ONF-Member-Only-1.0\n\nset -ex\n\nCONF_DIR=\"/opt/c3po/hss/conf\"\nLOGS_DIR=\"/opt/c3po/hss/logs\"\nmkdir -p $CONF_DIR $LOGS_DIR\n\ncp /etc/hss/conf/{acl.conf,hss.json,hss.conf,oss.json} $CONF_DIR\ncat $CONF_DIR/{hss.json,hss.conf}\n\ncd $CONF_DIR\nmake_certs.sh hss default.svc.cluster.local\n\ncd ..\nhss -j $CONF_DIR/hss.json\n",
      "hss-bootstrap.sh": "#!/bin/bash\n\n# Copyright 2018 Intel Corporation\n# Copyright 2019-present Open Networking Foundation\n#\n# SPDX-License-Identifier: Apache-2.0\n# SPDX-License-Identifier: LicenseRef-ONF-Member-Only-1.0\n\nset -ex\n\nfunction provision_users() {\n    count=${1}\n    imsi=${2}\n    msisdn=${3}\n    apn=${4}\n    key=${5}\n    opc=${6}\n    sqn=${7}\n    cassandra_ip=${8}\n    mmeidentity=${9}\n    mmerealm=${10}\n\n    for (( i=1; i<=$count; i++ ))\n    do\n        echo \"IMSI=$imsi MSISDN=$msisdn\"\n        cqlsh $cassandra_ip -e \"INSERT INTO vhss.users_imsi (imsi, msisdn, access_restriction, key, opc, mmehost, mmeidentity_idmmeidentity, mmerealm, rand, sqn, subscription_data) VALUES ('$imsi', $msisdn, 41, '$key', '$opc','$mmeidentity', 3, '$mmerealm', '2683b376d1056746de3b254012908e0e', $sqn, '{\\\"Subscription-Data\\\":{\\\"Access-Restriction-Data\\\":41,\\\"Subscriber-Status\\\":0,\\\"Network-Access-Mode\\\":2,\\\"Regional-Subscription-Zone-Code\\\":[\\\"0x0123\\\",\\\"0x4567\\\",\\\"0x89AB\\\",\\\"0xCDEF\\\",\\\"0x1234\\\",\\\"0x5678\\\",\\\"0x9ABC\\\",\\\"0xDEF0\\\",\\\"0x2345\\\",\\\"0x6789\\\"],\\\"MSISDN\\\":\\\"0x$msisdn\\\",\\\"AMBR\\\":{\\\"Max-Requested-Bandwidth-UL\\\":50000000,\\\"Max-Requested-Bandwidth-DL\\\":100000000},\\\"APN-Configuration-Profile\\\":{\\\"Context-Identifier\\\":0,\\\"All-APN-Configurations-Included-Indicator\\\":0,\\\"APN-Configuration\\\":{\\\"Context-Identifier\\\":0,\\\"PDN-Type\\\":0,\\\"Served-Party-IP-Address\\\":[\\\"0.0.0.0\\\"],\\\"Service-Selection\\\":\\\"$apn\\\",\\\"EPS-Subscribed-QoS-Profile\\\":{\\\"QoS-Class-Identifier\\\":9,\\\"Allocation-Retention-Priority\\\":{\\\"Priority-Level\\\":15,\\\"Pre-emption-Capability\\\":0,\\\"Pre-emption-Vulnerability\\\":0}},\\\"AMBR\\\":{\\\"Max-Requested-Bandwidth-UL\\\":50000000,\\\"Max-Requested-Bandwidth-DL\\\":100000000},\\\"PDN-GW-Allocation-Type\\\":0,\\\"MIP6-Agent-Info\\\":{\\\"MIP-Home-Agent-Address\\\":[\\\"172.26.17.183\\\"]}}},\\\"Subscribed-Periodic-RAU-TAU-Timer\\\":0}}');\"\n\n        if [ $? -ne 0 ];then\n           echo -e \"oops! Something went wrong adding $imsi to vhss.users_imsi!\\n\"\n           exit 1\n        fi\n\n        cqlsh $cassandra_ip -e \"INSERT INTO vhss.msisdn_imsi (msisdn, imsi) VALUES ($msisdn, '$imsi');\"\n        if [ $? -ne 0 ];then\n           echo -e \"oops! Something went wrong adding $imsi to vhss.msisdn_imsi!\\n\"\n           exit 1\n        fi\n\n        echo -e \"Added $imsi\\n\"\n\n        imsi=`expr $imsi + 1`;\n        msisdn=`expr $msisdn + 1`\n    done\n}\n\nfunction provision_staticusers() {\n    imsi=${1}\n    msisdn=${2}\n    apn=${3}\n    key=${4}\n    opc=${5}\n    sqn=${6}\n    cassandra_ip=${7}\n    mmeidentity=${8}\n    mmerealm=${9}\n    staticAddr=${10}\n\n    echo \"IMSI=$imsi MSISDN=$msisdn\"\n    cqlsh $cassandra_ip -e \"INSERT INTO vhss.users_imsi (imsi, msisdn, access_restriction, key, opc, mmehost, mmeidentity_idmmeidentity, mmerealm, rand, sqn, subscription_data) VALUES ('$imsi', $msisdn, 41, '$key', '$opc','$mmeidentity', 3, '$mmerealm', '2683b376d1056746de3b254012908e0e', $sqn, '{\\\"Subscription-Data\\\":{\\\"Access-Restriction-Data\\\":41,\\\"Subscriber-Status\\\":0,\\\"Network-Access-Mode\\\":2,\\\"Regional-Subscription-Zone-Code\\\":[\\\"0x0123\\\",\\\"0x4567\\\",\\\"0x89AB\\\",\\\"0xCDEF\\\",\\\"0x1234\\\",\\\"0x5678\\\",\\\"0x9ABC\\\",\\\"0xDEF0\\\",\\\"0x2345\\\",\\\"0x6789\\\"],\\\"MSISDN\\\":\\\"0x$msisdn\\\",\\\"AMBR\\\":{\\\"Max-Requested-Bandwidth-UL\\\":50000000,\\\"Max-Requested-Bandwidth-DL\\\":100000000},\\\"APN-Configuration-Profile\\\":{\\\"Context-Identifier\\\":0,\\\"All-APN-Configurations-Included-Indicator\\\":0,\\\"APN-Configuration\\\":{\\\"Context-Identifier\\\":0,\\\"PDN-Type\\\":0,\\\"Served-Party-IP-Address\\\":[\\\"$staticAddr\\\"],\\\"Service-Selection\\\":\\\"$apn\\\",\\\"EPS-Subscribed-QoS-Profile\\\":{\\\"QoS-Class-Identifier\\\":9,\\\"Allocation-Retention-Priority\\\":{\\\"Priority-Level\\\":15,\\\"Pre-emption-Capability\\\":0,\\\"Pre-emption-Vulnerability\\\":0}},\\\"AMBR\\\":{\\\"Max-Requested-Bandwidth-UL\\\":50000000,\\\"Max-Requested-Bandwidth-DL\\\":100000000},\\\"PDN-GW-Allocation-Type\\\":0,\\\"MIP6-Agent-Info\\\":{\\\"MIP-Home-Agent-Address\\\":[\\\"172.26.17.183\\\"]}}},\\\"Subscribed-Periodic-RAU-TAU-Timer\\\":0}}');\"\n\n    cqlsh $cassandra_ip -e \"INSERT INTO vhss.msisdn_imsi (msisdn, imsi) VALUES ($msisdn, '$imsi');\"\n    echo -e \"Added $imsi\\n\"\n}\n\nfunction provision_mme() {\n    id=$1\n    isdn=$2\n    host=$3\n    realm=$4\n    uereachability=$5\n    cassandra_ip=$6\n\n    cqlsh $cassandra_ip -e \"INSERT INTO vhss.mmeidentity (idmmeidentity, mmeisdn, mmehost, mmerealm, ue_reachability) VALUES ($id, '$isdn', '$host', '$realm', $uereachability);\"\n    if [ $? -ne 0 ];then\n       echo -e \"oops! Something went wrong adding to vhss.mmeidentity!\\n\"\n       exit 1\n    fi\n\n    cqlsh $cassandra_ip -e \"INSERT INTO vhss.mmeidentity_host (idmmeidentity, mmeisdn, mmehost, mmerealm, ue_reachability) VALUES ($id, '$isdn', '$host', '$realm', $uereachability);\"\n    if [ $? -ne 0 ];then\n       echo -e \"oops! Something went wrong adding to vhss.mmeidentity_host!\\n\"\n       exit 1\n    fi\n\n    echo -e \"Added mme $id\\n\"\n}\n\nmme_identity=mme.default.svc.cluster.local\nmme_realm=default.svc.cluster.local\nprovision_users \\\n    10 \\\n    208014567891200 \\\n    1122334455 \\\n    internet \\\n    465b5ce8b199b49faa5f0a2ee238a6bc \\\n    d4416644f6154936193433dd20a0ace0 \\\n    96 \\\n    cassandra \\\n    $mme_identity \\\n    $mme_realm\nprovision_staticusers \\\n    208014567891201 \\\n    1122334455 \\\n    internet \\\n    465b5ce8b199b49faa5f0a2ee238a6bc \\\n    d4416644f6154936193433dd20a0ace0 \\\n    96 \\\n    cassandra \\\n    $mme_identity \\\n    $mme_realm \\\n    0.0.0.0\nprovision_mme \\\n    1 \\\n    19136246000 \\\n    $mme_identity \\\n    $mme_realm \\\n    1 \\\n    cassandra\n",
      "hss.json": "{\"common\":{\"fdcfg\":\"conf/hss.conf\",\"originhost\":\"hss.default.svc.cluster.local\",\"originrealm\":\"default.svc.cluster.local\"},\"hss\":{\"auditlogname\":\"logs/hss_audit.log\",\"auditlognumber\":5,\"auditlogsize\":20,\"casscoreconnections\":2,\"cassdb\":\"vhss\",\"cassioqueuesize\":32768,\"cassiothreads\":2,\"cassmaxconnections\":8,\"casspwd\":\"root\",\"casssrv\":\"cassandra\",\"cassusr\":\"root\",\"concurrent\":10,\"gtwhost\":\"*\",\"gtwport\":9080,\"logname\":\"logs/hss.log\",\"lognumber\":5,\"logqsize\":8192,\"logsize\":20,\"numworkers\":4,\"optkey\":\"63bfa50ee6523365ff14c1f45f88737d\",\"ossfile\":\"conf/oss.json\",\"ossport\":9082,\"randv\":true,\"reloadkey\":false,\"restport\":9081,\"statfreq\":2000,\"statlogname\":\"logs/hss_stat.log\",\"statlognumber\":5,\"statlogsize\":20}}",
      "oss.json": "{\"option\":{\"id\":\"url\",\"type\":\"string\"},\"services\":[{\"commands\":[{\"id\":\"describe_loggers\"},{\"id\":\"set_logger_level\",\"options\":[{\"id\":\"name\",\"type\":\"string\"},{\"id\":\"level\",\"type\":\"integer\"}]}],\"id\":\"logger\"},{\"commands\":[{\"id\":\"describe_stats_frequency\"},{\"id\":\"describe_stats_live\"},{\"id\":\"set_stats_frequency\",\"options\":[{\"id\":\"frequency\",\"type\":\"integer\"}]}],\"id\":\"stats\"}]}"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "mme",
      "labels": {
        "release": "release-name",
        "app": "mme"
      }
    },
    "data": {
      "s6a_fd.conf": "Identity = \"mme.default.svc.cluster.local\";\nRealm = \"default.svc.cluster.local\";\nTLS_Cred = \"conf/mme.cert.pem\",\n           \"conf/mme.key.pem\";\nTLS_CA = \"conf/cacert.pem\";\nAppServThreads = 40;\nSCTP_streams = 3;\nNoRelay;\nNo_IPv6;\n#Port = 3868;\n#SecPort = 3869;\n\nConnectPeer = \"hss.default.svc.cluster.local\" { No_TLS; port = 3868; };\n\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_3gpp2_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_draftload_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_etsi283034_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc4004_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc4006bis_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc4072_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc4590_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc5447_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc5580_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc5777_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc5778_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc6734_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc6942_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc7155_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc7683_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_rfc7944_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29061_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29128_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29154_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29173_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29212_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29214_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29215_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29217_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29229_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29272_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29273_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29329_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29336_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29337_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29338_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29343_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29344_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29345_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29368_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts29468_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_ts32299_avps.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_S6as6d.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_S6c.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_S6t.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_SGd.fdx\";\nLoadExtension = \"/usr/local/lib/freeDiameter/dict_T6aT6bT7.fdx\";\n",
      "mme-init.sh": "#!/bin/sh\n\n# Copyright 2019-present Open Networking Foundation\n#\n# SPDX-License-Identifier: LicenseRef-ONF-Member-Only-1.0\n\nset -ex\n\ncp /opt/mme/config/config.json /opt/mme/config/shared/config.json\ncd /opt/mme/config/shared\n\n# Set local IP address for s1ap and s11 networks to the config\njq --arg MME_LOCAL_IP \"$POD_IP\" '.mme.ip_addr=$MME_LOCAL_IP' config.json > config.tmp && mv config.tmp config.json\njq --arg MME_LOCAL_IP \"$POD_IP\" '.s1ap.s1ap_local_addr=$MME_LOCAL_IP' config.json > config.tmp && mv config.tmp config.json\njq --arg MME_LOCAL_IP \"$POD_IP\" '.s11.egtp_local_addr=$MME_LOCAL_IP' config.json > config.tmp && mv config.tmp config.json\n\n# Set SPGWC address to the config\n# We need to convert service domain name to actual IP address\n# because mme apps does not take domain address - should be fixed in openmme\nSPGWC_ADDR=$(dig +short +search spgwc)\njq --arg SPGWC_ADDR \"$SPGWC_ADDR\" '.s11.sgw_addr //= $SPGWC_ADDR' config.json > config.tmp && mv config.tmp config.json\njq --arg SPGWC_ADDR \"$SPGWC_ADDR\" '.s11.pgw_addr //= $SPGWC_ADDR' config.json > config.tmp && mv config.tmp config.json\n\n# Add additional redundant keys - should be fixed in openmme\nHSS_TYPE=$(jq -r '.s6a.host_type' config.json)\nHSS_HOST=$(jq -r '.s6a.host' config.json)\njq --arg HSS_TYPE \"$HSS_TYPE\" '.s6a.hss_type=$HSS_TYPE' config.json > config.tmp && mv config.tmp config.json\njq --arg HSS_HOST \"$HSS_HOST\" '.s6a.host_name=$HSS_HOST' config.json > config.tmp && mv config.tmp config.json\n\n# Copy the final configs for each applications\ncp /opt/mme/config/shared/config.json /opt/mme/config/shared/mme.json\ncp /opt/mme/config/shared/config.json /opt/mme/config/shared/s11.json\ncp /opt/mme/config/shared/config.json /opt/mme/config/shared/s1ap.json\ncp /opt/mme/config/shared/config.json /opt/mme/config/shared/s6a.json\ncp /opt/mme/config/s6a_fd.conf /opt/mme/config/shared/s6a_fd.conf\ncp /opt/mme/config/mme_exporter.json /opt/mme/config/shared/mme_exporter.json\n\n#This multiple copies of config needs some cleanup. For now I want \n#that after running mme_init config to be present in the target directory\ncp /opt/mme/config/shared/* /openmme/target/conf/\n\n# Generate certs\nMME_IDENTITY=\"mme.default.svc.cluster.local\";\nDIAMETER_HOST=$(echo $MME_IDENTITY | cut -d'.' -f1)\nDIAMETER_REALM=\"default.svc.cluster.local\";\n\ncp /openmme/target/conf/make_certs.sh /opt/mme/config/shared/make_certs.sh\ncd /opt/mme/config/shared\n./make_certs.sh $DIAMETER_HOST $DIAMETER_REALM\n",
      "mme-run.sh": "#!/bin/bash\n\n# Copyright 2019-present Open Networking Foundation\n#\n# SPDX-License-Identifier: LicenseRef-ONF-Member-Only-1.0\n\nAPPLICATION=$1\n\n# copy config files to openmme target directly\ncp /opt/mme/config/shared/* /openmme/target/conf/\n\ncd /openmme/target\nexport LD_LIBRARY_PATH=/usr/local/lib:./lib\n\ncase $APPLICATION in\n    \"mme-app\")\n      echo \"Starting mme-app\"\n      echo \"conf/mme.json\"\n      cat conf/mme.json\n      ./bin/mme-app\n      ;;\n    \"s1ap-app\")\n      echo \"Starting s1ap-app\"\n      echo \"conf/s1ap.json\"\n      cat conf/s1ap.json\n      ./bin/s1ap-app\n      ;;\n    \"s6a-app\")\n      echo \"Starting s6a-app\"\n      echo \"conf/s6a.json\"\n      cat conf/s6a.json\n      echo \"conf/s6a_fd.conf\"\n      cat conf/s6a_fd.conf\n      ./bin/s6a-app\n      ;;\n    \"s11-app\")\n      echo \"Starting s11-app\"\n      echo \"conf/s11.json\"\n      cat conf/s11.json\n      ./bin/s11-app\n      ;;\n    *)\n      echo \"invalid app $APPLICATION\"\n      ;;\nesac\n",
      "config.json": "{\"mme\":{\"code\":1,\"group_id\":1,\"logging\":\"error\",\"mcc\":{\"dig1\":2,\"dig2\":0,\"dig3\":8},\"mnc\":{\"dig1\":0,\"dig2\":1,\"dig3\":-1},\"name\":\"vmmestandalone\",\"plmnlist\":{\"plmn1\":\"mcc=315,mnc=010\",\"plmn2\":\"mcc=208,mnc=01\"}},\"s11\":{\"egtp_default_port\":2123},\"s1ap\":{\"sctp_port\":36412,\"sctp_port_external\":36412},\"s6a\":{\"host\":\"hss.default.svc.cluster.local\",\"host_type\":\"freediameter\",\"realm\":\"default.svc.cluster.local\"}}",
      "mme_exporter.json": "{\"edges\":[{\"edgeName\":\"edge-onf-menlo\",\"id\":\"onf-menlo\",\"tac\":202},{\"edgeName\":\"edge-oaisim\",\"id\":\"oaisim\",\"tac\":1}],\"phoneTypes\":[{\"imsi\":208014567891200,\"phoneType\":\"Pixel-4\"},{\"imsi\":208014567891201,\"phoneType\":\"iPhone11-Pro\"}]}"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "spgwc",
      "labels": {
        "release": "release-name",
        "app": "spgwc"
      }
    },
    "data": {
      "cp_config.cfg": "if [ ! -d \"/dev/hugepages\" ]; then\n    MEMORY=\"--no-huge -m $((MEM_LIMIT-1024))\"\nfi\nCORES=\"-c $(taskset -p $$ | awk '{print $NF}')\"\nEAL_ARGS=\"${CORES} ${MEMORY} --no-pci\"\n\nMGMT_INFO=\"-s ${POD_IP} -w 192.168.251.3\"\nAPN_INFO=\"-i 10.250.0.0 -p 255.255.0.0 -a internet\"\nMISC=\"-l 2\"\nSPGW_CFG=\"-d 03\"\nCONFIG_UPDATE_FOLDER=\"-f /etc/cp/config/\"\nAPP_ARGS=\"${MGMT_INFO} ${APN_INFO} ${MISC} ${SPGW_CFG} ${CONFIG_UPDATE_FOLDER}\"\n",
      "interface.cfg": "[0]\nzmq_protocol = tcp\ncp_comm_ip = CP_ADDR\ncp_comm_port = 21\ncp_nb_ip = CP_ADDR\ncp_nb_port = 21\ndp_comm_ip = 127.0.0.1\ndp_comm_port = 20\n",
      "spgwc-run.sh": "#!/bin/bash\n\n# Copyright 2019-present Open Networking Foundation\n#\n# SPDX-License-Identifier: LicenseRef-ONF-Member-Only-1.0\n\nset -xe\n\nmkdir -p /opt/cp/config\ncd /opt/cp/config\n\ncp /etc/cp/config/{adc_rules.cfg,cp_config.cfg,interface.cfg,meter_profile.cfg,pcc_rules.cfg,sdf_rules.cfg,app_config.cfg} .\nsed -i \"s/CP_ADDR/$POD_IP/g\" interface.cfg\n\n. cp_config.cfg\nngic_controlplane $EAL_ARGS -- $APP_ARGS\n",
      "adc_rules.cfg": "[GLOBAL]\nNUM_ADC_RULES = 0",
      "app_config.cfg": "[GLOBAL]\nNUM_DP_SELECTION_RULES = 2\n[DP_SELECTION_RULE_1]\nDPID = 1\nDPNAME = onf-menlo\nMCC = 315\nMNC = 010\nTAC = 202\n[DP_SELECTION_RULE_2]\nDPID = 2\nDPNAME = oaisim\nMCC = 208\nMNC = 01\nTAC = 1",
      "meter_profile.cfg": "[GLOBAL]\nNUM_OF_IDX = 0",
      "pcc_rules.cfg": "[GLOBAL]\nNUM_PCC_FILTERS = 1\nUL_AMBR_MTR_PROFILE_IDX = 1\nDL_AMBR_MTR_PROFILE_IDX = 2\n\n[PCC_FILTER_1]\nRULE_NAME = DefaultRule\nRATING_GROUP = 9\nSERVICE_ID = 0\nRULE_STATUS = 0\nGATE_STATUS = 1\nSESSION_CONT = 0\nREPORT_LEVEL = 1\nCHARGING_MODE = 0\nMETERING_METHOD = 0\nMUTE_NOTIFY = 0\nMONITORING_KEY = 0\nSPONSOR_ID = 0\nREDIRECT_INFO = 0\nPRECEDENCE = 254\nDROP_PKT_COUNT = 0\nUL_MBR_MTR_PROFILE_IDX = 3\nDL_MBR_MTR_PROFILE_IDX = 3\nSDF_FILTER_IDX = 99998",
      "sdf_rules.cfg": "[GLOBAL]\nNUM_SDF_FILTERS = 1\n\n[SDF_FILTER_1]\nDIRECTION = downlink_only\nIPV4_REMOTE = 13.2.1.113\nIPV4_REMOTE_MASK = 255.255.255.0\nPROTOCOL = 17\nLOCAL_LOW_LIMIT_PORT = 0\nLOCAL_HIGH_LIMIT_PORT = 65535\nREMOTE_LOW_LIMIT_PORT = 0\nREMOTE_HIGH_LIMIT_PORT = 65535"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "Role",
    "metadata": {
      "name": "hss",
      "namespace": "gYOjk6ISr",
      "labels": {
        "release": "release-name",
        "app": "hss"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list",
          "patch"
        ],
        "resources": [
          "statefulsets",
          "daemonsets",
          "jobs",
          "pods",
          "services",
          "endpoints",
          "configmaps"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "Role",
    "metadata": {
      "name": "mme",
      "namespace": "gYOjk6ISr",
      "labels": {
        "release": "release-name",
        "app": "mme"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list",
          "patch"
        ],
        "resources": [
          "statefulsets",
          "daemonsets",
          "jobs",
          "pods",
          "services",
          "endpoints",
          "configmaps"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "Role",
    "metadata": {
      "name": "spgwc",
      "namespace": "gYOjk6ISr",
      "labels": {
        "release": "release-name",
        "app": "spgwc"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "",
          "extensions",
          "batch",
          "apps"
        ],
        "verbs": [
          "get",
          "list",
          "patch"
        ],
        "resources": [
          "statefulsets",
          "daemonsets",
          "jobs",
          "pods",
          "services",
          "endpoints",
          "configmaps"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "hss",
      "namespace": "gYOjk6ISr",
      "labels": {
        "release": "release-name",
        "app": "hss"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "hss"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "hss",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "mme",
      "namespace": "gYOjk6ISr",
      "labels": {
        "release": "release-name",
        "app": "mme"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "mme"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "mme",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1beta1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "spgwc",
      "namespace": "gYOjk6ISr",
      "labels": {
        "release": "release-name",
        "app": "spgwc"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "spgwc"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "spgwc",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "cassandra",
      "labels": {
        "app": "cassandra",
        "chart": "cassandra-0.13.1",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "clusterIP": "None",
      "type": "ClusterIP",
      "ports": [
        {
          "name": "intra",
          "port": 7000,
          "targetPort": 7000
        },
        {
          "name": "tls",
          "port": 7001,
          "targetPort": 7001
        },
        {
          "name": "jmx",
          "port": 7199,
          "targetPort": 7199
        },
        {
          "name": "cql",
          "port": 9042,
          "targetPort": 9042
        },
        {
          "name": "thrift",
          "port": 9160,
          "targetPort": 9160
        }
      ],
      "selector": {
        "app": "cassandra",
        "release": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "hss",
      "labels": {
        "release": "release-name",
        "app": "hss"
      }
    },
    "spec": {
      "selector": {
        "release": "release-name",
        "app": "hss"
      },
      "ports": [
        {
          "name": "s6a",
          "port": 3868,
          "protocol": "TCP"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "hss-headless",
      "labels": {
        "release": "release-name",
        "app": "hss"
      }
    },
    "spec": {
      "selector": {
        "release": "release-name",
        "app": "hss"
      },
      "clusterIP": "None",
      "ports": [
        {
          "name": "s6a",
          "port": 3868,
          "protocol": "TCP"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "mme",
      "labels": {
        "release": "release-name",
        "app": "mme"
      }
    },
    "spec": {
      "selector": {
        "release": "release-name",
        "app": "mme"
      },
      "type": "ClusterIP",
      "ports": [
        {
          "name": "s11",
          "port": 2123,
          "protocol": "UDP"
        },
        {
          "name": "s6a",
          "port": 3868,
          "protocol": "TCP"
        },
        {
          "name": "s1ap",
          "port": 36412,
          "protocol": "SCTP"
        },
        {
          "name": "exporter",
          "port": 3081,
          "protocol": "TCP"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "mme-headless",
      "labels": {
        "release": "release-name",
        "app": "mme"
      }
    },
    "spec": {
      "selector": {
        "release": "release-name",
        "app": "mme"
      },
      "clusterIP": "None",
      "ports": [
        {
          "name": "s11",
          "port": 2123,
          "protocol": "UDP"
        },
        {
          "name": "s6a",
          "port": 3868,
          "protocol": "TCP"
        },
        {
          "name": "s1ap",
          "port": 36412,
          "protocol": "SCTP"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "mme-external",
      "labels": {
        "release": "release-name",
        "app": "mme"
      }
    },
    "spec": {
      "selector": {
        "release": "release-name",
        "app": "mme"
      },
      "type": "NodePort",
      "ports": [
        {
          "name": "s1ap",
          "port": 36412,
          "nodePort": 36412,
          "protocol": "SCTP"
        },
        {
          "name": "exporter",
          "port": 3081,
          "nodePort": 33081,
          "protocol": "TCP"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "spgwc",
      "labels": {
        "release": "release-name",
        "app": "spgwc"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "selector": {
        "release": "release-name",
        "app": "spgwc"
      },
      "ports": [
        {
          "name": "cp-comm",
          "port": 21,
          "protocol": "TCP"
        },
        {
          "name": "s11",
          "port": 2123,
          "protocol": "UDP"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "spgwc-headless",
      "labels": {
        "release": "release-name",
        "app": "spgwc"
      }
    },
    "spec": {
      "clusterIP": "None",
      "selector": {
        "release": "release-name",
        "app": "spgwc"
      },
      "ports": [
        {
          "name": "cp-comm",
          "port": 21,
          "protocol": "TCP"
        },
        {
          "name": "s11",
          "port": 2123,
          "protocol": "UDP"
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "cassandra",
      "labels": {
        "app": "cassandra",
        "chart": "cassandra-0.13.1",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "cassandra",
          "release": "release-name"
        }
      },
      "serviceName": "cassandra",
      "replicas": 3,
      "podManagementPolicy": "OrderedReady",
      "updateStrategy": {
        "type": "OnDelete"
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "cassandra",
            "release": "release-name"
          }
        },
        "spec": {
          "hostNetwork": false,
          "containers": [
            {
              "name": "cassandra",
              "image": "cassandra:2.1.20",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "env": [
                {
                  "name": "CASSANDRA_SEEDS",
                  "value": "cassandra-0.cassandra.default.svc.cluster.local,cassandra-1.cassandra.default.svc.cluster.local"
                },
                {
                  "name": "MAX_HEAP_SIZE",
                  "value": "2048M"
                },
                {
                  "name": "HEAP_NEWSIZE",
                  "value": "512M"
                },
                {
                  "name": "CASSANDRA_ENDPOINT_SNITCH",
                  "value": "GossipingPropertyFileSnitch"
                },
                {
                  "name": "CASSANDRA_CLUSTER_NAME",
                  "value": "cassandra"
                },
                {
                  "name": "CASSANDRA_DC",
                  "value": "DC1"
                },
                {
                  "name": "CASSANDRA_RACK",
                  "value": "RAC1"
                },
                {
                  "name": "CASSANDRA_START_RPC",
                  "value": "false"
                },
                {
                  "name": "POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "nodetool status"
                  ]
                },
                "initialDelaySeconds": 90,
                "periodSeconds": 30,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "nodetool status | grep -E \"^UN\\s+${POD_IP}\""
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 30,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "ports": [
                {
                  "name": "intra",
                  "containerPort": 7000
                },
                {
                  "name": "tls",
                  "containerPort": 7001
                },
                {
                  "name": "jmx",
                  "containerPort": 7199
                },
                {
                  "name": "cql",
                  "containerPort": 9042
                },
                {
                  "name": "thrift",
                  "containerPort": 9160
                }
              ],
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/var/lib/cassandra"
                }
              ],
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/bin/sh",
                      "-c",
                      "exec nodetool decommission"
                    ]
                  }
                }
              }
            }
          ],
          "terminationGracePeriodSeconds": 30,
          "volumes": [
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "hss",
      "labels": {
        "release": "release-name",
        "app": "hss"
      }
    },
    "spec": {
      "replicas": 1,
      "serviceName": "hss-headless",
      "selector": {
        "matchLabels": {
          "release": "release-name",
          "app": "hss"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "release": "release-name",
            "app": "hss"
          }
        },
        "spec": {
          "serviceAccountName": "hss",
          "initContainers": [
            {
              "name": "hss-dep-check",
              "image": "quay.io/stackanetes/kubernetes-entrypoint:v0.3.1",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": false,
                "runAsUser": 0
              },
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "COMMAND",
                  "value": "echo done"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "job-hss-db-sync,job-hss-bootstrap"
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "hss",
              "image": "docker.io/omecproject/c3po-hss:master-latest",
              "imagePullPolicy": "IfNotPresent",
              "stdin": true,
              "tty": true,
              "command": [
                "bash",
                "-c",
                "/opt/c3po/hss/hss-run.sh; sleep 3600"
              ],
              "resources": {
                "limits": {
                  "cpu": 2,
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": 2,
                  "memory": "1Gi"
                }
              },
              "volumeMounts": [
                {
                  "name": "hss-script",
                  "mountPath": "/opt/c3po/hss/hss-run.sh",
                  "subPath": "hss-run.sh"
                },
                {
                  "name": "hss-config",
                  "mountPath": "/etc/hss/conf"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "hss-script",
              "configMap": {
                "name": "hss",
                "defaultMode": 493
              }
            },
            {
              "name": "hss-config",
              "configMap": {
                "name": "hss",
                "defaultMode": 420
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "mme",
      "labels": {
        "release": "release-name",
        "app": "mme"
      }
    },
    "spec": {
      "replicas": 1,
      "serviceName": "mme-headless",
      "selector": {
        "matchLabels": {
          "release": "release-name",
          "app": "mme"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "release": "release-name",
            "app": "mme"
          }
        },
        "spec": {
          "serviceAccountName": "mme",
          "initContainers": [
            {
              "name": "mme-load-sctp-module",
              "image": "docker.io/omecproject/pod-init:1.0.0",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "privileged": true,
                "runAsUser": 0
              },
              "command": [
                "bash",
                "-xc"
              ],
              "args": [
                "if chroot /mnt/host-rootfs modinfo nf_conntrack_proto_sctp > /dev/null 2>&1; then \\\n    chroot /mnt/host-rootfs modprobe nf_conntrack_proto_sctp; \\\nfi;\nchroot /mnt/host-rootfs modprobe tipc\n"
              ],
              "volumeMounts": [
                {
                  "name": "host-rootfs",
                  "mountPath": "/mnt/host-rootfs"
                }
              ]
            },
            {
              "name": "mme-dep-check",
              "image": "quay.io/stackanetes/kubernetes-entrypoint:v0.3.1",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": false,
                "runAsUser": 0
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "COMMAND",
                  "value": "echo done"
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": "[{\"labels\": {\"app\": \"hss\"}, \"requireSameNode\": false}]"
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            },
            {
              "name": "mme-init",
              "image": "docker.io/omecproject/openmme:master-latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/opt/mme/scripts/mme-init.sh"
              ],
              "env": [
                {
                  "name": "POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "scripts",
                  "mountPath": "/opt/mme/scripts/mme-init.sh",
                  "subPath": "mme-init.sh"
                },
                {
                  "name": "configs",
                  "mountPath": "/opt/mme/config"
                },
                {
                  "name": "shared-data",
                  "mountPath": "/opt/mme/config/shared"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "mme-app",
              "image": "docker.io/omecproject/openmme:master-latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "bash",
                "-xc"
              ],
              "args": [
                "/opt/mme/scripts/mme-run.sh mme-app"
              ],
              "resources": {
                "limits": {
                  "cpu": 0.5,
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": 0.5,
                  "memory": "1Gi"
                }
              },
              "env": [
                {
                  "name": "POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "MMERUNENV",
                  "value": "container"
                }
              ],
              "volumeMounts": [
                {
                  "name": "scripts",
                  "mountPath": "/opt/mme/scripts/mme-run.sh",
                  "subPath": "mme-run.sh"
                },
                {
                  "name": "shared-data",
                  "mountPath": "/opt/mme/config/shared"
                },
                {
                  "name": "shared-app",
                  "mountPath": "/tmp"
                },
                {
                  "name": "configs",
                  "mountPath": "/opt/mme/config"
                }
              ]
            },
            {
              "name": "s1ap-app",
              "image": "docker.io/omecproject/openmme:master-latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "bash",
                "-xc"
              ],
              "args": [
                "/opt/mme/scripts/mme-run.sh s1ap-app"
              ],
              "resources": {
                "limits": {
                  "cpu": 0.5,
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": 0.5,
                  "memory": "1Gi"
                }
              },
              "env": [
                {
                  "name": "MMERUNENV",
                  "value": "container"
                }
              ],
              "volumeMounts": [
                {
                  "name": "scripts",
                  "mountPath": "/opt/mme/scripts/mme-run.sh",
                  "subPath": "mme-run.sh"
                },
                {
                  "name": "shared-data",
                  "mountPath": "/opt/mme/config/shared"
                },
                {
                  "name": "shared-app",
                  "mountPath": "/tmp"
                },
                {
                  "name": "configs",
                  "mountPath": "/opt/mme/config"
                }
              ]
            },
            {
              "name": "s6a-app",
              "image": "docker.io/omecproject/openmme:master-latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "bash",
                "-xc"
              ],
              "args": [
                "/opt/mme/scripts/mme-run.sh s6a-app"
              ],
              "resources": {
                "limits": {
                  "cpu": 0.5,
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": 0.5,
                  "memory": "1Gi"
                }
              },
              "env": [
                {
                  "name": "MMERUNENV",
                  "value": "container"
                }
              ],
              "volumeMounts": [
                {
                  "name": "scripts",
                  "mountPath": "/opt/mme/scripts/mme-run.sh",
                  "subPath": "mme-run.sh"
                },
                {
                  "name": "shared-data",
                  "mountPath": "/opt/mme/config/shared"
                },
                {
                  "name": "shared-app",
                  "mountPath": "/tmp"
                }
              ]
            },
            {
              "name": "s11-app",
              "image": "docker.io/omecproject/openmme:master-latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "bash",
                "-xc"
              ],
              "args": [
                "/opt/mme/scripts/mme-run.sh s11-app"
              ],
              "resources": {
                "limits": {
                  "cpu": 0.5,
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": 0.5,
                  "memory": "1Gi"
                }
              },
              "env": [
                {
                  "name": "MMERUNENV",
                  "value": "container"
                }
              ],
              "volumeMounts": [
                {
                  "name": "scripts",
                  "mountPath": "/opt/mme/scripts/mme-run.sh",
                  "subPath": "mme-run.sh"
                },
                {
                  "name": "shared-data",
                  "mountPath": "/opt/mme/config/shared"
                },
                {
                  "name": "shared-app",
                  "mountPath": "/tmp"
                }
              ]
            },
            {
              "name": "subscriber-exporter",
              "image": "docker.io/omecproject/mme-exporter:paging-latest",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "privileged": true
              },
              "command": [
                "bash",
                "-xc"
              ],
              "args": [
                "cp /opt/mme/config/shared/mme_exporter.json /openmme/conf/mme_exporter.json; until [ -e /tmp/unix_socket ]; do sleep 1; done; chmod 777 /tmp/unix_socket; while true; do python3 monitor_client.py; sleep 1; done;"
              ],
              "resources": {
                "limits": {
                  "cpu": 0.5,
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": 0.5,
                  "memory": "1Gi"
                }
              },
              "volumeMounts": [
                {
                  "name": "shared-data",
                  "mountPath": "/opt/mme/config/shared"
                },
                {
                  "name": "shared-app",
                  "mountPath": "/tmp"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "scripts",
              "configMap": {
                "name": "mme",
                "defaultMode": 493
              }
            },
            {
              "name": "configs",
              "configMap": {
                "name": "mme",
                "defaultMode": 420
              }
            },
            {
              "name": "shared-data",
              "emptyDir": {}
            },
            {
              "name": "shared-app",
              "emptyDir": {}
            },
            {
              "name": "host-rootfs",
              "hostPath": {
                "path": "/"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "spgwc",
      "labels": {
        "release": "release-name",
        "app": "spgwc"
      }
    },
    "spec": {
      "replicas": 1,
      "serviceName": "spgwc-headless",
      "selector": {
        "matchLabels": {
          "release": "release-name",
          "app": "spgwc"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "release": "release-name",
            "app": "spgwc"
          }
        },
        "spec": {
          "serviceAccountName": "spgwc",
          "initContainers": [
            {
              "name": "spgwc-dep-check",
              "image": "quay.io/stackanetes/kubernetes-entrypoint:v0.3.1",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": false,
                "runAsUser": 0
              },
              "env": [
                {
                  "name": "POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "COMMAND",
                  "value": "echo done"
                },
                {
                  "name": "DEPENDENCY_POD_JSON",
                  "value": "[{\"labels\": {\"app\": \"mme\"}, \"requireSameNode\": false}]"
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "spgwc",
              "image": "docker.io/omecproject/ngic-cp:central-cp-multi-upfs-latest",
              "imagePullPolicy": "IfNotPresent",
              "stdin": true,
              "tty": true,
              "command": [
                "/opt/cp/scripts/spgwc-run.sh"
              ],
              "env": [
                {
                  "name": "MEM_LIMIT",
                  "valueFrom": {
                    "resourceFieldRef": {
                      "containerName": "spgwc",
                      "resource": "limits.memory",
                      "divisor": "1Mi"
                    }
                  }
                },
                {
                  "name": "POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                }
              ],
              "resources": {
                "limits": {
                  "cpu": 2,
                  "memory": "5Gi"
                },
                "requests": {
                  "cpu": 2,
                  "memory": "5Gi"
                }
              },
              "volumeMounts": [
                {
                  "name": "cp-script",
                  "mountPath": "/opt/cp/scripts/spgwc-run.sh",
                  "subPath": "spgwc-run.sh"
                },
                {
                  "name": "cp-config",
                  "mountPath": "/etc/cp/config"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "cp-script",
              "configMap": {
                "name": "spgwc",
                "defaultMode": 493
              }
            },
            {
              "name": "cp-config",
              "configMap": {
                "name": "spgwc",
                "defaultMode": 420
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "job-hss-bootstrap",
      "labels": {
        "release": "release-name",
        "app": "hss"
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "release": "release-name",
          "app": "hss"
        },
        "spec": {
          "restartPolicy": "OnFailure",
          "serviceAccountName": "hss",
          "initContainers": [
            {
              "name": "job-bootstrap-dep-check",
              "image": "quay.io/stackanetes/kubernetes-entrypoint:v0.3.1",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": false,
                "runAsUser": 0
              },
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "COMMAND",
                  "value": "echo done"
                },
                {
                  "name": "DEPENDENCY_JOBS",
                  "value": "job-hss-db-sync"
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "hss-bootstrap",
              "image": "docker.io/omecproject/c3po-hssdb:master-latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/opt/c3po/hss/hss-bootstrap.sh"
              ],
              "volumeMounts": [
                {
                  "name": "hss-script",
                  "mountPath": "/opt/c3po/hss/hss-bootstrap.sh",
                  "subPath": "hss-bootstrap.sh"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "hss-script",
              "configMap": {
                "name": "hss",
                "defaultMode": 493
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "batch/v1",
    "kind": "Job",
    "metadata": {
      "name": "job-hss-db-sync",
      "labels": {
        "release": "release-name",
        "app": "hss"
      }
    },
    "spec": {
      "template": {
        "metadata": {
          "release": "release-name",
          "app": "hss"
        },
        "spec": {
          "restartPolicy": "OnFailure",
          "serviceAccountName": "hss",
          "initContainers": [
            {
              "name": "job-db-sync-dep-check",
              "image": "quay.io/stackanetes/kubernetes-entrypoint:v0.3.1",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": false,
                "runAsUser": 0
              },
              "env": [
                {
                  "name": "NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "apiVersion": "v1",
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "PATH",
                  "value": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/"
                },
                {
                  "name": "COMMAND",
                  "value": "echo done"
                },
                {
                  "name": "DEPENDENCY_SERVICE",
                  "value": "cassandra"
                }
              ],
              "command": [
                "kubernetes-entrypoint"
              ],
              "volumeMounts": []
            }
          ],
          "containers": [
            {
              "name": "hss-db-sync",
              "image": "docker.io/omecproject/c3po-hssdb:master-latest",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "bash",
                "-xc"
              ],
              "args": [
                "until cqlsh --file /opt/c3po/hssdb/oai_db.cql cassandra; do echo \"Provisioning HSSDB\"; sleep 2;done"
              ]
            }
          ]
        }
      }
    }
  }
]