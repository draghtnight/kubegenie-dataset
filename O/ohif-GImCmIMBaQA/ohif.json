[
  {
    "kind": "ConfigMap",
    "apiVersion": "v1",
    "metadata": {
      "name": "ohif-config"
    },
    "data": {
      "orthanc-json": "{\n  /**\n  * General configuration of Orthanc\n  **/\n\n  // The logical name of this instance of Orthanc. This one is\n  // displayed in Orthanc Explorer and at the URI \"/system\".\n  \"Name\" : \"Orthanc inside Docker\",\n\n  // Path to the directory that holds the heavyweight files (i.e. the\n  // raw DICOM instances). Backslashes must be either escaped by\n  // doubling them, or replaced by forward slashes \"/\".\n  \"StorageDirectory\" : \"/var/lib/orthanc/db\",\n\n  // Path to the directory that holds the SQLite index (if unset, the\n  // value of StorageDirectory is used). This index could be stored on\n  // a RAM-drive or a SSD device for performance reasons.\n  \"IndexDirectory\" : \"/var/lib/orthanc/db\",\n\n  // Path to the directory where Orthanc stores its large temporary\n  // files. The content of this folder can be safely deleted if\n  // Orthanc once stopped. The folder must exist. The corresponding\n  // filesystem must be properly sized, given that for instance a ZIP\n  // archive of DICOM images created by a job can weight several GBs,\n  // and that there might be up to \"min(JobsHistorySize,\n  // MediaArchiveSize)\" archives to be stored simultaneously. If not\n  // set, Orthanc will use the default temporary folder of the\n  // operating system (such as \"/tmp/\" on UNIX-like systems, or\n  // \"C:/Temp\" on Microsoft Windows).\n  // \"TemporaryDirectory\" : \"/tmp/Orthanc/\",\n\n  // Enable the transparent compression of the DICOM instances\n  \"StorageCompression\" : false,\n\n  // Maximum size of the storage in MB (a value of \"0\" indicates no\n  // limit on the storage size)\n  \"MaximumStorageSize\" : 0,\n\n  // Maximum number of patients that can be stored at a given time\n  // in the storage (a value of \"0\" indicates no limit on the number\n  // of patients)\n  \"MaximumPatientCount\" : 0,\n\n  // List of paths to the custom Lua scripts that are to be loaded\n  // into this instance of Orthanc\n  \"LuaScripts\" : [\n  ],\n\n  // List of paths to the plugins that are to be loaded into this\n  // instance of Orthanc (e.g. \"./libPluginTest.so\" for Linux, or\n  // \"./PluginTest.dll\" for Windows). These paths can refer to\n  // folders, in which case they will be scanned non-recursively to\n  // find shared libraries. Backslashes must be either escaped by\n  // doubling them, or replaced by forward slashes \"/\".\n  \"Plugins\" : [\n    \"/usr/share/orthanc/plugins\", \"/usr/local/share/orthanc/plugins\"\n  ],\n\n  // Maximum number of processing jobs that are simultaneously running\n  // at any given time. A value of \"0\" indicates to use all the\n  // available CPU logical cores. To emulate Orthanc <= 1.3.2, set\n  // this value to \"1\".\n  \"ConcurrentJobs\" : 2,\n\n\n  /**\n  * Configuration of the HTTP server\n  **/\n\n  // Enable the HTTP server. If this parameter is set to \"false\",\n  // Orthanc acts as a pure DICOM server. The REST API and Orthanc\n  // Explorer will not be available.\n  \"HttpServerEnabled\" : true,\n\n  // HTTP port for the REST services and for the GUI\n  \"HttpPort\" : 8042,\n\n  // When the following option is \"true\", if an error is encountered\n  // while calling the REST API, a JSON message describing the error\n  // is put in the HTTP answer. This feature can be disabled if the\n  // HTTP client does not properly handles such answers.\n  \"HttpDescribeErrors\" : true,\n\n  // Enable HTTP compression to improve network bandwidth utilization,\n  // at the expense of more computations on the server. Orthanc\n  // supports the \"gzip\" and \"deflate\" HTTP encodings.\n  \"HttpCompressionEnabled\" : true,\n\n  // Enable the publication of the content of the Orthanc server as a\n  // WebDAV share (new in Orthanc 1.8.0). On the localhost, the WebDAV\n  // share is mapped as \"http://localhost:8042/webdav/\".\n  \"WebDavEnabled\" : true,\n\n  // Whether to allow deletions through the WebDAV share. This is\n  // disabled by default to avoid accidental loss of DICOM instances.\n  \"WebDavDeleteAllowed\" : false,\n\n  // Whether to allow uploads through the WebDAV share.\n  \"WebDavUploadAllowed\" : true,\n\n\n\n  /**\n  * Configuration of the DICOM server\n  **/\n\n  // Enable the DICOM server. If this parameter is set to \"false\",\n  // Orthanc acts as a pure REST server. It will not be possible to\n  // receive files or to do query/retrieve through the DICOM protocol.\n  \"DicomServerEnabled\" : true,\n\n  // The DICOM Application Entity Title (cannot be longer than 16\n  // characters)\n  \"DicomAet\" : \"ORTHANC\",\n\n  // Check whether the called AET corresponds to the AET of Orthanc\n  // during an incoming DICOM SCU request\n  \"DicomCheckCalledAet\" : false,\n\n  // The DICOM port\n  \"DicomPort\" : 4242,\n\n  // The default encoding that is assumed for DICOM files without\n  // \"SpecificCharacterSet\" DICOM tag, and that is used when answering\n  // C-Find requests (including worklists). The allowed values are\n  // \"Ascii\", \"Utf8\", \"Latin1\", \"Latin2\", \"Latin3\", \"Latin4\",\n  // \"Latin5\", \"Cyrillic\", \"Windows1251\", \"Arabic\", \"Greek\", \"Hebrew\",\n  // \"Thai\", \"Japanese\", \"Chinese\", \"JapaneseKanji\", \"Korean\", and\n  // \"SimplifiedChinese\".\n  \"DefaultEncoding\" : \"Latin1\",\n\n  // The transfer syntaxes that are accepted by Orthanc C-Store SCP\n  \"DeflatedTransferSyntaxAccepted\"     : true,\n  \"JpegTransferSyntaxAccepted\"         : true,\n  \"Jpeg2000TransferSyntaxAccepted\"     : true,\n  \"JpegLosslessTransferSyntaxAccepted\" : true,\n  \"JpipTransferSyntaxAccepted\"         : true,\n  \"Mpeg2TransferSyntaxAccepted\"        : true,\n  \"RleTransferSyntaxAccepted\"          : true,\n  \"Mpeg4TransferSyntaxAccepted\"        : true,  // New in Orthanc 1.6.0\n\n  // Whether Orthanc accepts to act as C-Store SCP for unknown storage\n  // SOP classes (aka. \"promiscuous mode\")\n  \"UnknownSopClassAccepted\"            : false,\n\n  // Set the timeout (in seconds) after which the DICOM associations\n  // are closed by the Orthanc SCP (server) if no further DIMSE\n  // command is received from the SCU (client).\n  \"DicomScpTimeout\" : 30,\n\n\n\n  /**\n  * Security-related options for the HTTP server\n  **/\n\n  // Whether remote hosts can connect to the HTTP server\n  \"RemoteAccessAllowed\" : true,\n\n  // Whether or not SSL is enabled\n  \"SslEnabled\" : false,\n\n  // Path to the SSL certificate used by the HTTP server. The file\n  // must be stored in the PEM format, and must contain both the\n  // certificate and the private key. This option is only meaningful\n  // if \"SslEnabled\" is true.\n  \"SslCertificate\" : \"certificate.pem\",\n\n  // Whether or not peer client certificates shall be checked. This\n  // option is only meaningful if \"SslEnabled\" is true.\n  \"SslVerifyPeers\" : false,\n\n  // Path to a file containing the concatenation of the client SSL\n  // certificate(s) that are trusted to verify the identify of remote\n  // HTTP clients. The individual certificate(s) must be stored in the\n  // PEM format. This option is only meaningful if \"SslVerifyPeers\"\n  // is true.\n  \"SslTrustedClientCertificates\" : \"trustedClientCertificates.pem\",\n\n  // Whether or not the password protection is enabled (using HTTP\n  // basic access authentication). Starting with Orthanc 1.5.8, if\n  // \"AuthenticationEnabled\" is not explicitly set, authentication is\n  // enabled iff. remote access is allowed (i.e. the default value of\n  // \"AuthenticationEnabled\" equals that of \"RemoteAccessAllowed\").\n\n  \"AuthenticationEnabled\" : false,\n\n  // The list of the registered users. Because Orthanc uses HTTP\n  // Basic Authentication, the passwords are stored as plain text.\n  \"RegisteredUsers\" : {\"admin\":\"admin\"},\n\n  /**\n  * Network topology\n  **/\n\n  // The list of the known DICOM modalities\n  \"DicomModalities\" : {\n    /**\n    * Uncommenting the following line would enable Orthanc to\n    * connect to an instance of the \"storescp\" open-source DICOM\n    * store (shipped in the DCMTK distribution), as started by the\n    * command line \"storescp 2000\". The first parameter is the\n    * AET of the remote modality (cannot be longer than 16\n    * characters), the second one is the remote network address,\n    * and the third one is the TCP port number corresponding\n    * to the DICOM protocol on the remote modality (usually 104).\n    **/\n    // \"sample\" : [ \"STORESCP\", \"127.0.0.1\", 2000 ]\n\n    /**\n    * A fourth parameter is available to enable patches for\n    * specific PACS manufacturers. The allowed values are currently:\n    * - \"Generic\" (default value),\n    * - \"GenericNoWildcardInDates\" (to replace \"*\" by \"\" in date fields\n    *   in outgoing C-Find requests originating from Orthanc),\n    * - \"GenericNoUniversalWildcard\" (to replace \"*\" by \"\" in all fields\n    *   in outgoing C-Find SCU requests originating from Orthanc),\n    * - \"Vitrea\",\n    * - \"GE\" (Enterprise Archive, MRI consoles and Advantage Workstation\n    *   from GE Healthcare).\n    *\n    * This parameter is case-sensitive.\n    **/\n    // \"vitrea\" : [ \"VITREA\", \"192.168.1.1\", 104, \"Vitrea\" ]\n\n    /**\n    * By default, the Orthanc SCP accepts all DICOM commands (C-ECHO,\n    * C-STORE, C-FIND, C-MOVE, C-GET and storage commitment) issued by the\n    * registered remote SCU modalities. Starting with Orthanc 1.5.0,\n    * it is possible to specify which DICOM commands are allowed,\n    * separately for each remote modality, using the syntax\n    * below.\n    *\n    * The \"AllowEcho\" (resp.  \"AllowStore\") option only has an effect\n    * respectively if global option \"DicomAlwaysAllowEcho\"\n    * (resp. \"DicomAlwaysAllowStore\") is set to \"false\".\n    *\n    * Starting with Orthanc 1.7.0, \"AllowTranscoding\" can be used to\n    * disable the transcoding to uncompressed transfer syntaxes if\n    * the remote modality doesn't support compressed transfer\n    * syntaxes. This option only has an effect if global option\n    * \"EnableTranscoding\" is set to \"true\".\n    *\n    * By default, all \"Allow*\" options are true.\n    * \"AllowStorageCommitment\" is actually an alias for\n    * \"AllowNAction\" & \"AllowEventReport\".\n    **/\n    //\"untrusted\" : {\n    //  \"AET\" : \"ORTHANC\",\n    //  \"Port\" : 104,\n    //  \"Host\" : \"127.0.0.1\",\n    //  \"Manufacturer\" : \"Generic\",\n    //  \"AllowEcho\" : false,\n    //  \"AllowFind\" : false,\n    //  \"AllowGet\"  : false,\n    //  \"AllowMove\" : false,\n    //  \"AllowStore\" : true,\n    //  \"AllowStorageCommitment\" : false,  // new in 1.6.0\n    //  \"AllowTranscoding\" : true          // new in 1.7.0\n    //}\n  },\n\n  // Whether to store the DICOM modalities in the Orthanc database\n  // instead of in this configuration file (new in Orthanc 1.5.0)\n  \"DicomModalitiesInDatabase\" : false,\n\n  // Whether the Orthanc SCP allows incoming C-Echo requests, even\n  // from SCU modalities it does not know about (i.e. that are not\n  // listed in the \"DicomModalities\" option above). Orthanc 1.3.0\n  // is the only version to behave as if this argument was set to \"false\".\n  \"DicomAlwaysAllowEcho\" : true,\n\n  // Whether the Orthanc SCP allows incoming C-Store requests, even\n  // from SCU modalities it does not know about (i.e. that are not\n  // listed in the \"DicomModalities\" option above)\n  \"DicomAlwaysAllowStore\" : true,\n\n  // Whether Orthanc checks the IP/hostname address of the remote\n  // modality initiating a DICOM connection (as listed in the\n  // \"DicomModalities\" option above). If this option is set to\n  // \"false\", Orthanc only checks the AET of the remote modality.\n  \"DicomCheckModalityHost\" : false,\n\n  // The timeout (in seconds) after which the DICOM associations are\n  // considered as closed by the Orthanc SCU (client) if the remote\n  // DICOM SCP (server) does not answer.\n  \"DicomScuTimeout\" : 10,\n\n  // The list of the known Orthanc peers\n  \"OrthancPeers\" : {\n    /**\n    * Each line gives the base URL of an Orthanc peer, possibly\n    * followed by the username/password pair (if the password\n    * protection is enabled on the peer).\n    **/\n    // \"peer\"  : [ \"http://127.0.0.1:8043/\", \"alice\", \"alicePassword\" ]\n    // \"peer2\" : [ \"http://127.0.0.1:8044/\" ]\n\n    /**\n    * This is another, more advanced format to define Orthanc\n    * peers. It notably allows one to specify HTTP headers, a HTTPS\n    * client certificate in the PEM format (as in the \"--cert\" option\n    * of curl), or to enable PKCS#11 authentication for smart cards.\n    **/\n    // \"peer\" : {\n    //   \"Url\" : \"http://127.0.0.1:8043/\",\n    //   \"Username\" : \"alice\",\n    //   \"Password\" : \"alicePassword\",\n    //   \"HttpHeaders\" : { \"Token\" : \"Hello world\" },\n    //   \"CertificateFile\" : \"client.crt\",\n    //   \"CertificateKeyFile\" : \"client.key\",\n    //   \"CertificateKeyPassword\" : \"certpass\",\n    //   \"Pkcs11\" : false\n    // }\n  },\n\n  // Whether to store the Orthanc peers in the Orthanc database\n  // instead of in this configuration file (new in Orthanc 1.5.0)\n  \"OrthancPeersInDatabase\" : false,\n\n  // Parameters of the HTTP proxy to be used by Orthanc. If set to the\n  // empty string, no HTTP proxy is used. For instance:\n  //   \"HttpProxy\" : \"192.168.0.1:3128\"\n  //   \"HttpProxy\" : \"proxyUser:proxyPassword@192.168.0.1:3128\"\n  \"HttpProxy\" : \"\",\n\n  // If set to \"true\", debug messages from libcurl will be issued\n  // whenever Orthanc makes an outgoing HTTP request. This is notably\n  // useful to debug HTTPS-related problems.\n  \"HttpVerbose\" : false,\n\n  // Set the timeout for HTTP requests issued by Orthanc (in seconds).\n  \"HttpTimeout\" : 60,\n\n  // Enable the verification of the peers during HTTPS requests. This\n  // option must be set to \"false\" if using self-signed certificates.\n  // Pay attention that setting this option to \"false\" results in\n  // security risks!\n  // Reference: http://curl.haxx.se/docs/sslcerts.html\n  \"HttpsVerifyPeers\" : true,\n\n  // Path to the CA (certification authority) certificates to validate\n  // peers in HTTPS requests. From curl documentation (\"--cacert\"\n  // option): \"Tells curl to use the specified certificate file to\n  // verify the peers. The file may contain multiple CA\n  // certificates. The certificate(s) must be in PEM format.\" On\n  // Debian-based systems, this option can be set to\n  // \"/etc/ssl/certs/ca-certificates.crt\"\n  \"HttpsCACertificates\" : \"/etc/ssl/certs/ca-certificates.crt\",\n\n\n\n  /**\n  * Advanced options\n  **/\n\n  // Dictionary of symbolic names for the user-defined metadata. Each\n  // entry must map an unique string to an unique number between 1024\n  // and 65535. Reserved values:\n  //  - The Orthanc whole-slide imaging plugin uses metadata 4200\n  \"UserMetadata\" : {\n    // \"Sample\" : 1024\n  },\n\n  // Dictionary of symbolic names for the user-defined types of\n  // attached files. Each entry must map an unique string to an unique\n  // number between 1024 and 65535. Optionally, a second argument can\n  // provided to specify a MIME content type for the attachment.\n  \"UserContentType\" : {\n    // \"sample\" : 1024\n    // \"sample2\" : [ 1025, \"application/pdf\" ]\n  },\n\n  // Number of seconds without receiving any instance before a\n  // patient, a study or a series is considered as stable.\n  \"StableAge\" : 60,\n\n  // By default, Orthanc compares AET (Application Entity Titles) in a\n  // case-insensitive way. Setting this option to \"true\" will enable\n  // case-sensitive matching.\n  \"StrictAetComparison\" : false,\n\n  // When the following option is \"true\", the MD5 of the DICOM files\n  // will be computed and stored in the Orthanc database. This\n  // information can be used to detect disk corruption, at the price\n  // of a small performance overhead.\n  \"StoreMD5ForAttachments\" : true,\n\n  // The maximum number of results for a single C-FIND request at the\n  // Patient, Study or Series level. Setting this option to \"0\" means\n  // no limit.\n  \"LimitFindResults\" : 0,\n\n  // The maximum number of results for a single C-FIND request at the\n  // Instance level. Setting this option to \"0\" means no limit.\n  \"LimitFindInstances\" : 0,\n\n  // The maximum number of active jobs in the Orthanc scheduler. When\n  // this limit is reached, the addition of new jobs is blocked until\n  // some job finishes.\n  \"LimitJobs\" : 10,\n\n  // If this option is set to \"true\" (default behavior until Orthanc\n  // 1.3.2), Orthanc will log the resources that are exported to other\n  // DICOM modalities or Orthanc peers, inside the URI\n  // \"/exports\". Setting this option to \"false\" is useful to prevent\n  // the index to grow indefinitely in auto-routing tasks (this is the\n  // default behavior since Orthanc 1.4.0).\n  \"LogExportedResources\" : false,\n\n  // Enable or disable HTTP Keep-Alive (persistent HTTP\n  // connections). Setting this option to \"true\" prevents Orthanc\n  // issue #32 (\"HttpServer does not support multiple HTTP requests in\n  // the same TCP stream\"), but can possibly slow down HTTP clients\n  // that do not support persistent connections. The default behavior\n  // used to be \"false\" in Orthanc <= 1.5.1. Setting this option to\n  // \"false\" is also recommended if Orthanc is compiled against\n  // Mongoose.\n  \"KeepAlive\" : true,\n\n  // Enable or disable Nagle's algorithm. Only taken into\n  // consideration if Orthanc is compiled to use CivetWeb. Experiments\n  // show that best performance can be obtained by setting both\n  // \"KeepAlive\" and \"TcpNoDelay\" to \"true\". Beware however of\n  // caveats: https://eklitzke.org/the-caveats-of-tcp-nodelay\n  \"TcpNoDelay\" : true,\n\n  // Number of threads that are used by the embedded HTTP server.\n  \"HttpThreadsCount\" : 50,\n\n  // If this option is set to \"false\", Orthanc will run in index-only\n  // mode. The DICOM files will not be stored on the drive. Note that\n  // this option might prevent the upgrade to newer versions of Orthanc.\n  \"StoreDicom\" : true,\n\n  // DICOM associations initiated by Lua scripts are kept open as long\n  // as new DICOM commands are issued. This option sets the number of\n  // seconds of inactivity to wait before automatically closing a\n  // DICOM association used by Lua. If set to 0, the connection is\n  // closed immediately. This option is only used in Lua scripts.\n  \"DicomAssociationCloseDelay\" : 5,\n\n  // Maximum number of query/retrieve DICOM requests that are\n  // maintained by Orthanc. The least recently used requests get\n  // deleted as new requests are issued.\n  \"QueryRetrieveSize\" : 100,\n\n  // When handling a C-Find SCP request, setting this flag to \"true\"\n  // will enable case-sensitive match for PN value representation\n  // (such as PatientName). By default, the search is\n  // case-insensitive, which does not follow the DICOM standard.\n  \"CaseSensitivePN\" : false,\n\n  // Configure PKCS#11 to use hardware security modules (HSM) and\n  // smart cards when carrying on HTTPS client authentication.\n  /**\n    \"Pkcs11\" : {\n      \"Module\" : \"/usr/local/lib/libbeidpkcs11.so\",\n      \"Module\" : \"C:/Windows/System32/beidpkcs11.dll\",\n      \"Pin\" : \"1234\",\n      \"Verbose\" : true\n    }\n  **/\n\n  // If set to \"false\", Orthanc will not load its default dictionary\n  // of private tags. This might be necessary if you cannot import a\n  // DICOM file encoded using the Implicit VR Endian transfer syntax,\n  // and containing private tags: Such an import error might stem from\n  // a bad dictionary. You can still list your private tags of\n  // interest in the \"Dictionary\" configuration option below.\n  \"LoadPrivateDictionary\" : true,\n\n  // Locale to be used by Orthanc. Currently, only used if comparing\n  // strings in a case-insensitive way. It should be safe to keep this\n  // value undefined, which lets Orthanc autodetect the suitable locale.\n  // \"Locale\" : \"en_US.UTF-8\",\n\n  // Register a new tag in the dictionary of DICOM tags that are known\n  // to Orthanc. Each line must contain the tag (formatted as 2\n  // hexadecimal numbers), the value representation (2 upcase\n  // characters), a nickname for the tag, possibly the minimum\n  // multiplicity (> 0 with defaults to 1), possibly the maximum\n  // multiplicity (0 means arbitrary multiplicity, defaults to 1), and\n  // possibly the Private Creator (for private tags).\n  \"Dictionary\" : {\n    // \"0014,1020\" : [ \"DA\", \"ValidationExpiryDate\", 1, 1 ]\n    // \"00e1,10c2\" : [ \"UI\", \"PET-CT Multi Modality Name\", 1, 1, \"ELSCINT1\" ]\n    // \"7053,1003\" : [ \"ST\", \"Original Image Filename\", 1, 1, \"Philips PET Private Group\" ]\n    // \"2001,5f\" : [ \"SQ\", \"StackSequence\", 1, 1, \"Philips Imaging DD 001\" ]\n  },\n\n  // Whether to run DICOM C-Move operations synchronously. If set to\n  // \"false\" (asynchronous mode), each incoming C-Move request results\n  // in the creation of a new background job. Up to Orthanc 1.3.2, the\n  // implicit behavior was to use synchronous C-Move (\"true\"). Between\n  // Orthanc 1.4.0 and 1.4.2, the default behavior was set to\n  // asynchronous C-Move (\"false\"). Since Orthanc 1.5.0, the default\n  // behavior is back to synchronous C-Move (\"true\", which ensures\n  // backward compatibility with Orthanc <= 1.3.2).\n  \"SynchronousCMove\" : true,\n\n  // Maximum number of completed jobs that are kept in memory. A\n  // processing job is considered as complete once it is tagged as\n  // \"Success\" or \"Failure\". Since Orthanc 1.5.0, a value of \"0\"\n  // indicates to keep no job in memory (i.e. jobs are removed from\n  // the history as soon as they are completed), which prevents the\n  // use of some features of Orthanc (typically, synchronous mode in\n  // REST API) and should be avoided for non-developers.\n  \"JobsHistorySize\" : 10,\n\n  // Whether to save the jobs into the Orthanc database. If this\n  // option is set to \"true\", the pending/running/completed jobs are\n  // automatically reloaded from the database if Orthanc is stopped\n  // then restarted (except if the \"--no-jobs\" command-line argument\n  // is specified). This option should be set to \"false\" if multiple\n  // Orthanc servers are using the same database (e.g. if PostgreSQL\n  // or MariaDB/MySQL is used).\n  \"SaveJobs\" : true,\n\n  // Specifies how Orthanc reacts when it receives a DICOM instance\n  // whose SOPInstanceUID is already stored. If set to \"true\", the new\n  // instance replaces the old one. If set to \"false\", the new\n  // instance is discarded and the old one is kept. Up to Orthanc\n  // 1.4.1, the implicit behavior corresponded to \"false\".\n  \"OverwriteInstances\" : false,\n\n  // Maximum number of ZIP/media archives that are maintained by\n  // Orthanc, as a response to the asynchronous creation of archives.\n  // The least recently used archives get deleted as new archives are\n  // generated. This option was introduced in Orthanc 1.5.0, and has\n  // no effect on the synchronous generation of archives.\n  \"MediaArchiveSize\" : 1,\n\n  // Performance setting to specify how Orthanc accesses the storage\n  // area during C-FIND. Three modes are available: (1) \"Always\"\n  // allows Orthanc to read the storage area as soon as it needs an\n  // information that is not present in its database (slowest mode),\n  // (2) \"Never\" prevents Orthanc from accessing the storage area, and\n  // makes it uses exclusively its database (fastest mode), and (3)\n  // \"Answers\" allows Orthanc to read the storage area to generate its\n  // answers, but not to filter the DICOM resources (balance between\n  // the two modes). By default, the mode is \"Always\", which\n  // corresponds to the behavior of Orthanc <= 1.5.0.\n  \"StorageAccessOnFind\" : \"Always\",\n\n  // Whether Orthanc monitors its metrics (new in Orthanc 1.5.4). If\n  // set to \"true\", the metrics can be retrieved at\n  // \"/tools/metrics-prometheus\" formetted using the Prometheus\n  // text-based exposition format.\n  \"MetricsEnabled\" : true,\n\n  // Whether calls to URI \"/tools/execute-script\" is enabled. Starting\n  // with Orthanc 1.5.8, this URI is disabled by default for security.\n  \"ExecuteLuaEnabled\" : false,\n\n  // Set the timeout for HTTP requests, in seconds. This corresponds\n  // to option \"request_timeout_ms\" of Mongoose/Civetweb. It will set\n  // the socket options \"SO_RCVTIMEO\" and \"SO_SNDTIMEO\" to the\n  // specified value.\n  \"HttpRequestTimeout\" : 30,\n\n  // Set the default private creator that is used by Orthanc when it\n  // looks for a private tag in its dictionary (cf. \"Dictionary\"\n  // option), or when it creates/modifies a DICOM file (new in Orthanc 1.6.0).\n  \"DefaultPrivateCreator\" : \"\",\n\n  // Maximum number of storage commitment reports (i.e. received from\n  // remote modalities) to be kept in memory (new in Orthanc 1.6.0).\n  \"StorageCommitmentReportsSize\" : 100,\n\n  // Whether Orthanc transcodes DICOM files to an uncompressed\n  // transfer syntax over the DICOM protocol, if the remote modality\n  // does not support compressed transfer syntaxes (new in Orthanc 1.7.0).\n  \"TranscodeDicomProtocol\" : true,\n\n  // If some plugin to decode/transcode DICOM instances is installed,\n  // this option specifies whether the built-in decoder/transcoder of\n  // Orthanc (that uses DCMTK) is applied before or after the plugins,\n  // or is not applied at all (new in Orthanc 1.7.0). The allowed\n  // values for this option are \"After\" (default value, corresponding\n  // to the behavior of Orthanc <= 1.6.1), \"Before\", or \"Disabled\".\n  \"BuiltinDecoderTranscoderOrder\" : \"After\",\n\n  // If this option is set, Orthanc will transparently transcode any\n  // incoming DICOM instance to the given transfer syntax before\n  // storing it into its database. Beware that this might result in\n  // high CPU usage (if transcoding to some compressed transfer\n  // syntax), or in higher disk consumption (if transcoding to an\n  // uncompressed syntax). Also, beware that transcoding to a transfer\n  // syntax with lossy compression (notably JPEG) will change the\n  // \"SOPInstanceUID\" DICOM tag, and thus the Orthanc identifier at\n  // the instance level, which might break external workflow.\n  /**\n    \"IngestTranscoding\" : \"1.2.840.10008.1.2\",\n  **/\n\n  // The compression level that is used when transcoding to one of the\n  // lossy/JPEG transfer syntaxes (integer between 1 and 100).\n  \"DicomLossyTranscodingQuality\" : 90,\n\n  // Whether \"fsync()\" is called after each write to the storage area\n  // (new in Orthanc 1.7.4). If this option is set to \"true\", Orthanc\n  // will run more slowly, but the DICOM are guaranteed to be\n  // immediately written to the disk. This option only makes sense if\n  // the builtin filesystem storage area is used. It defaults to\n  // \"false\" in Orthanc <= 1.7.3, and to \"true\" in Orthanc >= 1.7.4.\n  \"SyncStorageArea\" : true\n}\n",
      "viewer-config": "window.config = {\n  // default: '/'\n  routerBasename: '/',\n  extensions: [],\n  showStudyList: true,\n  filterQueryParam: false,\n  servers: {\n    dicomWeb: [\n      {\n        name: 'Orthanc',\n        wadoUriRoot: '/orthanc/wado',\n        qidoRoot: '/orthanc/dicom-web',\n        wadoRoot: '/orthanc/dicom-web',\n        qidoSupportsIncludeField: true,\n        imageRendering: 'wadors',\n        thumbnailRendering: 'wadors',\n        enableStudyLazyLoad: true,\n        supportsFuzzyMatching: true,\n      },\n    ],\n  },\n  whiteLabeling: {\n    /* Used to replace the default Logo */\n    createLogoComponentFn: function(React) {\n      return React.createElement('a', {\n        target: '_self',\n        rel: 'noopener noreferrer',\n        className: 'header-brand',\n        href: '/',\n        style: {\n          display: 'block',\n          background: 'url(/logo.png)',\n          backgroundSize: 'contain',\n          backgroundRepeat: 'no-repeat',\n          width: '200px',\n        },\n      });\n    },\n  },\n  // Extensions should be able to suggest default values for these?\n  // Or we can require that these be explicitly set\n  hotkeys: [\n    // ~ Global\n    {\n      commandName: 'incrementActiveViewport',\n      label: 'Next Viewport',\n      keys: ['right'],\n    },\n    {\n      commandName: 'decrementActiveViewport',\n      label: 'Previous Viewport',\n      keys: ['left'],\n    },\n    // Supported Keys: https://craig.is/killing/mice\n    // ~ Cornerstone Extension\n    { commandName: 'rotateViewportCW', label: 'Rotate Right', keys: ['r'] },\n    { commandName: 'rotateViewportCCW', label: 'Rotate Left', keys: ['l'] },\n    { commandName: 'invertViewport', label: 'Invert', keys: ['i'] },\n    {\n      commandName: 'flipViewportVertical',\n      label: 'Flip Horizontally',\n      keys: ['h'],\n    },\n    {\n      commandName: 'flipViewportHorizontal',\n      label: 'Flip Vertically',\n      keys: ['v'],\n    },\n    { commandName: 'scaleUpViewport', label: 'Zoom In', keys: ['+'] },\n    { commandName: 'scaleDownViewport', label: 'Zoom Out', keys: ['-'] },\n    { commandName: 'fitViewportToWindow', label: 'Zoom to Fit', keys: ['='] },\n    { commandName: 'resetViewport', label: 'Reset', keys: ['space'] },\n    // clearAnnotations\n    { commandName: 'nextImage', label: 'Next Image', keys: ['down'] },\n    { commandName: 'previousImage', label: 'Previous Image', keys: ['up'] },\n    // firstImage\n    // lastImage\n    {\n      commandName: 'previousViewportDisplaySet',\n      label: 'Previous Series',\n      keys: ['pagedown'],\n    },\n    {\n      commandName: 'nextViewportDisplaySet',\n      label: 'Next Series',\n      keys: ['pageup'],\n    },\n    // ~ Cornerstone Tools\n    { commandName: 'setZoomTool', label: 'Zoom', keys: ['z'] },\n    // ~ Window level presets\n    {\n      commandName: 'windowLevelPreset1',\n      label: 'W/L Preset 1',\n      keys: ['1'],\n    },\n    {\n      commandName: 'windowLevelPreset2',\n      label: 'W/L Preset 2',\n      keys: ['2'],\n    },\n    {\n      commandName: 'windowLevelPreset3',\n      label: 'W/L Preset 3',\n      keys: ['3'],\n    },\n    {\n      commandName: 'windowLevelPreset4',\n      label: 'W/L Preset 4',\n      keys: ['4'],\n    },\n    {\n      commandName: 'windowLevelPreset5',\n      label: 'W/L Preset 5',\n      keys: ['5'],\n    },\n    {\n      commandName: 'windowLevelPreset6',\n      label: 'W/L Preset 6',\n      keys: ['6'],\n    },\n    {\n      commandName: 'windowLevelPreset7',\n      label: 'W/L Preset 7',\n      keys: ['7'],\n    },\n    {\n      commandName: 'windowLevelPreset8',\n      label: 'W/L Preset 8',\n      keys: ['8'],\n    },\n    {\n      commandName: 'windowLevelPreset9',\n      label: 'W/L Preset 9',\n      keys: ['9'],\n    },\n  ],\n  cornerstoneExtensionConfig: {},\n\n  // studyListFunctionsEnabled is set to true to enable DICOM uploading\n  studyListFunctionsEnabled: true\n\n  // Following property limits number of simultaneous series metadata requests.\n  // For http/1.x-only servers, set this to 5 or less to improve\n  //  on first meaningful display in viewer\n  // If the server is particularly slow to respond to series metadata\n  //  requests as it extracts the metadata from raw files everytime,\n  //  try setting this to even lower value\n  // Leave it undefined for no limit, sutiable for HTTP/2 enabled servers\n  // maxConcurrentMetadataRequests: 5,\n};\n",
      "viewer-nginx-conf": "server {\n  listen 80;\n  # set client body size to 500M, this is to allow uploading of DICOMs, throws '413 request entity too large nginx' error otherwise #\n  client_max_body_size 500M;\n  location / {\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    try_files $uri $uri/ /index.html;\n  }\n  error_page   500 502 503 504  /50x.html;\n  location = /50x.html {\n    root   /usr/share/nginx/html;\n  }\n\n  # https://book.orthanc-server.com/faq/nginx.html#nginx\n  location  /orthanc/  {\n    proxy_pass http://localhost:8042;\n    proxy_set_header HOST $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    rewrite /orthanc(.*) $1 break;\n  }\n}\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "ohif"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 80,
          "targetPort": 80,
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app": "ohif"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "pacs"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 80,
          "targetPort": 8042,
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app": "ohif"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "ohif"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "ohif"
        }
      },
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "ohif"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "pacs",
              "image": "jodogne/orthanc-plugins:latest",
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "containerPort": 8042
                }
              ],
              "volumeMounts": [
                {
                  "name": "ohif-config",
                  "subPath": "orthanc-json",
                  "mountPath": "/etc/orthanc/orthanc.json"
                }
              ]
            },
            {
              "name": "ohif-viewer",
              "image": "ohif/viewer",
              "ports": [
                {
                  "containerPort": 80
                }
              ],
              "env": [
                {
                  "name": "APP_CONFIG",
                  "value": "/usr/share/nginx/html/app-config.js"
                }
              ],
              "volumeMounts": [
                {
                  "name": "ohif-config",
                  "subPath": "viewer-config",
                  "mountPath": "/usr/share/nginx/html/app-config.js"
                },
                {
                  "name": "ohif-config",
                  "subPath": "viewer-nginx-conf",
                  "mountPath": "/etc/nginx/conf.d/default.conf"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "ohif-config",
              "configMap": {
                "name": "ohif-config"
              }
            }
          ]
        }
      }
    }
  }
]