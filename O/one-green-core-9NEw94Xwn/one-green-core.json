[
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodSecurityPolicy",
    "metadata": {
      "name": "release-name-grafana",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "seccomp.security.alpha.kubernetes.io/allowedProfileNames": "docker/default,runtime/default",
        "seccomp.security.alpha.kubernetes.io/defaultProfileName": "docker/default",
        "apparmor.security.beta.kubernetes.io/allowedProfileNames": "runtime/default",
        "apparmor.security.beta.kubernetes.io/defaultProfileName": "runtime/default"
      }
    },
    "spec": {
      "privileged": false,
      "allowPrivilegeEscalation": false,
      "requiredDropCapabilities": [
        "ALL"
      ],
      "volumes": [
        "configMap",
        "emptyDir",
        "projected",
        "csi",
        "secret",
        "downwardAPI",
        "persistentVolumeClaim"
      ],
      "hostNetwork": false,
      "hostIPC": false,
      "hostPID": false,
      "runAsUser": {
        "rule": "RunAsAny"
      },
      "seLinux": {
        "rule": "RunAsAny"
      },
      "supplementalGroups": {
        "rule": "MustRunAs",
        "ranges": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      },
      "fsGroup": {
        "rule": "MustRunAs",
        "ranges": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      },
      "readOnlyRootFilesystem": false,
      "rule": "MustRunAsNonRoot"
    }
  },
  {
    "apiVersion": "policy/v1beta1",
    "kind": "PodSecurityPolicy",
    "metadata": {
      "name": "release-name-grafana-test",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "allowPrivilegeEscalation": true,
      "privileged": false,
      "hostNetwork": false,
      "hostIPC": false,
      "hostPID": false,
      "fsGroup": {
        "rule": "RunAsAny"
      },
      "seLinux": {
        "rule": "RunAsAny"
      },
      "supplementalGroups": {
        "rule": "RunAsAny"
      },
      "runAsUser": {
        "rule": "RunAsAny"
      },
      "volumes": [
        "configMap",
        "downwardAPI",
        "emptyDir",
        "projected",
        "csi",
        "secret"
      ],
      "rule": "MustRunAsNonRoot"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "name": "release-name-grafana",
      "namespace": "9NEw94Xwn"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "name": "release-name-grafana-test",
      "namespace": "9NEw94Xwn"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.31.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "automountServiceAccountToken": true,
    "secrets": [
      {
        "name": "release-name-rabbitmq"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "automountServiceAccountToken": true,
    "metadata": {
      "name": "release-name-redis",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-grafana",
      "namespace": "9NEw94Xwn",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "admin-user": "YWRtaW4=",
      "admin-password": "eGZvN3NTc0lQdGFSM1FBdGdMM0FudWNsRUM0MnRyQTlXWHdwRzFmVA==",
      "ldap-toml": ""
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.1.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "postgres-password": "YW55cmFuZG9tcGFzc3dvcmQ=",
      "password": "UkxWZWcyd1owUw=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.31.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "rabbitmq-password": "YW55cmFuZG9tcGFzc3dvcmQ=",
      "rabbitmq-erlang-cookie": "c2VjcmV0Y29va2ll"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-secrets"
    },
    "type": "Opaque",
    "data": {
      "POSTGRES_USER": "cG9zdGdyZXM=",
      "POSTGRES_PASSWORD": "YW55cmFuZG9tcGFzc3dvcmQ=",
      "DOCKER_INFLUXDB_INIT_USERNAME": "YWRtaW4=",
      "DOCKER_INFLUXDB_INIT_PASSWORD": "YW55cmFuZG9tcGFzc3dvcmQ=",
      "DOCKER_INFLUXDB_INIT_ADMIN_TOKEN": "Y2hhbmdlX3RoaXNfdG9rZW4=",
      "DJANGO_ADMIN_USERNAME": "YWRtaW4=",
      "DJANGO_ADMIN_PASSWORD": "YWRtaW4="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-grafana",
      "namespace": "9NEw94Xwn",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "grafana.ini": "[analytics]\ncheck_for_updates = true\n[grafana_net]\nurl = https://grafana.net\n[log]\nmode = console\n[paths]\ndata = /var/lib/grafana/\nlogs = /var/log/grafana\nplugins = /var/lib/grafana/plugins\nprovisioning = /etc/grafana/provisioning\n",
      "datasources.yaml": "apiVersion: 1\ndatasources:\n- access: proxy\n  jsonData:\n    defaultBucket: 'release-name-bucket'\n    organization: 'release-name'\n    tlsSkipVerify: true\n    version: Flux\n  name: InfluxDB_v2_Flux\n  secureJsonData:\n    token: change_this_token\n  type: influxdb\n  url: http://release-name-influxdb:8086\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-grafana-test",
      "namespace": "9NEw94Xwn",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "run.sh": "@test \"Test Health\" {\n  url=\"http://release-name-grafana/api/health\"\n\n  code=$(wget --server-response --spider --timeout 10 --tries 1 ${url} 2>&1 | awk '/^  HTTP/{print $2}')\n  [ \"$code\" == \"200\" ]\n}"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-rabbitmq-config",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.31.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "rabbitmq.conf": "## Username and password\n##\ndefault_user = mqtt\ndefault_pass = CHANGEME\n## Clustering\n##\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator = min-masters\n# enable guest user\nloopback_users.guest = false\n#default_vhost = default-vhost\n#disk_free_limit.absolute = 50MB"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-configuration",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "redis.conf": "# User-supplied common configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"\n# End of common configuration",
      "master.conf": "dir /data\n# User-supplied master configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of master configuration",
      "replica.conf": "dir /data\nslave-read-only yes\n# User-supplied replica configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of replica configuration"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-health",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "ping_readiness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] && [ \"$responseFirstWord\" != \"LOADING\" ] && [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] && [ \"$responseFirstWord\" != \"LOADING\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
      "ping_liveness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-scripts",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "start-master.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--protected-mode\" \"no\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n",
      "start-replica.sh": "#!/bin/bash\n\nget_port() {\n    hostname=\"$1\"\n    type=\"$2\"\n\n    port_var=$(echo \"${hostname^^}_SERVICE_PORT_$type\" | sed \"s/-/_/g\")\n    port=${!port_var}\n\n    if [ -z \"$port\" ]; then\n        case $type in\n            \"SENTINEL\")\n                echo 26379\n                ;;\n            \"REDIS\")\n                echo 6379\n                ;;\n        esac\n    else\n        echo $port\n    fi\n}\n\nget_full_hostname() {\n    hostname=\"$1\"\n    echo \"${hostname}.${HEADLESS_SERVICE}\"\n}\n\nREDISPORT=$(get_port \"$HOSTNAME\" \"REDIS\")\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\nif [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\n\necho \"\" >> /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-port $REDISPORT\" >> /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-ip $(get_full_hostname \"$HOSTNAME\")\" >> /opt/bitnami/redis/etc/replica.conf\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--slaveof\" \"${REDIS_MASTER_HOST}\" \"${REDIS_MASTER_PORT_NUMBER}\")\nARGS+=(\"--protected-mode\" \"no\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/replica.conf\")\nexec redis-server \"${ARGS[@]}\"\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-config"
    },
    "data": {
      "TZ": "UTC",
      "POSTGRES_HOST": "release-name-postgresql",
      "POSTGRES_PORT": "5432",
      "POSTGRES_DB": "one_green",
      "MQTT_HOST": "release-name-mqtt",
      "MQTT_PORT": "1883",
      "INFLUXDB_HOST": "release-name-influxdb",
      "INFLUXDB_PORT": "8086",
      "INFLUXDB_URL": "http://release-name-influxdb:8086",
      "DOCKER_INFLUXDB_INIT_MODE": "setup",
      "DOCKER_INFLUXDB_INIT_ORG": "release-name",
      "DOCKER_INFLUXDB_INIT_BUCKET": "release-name-bucket",
      "DOCKER_INFLUXDB_INIT_RETENTION": "1w",
      "REDIS_HOST": "release-name-redis-headless",
      "REDIS_PORT": "6379",
      "ONE_GREEN_API_HOST": "release-name-api",
      "ONE_GREEN_API_PORT": "8080",
      "ONE_GREEN_API_URL": "http://release-name-api:8080",
      "CSRF_TRUSTED_ORIGINS": "https://api.dev1.og-ingest1.com",
      "ALLOWED_HOSTS": "api.dev1.og-ingest1.com",
      "DEBUG": "false"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-telegraf-config"
    },
    "data": {
      "telegraf.conf": "[global_tags]\n[agent]\n  interval = \"1s\"\n  round_interval = true\n  metric_batch_size = 1000\n  metric_buffer_limit = 10000\n  collection_jitter = \"0s\"\n  flush_interval = \"10s\"\n  flush_jitter = \"0s\"\n  precision = \"\"\n  debug = false\n  hostname = \"\"\n  omit_hostname = false\n\n# output\n[[outputs.influxdb_v2]]\n  urls = [\"$INFLUXDB_URL\"]\n  token = \"$DOCKER_INFLUXDB_INIT_ADMIN_TOKEN\"\n  organization = \"$DOCKER_INFLUXDB_INIT_ORG\"\n  bucket = \"$DOCKER_INFLUXDB_INIT_BUCKET\"\n\n# input influx line protocol format\n[[inputs.mqtt_consumer]]\n   servers = [\"tcp://$MQTT_HOST:1883\"]\n   topics = [\n              \"water/sensor\",\n              \"sprinkler/sensor\",\n              \"cooler/sensor\",\n              \"heater/sensor\",\n              \"air_humidifier/sensor\",\n            ]\n   qos = 0\n   username = \"$MQTT_USERNAME\"\n   password = \"$MQTT_PASSWORD\"\n   data_format = \"influx\"\n# input json format\n[[inputs.mqtt_consumer]]\n   name_override = \"controllers\"\n   servers = [\"tcp://$MQTT_HOST:1883\"]\n   topics = [\n              \"water/controller/+\",\n              \"sprinkler/controller/+\",\n              \"cooler/controller/+\",\n              \"heater/controller/+\",\n              \"air_humidifier/controller/+\"\n            ]\n   qos = 0\n   username = \"$MQTT_USERNAME\"\n   password = \"$MQTT_PASSWORD\"\n   data_format = \"json\"\n   tag_keys = [\n    \"controller_type\",\n    \"tag\"\n    ]\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
      "name": "release-name-grafana",
      "namespace": "default",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "finalizers": [
        "kubernetes.io/pvc-protection"
      ]
    },
    "spec": {
      "accessModes": [
        "ReadWriteOnce"
      ],
      "resources": {
        "requests": {
          "storage": "1Gi"
        }
      },
      "storageClassName": "scw-bssd"
    }
  },
  {
    "kind": "ClusterRole",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "name": "release-name-grafana-clusterrole"
    },
    "rules": []
  },
  {
    "kind": "ClusterRoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-grafana-clusterrolebinding",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-grafana",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "kind": "ClusterRole",
      "name": "release-name-grafana-clusterrole",
      "apiGroup": "rbac.authorization.k8s.io"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-grafana",
      "namespace": "9NEw94Xwn",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "extensions"
        ],
        "resources": [
          "podsecuritypolicies"
        ],
        "verbs": [
          "use"
        ],
        "resourceNames": [
          "release-name-grafana"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": {
      "name": "release-name-grafana-test",
      "namespace": "9NEw94Xwn",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "policy"
        ],
        "resources": [
          "podsecuritypolicies"
        ],
        "verbs": [
          "use"
        ],
        "resourceNames": [
          "release-name-grafana-test"
        ]
      }
    ]
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.31.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "endpoints"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "events"
        ],
        "verbs": [
          "create"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-grafana",
      "namespace": "9NEw94Xwn",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-grafana"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-grafana",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": {
      "name": "release-name-grafana-test",
      "namespace": "9NEw94Xwn",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-grafana-test"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-grafana-test",
        "namespace": "default"
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "release-name-rabbitmq-endpoint-reader",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.31.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "release-name-rabbitmq"
      }
    ],
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "release-name-rabbitmq-endpoint-reader"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-grafana",
      "namespace": "9NEw94Xwn",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "service",
          "port": 80,
          "protocol": "TCP",
          "targetPort": 3000
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-hl",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.1.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.1.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq-headless",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.31.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd"
        },
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp"
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist"
        },
        {
          "name": "http-stats",
          "port": 15672,
          "targetPort": "stats"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "rabbitmq",
        "app.kubernetes.io/instance": "release-name"
      },
      "publishNotReadyAddresses": true
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.31.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "amqp",
          "port": 5672,
          "targetPort": "amqp",
          "nodePort": null
        },
        {
          "name": "epmd",
          "port": 4369,
          "targetPort": "epmd",
          "nodePort": null
        },
        {
          "name": "dist",
          "port": 25672,
          "targetPort": "dist",
          "nodePort": null
        },
        {
          "name": "http-stats",
          "port": 15672,
          "targetPort": "stats",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "rabbitmq",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-headless",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-master",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "master"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "master"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-replicas",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "replica"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "replica"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-api"
    },
    "spec": {
      "selector": {
        "app": "release-name-api"
      },
      "ports": [
        {
          "port": 8080
        }
      ],
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-influxdb"
    },
    "spec": {
      "selector": {
        "app": "release-name-influxdb"
      },
      "ports": [
        {
          "port": 8086
        }
      ],
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-mqtt"
    },
    "spec": {
      "selector": {
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/name": "rabbitmq"
      },
      "type": "NodePort",
      "ports": [
        {
          "port": 1883,
          "nodePort": 30182
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-grafana",
      "namespace": "9NEw94Xwn",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "replicas": 1,
      "revisionHistoryLimit": 10,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "grafana",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "strategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "grafana",
            "app.kubernetes.io/instance": "release-name"
          },
          "annotations": {
            "checksum/config": "250c0b49d3774c0648f3fc7f561c2b09ddd6d267985da6feece34771809aa680",
            "checksum/dashboards-json-config": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b",
            "checksum/sc-dashboard-provider-config": "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b",
            "checksum/secret": "f1777135693d6d7aae638d669fea73424b0c115405858603ba38d89d142c1b31"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-grafana",
          "automountServiceAccountToken": true,
          "securityContext": {
            "fsGroup": 472,
            "runAsGroup": 472,
            "runAsUser": 472
          },
          "initContainers": [
            {
              "name": "init-chown-data",
              "image": "busybox:1.31.1",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsNonRoot": false,
                "runAsUser": 0
              },
              "command": [
                "chown",
                "-R",
                "472:472",
                "/var/lib/grafana"
              ],
              "resources": {},
              "volumeMounts": [
                {
                  "name": "storage",
                  "mountPath": "/var/lib/grafana"
                }
              ]
            }
          ],
          "enableServiceLinks": true,
          "containers": [
            {
              "name": "grafana",
              "image": "grafana/grafana:8.4.2",
              "imagePullPolicy": "IfNotPresent",
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/etc/grafana/grafana.ini",
                  "subPath": "grafana.ini"
                },
                {
                  "name": "storage",
                  "mountPath": "/var/lib/grafana"
                },
                {
                  "name": "config",
                  "mountPath": "/etc/grafana/provisioning/datasources/datasources.yaml",
                  "subPath": "datasources.yaml"
                }
              ],
              "ports": [
                {
                  "name": "service",
                  "containerPort": 80,
                  "protocol": "TCP"
                },
                {
                  "name": "grafana",
                  "containerPort": 3000,
                  "protocol": "TCP"
                }
              ],
              "env": [
                {
                  "name": "GF_SECURITY_ADMIN_USER",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-grafana",
                      "key": "admin-user"
                    }
                  }
                },
                {
                  "name": "GF_SECURITY_ADMIN_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-grafana",
                      "key": "admin-password"
                    }
                  }
                },
                {
                  "name": "GF_PATHS_DATA",
                  "value": "/var/lib/grafana/"
                },
                {
                  "name": "GF_PATHS_LOGS",
                  "value": "/var/log/grafana"
                },
                {
                  "name": "GF_PATHS_PLUGINS",
                  "value": "/var/lib/grafana/plugins"
                },
                {
                  "name": "GF_PATHS_PROVISIONING",
                  "value": "/etc/grafana/provisioning"
                }
              ],
              "livenessProbe": {
                "failureThreshold": 10,
                "httpGet": {
                  "path": "/api/health",
                  "port": 3000
                },
                "initialDelaySeconds": 60,
                "timeoutSeconds": 30
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/api/health",
                  "port": 3000
                }
              },
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-grafana"
              }
            },
            {
              "name": "storage",
              "persistentVolumeClaim": {
                "claimName": "release-name-grafana"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-api"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "release-name-api"
        }
      },
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-api"
          }
        },
        "spec": {
          "initContainers": [
            {
              "name": "initdb",
              "image": "docker.io/shanisma/og-core:0.0.7",
              "command": [
                "/bin/sh",
                "-c"
              ],
              "args": [
                "python init.py"
              ],
              "imagePullPolicy": "Always",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-config"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-secrets"
                  }
                }
              ]
            }
          ],
          "containers": [
            {
              "name": "api",
              "image": "docker.io/shanisma/og-core:0.0.7",
              "command": [
                "/bin/sh",
                "-c"
              ],
              "args": [
                "python manage.py collectstatic --noinput && python -m gunicorn --workers=1 --bind=0.0.0.0:8080 --access-logfile - --log-file - --log-level=info project.wsgi\n"
              ],
              "imagePullPolicy": "Always",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-config"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-secrets"
                  }
                }
              ],
              "env": [
                {
                  "name": "HEALTH_CHECK_TYPE",
                  "value": "all"
                },
                {
                  "name": "MQTT_USERNAME",
                  "value": "mqtt"
                },
                {
                  "name": "MQTT_PASSWORD",
                  "value": "anyrandompassword"
                }
              ],
              "ports": [
                {
                  "containerPort": 8080,
                  "name": "api"
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 10,
                "timeoutSeconds": 10,
                "exec": {
                  "command": [
                    "python",
                    "health_check.py"
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-worker"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "release-name-worker"
        }
      },
      "replicas": 3,
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-worker"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "worker",
              "image": "docker.io/shanisma/og-core:0.0.7",
              "command": [
                "/bin/sh",
                "-c"
              ],
              "args": [
                "python -m celery -A project worker -l info\n"
              ],
              "imagePullPolicy": "IfNotPresent",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-config"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-secrets"
                  }
                }
              ],
              "env": [
                {
                  "name": "MQTT_USERNAME",
                  "value": "mqtt"
                },
                {
                  "name": "MQTT_PASSWORD",
                  "value": "anyrandompassword"
                },
                {
                  "name": "C_FORCE_ROOT",
                  "value": "true"
                },
                {
                  "name": "HEALTH_CHECK_TYPE",
                  "value": "redis,pg,mqtt"
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 15,
                "timeoutSeconds": 10,
                "exec": {
                  "command": [
                    "python",
                    "health_check.py"
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "autoscaling/v2beta1",
    "kind": "HorizontalPodAutoscaler",
    "metadata": {
      "name": "release-name-worker"
    },
    "spec": {
      "scaleTargetRef": {
        "apiVersion": "apps/v1",
        "kind": "Deployment",
        "name": "release-name-worker"
      },
      "minReplicas": 1,
      "maxReplicas": 5,
      "metrics": [
        {
          "type": "Resource",
          "resource": {
            "name": "cpu",
            "targetAverageUtilization": 30
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-11.1.13",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null
    },
    "spec": {
      "replicas": 1,
      "serviceName": "release-name-postgresql-hl",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-11.1.13",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "primary"
          },
          "annotations": null
        },
        "spec": {
          "serviceAccountName": "default",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "postgresql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "hostNetwork": false,
          "hostIPC": false,
          "initContainers": null,
          "containers": [
            {
              "name": "postgresql",
              "image": "docker.io/bitnami/postgresql:14.2.0-debian-10-r45",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 11300,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgres-password"
                    }
                  }
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432"
                  ]
                }
              },
              "readinessProbe": {
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            },
            "storageClassName": "scw-bssd"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-rabbitmq",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "rabbitmq",
        "helm.sh/chart": "rabbitmq-8.31.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "serviceName": "release-name-rabbitmq-headless",
      "podManagementPolicy": "OrderedReady",
      "replicas": 3,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "rabbitmq",
          "app.kubernetes.io/instance": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "rabbitmq",
            "helm.sh/chart": "rabbitmq-8.31.0",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm"
          },
          "annotations": {
            "checksum/config": "670befdc65ace7453be2d3ca8a56de6d60f73fca4e8d9acd4e0f509a842569b2",
            "checksum/secret": "b445ee1ddd3a69b3e25b5d6ac7a561bcc949147c4fee232fd200471338d1822d"
          }
        },
        "spec": {
          "serviceAccountName": "release-name-rabbitmq",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "rabbitmq",
                        "app.kubernetes.io/instance": "release-name"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001,
            "runAsUser": 1001
          },
          "terminationGracePeriodSeconds": 120,
          "containers": [
            {
              "name": "rabbitmq",
              "image": "docker.io/bitnami/rabbitmq:3.9.14-debian-10-r10",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "MY_POD_IP",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "status.podIP"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAME",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.name"
                    }
                  }
                },
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                },
                {
                  "name": "K8S_SERVICE_NAME",
                  "value": "release-name-rabbitmq-headless"
                },
                {
                  "name": "K8S_ADDRESS_TYPE",
                  "value": "hostname"
                },
                {
                  "name": "RABBITMQ_FORCE_BOOT",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_NODE_NAME",
                  "value": "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "K8S_HOSTNAME_SUFFIX",
                  "value": ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                },
                {
                  "name": "RABBITMQ_MNESIA_DIR",
                  "value": "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
                },
                {
                  "name": "RABBITMQ_LDAP_ENABLE",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_LOGS",
                  "value": "-"
                },
                {
                  "name": "RABBITMQ_ULIMIT_NOFILES",
                  "value": "65536"
                },
                {
                  "name": "RABBITMQ_USE_LONGNAME",
                  "value": "true"
                },
                {
                  "name": "RABBITMQ_ERL_COOKIE",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-rabbitmq",
                      "key": "rabbitmq-erlang-cookie"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_LOAD_DEFINITIONS",
                  "value": "no"
                },
                {
                  "name": "RABBITMQ_DEFINITIONS_FILE",
                  "value": "/app/load_definition.json"
                },
                {
                  "name": "RABBITMQ_SECURE_PASSWORD",
                  "value": "yes"
                },
                {
                  "name": "RABBITMQ_USERNAME",
                  "value": "mqtt"
                },
                {
                  "name": "RABBITMQ_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-rabbitmq",
                      "key": "rabbitmq-password"
                    }
                  }
                },
                {
                  "name": "RABBITMQ_PLUGINS",
                  "value": "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_mqtt"
                }
              ],
              "ports": [
                {
                  "name": "amqp",
                  "containerPort": 5672
                },
                {
                  "name": "dist",
                  "containerPort": 25672
                },
                {
                  "name": "stats",
                  "containerPort": 15672
                },
                {
                  "name": "epmd",
                  "containerPort": 4369
                },
                {
                  "containerPort": 1883,
                  "name": "mqtt"
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "rabbitmq-diagnostics -q ping"
                  ]
                },
                "initialDelaySeconds": 120,
                "periodSeconds": 30,
                "timeoutSeconds": 20,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-ec",
                    "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 30,
                "timeoutSeconds": 20,
                "successThreshold": 1,
                "failureThreshold": 3
              },
              "lifecycle": {
                "preStop": {
                  "exec": {
                    "command": [
                      "/bin/bash",
                      "-ec",
                      "if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t \"120\" -d  \"false\"\nelse\n    rabbitmqctl stop_app\nfi\n"
                    ]
                  }
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "configuration",
                  "mountPath": "/bitnami/rabbitmq/conf"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/rabbitmq/mnesia"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "configuration",
              "configMap": {
                "name": "release-name-rabbitmq-config",
                "items": [
                  {
                    "key": "rabbitmq.conf",
                    "path": "rabbitmq.conf"
                  }
                ]
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data",
            "labels": {
              "app.kubernetes.io/name": "rabbitmq",
              "app.kubernetes.io/instance": "release-name"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            },
            "storageClassName": "scw-bssd"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-redis-master",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "master"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "master"
        }
      },
      "serviceName": "release-name-redis-headless",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.8.0",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "master"
          },
          "annotations": {
            "checksum/configmap": "4bf3a9dff7b6b3b99a8598c5cf9a55772cd9c744f5386bab2d9fc250dda60d22",
            "checksum/health": "5a75ed1908caa8aee2ba63cb132a9caa40f374ff033d33808e5400bb122d3c60",
            "checksum/scripts": "e7e88b9322b1c75989f449f471dcc9539cb243cb4c746540533102d0c746e7fd",
            "checksum/secret": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "serviceAccountName": "release-name-redis",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "redis",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "master"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "terminationGracePeriodSeconds": 30,
          "containers": [
            {
              "name": "redis",
              "image": "docker.io/bitnami/redis:6.2.6-debian-10-r169",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 11218,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master"
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "yes"
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379"
                }
              ],
              "ports": [
                {
                  "name": "redis",
                  "containerPort": 6379
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 6,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 2,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "start-scripts",
                  "mountPath": "/opt/bitnami/scripts/start-scripts"
                },
                {
                  "name": "health",
                  "mountPath": "/health"
                },
                {
                  "name": "redis-data",
                  "mountPath": "/data",
                  "subPath": null
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/redis/mounted-etc"
                },
                {
                  "name": "redis-tmp-conf",
                  "mountPath": "/opt/bitnami/redis/etc/"
                },
                {
                  "name": "tmp",
                  "mountPath": "/tmp"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "start-scripts",
              "configMap": {
                "name": "release-name-redis-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "health",
              "configMap": {
                "name": "release-name-redis-health",
                "defaultMode": 493
              }
            },
            {
              "name": "config",
              "configMap": {
                "name": "release-name-redis-configuration"
              }
            },
            {
              "name": "redis-tmp-conf",
              "emptyDir": {}
            },
            {
              "name": "tmp",
              "emptyDir": {}
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "redis-data",
            "labels": {
              "app.kubernetes.io/name": "redis",
              "app.kubernetes.io/instance": "release-name",
              "app.kubernetes.io/component": "master"
            }
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            },
            "storageClassName": "scw-bssd"
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-redis-replicas",
      "namespace": "9NEw94Xwn",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-16.8.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "replica"
      }
    },
    "spec": {
      "replicas": 0,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "replica"
        }
      },
      "serviceName": "release-name-redis-headless",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-16.8.0",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "replica"
          },
          "annotations": {
            "checksum/configmap": "4bf3a9dff7b6b3b99a8598c5cf9a55772cd9c744f5386bab2d9fc250dda60d22",
            "checksum/health": "5a75ed1908caa8aee2ba63cb132a9caa40f374ff033d33808e5400bb122d3c60",
            "checksum/scripts": "e7e88b9322b1c75989f449f471dcc9539cb243cb4c746540533102d0c746e7fd",
            "checksum/secret": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "serviceAccountName": "release-name-redis",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "redis",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "replica"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "terminationGracePeriodSeconds": 30,
          "containers": [
            {
              "name": "redis",
              "image": "docker.io/bitnami/redis:6.2.6-debian-10-r169",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 11188,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-replica.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "slave"
                },
                {
                  "name": "REDIS_MASTER_HOST",
                  "value": "release-name-redis-master-0.release-name-redis-headless.default.svc.cluster.local"
                },
                {
                  "name": "REDIS_MASTER_PORT_NUMBER",
                  "value": "6379"
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "yes"
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379"
                }
              ],
              "ports": [
                {
                  "name": "redis",
                  "containerPort": 6379
                }
              ],
              "startupProbe": {
                "failureThreshold": 22,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5,
                "tcpSocket": {
                  "port": "redis"
                }
              },
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 6,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local_and_master.sh 5"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 2,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local_and_master.sh 1"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "start-scripts",
                  "mountPath": "/opt/bitnami/scripts/start-scripts"
                },
                {
                  "name": "health",
                  "mountPath": "/health"
                },
                {
                  "name": "redis-data",
                  "mountPath": "/data",
                  "subPath": null
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/redis/mounted-etc"
                },
                {
                  "name": "redis-tmp-conf",
                  "mountPath": "/opt/bitnami/redis/etc"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "start-scripts",
              "configMap": {
                "name": "release-name-redis-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "health",
              "configMap": {
                "name": "release-name-redis-health",
                "defaultMode": 493
              }
            },
            {
              "name": "config",
              "configMap": {
                "name": "release-name-redis-configuration"
              }
            },
            {
              "name": "redis-tmp-conf",
              "emptyDir": {}
            },
            {
              "name": "redis-data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-influxdb"
    },
    "spec": {
      "serviceName": "release-name-influxdb",
      "selector": {
        "matchLabels": {
          "app": "release-name-influxdb"
        }
      },
      "replicas": 1,
      "template": {
        "metadata": {
          "name": "release-name-influxdb",
          "labels": {
            "app": "release-name-influxdb"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "influxdb",
              "image": "influxdb:2.0.8",
              "env": [
                {
                  "name": "DOCKER_INFLUXDB_INIT_MODE",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DOCKER_INFLUXDB_INIT_MODE",
                      "name": "release-name-config"
                    }
                  }
                },
                {
                  "name": "DOCKER_INFLUXDB_INIT_USERNAME",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DOCKER_INFLUXDB_INIT_USERNAME",
                      "name": "release-name-secrets"
                    }
                  }
                },
                {
                  "name": "DOCKER_INFLUXDB_INIT_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DOCKER_INFLUXDB_INIT_PASSWORD",
                      "name": "release-name-secrets"
                    }
                  }
                },
                {
                  "name": "DOCKER_INFLUXDB_INIT_ADMIN_TOKEN",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "DOCKER_INFLUXDB_INIT_ADMIN_TOKEN",
                      "name": "release-name-secrets"
                    }
                  }
                },
                {
                  "name": "DOCKER_INFLUXDB_INIT_ORG",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DOCKER_INFLUXDB_INIT_ORG",
                      "name": "release-name-config"
                    }
                  }
                },
                {
                  "name": "DOCKER_INFLUXDB_INIT_BUCKET",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DOCKER_INFLUXDB_INIT_BUCKET",
                      "name": "release-name-config"
                    }
                  }
                },
                {
                  "name": "DOCKER_INFLUXDB_INIT_RETENTION",
                  "valueFrom": {
                    "configMapKeyRef": {
                      "key": "DOCKER_INFLUXDB_INIT_RETENTION",
                      "name": "release-name-config"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "release-name-influxdb-data",
                  "mountPath": "/var/lib/influxdb"
                }
              ],
              "ports": [
                {
                  "containerPort": 8086
                }
              ]
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "release-name-influxdb-data"
          },
          "spec": {
            "storageClassName": "scw-bssd",
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-light-controller"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "release-name-light-controller"
        }
      },
      "serviceName": "release-name-light-controller",
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-light-controller"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "light-controller",
              "image": "docker.io/shanisma/og-core:0.0.7",
              "command": [
                "/bin/sh",
                "-c"
              ],
              "args": [
                "python manage.py light_controller"
              ],
              "imagePullPolicy": "IfNotPresent",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-config"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-secrets"
                  }
                }
              ],
              "env": [
                {
                  "name": "MQTT_USERNAME",
                  "value": "mqtt"
                },
                {
                  "name": "MQTT_PASSWORD",
                  "value": "anyrandompassword"
                },
                {
                  "name": "HEALTH_CHECK_TYPE",
                  "value": "redis,pg,mqtt"
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 15,
                "timeoutSeconds": 10,
                "exec": {
                  "command": [
                    "python",
                    "health_check.py"
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-sprinklers-controller"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "release-name-sprinklers-controller"
        }
      },
      "serviceName": "release-name-sprinklers-controller",
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-sprinklers-controller"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "sprinklers-controller",
              "image": "docker.io/shanisma/og-core:0.0.7",
              "command": [
                "/bin/sh",
                "-c"
              ],
              "args": [
                "python manage.py sprinkler_controller"
              ],
              "imagePullPolicy": "IfNotPresent",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-config"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-secrets"
                  }
                }
              ],
              "env": [
                {
                  "name": "MQTT_USERNAME",
                  "value": "mqtt"
                },
                {
                  "name": "MQTT_PASSWORD",
                  "value": "anyrandompassword"
                },
                {
                  "name": "HEALTH_CHECK_TYPE",
                  "value": "redis,pg,mqtt"
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 15,
                "timeoutSeconds": 10,
                "exec": {
                  "command": [
                    "python",
                    "health_check.py"
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-telegraf"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "release-name-telegraf"
        }
      },
      "serviceName": "release-name-telegraf",
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-telegraf"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "telegraf",
              "imagePullPolicy": "IfNotPresent",
              "image": "telegraf:1.20.4",
              "env": [
                {
                  "name": "MQTT_USERNAME",
                  "value": "mqtt"
                },
                {
                  "name": "MQTT_PASSWORD",
                  "value": "anyrandompassword"
                }
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-config"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-secrets"
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "conf",
                  "mountPath": "/etc/telegraf"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "conf",
              "configMap": {
                "name": "release-name-telegraf-config"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-water-controller"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "release-name-water-controller"
        }
      },
      "serviceName": "water-controller",
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-water-controller"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "water-controller",
              "image": "docker.io/shanisma/og-core:0.0.7",
              "command": [
                "/bin/sh",
                "-c"
              ],
              "args": [
                "python manage.py water_controller"
              ],
              "imagePullPolicy": "IfNotPresent",
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-config"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-secrets"
                  }
                }
              ],
              "env": [
                {
                  "name": "MQTT_USERNAME",
                  "value": "mqtt"
                },
                {
                  "name": "MQTT_PASSWORD",
                  "value": "anyrandompassword"
                },
                {
                  "name": "HEALTH_CHECK_TYPE",
                  "value": "redis,pg,mqtt"
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 15,
                "timeoutSeconds": 10,
                "exec": {
                  "command": [
                    "python",
                    "health_check.py"
                  ]
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "release-name-api",
      "annotations": {
        "cert-manager.io/cluster-issuer": "letsencrypt-prod"
      }
    },
    "spec": {
      "rules": [
        {
          "host": "api.dev1.og-ingest1.com",
          "http": {
            "paths": [
              {
                "path": "/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "release-name-api",
                    "port": {
                      "number": 8080
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      "tls": [
        {
          "hosts": [
            "api.dev1.og-ingest1.com"
          ],
          "secretName": "release-name-api-tls"
        }
      ]
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-grafana-test",
      "labels": {
        "helm.sh/chart": "grafana-6.24.1",
        "app.kubernetes.io/name": "grafana",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "8.4.2",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      },
      "namespace": "9NEw94Xwn"
    },
    "spec": {
      "serviceAccountName": "release-name-grafana-test",
      "containers": [
        {
          "name": "release-name-test",
          "image": "bats/bats:v1.4.1",
          "imagePullPolicy": "IfNotPresent",
          "command": [
            "/opt/bats/bin/bats",
            "-t",
            "/tests/run.sh"
          ],
          "volumeMounts": [
            {
              "mountPath": "/tests",
              "name": "tests",
              "readOnly": true
            }
          ]
        }
      ],
      "volumes": [
        {
          "name": "tests",
          "configMap": {
            "name": "release-name-grafana-test"
          }
        }
      ],
      "restartPolicy": "Never"
    }
  }
]