apiVersion: v1
kind: ServiceAccount
metadata:
  name: okapi
  labels:
    helm.sh/chart: okapi-0.3.31
    app.kubernetes.io/name: okapi
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.01.0
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: okapi-log4j2-configmap
data:
  log4j2.xml: |
    <Configuration status="WARN" monitorInterval="30">
      <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
          <!-- date, log level, class, message, exception -->
          <PatternLayout alwaysWriteExceptions="false" pattern="%d{ISO8601}\t%p\t%C{1}\t%replace{%replace{%m}{\r?\n}{ \| }}{\t}{  }\t%replace{%replace{%xEx{short}}{\r?\n}{ \| }}{\t}{  }%n"/>
        </Console>
      </Appenders>
      <Loggers>
        <Root level="INFO">
          <AppenderRef ref="Console"/>
        </Root>
      </Loggers>
    </Configuration>
---
apiVersion: v1
kind: Service
metadata:
  name: okapi
  labels:
    helm.sh/chart: okapi-0.3.31
    app.kubernetes.io/name: okapi
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.01.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9130
      targetPort: 9130
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: okapi
    app.kubernetes.io/instance: release-name
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: okapi
  labels:
    helm.sh/chart: okapi-0.3.31
    app.kubernetes.io/name: okapi
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: 4.01.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: okapi
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: okapi
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: okapi
      securityContext: {}
      containers:
        - name: okapi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          image: folioci/okapi:latest
          imagePullPolicy: Always
          args:
            - dev
          env:
            - name: OKAPI_HOST
              valueFrom:
                secretKeyRef:
                  name: db-connect-modules
                  key: DB_HOST
            - name: OKAPI_DB
              valueFrom:
                secretKeyRef:
                  name: db-connect-modules
                  key: DB_DATABASE
            - name: OKAPI_DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-connect-modules
                  key: DB_USERNAME
            - name: OKAPI_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-connect-modules
                  key: DB_PASSWORD
            - name: ENV
              valueFrom:
                secretKeyRef:
                  key: ENV
                  name: db-connect-modules
            - name: JAVA_OPTIONS
              value: -Djava.awt.headless=true -Dstorage=postgres -Dpostgres_host=$(OKAPI_HOST) -Dpostgres_port=5432 -Dpostgres_username=$(OKAPI_DB_USER) -Dpostgres_password=$(OKAPI_DB_PASSWORD) -Dpostgres_database=$(OKAPI_DB) -Dlog4j.configurationFile=/etc/log4j2.xml -Dhost=okapi -Dokapiurl=http://okapi:9130
          ports:
            - name: http
              containerPort: 9130
              protocol: TCP
          volumeMounts:
            - name: log4j2-xml
              readOnly: true
              mountPath: /etc/log4j2.xml
              subPath: log4j2.xml
          resources:
            limits:
              memory: 1500Mi
            requests:
              memory: 500Mi
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: log4j2-xml
          configMap:
            name: okapi-log4j2-configmap
