[
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-openvpn",
      "labels": {
        "app": "openvpn",
        "chart": "openvpn-4.2.5",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "data": {
      "setup-certs.sh": "#!/bin/bash\nEASY_RSA_LOC=\"/etc/openvpn/certs\"\ncd $EASY_RSA_LOC\nSERVER_CERT=\"${EASY_RSA_LOC}/pki/issued/server.crt\"\nif [ -e \"$SERVER_CERT\" ]\nthen\n  echo \"found existing certs - reusing\"\n    if [ ! -e ${EASY_RSA_LOC}/pki/ta.key ]\n    then\n      echo \"generating missed ta.key\"\n      openvpn --genkey --secret ${EASY_RSA_LOC}/pki/ta.key\n    fi\nelse\n  cp -R /usr/share/easy-rsa/* $EASY_RSA_LOC\n  ./easyrsa init-pki\n  echo \"ca\\n\" | ./easyrsa build-ca nopass\n  ./easyrsa build-server-full server nopass\n  ./easyrsa gen-dh\n  openvpn --genkey --secret ${EASY_RSA_LOC}/pki/ta.key\nfi",
      "newClientCert.sh": "#!/bin/bash\nEASY_RSA_LOC=\"/etc/openvpn/certs\"\ncd $EASY_RSA_LOC\nMY_IP_ADDR=\"$2\"\n./easyrsa build-client-full $1 nopass\ncat >${EASY_RSA_LOC}/pki/$1.ovpn <<EOF\nclient\nproto tcp\nnobind\ndev tun\nsndbuf 0\nrcvbuf 0\nremote-random\npersist-key\npersist-tun\nremote ${MY_IP_ADDR} 443 tcp\n\ncipher AES-256-CBC\n\nauth SHA512\n\nremote-cert-tls server\n\nresolv-retry infinite\n\nredirect-gateway def1\n\nkey-direction 1\n\nverb 3\n\n<key>\n`cat ${EASY_RSA_LOC}/pki/private/$1.key`\n</key>\n<cert>\n`cat ${EASY_RSA_LOC}/pki/issued/$1.crt`\n</cert>\n<ca>\n`cat ${EASY_RSA_LOC}/pki/ca.crt`\n</ca>\n<tls-auth>\n`cat ${EASY_RSA_LOC}/pki/ta.key`\n</tls-auth>\nkey-direction 1\nEOF\ncat pki/$1.ovpn",
      "revokeClientCert.sh": "#!/bin/bash\nEASY_RSA_LOC=\"/etc/openvpn/certs\"\ncd $EASY_RSA_LOC\n./easyrsa revoke $1\n./easyrsa gen-crl\ncp ${EASY_RSA_LOC}/pki/crl.pem ${EASY_RSA_LOC}\nchmod 644 ${EASY_RSA_LOC}/crl.pem",
      "configure.sh": "#!/bin/sh\ncidr2mask() {\n   # Number of args to shift, 255..255, first non-255 byte, zeroes\n   set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0\n   [ $1 -gt 1 ] && shift \"$1\" || shift\n   echo ${1-0}.${2-0}.${3-0}.${4-0}\n}\ncidr2net() {\n    local i ip mask netOctets octets\n    ip=\"${1%/*}\"\n    mask=\"${1#*/}\"\n    octets=$(echo \"$ip\" | tr '.' '\\n')\n    for octet in $octets; do\n        i=$((i+1))\n        if [ $i -le $(( mask / 8)) ]; then\n            netOctets=\"$netOctets.$octet\"\n        elif [ $i -eq  $(( mask / 8 +1 )) ]; then\n            netOctets=\"$netOctets.$((((octet / ((256 / ((2**((mask % 8)))))))) * ((256 / ((2**((mask % 8))))))))\"\n        else\n            netOctets=\"$netOctets.0\"\n        fi\n    done\n    echo ${netOctets#.}\n}\n/etc/openvpn/setup/setup-certs.sh\n\n\n\n\niptables -t nat -A POSTROUTING -s 10.240.0.0/255.255.0.0 -o eth0 -j MASQUERADE\nmkdir -p /dev/net\nif [ ! -c /dev/net/tun ]; then\n    mknod /dev/net/tun c 10 200\nfi\n\nif [ \"$DEBUG\" == \"1\" ]; then\n    echo ========== ${OVPN_CONFIG} ==========\n    cat \"${OVPN_CONFIG}\"\n    echo ====================================\nfi\n\nintAndIP=\"$(ip route get 8.8.8.8 | awk '/8.8.8.8/ {print $5 \"-\" $7}')\"\nint=\"${intAndIP%-*}\"\nip=\"${intAndIP#*-}\"\ncidr=\"$(ip addr show dev \"$int\" | awk -vip=\"$ip\" '($2 ~ ip) {print $2}')\"\n\nNETWORK=\"$(cidr2net $cidr)\"\nNETMASK=\"$(cidr2mask ${cidr#*/})\"\nDNS=$(cat /etc/resolv.conf | grep -v '^#' | grep nameserver | awk '{print $2}')\nSEARCH=$(cat /etc/resolv.conf | grep -v '^#' | grep search | awk '{$1=\"\"; print $0}')\nFORMATTED_SEARCH=\"\"\nfor DOMAIN in $SEARCH; do\n  FORMATTED_SEARCH=\"${FORMATTED_SEARCH}push \\\"dhcp-option DOMAIN-SEARCH ${DOMAIN}\\\"\\n\"\ndone\ncp -f /etc/openvpn/setup/openvpn.conf /etc/openvpn/\nsed 's|OVPN_K8S_SEARCH|'\"${FORMATTED_SEARCH}\"'|' -i /etc/openvpn/openvpn.conf\nsed 's|OVPN_K8S_DNS|'\"${DNS}\"'|' -i /etc/openvpn/openvpn.conf\nsed 's|NETWORK|'\"${NETWORK}\"'|' -i /etc/openvpn/openvpn.conf\nsed 's|NETMASK|'\"${NETMASK}\"'|' -i /etc/openvpn/openvpn.conf\n\n# exec openvpn process so it receives lifecycle signals\nexec openvpn --config /etc/openvpn/openvpn.conf",
      "openvpn.conf": "server 10.240.0.0 255.255.0.0\nverb 3\n\nkey /etc/openvpn/certs/pki/private/server.key\nca /etc/openvpn/certs/pki/ca.crt\ncert /etc/openvpn/certs/pki/issued/server.crt\ndh /etc/openvpn/certs/pki/dh.pem\n\ntls-auth /etc/openvpn/certs/pki/ta.key 0\n\n\n\ncipher AES-256-CBC\n\n\nauth SHA512\nkey-direction 0\nkeepalive 10 60\npersist-key\npersist-tun\n\nproto tcp\nport  443\ndev tun0\nstatus /tmp/openvpn-status.log\n\nuser nobody\ngroup nogroup\n\n\n\n\npush \"route NETWORK NETMASK\"\n\n\npush \"route 10.0.0.0 255.0.0.0\"\n\n\n\n\nOVPN_K8S_SEARCH\n\npush \"dhcp-option DNS OVPN_K8S_DNS\""
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-openvpn",
      "labels": {
        "app": "openvpn",
        "chart": "openvpn-4.2.5",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "openvpn",
          "port": 443,
          "targetPort": 443,
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app": "openvpn",
        "release": "release-name"
      },
      "type": "LoadBalancer"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-openvpn",
      "labels": {
        "app": "openvpn",
        "chart": "openvpn-4.2.5",
        "release": "release-name",
        "heritage": "Helm"
      }
    },
    "spec": {
      "replicas": 2,
      "selector": {
        "matchLabels": {
          "app": "openvpn",
          "release": "release-name"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "openvpn",
            "release": "release-name"
          },
          "annotations": {
            "checksum/config": "48cea2097671eac59add7a2d5dd53976717c4398a076aa1c299249967d634064"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "openvpn",
              "image": "jfelten/openvpn-docker:1.1.0",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/etc/openvpn/setup/configure.sh"
              ],
              "ports": [
                {
                  "containerPort": 443,
                  "name": "openvpn"
                }
              ],
              "securityContext": {
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 2,
                "exec": {
                  "command": [
                    "nc",
                    "-z",
                    "127.0.0.1",
                    "443"
                  ]
                }
              },
              "resources": {
                "requests": {
                  "cpu": "350m",
                  "memory": "175Mi"
                },
                "limits": {
                  "cpu": "400m",
                  "memory": "200Mi"
                }
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/openvpn/setup",
                  "name": "openvpn",
                  "readOnly": false
                },
                {
                  "mountPath": "/etc/openvpn/certs",
                  "name": "certs",
                  "readOnly": false
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "openvpn",
              "configMap": {
                "name": "release-name-openvpn",
                "defaultMode": 509
              }
            },
            {
              "name": "certs",
              "persistentVolumeClaim": {
                "claimName": "efs-openvpn-dev-pvc"
              }
            }
          ]
        }
      }
    }
  }
]