[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "opennebula-oned"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "opennebula-configurator"
    },
    "data": {
      "functions.sh": "#!/bin/bash\n\nwait_tcp_port(){\n  until printf \"\" 2>/dev/null >\"/dev/tcp/$1/$2\"; do\n    sleep 1\n  done\n}\n\nfinish(){\n  echo \"Configuration has been successfully finished\"\n  exec sleep infinity\n}\n\n# Check and set corrent permissions on object\n# Optional variables: user, group, chmod\nfix_permissions() {\n  local object=$1 id=$2\n  if [ -n \"$chmod\" ]; then\n    one${object} chmod \"$id\" \"$chmod\"\n  fi\n\n  if [ -n \"$user\" ]; then\n    if OUTPUT=\"$(one${object} chown \"$id\" \"$user\")\"; then\n      true\n    else\n      RC=$?\n      if ! echo \"$OUTPUT\" | grep -q \"already owns\"; then\n        echo \"$OUTPUT\"; exit $RC\n      fi\n    fi\n  fi\n\n  if [ -n \"$group\" ]; then\n    if OUTPUT=\"$(one${object} chgrp \"$id\" \"$group\")\"; then\n      true\n    else\n      RC=$?\n      if ! echo \"$OUTPUT\" | grep -q \"already owns\"; then\n        echo \"$OUTPUT\"; exit $RC\n      fi\n    fi\n  fi\n}\n\n# Adds object to cluster\n# Optional variables: clusters\nadd_to_cluster() {\n  local object=$1 id=$2\n  for CLUSTER in $clusters; do\n    onecluster add${object} \"$CLUSTER\" \"$id\"\n  done\n}\n\nconfigure_cluster() {\n  (\n    local \"$@\"\n    echo \"[cluster] $@\"\n    set -e\n\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n\n    # Search cluster\n    if OUTPUT=\"$(onecluster list -lID,NAME --csv -fNAME=\"$name\")\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    # Write template\n    echo \"$template\" > \"$CONFIG\"\n\n    if [ -z \"$ID\" ]; then\n      # New cluster\n      if OUTPUT=\"$(onecluster create \"$name\")\"; then\n        ID=\"$(echo \"$OUTPUT\" | awk '{print $NF}' )\"\n        onecluster update \"$ID\" \"$CONFIG\"\n      else\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n    else\n      # Existing cluster\n      onecluster update \"$ID\" \"$CONFIG\"\n    fi\n  )\n}\n\nconfigure_image() {\n  (\n    set -e\n    echo \"[image] $@\"\n    local \"$@\"\n\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n    if [ -z \"$datastore\" ]; then\n      echo 'datastore is required'\n      exit -1\n    fi\n    if [ -z \"$path\" ] && [ -z \"$size\" ]; then\n      echo 'path (or size) is required'\n      exit -1\n    fi\n\n    # Search image\n    if OUTPUT=\"$(oneimage list -lID,USER,NAME --csv -fNAME=\"$name\" $user)\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    TMPNAME=\"tmp-$(cat /proc/sys/kernel/random/uuid)\"\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    # Write template\n    echo \"$template\" > \"$CONFIG\"\n\n    if [ -z \"$ID\" ]; then\n      # New image\n      echo \"NAME=\\\"$TMPNAME\\\"\" >> \"$CONFIG\"\n      if [ -n \"$path\" ]; then\n        echo \"PATH=\\\"$path\\\"\" >> \"$CONFIG\"\n      fi\n      if [ -n \"$size\" ]; then\n        echo \"SIZE=\\\"$size\\\"\" >> \"$CONFIG\"\n      fi\n      if [ -n \"$type\" ]; then\n        echo \"TYPE=\\\"$type\\\"\" >> \"$CONFIG\"\n      fi\n      if OUTPUT=\"$(oneimage create -d \"$datastore\" \"$CONFIG\")\"; then\n        ID=\"$(echo \"$OUTPUT\" | awk '{print $NF}' )\"\n      else\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n      oneimage unlock \"$ID\"\n      fix_permissions image \"$ID\"\n      oneimage rename \"$ID\" \"$name\"\n    else\n      # Existing image\n      OUTPUT=\"$(oneimage show -x \"$ID\")\"\n      if echo \"$OUTPUT\" | grep -q '<STATE>5</STATE>'; then\n        echo 'image in error state!'\n        exit -1\n      fi\n      oneimage update \"$ID\" \"$CONFIG\"\n      if [ -n \"$type\" ]; then\n        oneimage chtype \"$ID\" \"$type\"\n      fi\n      fix_permissions image \"$ID\"\n    fi\n  )\n}\n\nconfigure_datastore() {\n  (\n    set -e\n    echo \"[datastore] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n    if [ -z \"$template\" ]; then\n      echo 'template is required'\n      exit -1\n    fi\n\n    # Search datastore\n    if OUTPUT=\"$(onedatastore list -lID,USER,NAME --csv -fNAME=\"$name\")\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    TMPNAME=\"tmp-$(cat /proc/sys/kernel/random/uuid)\"\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    # Write template\n    echo \"$template\" > \"$CONFIG\"\n\n    if [ -z \"$ID\" ]; then\n      # New datastore\n      echo \"NAME=\\\"$TMPNAME\\\"\" >> \"$CONFIG\"\n      if OUTPUT=\"$(onedatastore create \"$CONFIG\")\"; then\n        ID=\"$(echo \"$OUTPUT\" | awk '{print $NF}' )\"\n      else\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n      fix_permissions datastore \"$ID\"\n      onedatastore rename \"$ID\" \"$name\"\n      add_to_cluster datastore \"$ID\"\n    else\n      # Existing datastore\n      onedatastore update \"$ID\" \"$CONFIG\"\n      fix_permissions datastore \"$ID\"\n      add_to_cluster datastore \"$ID\"\n    fi\n  )\n}\n\nconfigure_group() {\n  (\n    set -e\n    echo \"[group] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n\n    # Search group\n    if OUTPUT=\"$(onegroup list -lID,NAME --csv -fNAME=\"$name\")\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    if [ -z \"$ID\" ]; then\n      # New group\n      if OUTPUT=\"$(onegroup create \"$name\")\"; then\n        ID=\"$(echo \"$OUTPUT\" | awk '{print $NF}' )\"\n      else\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n    fi\n\n    if [ -n \"$template\" ]; then\n      # Write template\n      echo \"$template\" > \"$CONFIG\"\n      onegroup update \"$ID\" \"$CONFIG\"\n    fi\n  )\n}\n\nconfigure_hook() {\n  (\n    set -e\n    echo \"[datastore] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n    if [ -z \"$template\" ]; then\n      echo 'template is required'\n      exit -1\n    fi\n\n    # Search hook\n    if OUTPUT=\"$(onehook list -lID,NAME --csv -fNAME=\"$name\")\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    TMPNAME=\"tmp-$(cat /proc/sys/kernel/random/uuid)\"\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    # Write template\n    echo \"$template\" > \"$CONFIG\"\n\n    if [ -z \"$ID\" ]; then\n      # New hook\n      echo \"NAME=\\\"$TMPNAME\\\"\" >> \"$CONFIG\"\n      if OUTPUT=\"$(onehook create \"$CONFIG\")\"; then\n        ID=\"$(echo \"$OUTPUT\" | awk '{print $NF}' )\"\n      else\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n      onehook rename \"$ID\" \"$name\"\n    else\n      # Existing hook\n      onehook update \"$ID\" \"$CONFIG\"\n    fi\n  )\n}\n\n\nconfigure_marketplace() {\n  (\n    set -e\n    echo \"[marketplace] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n\n    # Search market\n    if OUTPUT=\"$(onemarket list -lID,NAME --csv -fNAME=\"$name\")\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    # Write template\n    echo \"$template\" > \"$CONFIG\"\n\n    if [ -z \"$ID\" ]; then\n      # New market\n      echo \"NAME=\\\"$name\\\"\" >> \"$CONFIG\"\n      if OUTPUT=\"$(onemarket create \"$CONFIG\")\"; then\n        ID=\"$(echo \"$OUTPUT\" | awk '{print $NF}' )\"\n      else\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n    else\n      # Existing market\n      onemarket update \"$ID\" \"$CONFIG\"\n    fi\n  )\n}\n\nconfigure_template() {\n  (\n    set -e\n    echo \"[template] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n    if [ -z \"$template\" ]; then\n      echo 'template is required'\n      exit -1\n    fi\n\n    # Search template\n    if OUTPUT=\"$(onetemplate list -lID,USER,NAME --csv -fNAME=\"$name\" ${user})\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    TMPNAME=\"tmp-$(cat /proc/sys/kernel/random/uuid)\"\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    # Write template\n    echo \"$template\" > \"$CONFIG\"\n\n    if [ -z \"$ID\" ]; then\n      # New template\n      echo \"NAME=\\\"$TMPNAME\\\"\" >> \"$CONFIG\"\n      if OUTPUT=\"$(onetemplate create \"$CONFIG\")\"; then\n        ID=\"$(echo \"$OUTPUT\" | awk '{print $NF}' )\"\n      else\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n      fix_permissions template \"$ID\"\n      onetemplate rename \"$ID\" \"$name\"\n    else\n      # Existing template\n      onetemplate update \"$ID\" \"$CONFIG\"\n      fix_permissions template \"$ID\"\n    fi\n  )\n}\n\nconfigure_vnet() {\n  (\n    set -e\n    echo \"[vnet] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n    if [ -z \"$template\" ]; then\n      echo 'template is required'\n      exit -1\n    fi\n\n    # Search vnet\n    if OUTPUT=\"$(onevnet list -lID,USER,NAME --csv -fNAME=\"$name\" $user)\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    TMPNAME=\"tmp-$(cat /proc/sys/kernel/random/uuid)\"\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    # Write template\n    echo \"$template\" > \"$CONFIG\"\n\n    if [ -z \"$ID\" ]; then\n      # New vnet\n      echo \"NAME=\\\"$TMPNAME\\\"\" >> \"$CONFIG\"\n      if OUTPUT=\"$(onevnet create \"$CONFIG\")\"; then\n        ID=\"$(echo \"$OUTPUT\" | awk '{print $NF}' )\"\n      else\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n      fix_permissions vnet \"$ID\"\n      onevnet rename \"$ID\" \"$name\"\n      add_to_cluster vnet \"$ID\"\n    else\n      # Existing vnet\n      onevnet update \"$ID\" \"$CONFIG\"\n      fix_permissions vnet \"$ID\"\n      add_to_cluster vnet \"$ID\"\n    fi\n  )\n}\n\nconfigure_vnet_ar() {\n  (\n    set -e\n    echo \"[vnet_ar] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n    if [ -z \"$template\" ]; then\n      echo 'template is required'\n      exit -1\n    fi\n    if [ -z \"ar_uniq_key\" ]; then\n      echo 'ar_uniq_key is required'\n      exit -1\n    fi\n\n    # Search vnet\n    if OUTPUT=\"$(onevnet list -lID,USER,NAME --csv -fNAME=\"$name\" $user)\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    TMPNAME=\"tmp-$(cat /proc/sys/kernel/random/uuid)\"\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    # Write template\n    echo \"AR = [$(echo \"$template\" | awk NF | paste -s -d,)]\" > \"$CONFIG\"\n\n    # Search unique value for ar_uniq_key\n    ar_uniq_val=\"$(sed -n 's/.*'\"${ar_uniq_key}\"' *= *\"\\?\\([^\",]\\+\\)\"\\?.*/\\1/p' \"$CONFIG\")\"\n    if [ -z \"$ar_uniq_val\" ]; then\n      echo \"\" >&2\n      echo 'template have no $ar_uniq_key attribute'\n      exit -1\n    fi\n\n    # Search address range\n    if OUTPUT=\"$(onevnet show -x \"$ID\")\"; then\n      AR_ID=\"$(echo \"$OUTPUT\" | ruby -r rexml/document -e 'include REXML; p XPath.first(Document.new($stdin), \"/VNET/AR_POOL/AR['\"${ar_uniq_key}\"'=\\\"'\"${ar_uniq_val}\"'\\\"]/AR_ID/text()\")' | grep -o '[0-9]\\+' || true)\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    if [ -z \"$AR_ID\" ]; then\n      # New address range\n      onevnet addar \"$ID\" \"$CONFIG\"\n    else\n      # Existing address range\n      echo \"AR = [AR_ID=\\\"$AR_ID\\\",$(echo \"$template\" | awk NF | paste -s -d,)]\" > \"$CONFIG\"\n      onevnet updatear \"$ID\" \"$AR_ID\" \"$CONFIG\"\n    fi\n  )\n}\n\nconfigure_vntemplate() {\n  (\n    set -e\n    echo \"[vntemplate] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n    if [ -z \"$template\" ]; then\n      echo 'template is required'\n      exit -1\n    fi\n\n    # Search vntemplate\n    if OUTPUT=\"$(onevntemplate list -lID,USER,NAME --csv -fNAME=\"$name\" $user)\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    TMPNAME=\"tmp-$(cat /proc/sys/kernel/random/uuid)\"\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    # Write template\n    echo \"$template\" > \"$CONFIG\"\n\n    if [ -z \"$ID\" ]; then\n      # New vntemplate\n      echo \"NAME=\\\"$TMPNAME\\\"\" >> \"$CONFIG\"\n      if OUTPUT=\"$(onevntemplate create \"$CONFIG\")\"; then\n        ID=\"$(echo \"$OUTPUT\" | awk '{print $NF}' )\"\n      else\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n      fix_permissions vntemplate \"$ID\"\n      onevntemplate rename \"$ID\" \"$name\"\n    else\n      # Existing vntemplate\n      onevntemplate update \"$ID\" \"$CONFIG\"\n      fix_permissions vntemplate \"$ID\"\n    fi\n  )\n}\n\nconfigure_acl() {\n  (\n    set -e\n    echo \"[acl] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n    if [ -z \"$acl\" ]; then\n      echo 'acl is required'\n      exit -1\n    fi\n\n    if OUTPUT=\"$(oneacl create \"$acl\")\"; then\n      true\n    elif echo \"$OUTPUT\" | grep -q 'already exists'; then\n      true\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n  )\n}\n\nconfigure_host() {\n  (\n    set -e\n    echo \"[host] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit -1\n    fi\n    if [ -z \"$im_mad\" ]; then\n      echo 'im_mad is required'\n      exit -1\n    fi\n    if [ -z \"$vmm_mad\" ]; then\n      echo 'vmm_mad is required'\n      exit -1\n    fi\n\n    # Search host\n    if OUTPUT=\"$(onehost list -lID,NAME --csv -fNAME=\"$name\")\"; then\n      ID=\"$(echo \"$OUTPUT\" | awk -F, 'FNR==2{print $1}')\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    if [ -z \"$ID\" ]; then\n      # New host\n      if OUTPUT=\"$(onehost create -i \"$im_mad\" -v \"$vmm_mad\" \"$name\")\"; then\n        ID=\"$(echo \"$OUTPUT\" | awk '{print $NF}' )\"\n      else\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n      add_to_cluster host \"$ID\"\n    fi\n\n    if [ -n \"$template\" ]; then\n      # Write template\n      echo \"$template\" > \"$CONFIG\"\n      onehost update -a \"$ID\" \"$CONFIG\"\n    fi\n  )\n}\n\nxmlrpc_call() {\n  local method=$1 params=\n  shift\n  while [ $# -gt 0 ]; do\n    params=\"$params\"'<param><value><'\"${1%:*}\"'>'\"${1#*:}\"'</'\"${1%:*}\"'></value></param>'\n    shift\n  done\n  wget -q -O- \"${ONE_XMLRPC:-http://localhost:2633/RPC2}\" --post-data '<?xml version=\"1.0\"?><methodCall><methodName>'\"$method\"'</methodName><params><param><value>'\"$(cat /var/lib/one/.one/one_auth)\"'</value></param>'\"$params\"'</params></methodCall>'\n}\n\nxml_name2id() {\n  grep -o '&lt;'\"$1\"'&gt;&lt;ID&gt;[^&]\\+&lt;/ID&gt;&lt;NAME&gt;[^&]\\+&lt;/NAME&gt;' | sed 's/\\(&lt;[^&]\\+&gt;\\)\\{1,2\\}/,/g' | awk -F, \"\\$3 == \\\"$2\\\" {print \\$2}\"\n}\n\n# Same as configure_host, but sh compatible (works with busybox)\nconfigure_host_lightweight() {\n  (\n    set -e\n    echo \"[host] $@\"\n    local \"$@\"\n    if [ -z \"$name\" ]; then\n      echo 'name is required'\n      exit 1\n    fi\n    if [ -z \"$im_mad\" ]; then\n      echo 'im_mad is required'\n      exit 1\n    fi\n    if [ -z \"$vmm_mad\" ]; then\n      echo 'vmm_mad is required'\n      exit 1\n    fi\n\n    # Search host\n    if OUTPUT=\"$(xmlrpc_call one.hostpool.info)\"; then\n      ID=\"$(echo \"$OUTPUT\" | xml_name2id HOST \"$name\")\"\n    else\n      RC=$?; echo \"$OUTPUT\"; exit $RC\n    fi\n\n    CONFIG=\"$(mktemp)\"\n    trap \"rm -f \\\"$CONFIG\\\"\" EXIT\n\n    if [ -n \"$cluster\" ]; then\n      # check if numberic\n      if [ \"$cluster\" -eq \"$cluster\" ] 2>/dev/null; then\n        CLUSTER_ID=\"$cluster\"\n      else\n        CLUSTER_ID=$(xmlrpc_call one.clusterpool.info | xml_name2id CLUSTER \"$cluster\")\n        if [ -z \"$CLUSTER_ID\" ]; then\n          echo \"Could not find cluster with name $cluster\"\n          exit 1\n        fi\n      fi\n    fi\n\n    if [ -z \"$ID\" ]; then\n      # New host\n      if OUTPUT=\"$(xmlrpc_call one.host.allocate \"string:$name\" \"string:$im_mad\" \"string:$vmm_mad\" \"i4:${CLUSTER_ID:--1}\")\"; ! echo \"$OUTPUT\" | grep -q '<value><boolean>1</boolean></value>'; then\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      else\n        ID=\"$(echo \"$OUTPUT\" | sed -n 's|<value><i4>\\([0-9]\\+\\)</i4></value>|\\1|p')\"\n      fi\n    else\n      if [ -n \"$cluster\" ]; then\n        if OUTPUT=\"$(xmlrpc_call one.cluster.addhost \"i4:$CLUSTER_ID\" \"i4:$ID\")\"; ! echo \"$OUTPUT\" | grep -q '<value><boolean>1</boolean></value>'; then\n          RC=$?; echo \"$OUTPUT\"; exit $RC\n        fi\n      fi\n    fi\n\n    if [ -n \"$template\" ]; then\n      # Write template\n      echo \"$template\" > \"$CONFIG\"\n      if OUTPUT=\"$(xmlrpc_call one.host.update \"i4:$ID\" \"string:$(cat \"$CONFIG\")\" i4:1)\"; ! echo \"$OUTPUT\" | grep -q '<value><boolean>1</boolean></value>'; then\n        RC=$?; echo \"$OUTPUT\"; exit $RC\n      fi\n    fi\n  )\n}\n",
      "configurator.oned": "#!/bin/bash\nset -e\n. $(dirname $0)/functions.sh\n\nfinish\n",
      "configurator.host": "#!/bin/sh\nset -e\n. $(dirname $0)/functions.sh\necho \"Node hostname: $HOSTNAME\"\nif echo \"$HOSTNAME\" | grep -q -E '.*'; then\n  echo \"Setting up SSH keys:\"\n  nsenter --target 1 --mount --uts --ipc --net --pid -- bash <<\\EOUS\nset -x\nmkdir -p /var/lib/one/.ssh\nchmod 700 /var/lib/one/.ssh\nssh-keygen -y -f /dev/stdin > /var/lib/one/.ssh/authorized_keys <<EOF\n$SSH_KEY\nEOF\nchown 9869:9869 /var/lib/one /var/lib/one/.ssh /var/lib/one/.ssh/authorized_keys \nEOUS\n  echo \"Running user script:\"\n  nsenter --target 1 --mount --uts --ipc --net --pid -- bash <<\\EOUS\nset -x\nmkdir -p /var/lib/one/datastores\n# mount -t nfs some:/share/one/100 /var/lib/one/datastores/100\nfind /var/lib/one/datastores -maxdepth 1 -exec chown 9869:9869 {} \\;\nEOUS\n\n  echo \"Registring host in OpenNebula\"\n  configure_host_lightweight name=\"$HOSTNAME\" im_mad='kvm' vmm_mad='kvm' template=''\n\nfi\n\nfinish\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "opennebula-flow",
      "labels": {
        "app": "opennebula-flow"
      }
    },
    "data": {
      "oneflow-server.conf": ":action_number: 1\n:action_period: 60\n:autoscaler_interval: 30\n:concurrency: 10\n:core_auth: cipher\n:debug_level: 2\n:default_cooldown: 300\n:force_deletion: false\n:host: 0.0.0.0\n:one_xmlrpc: http://opennebula-oned:2633/RPC2\n:port: 2474\n:shutdown_action: terminate\n:vm_name_template: $ROLE_NAME_$VM_NUMBER_(service_$SERVICE_ID)\n:wait_timeout: 30\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "opennebula-gate",
      "labels": {
        "app": "opennebula-gate"
      }
    },
    "data": {
      "onegate-server.conf": ":auth: onegate\n:core_auth: cipher\n:debug_level: 3\n:host: 0.0.0.0\n:one_xmlrpc: http://opennebula-oned:2633/RPC2\n:oneflow_server: http://opennebula-flow:2474\n:permissions:\n  :service:\n    :change_cardinality: true\n    :show: true\n  :vm:\n    :action_by_id: true\n    :show: true\n    :show_by_id: true\n    :update: true\n    :update_by_id: true\n:port: 5030\n:restricted_actions: []\n:restricted_attrs:\n- SCHED_REQUIREMENTS\n- SERVICE_ID\n- ROLE_NAME\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "opennebula-hem",
      "labels": {
        "app": "opennebula-hem"
      }
    },
    "data": {
      "onehem-server.conf": ":concurrency: 10\n:debug_level: 3\n:hook_base_path: /var/lib/one/remotes/hooks\n:remote_hook_base_path: /var/tmp/one/hooks\n:replier_endpoint: tcp://localhost:2102\n:subscriber_endpoint: tcp://localhost:2101\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "opennebula-novnc",
      "labels": {
        "app": "opennebula-novnc"
      }
    },
    "data": {
      "sunstone-server.conf": ":auth: opennebula\n:core_auth: cipher\n:debug_level: 3\n:env: prod\n:get_extended_vm_info: false\n:host: 0.0.0.0\n:keep_me_logged: true\n:lang: en_US\n:leases:\n  suspense:\n    color: '#000000'\n    time: \"+1209600\"\n    warning:\n      color: '#085aef'\n      time: \"-86400\"\n  terminate:\n    color: '#e1ef08'\n    time: \"+1209600\"\n    warning:\n      color: '#ef2808'\n      time: \"-86400\"\n:marketplace_url: http://marketplace.opennebula.io/\n:memcache_host: opennebula-memcached\n:memcache_namespace: opennebula.sunstone\n:memcache_port: 11211\n:mode: mixed\n:one_xmlrpc: http://opennebula-oned:2633/RPC2\n:one_xmlrpc_timeout: 60\n:oneflow_server: http://opennebula-flow:2474/\n:paginate: '[[6, 12, 36, 72], [6, 12, 36, 72]]'\n:port: 9869\n:remote_version: http://downloads.opennebula.org/latest\n:routes:\n- oneflow\n- support\n:sessions: memcache\n:table_order: desc\n:threshold_high: 66\n:threshold_low: 33\n:threshold_min: 0\n:tmpdir: /var/tmp\n:two_factor_auth_issuer: opennebula\n:vnc_proxy_cert: null\n:vnc_proxy_ipv6: false\n:vnc_proxy_key: null\n:vnc_proxy_port: 29876\n:vnc_proxy_support_wss: false\n:vnc_request_password: false\n:webauthn_origin: http://localhost:9869\n:webauthn_rpname: OpenNebula Cloud\n:webauthn_timeout: 60000\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "opennebula-oned",
      "labels": {
        "app": "opennebula-oned"
      }
    },
    "data": {
      "oned.conf": "\nAUTH_MAD = [\n  AUTHN = \"ssh,x509,ldap,server_cipher,server_x509\",\n  EXECUTABLE = \"one_auth_mad\"\n]\nAUTH_MAD_CONF = [\n  DRIVER_MANAGED_GROUPS = \"NO\",\n  MAX_TOKEN_TIME = \"-1\",\n  NAME = \"core\",\n  PASSWORD_CHANGE = \"YES\"\n]\nAUTH_MAD_CONF = [\n  DRIVER_MANAGED_GROUPS = \"NO\",\n  MAX_TOKEN_TIME = \"-1\",\n  NAME = \"public\",\n  PASSWORD_CHANGE = \"NO\"\n]\nAUTH_MAD_CONF = [\n  DRIVER_MANAGED_GROUPS = \"NO\",\n  MAX_TOKEN_TIME = \"-1\",\n  NAME = \"ssh\",\n  PASSWORD_CHANGE = \"YES\"\n]\nAUTH_MAD_CONF = [\n  DRIVER_MANAGED_GROUPS = \"NO\",\n  MAX_TOKEN_TIME = \"-1\",\n  NAME = \"x509\",\n  PASSWORD_CHANGE = \"NO\"\n]\nAUTH_MAD_CONF = [\n  DRIVER_MANAGED_GROUPS = \"YES\",\n  MAX_TOKEN_TIME = \"86400\",\n  NAME = \"ldap\",\n  PASSWORD_CHANGE = \"YES\"\n]\nAUTH_MAD_CONF = [\n  DRIVER_MANAGED_GROUPS = \"NO\",\n  MAX_TOKEN_TIME = \"-1\",\n  NAME = \"server_cipher\",\n  PASSWORD_CHANGE = \"NO\"\n]\nAUTH_MAD_CONF = [\n  DRIVER_MANAGED_GROUPS = \"NO\",\n  MAX_TOKEN_TIME = \"-1\",\n  NAME = \"server_x509\",\n  PASSWORD_CHANGE = \"NO\"\n]\nCLUSTER_ENCRYPTED_ATTR = \"PROVISION/PACKET_TOKEN\"\nDATASTORE_CAPACITY_CHECK = \"yes\"\nDATASTORE_ENCRYPTED_ATTR = \"PROVISION/PACKET_TOKEN\"\nDATASTORE_MAD = [\n  ARGUMENTS = \"-t 15 -d dummy,fs,lvm,ceph,dev,iscsi_libvirt,vcenter -s shared,ssh,ceph,fs_lvm,qcow2,vcenter\",\n  EXECUTABLE = \"one_datastore\"\n]\nDB = [\n  BACKEND = \"sqlite\",\n  TIMEOUT = 2500\n]\nDEFAULT_CDROM_DEVICE_PREFIX = \"hd\"\nDEFAULT_COST = [\n  CPU_COST = 0,\n  DISK_COST = 0,\n  MEMORY_COST = 0\n]\nDEFAULT_DEVICE_PREFIX = \"sd\"\nDEFAULT_IMAGE_TYPE = \"OS\"\nDEFAULT_UMASK = 177\nDEFAULT_VDC_CLUSTER_DATASTORE_ACL = \"USE\"\nDEFAULT_VDC_CLUSTER_HOST_ACL = \"MANAGE\"\nDEFAULT_VDC_CLUSTER_NET_ACL = \"USE\"\nDEFAULT_VDC_DATASTORE_ACL = \"USE\"\nDEFAULT_VDC_HOST_ACL = \"MANAGE\"\nDEFAULT_VDC_VNET_ACL = \"USE\"\nDS_MAD_CONF = [\n  MARKETPLACE_ACTIONS = \"export\",\n  NAME = \"ceph\",\n  PERSISTENT_ONLY = \"NO\",\n  REQUIRED_ATTRS = \"DISK_TYPE,BRIDGE_LIST\"\n]\nDS_MAD_CONF = [\n  NAME = \"dev\",\n  PERSISTENT_ONLY = \"YES\",\n  REQUIRED_ATTRS = \"DISK_TYPE\"\n]\nDS_MAD_CONF = [\n  NAME = \"iscsi_libvirt\",\n  PERSISTENT_ONLY = \"YES\",\n  REQUIRED_ATTRS = \"DISK_TYPE,ISCSI_HOST\"\n]\nDS_MAD_CONF = [\n  NAME = \"dummy\",\n  PERSISTENT_ONLY = \"NO\",\n  REQUIRED_ATTRS = \"\"\n]\nDS_MAD_CONF = [\n  MARKETPLACE_ACTIONS = \"export\",\n  NAME = \"fs\",\n  PERSISTENT_ONLY = \"NO\",\n  REQUIRED_ATTRS = \"\"\n]\nDS_MAD_CONF = [\n  NAME = \"lvm\",\n  PERSISTENT_ONLY = \"NO\",\n  REQUIRED_ATTRS = \"DISK_TYPE,BRIDGE_LIST\"\n]\nDS_MAD_CONF = [\n  MARKETPLACE_ACTIONS = \"export\",\n  NAME = \"vcenter\",\n  PERSISTENT_ONLY = \"NO\",\n  REQUIRED_ATTRS = \"VCENTER_INSTANCE_ID,VCENTER_DS_REF,VCENTER_DC_REF\"\n]\nFEDERATION = [\n  MASTER_ONED = \"\",\n  MODE = \"STANDALONE\",\n  SERVER_ID = -1,\n  ZONE_ID = 0\n]\nGROUP_RESTRICTED_ATTR = \"VM_USE_OPERATIONS\"\nGROUP_RESTRICTED_ATTR = \"VM_MANAGE_OPERATIONS\"\nGROUP_RESTRICTED_ATTR = \"VM_ADMIN_OPERATIONS\"\nHM_MAD = [\n  ARGUMENTS = \"-p 2101 -l 2102 -b 0.0.0.0\",\n  EXECUTABLE = \"one_hm\"\n]\nHOOK_LOG_CONF = [\n  LOG_RETENTION = 20\n]\nHOSTNAME = \"localhost\"\nHOST_ENCRYPTED_ATTR = \"PROVISION/PACKET_TOKEN\"\nHOST_ENCRYPTED_ATTR = \"PROVISION/EC2_ACCESS\"\nHOST_ENCRYPTED_ATTR = \"PROVISION/EC2_SECRET\"\nIMAGE_RESTRICTED_ATTR = \"SOURCE\"\nIMAGE_RESTRICTED_ATTR = \"VCENTER_IMPORTED\"\nIM_MAD = [\n  ARGUMENTS = \"-c monitord.conf\",\n  EXECUTABLE = \"onemonitord\",\n  NAME = \"monitord\",\n  THREADS = 8\n]\nINHERIT_DATASTORE_ATTR = \"CEPH_HOST\"\nINHERIT_DATASTORE_ATTR = \"CEPH_SECRET\"\nINHERIT_DATASTORE_ATTR = \"CEPH_KEY\"\nINHERIT_DATASTORE_ATTR = \"CEPH_USER\"\nINHERIT_DATASTORE_ATTR = \"CEPH_CONF\"\nINHERIT_DATASTORE_ATTR = \"CEPH_TRASH\"\nINHERIT_DATASTORE_ATTR = \"POOL_NAME\"\nINHERIT_DATASTORE_ATTR = \"ISCSI_USER\"\nINHERIT_DATASTORE_ATTR = \"ISCSI_USAGE\"\nINHERIT_DATASTORE_ATTR = \"ISCSI_HOST\"\nINHERIT_DATASTORE_ATTR = \"GLUSTER_HOST\"\nINHERIT_DATASTORE_ATTR = \"GLUSTER_VOLUME\"\nINHERIT_DATASTORE_ATTR = \"DISK_TYPE\"\nINHERIT_DATASTORE_ATTR = \"ALLOW_ORPHANS\"\nINHERIT_DATASTORE_ATTR = \"VCENTER_ADAPTER_TYPE\"\nINHERIT_DATASTORE_ATTR = \"VCENTER_DISK_TYPE\"\nINHERIT_DATASTORE_ATTR = \"VCENTER_DS_REF\"\nINHERIT_DATASTORE_ATTR = \"VCENTER_DS_IMAGE_DIR\"\nINHERIT_DATASTORE_ATTR = \"VCENTER_DS_VOLATILE_DIR\"\nINHERIT_DATASTORE_ATTR = \"VCENTER_INSTANCE_ID\"\nINHERIT_IMAGE_ATTR = \"ISCSI_USER\"\nINHERIT_IMAGE_ATTR = \"ISCSI_USAGE\"\nINHERIT_IMAGE_ATTR = \"ISCSI_HOST\"\nINHERIT_IMAGE_ATTR = \"ISCSI_IQN\"\nINHERIT_IMAGE_ATTR = \"DISK_TYPE\"\nINHERIT_IMAGE_ATTR = \"VCENTER_ADAPTER_TYPE\"\nINHERIT_IMAGE_ATTR = \"VCENTER_DISK_TYPE\"\nINHERIT_VNET_ATTR = \"VLAN_TAGGED_ID\"\nINHERIT_VNET_ATTR = \"FILTER\"\nINHERIT_VNET_ATTR = \"FILTER_IP_SPOOFING\"\nINHERIT_VNET_ATTR = \"FILTER_MAC_SPOOFING\"\nINHERIT_VNET_ATTR = \"MTU\"\nINHERIT_VNET_ATTR = \"METRIC\"\nINHERIT_VNET_ATTR = \"INBOUND_AVG_BW\"\nINHERIT_VNET_ATTR = \"INBOUND_PEAK_BW\"\nINHERIT_VNET_ATTR = \"INBOUND_PEAK_KB\"\nINHERIT_VNET_ATTR = \"OUTBOUND_AVG_BW\"\nINHERIT_VNET_ATTR = \"OUTBOUND_PEAK_BW\"\nINHERIT_VNET_ATTR = \"OUTBOUND_PEAK_KB\"\nINHERIT_VNET_ATTR = \"CONF\"\nINHERIT_VNET_ATTR = \"BRIDGE_CONF\"\nINHERIT_VNET_ATTR = \"OVS_BRIDGE_CONF\"\nINHERIT_VNET_ATTR = \"IP_LINK_CONF\"\nINHERIT_VNET_ATTR = \"EXTERNAL\"\nINHERIT_VNET_ATTR = \"VCENTER_NET_REF\"\nINHERIT_VNET_ATTR = \"VCENTER_SWITCH_NAME\"\nINHERIT_VNET_ATTR = \"VCENTER_SWITCH_NPORTS\"\nINHERIT_VNET_ATTR = \"VCENTER_PORTGROUP_TYPE\"\nINHERIT_VNET_ATTR = \"VCENTER_CCR_REF\"\nINHERIT_VNET_ATTR = \"VCENTER_INSTANCE_ID\"\nIPAM_MAD = [\n  ARGUMENTS = \"-t 1 -i dummy\",\n  EXECUTABLE = \"one_ipam\"\n]\nLISTEN_ADDRESS = \"0.0.0.0\"\nLOG = [\n  DEBUG_LEVEL = 3,\n  SYSTEM = \"file\"\n]\nMAC_PREFIX = \"02:00\"\nMARKET_MAD = [\n  ARGUMENTS = \"-t 15 -m http,s3,one,linuxcontainers,turnkeylinux,dockerhub\",\n  EXECUTABLE = \"one_market\"\n]\nMARKET_MAD_CONF = [\n  APP_ACTIONS = \"monitor\",\n  NAME = \"one\",\n  PUBLIC = \"yes\",\n  REQUIRED_ATTRS = \"\",\n  SUNSTONE_NAME = \"OpenNebula.org Marketplace\"\n]\nMARKET_MAD_CONF = [\n  APP_ACTIONS = \"create, delete, monitor\",\n  NAME = \"http\",\n  REQUIRED_ATTRS = \"BASE_URL,PUBLIC_DIR\",\n  SUNSTONE_NAME = \"HTTP server\"\n]\nMARKET_MAD_CONF = [\n  APP_ACTIONS = \"create, delete, monitor\",\n  NAME = \"s3\",\n  REQUIRED_ATTRS = \"ACCESS_KEY_ID,SECRET_ACCESS_KEY,REGION,BUCKET\",\n  SUNSTONE_NAME = \"Amazon S3\"\n]\nMARKET_MAD_CONF = [\n  APP_ACTIONS = \"monitor\",\n  NAME = \"linuxcontainers\",\n  PUBLIC = \"yes\",\n  REQUIRED_ATTRS = \"\",\n  SUNSTONE_NAME = \"LinuxContainers.org\"\n]\nMARKET_MAD_CONF = [\n  APP_ACTIONS = \"monitor\",\n  NAME = \"turnkeylinux\",\n  PUBLIC = \"yes\",\n  REQUIRED_ATTRS = \"\",\n  SUNSTONE_NAME = \"TurnkeyLinux\"\n]\nMARKET_MAD_CONF = [\n  APP_ACTIONS = \"monitor\",\n  NAME = \"dockerhub\",\n  PUBLIC = \"yes\",\n  REQUIRED_ATTRS = \"\",\n  SUNSTONE_NAME = \"DockerHub\"\n]\nMONITORING_INTERVAL_DATASTORE = 300\nMONITORING_INTERVAL_DB_UPDATE = 0\nMONITORING_INTERVAL_MARKET = 600\nNETWORK_SIZE = 254\nPORT = 2633\nRAFT = [\n  BROADCAST_TIMEOUT_MS = 500,\n  ELECTION_TIMEOUT_MS = 5000,\n  LIMIT_PURGE = 100000,\n  LOG_PURGE_TIMEOUT = 60,\n  LOG_RETENTION = 250000,\n  XMLRPC_TIMEOUT_MS = 1000\n]\nRAFT_FOLLOWER_HOOK = [\n  ARGUMENTS = \"follower\",\n  COMMAND = \"/scripts/vip.sh\"\n]\nRAFT_LEADER_HOOK = [\n  ARGUMENTS = \"leader\",\n  COMMAND = \"/scripts/vip.sh\"\n]\nSCRIPTS_REMOTE_DIR = \"/var/tmp/one\"\nSESSION_EXPIRATION_TIME = 900\nTM_MAD = [\n  ARGUMENTS = \"-t 15 -d dummy,lvm,shared,fs_lvm,qcow2,ssh,ceph,dev,vcenter,iscsi_libvirt\",\n  EXECUTABLE = \"one_tm\"\n]\nTM_MAD_CONF = [\n  CLONE_TARGET = \"SYSTEM\",\n  DS_MIGRATE = \"YES\",\n  LN_TARGET = \"NONE\",\n  NAME = \"dummy\",\n  SHARED = \"YES\"\n]\nTM_MAD_CONF = [\n  CLONE_TARGET = \"SELF\",\n  LN_TARGET = \"NONE\",\n  NAME = \"lvm\",\n  SHARED = \"YES\"\n]\nTM_MAD_CONF = [\n  CLONE_TARGET = \"SYSTEM\",\n  CLONE_TARGET_SSH = \"SYSTEM\",\n  DISK_TYPE_SSH = \"FILE\",\n  DS_MIGRATE = \"YES\",\n  LN_TARGET = \"NONE\",\n  LN_TARGET_SSH = \"SYSTEM\",\n  NAME = \"shared\",\n  SHARED = \"YES\",\n  TM_MAD_SYSTEM = \"ssh\"\n]\nTM_MAD_CONF = [\n  CLONE_TARGET = \"SYSTEM\",\n  DRIVER = \"raw\",\n  LN_TARGET = \"SYSTEM\",\n  NAME = \"fs_lvm\",\n  SHARED = \"YES\"\n]\nTM_MAD_CONF = [\n  CLONE_TARGET = \"SYSTEM\",\n  CLONE_TARGET_SSH = \"SYSTEM\",\n  DISK_TYPE_SSH = \"FILE\",\n  DRIVER = \"qcow2\",\n  DS_MIGRATE = \"YES\",\n  LN_TARGET = \"NONE\",\n  LN_TARGET_SSH = \"SYSTEM\",\n  NAME = \"qcow2\",\n  SHARED = \"YES\",\n  TM_MAD_SYSTEM = \"ssh\"\n]\nTM_MAD_CONF = [\n  CLONE_TARGET = \"SYSTEM\",\n  DS_MIGRATE = \"YES\",\n  LN_TARGET = \"SYSTEM\",\n  NAME = \"ssh\",\n  SHARED = \"NO\"\n]\nTM_MAD_CONF = [\n  ALLOW_ORPHANS = \"mixed\",\n  CLONE_TARGET = \"SELF\",\n  CLONE_TARGET_SHARED = \"SELF\",\n  CLONE_TARGET_SSH = \"SYSTEM\",\n  DISK_TYPE_SHARED = \"RBD\",\n  DISK_TYPE_SSH = \"FILE\",\n  DRIVER = \"raw\",\n  DS_MIGRATE = \"NO\",\n  LN_TARGET = \"NONE\",\n  LN_TARGET_SHARED = \"NONE\",\n  LN_TARGET_SSH = \"SYSTEM\",\n  NAME = \"ceph\",\n  SHARED = \"YES\",\n  TM_MAD_SYSTEM = \"ssh,shared\"\n]\nTM_MAD_CONF = [\n  CLONE_TARGET = \"SELF\",\n  DS_MIGRATE = \"NO\",\n  LN_TARGET = \"NONE\",\n  NAME = \"iscsi_libvirt\",\n  SHARED = \"YES\"\n]\nTM_MAD_CONF = [\n  CLONE_TARGET = \"NONE\",\n  CLONE_TARGET_SHARED = \"SELF\",\n  CLONE_TARGET_SSH = \"SYSTEM\",\n  DISK_TYPE_SHARED = \"FILE\",\n  DISK_TYPE_SSH = \"FILE\",\n  LN_TARGET = \"NONE\",\n  LN_TARGET_SHARED = \"NONE\",\n  LN_TARGET_SSH = \"SYSTEM\",\n  NAME = \"dev\",\n  SHARED = \"YES\"\n]\nTM_MAD_CONF = [\n  CLONE_TARGET = \"SYSTEM\",\n  LN_TARGET = \"NONE\",\n  NAME = \"vcenter\",\n  SHARED = \"YES\"\n]\nUSER_RESTRICTED_ATTR = \"VM_USE_OPERATIONS\"\nUSER_RESTRICTED_ATTR = \"VM_MANAGE_OPERATIONS\"\nUSER_RESTRICTED_ATTR = \"VM_ADMIN_OPERATIONS\"\nVLAN_IDS = [\n  RESERVED = \"0, 1, 4095\",\n  START = \"2\"\n]\nVM_ADMIN_OPERATIONS = \"migrate, delete, recover, retry, deploy, resched\"\nVM_ENCRYPTED_ATTR = \"CONTEXT/PASSWORD\"\nVM_MAD = [\n  ARGUMENTS = \"-t 15 -r 0 firecracker\",\n  EXECUTABLE = \"one_vmm_exec\",\n  KEEP_SNAPSHOTS = \"no\",\n  NAME = \"firecracker\",\n  SUNSTONE_NAME = \"Firecracker\",\n  TYPE = \"xml\"\n]\nVM_MAD = [\n  ARGUMENTS = \"-t 15 -r 0 kvm\",\n  DEFAULT = \"vmm_exec/vmm_exec_kvm.conf\",\n  EXECUTABLE = \"one_vmm_exec\",\n  IMPORTED_VMS_ACTIONS = \"terminate, terminate-hard, hold, release, suspend, resume, delete, reboot, reboot-hard, resched, unresched, disk-attach, disk-detach, nic-attach, nic-detach, snapshot-create, snapshot-delete\",\n  KEEP_SNAPSHOTS = \"yes\",\n  NAME = \"kvm\",\n  SUNSTONE_NAME = \"KVM\",\n  TYPE = \"kvm\"\n]\nVM_MAD = [\n  ARGUMENTS = \"-t 15 -r 0 lxd\",\n  EXECUTABLE = \"one_vmm_exec\",\n  IMPORTED_VMS_ACTIONS = \"terminate, terminate-hard, reboot, reboot-hard, poweroff, poweroff-hard, suspend, resume, stop, delete,  nic-attach, nic-detach\",\n  KEEP_SNAPSHOTS = \"no\",\n  NAME = \"lxd\",\n  SUNSTONE_NAME = \"LXD\",\n  TYPE = \"xml\"\n]\nVM_MAD = [\n  ARGUMENTS = \"-p -t 15 -r 0 vcenter -s sh\",\n  COLD_NIC_ATTACH = \"yes\",\n  DEFAULT = \"vmm_exec/vmm_exec_vcenter.conf\",\n  DS_LIVE_MIGRATION = \"yes\",\n  EXECUTABLE = \"one_vmm_sh\",\n  IMPORTED_VMS_ACTIONS = \"terminate, terminate-hard, hold, release, suspend, resume, delete, reboot, reboot-hard, resched, unresched, poweroff, poweroff-hard, disk-attach, disk-detach, nic-attach, nic-detach, snapshot-create, snapshot-delete, migrate, live-migrate\",\n  KEEP_SNAPSHOTS = \"yes\",\n  NAME = \"vcenter\",\n  SUNSTONE_NAME = \"VMWare vCenter\",\n  TYPE = \"xml\"\n]\nVM_MANAGE_OPERATIONS = \"undeploy, hold, release, stop, suspend, resume, reboot, poweroff, disk-attach, nic-attach, disk-snapshot, terminate, disk-resize, snapshot, updateconf, rename, resize, update, disk-saveas\"\nVM_RESTRICTED_ATTR = \"CONTEXT/FILES\"\nVM_RESTRICTED_ATTR = \"NIC/MAC\"\nVM_RESTRICTED_ATTR = \"NIC/VLAN_ID\"\nVM_RESTRICTED_ATTR = \"NIC/BRIDGE\"\nVM_RESTRICTED_ATTR = \"NIC/FILTER\"\nVM_RESTRICTED_ATTR = \"NIC/INBOUND_AVG_BW\"\nVM_RESTRICTED_ATTR = \"NIC/INBOUND_PEAK_BW\"\nVM_RESTRICTED_ATTR = \"NIC/INBOUND_PEAK_KB\"\nVM_RESTRICTED_ATTR = \"NIC/OUTBOUND_AVG_BW\"\nVM_RESTRICTED_ATTR = \"NIC/OUTBOUND_PEAK_BW\"\nVM_RESTRICTED_ATTR = \"NIC/OUTBOUND_PEAK_KB\"\nVM_RESTRICTED_ATTR = \"NIC/OPENNEBULA_MANAGED\"\nVM_RESTRICTED_ATTR = \"NIC/VCENTER_INSTANCE_ID\"\nVM_RESTRICTED_ATTR = \"NIC/VCENTER_NET_REF\"\nVM_RESTRICTED_ATTR = \"NIC/VCENTER_PORTGROUP_TYPE\"\nVM_RESTRICTED_ATTR = \"NIC/EXTERNAL\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/MAC\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/VLAN_ID\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/BRIDGE\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/INBOUND_AVG_BW\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/INBOUND_PEAK_BW\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/INBOUND_PEAK_KB\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/OUTBOUND_AVG_BW\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/OUTBOUND_PEAK_BW\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/OUTBOUND_PEAK_KB\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/OPENNEBULA_MANAGED\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/VCENTER_INSTANCE_ID\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/VCENTER_NET_REF\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/VCENTER_PORTGROUP_TYPE\"\nVM_RESTRICTED_ATTR = \"NIC_ALIAS/EXTERNAL\"\nVM_RESTRICTED_ATTR = \"NIC_DEFAULT/MAC\"\nVM_RESTRICTED_ATTR = \"NIC_DEFAULT/VLAN_ID\"\nVM_RESTRICTED_ATTR = \"NIC_DEFAULT/BRIDGE\"\nVM_RESTRICTED_ATTR = \"NIC_DEFAULT/FILTER\"\nVM_RESTRICTED_ATTR = \"NIC_DEFAULT/EXTERNAL\"\nVM_RESTRICTED_ATTR = \"DISK/TOTAL_BYTES_SEC\"\nVM_RESTRICTED_ATTR = \"DISK/TOTAL_BYTES_SEC_MAX_LENGTH\"\nVM_RESTRICTED_ATTR = \"DISK/TOTAL_BYTES_SEC_MAX\"\nVM_RESTRICTED_ATTR = \"DISK/READ_BYTES_SEC\"\nVM_RESTRICTED_ATTR = \"DISK/READ_BYTES_SEC_MAX_LENGTH\"\nVM_RESTRICTED_ATTR = \"DISK/READ_BYTES_SEC_MAX\"\nVM_RESTRICTED_ATTR = \"DISK/WRITE_BYTES_SEC\"\nVM_RESTRICTED_ATTR = \"DISK/WRITE_BYTES_SEC_MAX_LENGTH\"\nVM_RESTRICTED_ATTR = \"DISK/WRITE_BYTES_SEC_MAX\"\nVM_RESTRICTED_ATTR = \"DISK/TOTAL_IOPS_SEC\"\nVM_RESTRICTED_ATTR = \"DISK/TOTAL_IOPS_SEC_MAX_LENGTH\"\nVM_RESTRICTED_ATTR = \"DISK/TOTAL_IOPS_SEC_MAX\"\nVM_RESTRICTED_ATTR = \"DISK/READ_IOPS_SEC\"\nVM_RESTRICTED_ATTR = \"DISK/READ_IOPS_SEC_MAX_LENGTH\"\nVM_RESTRICTED_ATTR = \"DISK/READ_IOPS_SEC_MAX\"\nVM_RESTRICTED_ATTR = \"DISK/WRITE_IOPS_SEC\"\nVM_RESTRICTED_ATTR = \"DISK/WRITE_IOPS_SEC_MAX_LENGTH\"\nVM_RESTRICTED_ATTR = \"DISK/WRITE_IOPS_SEC_MAX\"\nVM_RESTRICTED_ATTR = \"DISK/OPENNEBULA_MANAGED\"\nVM_RESTRICTED_ATTR = \"DISK/VCENTER_DS_REF\"\nVM_RESTRICTED_ATTR = \"DISK/VCENTER_INSTANCE_ID\"\nVM_RESTRICTED_ATTR = \"DISK/ORIGINAL_SIZE\"\nVM_RESTRICTED_ATTR = \"DISK/SIZE_PREV\"\nVM_RESTRICTED_ATTR = \"DEPLOY_ID\"\nVM_RESTRICTED_ATTR = \"CPU_COST\"\nVM_RESTRICTED_ATTR = \"MEMORY_COST\"\nVM_RESTRICTED_ATTR = \"DISK_COST\"\nVM_RESTRICTED_ATTR = \"PCI\"\nVM_RESTRICTED_ATTR = \"EMULATOR\"\nVM_RESTRICTED_ATTR = \"RAW\"\nVM_RESTRICTED_ATTR = \"USER_PRIORITY\"\nVM_RESTRICTED_ATTR = \"USER_INPUTS/CPU\"\nVM_RESTRICTED_ATTR = \"USER_INPUTS/MEMORY\"\nVM_RESTRICTED_ATTR = \"USER_INPUTS/VCPU\"\nVM_RESTRICTED_ATTR = \"VCENTER_VM_FOLDER\"\nVM_RESTRICTED_ATTR = \"VCENTER_ESX_HOST\"\nVM_RESTRICTED_ATTR = \"TOPOLOGY/PIN_POLICY\"\nVM_RESTRICTED_ATTR = \"TOPOLOGY/HUGEPAGE_SIZE\"\nVM_USE_OPERATIONS = \"\"\nVNC_PORTS = [\n  RESERVED = \"32768:65536\",\n  START = 5900\n]\nVNET_ENCRYPTED_ATTR = \"AR/PACKET_TOKEN\"\nVNET_RESTRICTED_ATTR = \"VN_MAD\"\nVNET_RESTRICTED_ATTR = \"PHYDEV\"\nVNET_RESTRICTED_ATTR = \"VLAN_ID\"\nVNET_RESTRICTED_ATTR = \"BRIDGE\"\nVNET_RESTRICTED_ATTR = \"CONF\"\nVNET_RESTRICTED_ATTR = \"BRIDGE_CONF\"\nVNET_RESTRICTED_ATTR = \"OVS_BRIDGE_CONF\"\nVNET_RESTRICTED_ATTR = \"IP_LINK_CONF\"\nVNET_RESTRICTED_ATTR = \"FILTER\"\nVNET_RESTRICTED_ATTR = \"FILTER_IP_SPOOFING\"\nVNET_RESTRICTED_ATTR = \"FILTER_MAC_SPOOFING\"\nVNET_RESTRICTED_ATTR = \"AR/VN_MAD\"\nVNET_RESTRICTED_ATTR = \"AR/PHYDEV\"\nVNET_RESTRICTED_ATTR = \"AR/VLAN_ID\"\nVNET_RESTRICTED_ATTR = \"AR/BRIDGE\"\nVNET_RESTRICTED_ATTR = \"AR/FILTER\"\nVNET_RESTRICTED_ATTR = \"AR/FILTER_IP_SPOOFING\"\nVNET_RESTRICTED_ATTR = \"AR/FILTER_MAC_SPOOFING\"\nVNET_RESTRICTED_ATTR = \"CLUSTER_IDS\"\nVNET_RESTRICTED_ATTR = \"EXTERNAL\"\nVN_MAD_CONF = [\n  BRIDGE_TYPE = \"linux\",\n  NAME = \"dummy\"\n]\nVN_MAD_CONF = [\n  BRIDGE_TYPE = \"linux\",\n  NAME = \"802.1Q\"\n]\nVN_MAD_CONF = [\n  BRIDGE_TYPE = \"linux\",\n  NAME = \"ebtables\"\n]\nVN_MAD_CONF = [\n  BRIDGE_TYPE = \"linux\",\n  NAME = \"fw\"\n]\nVN_MAD_CONF = [\n  BRIDGE_TYPE = \"openvswitch\",\n  NAME = \"ovswitch\"\n]\nVN_MAD_CONF = [\n  BRIDGE_TYPE = \"linux\",\n  NAME = \"vxlan\"\n]\nVN_MAD_CONF = [\n  BRIDGE_TYPE = \"vcenter_port_groups\",\n  NAME = \"vcenter\"\n]\nVN_MAD_CONF = [\n  BRIDGE_TYPE = \"openvswitch\",\n  NAME = \"ovswitch_vxlan\"\n]\nVN_MAD_CONF = [\n  BRIDGE_TYPE = \"linux\",\n  NAME = \"bridge\"\n]\nVXLAN_IDS = [\n  START = \"2\"\n]\n\n",
      "monitord.conf": "\nDB = [\n  CONNECTIONS = 15\n]\nIM_MAD = [\n  ARGUMENTS = \"-r 3 -t 15 -w 90 kvm\",\n  EXECUTABLE = \"one_im_ssh\",\n  NAME = \"kvm\",\n  SUNSTONE_NAME = \"KVM\",\n  THREADS = 0\n]\nIM_MAD = [\n  ARGUMENTS = \"-r 3 -t 15 -w 90 lxd\",\n  EXECUTABLE = \"one_im_ssh\",\n  NAME = \"lxd\",\n  SUNSTONE_NAME = \"LXD\",\n  THREADS = 0\n]\nIM_MAD = [\n  ARGUMENTS = \"-r 3 -t 15 -w 90 firecracker\",\n  EXECUTABLE = \"one_im_ssh\",\n  NAME = \"firecracker\",\n  SUNSTONE_NAME = \"Firecracker\",\n  THREADS = 0\n]\nIM_MAD = [\n  ARGUMENTS = \"-c -t 15 -r 0 vcenter\",\n  EXECUTABLE = \"one_im_sh\",\n  NAME = \"vcenter\",\n  SUNSTONE_NAME = \"VMWare vCenter\"\n]\nLOG = [\n  DEBUG_LEVEL = 3,\n  SYSTEM = \"file\"\n]\nNETWORK = [\n  ADDRESS = \"0.0.0.0\",\n  MONITOR_ADDRESS = \"auto\",\n  PORT = 32156,\n  PRIKEY = \"\",\n  PUBKEY = \"\",\n  THREADS = 8\n]\nPROBES_PERIOD = [\n  BEACON_HOST = 30,\n  MONITOR_HOST = 120,\n  MONITOR_VM = 30,\n  STATE_VM = 5,\n  SYNC_STATE_VM = 180,\n  SYSTEM_HOST = 600\n]\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "opennebula-scripts"
    },
    "data": {
      "init.sh": "#!/bin/bash\nset -o pipefail\n\n# Fatal error\nfatal() {\n    >&2 echo -en \"ERROR:\\t\"\n    >&2 echo \"$1\"\n    exit 1\n}\n\n# Information message\ninfo() {\n    echo -en \"INFO:\\t\"\n    echo \"$1\"\n}\n\ncleanup() {\n  exec 3>&2\n  exec 2> /dev/null\n\n  for PID in $(jobs -p | tac); do\n    kill $PID > /dev/null 2>&1\n\n    local counter=0\n    while ps $PID > /dev/null 2>&1; do\n      let counter=counter+1\n      if [ $counter -gt 10 ]; then\n        kill -9 $PID > /dev/null 2>&11\n        break\n      fi\n      sleep 1\n    done\n  done\n\n  exec 2>&3\n  exec 3>&-     \n}\n\n# Parses option between square brackets (eg. DB = [ DB_BACKEND = \"mysql\" ] )\nparse_opt() {\n  sed 's/\\(.*\\)#.*/\\1/g' | sed -n 's/.*'\"$1\"' *= *\"\\?\\([^ ,\"]\\+\\)\"\\?.*/\\1/p'\n}\n\n# Sets DB_BACKEND, DB_SERVER, DB_PORT, DB_USER, DB_PASSWD, DB_NAME environment variables\nload_db_config() {\n  if [ ! -f /config/oned.conf ]; then\n    fatal \"/config/oned.conf does not exists\"\n  fi\n  local DB_CONFIG=$(awk '/^[^#]*DB *= *\\[/,/]/' /config/oned.conf)\n  DB_BACKEND=${DB_BACKEND:-$(echo \"$DB_CONFIG\" | parse_opt BACKEND)}\n  DB_SERVER=${DB_SERVER:-$(echo \"$DB_CONFIG\" | parse_opt SERVER)}\n  DB_PORT=${DB_PORT:-$(echo \"$DB_CONFIG\" | parse_opt PORT)}\n  DB_USER=${DB_USER:-$(echo \"$DB_CONFIG\" | parse_opt USER)}\n  DB_PASSWD=${DB_PASSWD:-$(echo \"$DB_CONFIG\" | parse_opt PASSWD)}\n  DB_NAME=${DB_NAME:-$(echo \"$DB_CONFIG\" | parse_opt NAME)}\n  DB_CONNECTIONS=${DB_CONNECTIONS:-$(echo \"$DB_CONNECTIONS\" | parse_opt CONNECTIONS)}\n  if [ \"$DB_PORT\" = \"0\" ]; then\n    DB_PORT=\"3306\"\n  fi\n  case \"$DB_BACKEND\" in\n    sqlite)\n      return\n      ;;\n    mysql)\n      # load defaults\n      DB_SERVER=${DB_SERVER:-127.0.0.1}\n      DB_PORT=${DB_PORT:-3306}\n      DB_USER=${DB_USER:-oneadmin}\n      DB_PASSWD=${DB_PASSWD:-oneadmin}\n      DB_CONNECTIONS=${DB_CONNECTIONS:-50}\n      ;;\n    '')\n      fatal \"can not get database backend form config\"\n      ;;\n    *)\n      fatal \"only mysql and sqlite backends are supported\"\n      ;;\n  esac\n}\n\n# Sets FEDERATION_MODE, FEDERATION_ZONE_ID, FEDERATION_SERVER_ID, FEDERATION_MASTER_ONED environment variables\nload_federation_config(){\n  if [ ! -f /config/oned.conf ]; then\n    fatal \"/config/oned.conf does not exists\"\n  fi\n  local FEDERATION_CONFIG=$(awk '/^[^#]*FEDERATION *= *\\[/,/]/' /config/oned.conf)\n\n  FEDERATION_MODE=${FEDERATION_MODE:-$(echo \"$FEDERATION_CONFIG\" | parse_opt MODE)}\n  FEDERATION_ZONE_ID=${FEDERATION_ZONE_ID:-$(echo \"$FEDERATION_CONFIG\" | parse_opt ZONE_ID)}\n  FEDERATION_SERVER_ID=${FEDERATION_SERVER_ID:-$(echo \"$FEDERATION_CONFIG\" | parse_opt SERVER_ID)}\n  FEDERATION_MASTER_ONED=${FEDERATION_MASTER_ONED:-$(echo \"$FEDERATION_CONFIG\" | parse_opt MASTER_ONED)}\n\n  if ! [[ \"$FEDERATION_ZONE_ID\" =~ ^[0-9]+$ ]]; then\n    fatal \"can not get ZONE_ID from config\"\n  fi\n\n  if [ \"$FEDERATION_MODE\" != \"STANDALONE\" ]; then\n    fatal \"MODE is not set to STANDALONE\"\n  elif [ \"$FEDERATION_SERVER_ID\" != \"-1\" ]; then\n    fatal \"SERVER_ID is not set to -1\"\n  fi\n}\n\n# Sets LOCAL_VERSION, NEW_VERSION environment variables\nload_version_info() {\n  case \"$DB_BACKEND\" in\n    sqlite)\n      if [ -f /var/lib/one/one.db ]; then\n        LOCAL_VERSION=$(onedb version -s /var/lib/one/one.db | awk '$1 == \"Local:\" {print $2}')\n        if [ $? -ne 0 ]; then\n          fatal \"can not connect to sqlite database\"\n        fi\n      fi\n      ;;\n    mysql)\n      MYSQL_OPTS=$(mktemp)\n      echo -e \"[client]\\npassword=$DB_PASSWD\" > \"$MYSQL_OPTS\"\n\n      RETRY=1\n      until DB_TABLES=\"$(mysql --defaults-file=\"$MYSQL_OPTS\" -u \"$DB_USER\" -h \"$DB_SERVER\" -P \"$DB_PORT\" \"$DB_NAME\" -N -B -e \"SHOW TABLES like 'local_db_versioning'\" 2>/dev/null)\"; do\n        info \"can not connect to mysql database mysql://$DB_USER@$DB_SERVER:$DB_PORT/$DB_NAME (try $((RETRY++)))\"\n        sleep 10\n      done\n      unset RETRY\n\n      LOCAL_VERSION=$(mysql --defaults-file=\"$MYSQL_OPTS\" -u \"$DB_USER\" -h \"$DB_SERVER\" -P \"$DB_PORT\" \"$DB_NAME\" -N -B -e 'SELECT version FROM local_db_versioning WHERE oid=(SELECT MAX(oid) FROM local_db_versioning)' 2>/dev/null)\n      if [ $? -ne 0 ] && [ \"$DB_TABLES\" = \"local_db_versioning\" ]; then\n        fatal \"local_db_versioning exists but have no versions\"\n      fi\n      rm -f \"$MYSQL_OPTS\"\n      ;;\n    '')\n      fatal \"Database information is not loaded\"\n      ;;\n    *)\n      fatal \"Only sqlite and mysql backend support gathering version info\"\n      ;;\n  esac\n  NEW_VERSION=$(ls -1 /usr/lib/one/ruby/onedb/local  | sed -n 's/^.*_to_\\(.*\\)\\.rb$/\\1/p' | sort -V | tail -n1)\n  if [ -z \"$NEW_VERSION\" ]; then\n    fatal \"can not find new version number\"\n  fi\n}\n\n# Performing OpenNebula database upgrade\nperform_upgrade() {\n  if [ -z \"$DB_BACKEND\" ]; then\n    fatal \"Database information is not loaded\"\n  fi\n  if [ -z \"$NEW_VERSION\" ]; then\n    fatal \"Version information is not loaded\"\n  fi\n\n  if [ -z \"$LOCAL_VERSION\" ]; then\n    fatal \"Failed to get local version for database\"\n  elif [ \"$LOCAL_VERSION\" = \"$NEW_VERSION\" ]; then\n    info \"Database schema is up to date\"\n    return 0\n  fi\n\n  NEWER_VERSION=$(echo -e \"$LOCAL_VERSION\\n$NEW_VERSION\" | sort -V | tail -n1)\n\n  if [ \"$NEWER_VERSION\" = \"$LOCAL_VERSION\" ]; then\n    fatal \"Database version $LOCAL_VERSION is higher than $NEW_VERSION.\"\n  elif [ \"$NEWER_VERSION\" = \"$NEW_VERSION\" ]; then\n    info \"Database version $LOCAL_VERSION is lower than $NEW_VERSION. Performing upgrade...\"\n\n    case \"$DB_BACKEND\" in\n      sqlite)\n        onedb upgrade -s /var/lib/one/one.db\n        if [ $? -ne 0 ]; then\n          fatal \"failed upgrade database\"\n        fi\n        return 0\n        ;;\n      mysql)\n        onedb upgrade -p \"$DB_PASSWD\" -u \"$DB_USER\" -S \"$DB_SERVER\" -P \"$DB_PORT\" -d \"$DB_NAME\"\n        if [ $? -ne 0 ]; then\n          fatal \"failed upgrade database\"\n        fi\n        return 0\n        ;;\n      '')\n        fatal \"Database information is not loaded\"\n        ;;\n      *)\n        fatal \"Only sqlite and mysql backend support upgrade\"\n        ;;\n    esac\n    if [ $? -ne 0 ]; then\n      fatal \"database schema migration was failed\"\n    fi\n  fi\n}\n\n# Sets MY_ID\nload_my_id(){\n  MY_ID=$(echo \"$HOSTNAME\" | awk -F- '{print $NF}')\n  if ! [[ \"$MY_ID\" =~ ^[0-9]+$ ]]; then\n    fatal \"hostname does not contain instance_id suffix\"\n  fi\n}\n\n# Removes existing database\ndrop_db(){\n  case \"$DB_BACKEND\" in\n    sqlite)\n      rm -f \"$(readlink -f /var/lib/one/one.db)\"\n      ;;\n    mysql)\n      MYSQL_OPTS=$(mktemp)\n      echo -e \"[client]\\npassword=$DB_PASSWD\" > \"$MYSQL_OPTS\"\n      mysql --defaults-file=\"$MYSQL_OPTS\" -u \"$DB_USER\" -h \"$DB_SERVER\" -P \"$DB_PORT\" -e \"DROP DATABASE $DB_NAME;\"\n      mysql --defaults-file=\"$MYSQL_OPTS\" -u \"$DB_USER\" -h \"$DB_SERVER\" -P \"$DB_PORT\" -e \"CREATE DATABASE $DB_NAME;\"\n      rm -f \"$MYSQL_OPTS\"\n      ;;\n    '')\n      fatal \"Database information is not loaded\"\n      ;;\n    *)\n      fatal \"Only sqlite and mysql backend support cleanup\"\n      ;;\n  esac\n}\n\n# Creates new cluster\nbootstrap_cluster(){\n   rm -f \\\n     /var/lib/one/.one/ec2_auth \\\n     /var/lib/one/.one/occi_auth \\\n     /var/lib/one/.one/oneflow_auth \\\n     /var/lib/one/.one/onegate_auth \\\n     /var/lib/one/.one/sunstone_auth\n\n   setup_logging\n   info \"starting oned\"\n   oned -f &\n   ONED_PID=\"$!\"\n\n   sleep 5\n   until onezone list >/dev/null 2>&1; do\n     if ! kill -0 \"$ONED_PID\" >/dev/null 2>&1; then\n       drop_db\n       fatal \"oned process is dead\"\n     fi\n     info \"oned is not ready. waiting 5 sec\"\n     sleep 5\n   done\n\n   info \"adding $HOSTNAME to zone $FEDERATION_ZONE_ID\"\n   MY_XMLRPC=\"http://$(hostname -f | cut -d. -f-2):${ONE_PORT}/RPC2\"\n   onezone server-add \"$FEDERATION_ZONE_ID\" --name \"$HOSTNAME\" --rpc \"$MY_XMLRPC\"\n   if [ $? -ne 0 ]; then\n     drop_db\n     fatal \"error adding $HOSTNAME to zone $FEDERATION_ZONE_ID\"\n   fi\n\n   info \"setting serveradmin password\"\n   SERVERADMIN_PASSWORD_FILE=$(mktemp)\n   cat /secrets/sunstone_auth | cut -d: -f2 > \"$SERVERADMIN_PASSWORD_FILE\"\n   oneuser passwd 1 --sha256 -r \"$SERVERADMIN_PASSWORD_FILE\"\n   if [ $? -ne 0 ]; then\n     fatal \"error setting serveradmin password\"\n   fi\n   rm -f \"$SERVERADMIN_PASSWORD_FILE\"\n\n   info 'stopping oned'\n   cleanup\n   info 'oned stopped'\n\n   info \"bootstrap procedure finished\"\n}\n\n# Joining node to the existing cluster\nbootstrap_node(){\n  info \"checking connection\"\n  ONE_XMLRPC=\"$LEADER_XMLRPC\" onezone show \"$FEDERATION_ZONE_ID\" >/dev/null\n  if [ $? -ne 0 ]; then\n    fatal \"can not get zone $FEDERATION_ZONE_ID from $LEADER_XMLRPC\"\n  fi\n\n  wait_previous_host\n  wait_leader\n\n  info \"downloading data from mysql://$DB_USER@$LEADER_IP:$DB_PORT/$DB_NAME\"\n  MYSQL_OPTS=$(mktemp)\n  echo -e \"[client]\\npassword=$DB_PASSWD\" > \"$MYSQL_OPTS\"\n  mysqldump --defaults-file=\"$MYSQL_OPTS\" --single-transaction=TRUE -u \"$DB_USER\" -h \"$LEADER_IP\" -P \"$DB_PORT\" \"$DB_NAME\" | \\\n    mysql --defaults-file=\"$MYSQL_OPTS\" -u \"$DB_USER\" -h \"$DB_SERVER\" -P \"$DB_PORT\" \"$DB_NAME\"\n  if [ $? -ne 0 ]; then\n    fatal \"can not bootstrap database\"\n  else\n    info \"database succesfully bootstraped\"\n  fi\n  rm -f \"$MYSQL_OPTS\"\n\n  MY_SERVER_ID=\"$(ONE_XMLRPC=\"$LEADER_XMLRPC\" onezone show \"$FEDERATION_ZONE_ID\" -x | /var/lib/one/remotes/datastore/xpath.rb \"/ZONE/SERVER_POOL/SERVER[NAME=\\\"$HOSTNAME\\\"]/ID)\" | tr -d '\\0')\"\n  if [ -n \"$MY_SERVER_ID\" ]; then\n    info \"$HOSTNAME already member of zone $FEDERATION_ZONE_ID, reseting\"\n    ONE_XMLRPC=\"$LEADER_XMLRPC\" onezone server-reset \"$FEDERATION_ZONE_ID\" \"$MY_SERVER_ID\"\n  else\n    info \"adding $HOSTNAME to zone $FEDERATION_ZONE_ID via $LEADER_XMLRPC\"\n    MY_XMLRPC=\"http://$(hostname -f | cut -d. -f-2):${ONE_PORT}/RPC2\"\n    ONE_XMLRPC=\"$LEADER_XMLRPC\" onezone server-add \"$FEDERATION_ZONE_ID\" --name \"$HOSTNAME\" --rpc \"$MY_XMLRPC\"\n    if [ $? -ne 0 ]; then\n      drop_db\n      fatal \"can not add server to zone $FEDERATION_ZONE_ID via $LEADER_XMLRPC\"\n    fi\n    # Sometimes zone have missing server after deploy, we need force syncronize server list to avoid this situations\n    info \"fetching server list for zone $FEDERATION_ZONE_ID from mysql://$DB_USER@$LEADER_IP:$DB_PORT/$DB_NAME\"\n    MYSQL_OPTS=$(mktemp)\n    echo -e \"[client]\\npassword=$DB_PASSWD\" > \"$MYSQL_OPTS\"\n    mysqldump --defaults-file=\"$MYSQL_OPTS\" --single-transaction=TRUE -u\"$DB_USER\" -h \"$LEADER_IP\" -P \"$DB_PORT\" \"$DB_NAME\" zone_pool --where=\"oid = $FEDERATION_ZONE_ID\" --replace | \\\n      mysql --defaults-file=\"$MYSQL_OPTS\" -u \"$DB_USER\" -h \"$DB_SERVER\" -P \"$DB_PORT\" \"$DB_NAME\"\n    if [ $? -ne 0 ]; then\n      drop_db\n      fatal \"can not syncronize server list for zone $FEDERATION_ZONE_ID from mysql://$DB_USER@$LEADER_IP:$DB_PORT/$DB_NAME\"\n    fi\n  fi\n}\n\n# Waits for leader, sets LEADER_IP and LEADER_XMLRPC\nwait_leader() {\n  local MAX_RETRIES=\"$1\"\n  local RETRY=0\n\n  LEADER_IP=\n  LEADER_SVC=${LEADER_SVC:-$(hostname -d | awk -F. '{print $1}' | sed 's/-servers$/-headless/')}\n  info \"resolving $LEADER_SVC\"\n\n  until [ -n \"$LEADER_IP\" ]; do\n    LEADER_OUT=$(getent hosts \"$LEADER_SVC\")\n    LEADER_IP=$(echo \"$LEADER_OUT\" | awk 'NR=1 {print $1}')\n    LEADER_DOMAIN=$(echo \"$LEADER_OUT\" | awk 'NR=1 {print $2}' | awk -F. '{print $3}')\n    LEADER_COUNT=$(echo \"$LEADER_IP\" | wc -l)\n\n    LEADER_XMLRPC=\"http://${LEADER_IP}:${ONE_PORT}/RPC2\"\n\n    if [ -z \"$LEADER_IP\" ]; then\n      info \"current leader not found. waiting 10 sec (try ${RETRY:-0}${MAX_RETRIES:+/$MAX_RETRIES})\"\n      if [ \"$RETRY\" = \"$MAX_RETRIES\" ]; then\n        info \"leader not found.\"\n        return 1\n      fi\n      RETRY=$((RETRY+1))\n      sleep 10\n    elif [ \"$LEADER_COUNT\" != \"1\" ]; then\n      fatal \"multiple leaders found: $(echo $LEADER_IP | tr '\\n' ' ')\"\n    elif [ \"$LEADER_DOMAIN\" != \"svc\" ]; then\n      fatal \"$LEADER_SVC is not a kubernetes service\"\n    fi\n  done\n \n  info \"leader found. ($LEADER_IP)\"\n}\n\nwait_previous_host(){\n  local RETRY=0\n  if [ \"$FEDERATION_SERVER_ID\" != \"0\" ]; then\n    PREVIOUS_HOSTNAME=\"${HOSTNAME%-*}-$((FEDERATION_SERVER_ID-1))\"\n    until [[ \"$(ONE_XMLRPC=\"$LEADER_XMLRPC\" onezone show \"$FEDERATION_ZONE_ID\" -x | /var/lib/one/remotes/datastore/xpath.rb \"/ZONE/SERVER_POOL/SERVER[NAME=\\\"$PREVIOUS_HOSTNAME\\\"]/STATE)\" | tr -d '\\0')\" =~ ^(0|2|3)$ ]]; do\n      info \"waiting until $PREVIOUS_HOSTNAME be deployed (try $((RETRY++)))\"\n      sleep 10\n    done\n  fi\n}\n\n# Bootstraps new host\nperform_bootstrap() {\n  if [ -z \"$DB_BACKEND\" ]; then\n    fatal \"Database information is not loaded\"\n  fi\n  if [ -z \"$FEDERATION_ZONE_ID\" ]; then\n    fatal \"Federation information is not loaded\"\n  fi\n\n  # remove DB = [], take PORT\n  ONE_PORT=$(awk -v RS='\\n[^#\\n]*DB = \\\\[[^]]*]' -v ORS= '1;NR==1{print}' /config/oned.conf | sed -n 's/^[^#]*PORT *= \\([0-9]\\+\\).*/\\1/p')\n  if ! [[ \"$ONE_PORT\" =~ ^[0-9]+$ ]]; then\n    fatal \"can not read OpenNebula XML-RPC port from config\"\n  fi\n\n  info \"starting bootstrap procedure\"\n  if [ \"$FEDERATION_SERVER_ID\" -ne \"0\" ] && [ \"$DB_BACKEND\" != 'mysql' ]; then\n    fatal \"Only mysql backend support joining multiple instances\"\n  fi\n\n  # If CREATE_CLUSTER=1 set, allow to initialize database from first pod, otherwise always wait for leader\n  if [ \"${CREATE_CLUSTER:-0}\" = \"1\" ] && [ \"$FEDERATION_SERVER_ID\" -eq \"0\" ]; then\n    wait_leader 3\n    info \"creating new cluster\"\n    bootstrap_cluster\n    return $?\n  else\n    wait_leader\n    bootstrap_node\n  fi\n\n  rm -f \"$MYSQL_OPTS\"\n  info \"bootstrap procedure finished\"\n}\n\n# Injects database config into streamed oned.conf file\ninject_db_config() {\n  if [ -z \"$DB_BACKEND\" ]; then\n    fatal \"Database information is not loaded\"\n  fi\n\n  awk -v RS='\\n[^#\\n]*DB = \\\\[[^]]*]' \\\n    -v ORS= '1;NR==1{printf \"\\nDB = [ BACKEND = \\\"'\"${DB_BACKEND}\\\\\\\"${DB_SERVER:+,\\n       SERVER  = \\\\\\\"${DB_SERVER}\\\\\\\"}${DB_PORT:+,\\n       PORT    = ${DB_PORT}}${DB_USER:+,\\n       USER    = \\\\\\\"${DB_USER}\\\\\\\"}${DB_PASSWD:+,\\n       PASSWD  = \\\\\\\"${DB_PASSWD}\\\\\\\"}${DB_NAME:+,\\n       DB_NAME = \\\\\\\"${DB_NAME}\\\\\\\"}${DB_CONNECTIONS:+,\\n       CONNECTIONS = ${DB_CONNECTIONS}}${DB_ENCODING:+,\\n       ENCODING = \\\\\\\"${DB_ENCODING}\\\\\\\"}\"'\\n]\"}'\n}\n\n# Injects federation config into streamed oned.conf file\ninject_federation_config() {\n  if [ -z \"$FEDERATION_ZONE_ID\" ]; then\n    fatal \"Federation information is not loaded\"\n  fi\n\n  awk -v RS='\\n[^#\\n]*FEDERATION = \\\\[[^]]*]' \\\n    -v ORS= '1;NR==1{printf \"\\nFEDERATION = [\\n    MODE          = \\\"'\"$FEDERATION_MODE\"'\\\",\\n    ZONE_ID       = '\"$FEDERATION_ZONE_ID\"',\\n    SERVER_ID     = '\"$FEDERATION_SERVER_ID\"',\\n    MASTER_ONED   = \\\"'\"$FEDERATION_MASTER_ONED\"'\\\"\\n]\"}'\n}\n\n# Setups keys for opennebula\nsetup_keys(){\n  info \"setup keys\"\n  mkdir -p \"/var/lib/one/.one\"\n  rm -rf /var/lib/one/.one/*\n  for FILE in \\\n    ec2_auth \\\n    occi_auth \\\n    one_auth \\\n    one_key \\\n    oneflow_auth \\\n    onegate_auth \\\n    sunstone_auth\n  do\n    if [ ! -f \"/secrets/${FILE}\" ]; then\n      fatal \"/secrets/${FILE} does not exists\"\n    fi\n    cat \"/secrets/${FILE}\" > \"/var/lib/one/.one/${FILE}\"\n    if [ $? -ne 0 ]; then\n      fatal \"error copying /secrets/${FILE} to /var/lib/one/.one/${FILE}\"\n    fi\n  done\n}\n\n# Setups oned.conf and runs injectiors from the argumets\nsetup_config(){\n  info \"setup oned.conf ${*:+[$*]}\"\n  for i in \"$@\"; do\n    local INJECT_FUNCTIONS+=\" | inject_${i}_config\"\n  done\n  eval \"cat /config/oned.conf $INJECT_FUNCTIONS\" > /etc/one/oned.conf\n  if [ $? -ne 0 ]; then\n    fatal \"error copying /config/oned.conf to /etc/one/oned.conf\"\n  fi\n}\n\n# Sets up logging to stdout\nsetup_logging(){\n  for i in oned.log sched.log onehem.log sunstone.log novnc.log onegate.log oneflow.log; do ln -sf \"/proc/1/fd/1\" \"/var/log/one/$i\"; done\n}\n\n# Prints usage and exit\nusage() {\n  cat <<EOT\n\nUSAGE:\n  $0 <action>\n\nACTIONS:\n  config [db] [federation]     Setup oned.conf and keys\n  bootstrap                    Perform the bootstrap procedure\n  upgrade                      Perform the upgrade procedure\n  start                        Setup oned.conf and keys, perform bootstrap (or upgrade) and then start oned\n  debug                        Setup oned.conf and keys, then do nothing\n\nOPTIONS:\n  --create-cluster             Allow to bootstrap new cluster\n  --leader <server_id>         Specified federation server_id will force to run in solo mode\n\nEOT\n  exit 1\n}\n\n# Loads vars and defaults\ninit() {\n  trap cleanup EXIT\n  info \"initializing\"\n  setup_logging\n  load_db_config\n  load_federation_config\n  load_version_info\n\n  # Setup sqlite path\n  if [ \"$DB_BACKEND\" = \"sqlite\" ]; then\n    ln -sf /data/one.db /var/lib/one/one.db\n  fi\n\n  setup_keys\n\n  if [ -n \"$LEADER_SERVER_ID\" ] && [ \"$LEADER_SERVER_ID\" -lt 0 ] 2>/dev/null; then\n    fatal \"federation server_id must be a number\"\n  fi\n\n  # Override SERVER_ID by MY_ID\n  load_my_id\n  if [ \"${LEADER_SERVER_ID}\" = \"$MY_ID\" ]; then\n    info \"Solo mode requested\"\n    FEDERATION_SERVER_ID=\"-1\"\n  else\n    FEDERATION_SERVER_ID=\"$MY_ID\"\n  fi\n\n}\n\nload_keys() {\n  while [ $# -gt 0 ]; do\n    case $1 in\n    --create-cluster)\n      CREATE_CLUSTER=\"1\"\n      shift\n      ;;\n    --leader)\n      if [ -n \"$2\" ] && [ \"$2\" -ge 0 ] 2>/dev/null; then\n        LEADER_SERVER_ID=\"$2\"\n      else\n        fatal \"Specify exactly one federation server_id to run in solo mode\"\n      fi\n      shift\n      shift\n      ;;\n    --*)\n      usage\n      ;;\n    *)\n      if [ -n \"$ACTION\" ]; then\n        if [ \"$ACTION\" = \"config\" ]; then\n          EXTRA_ARGS+=\" $1\"\n          shift\n          continue\n        else\n          usage\n        fi\n      fi\n      ACTION=\"$1\"\n      shift\n      ;;\n    esac\n  done\n  if [ -z \"$ACTION\" ]; then\n    usage\n  fi\n}\n\nmain() {\n  load_keys \"$@\"\n  case $ACTION in\n    config)\n      init\n      setup_config $EXTRA_ARGS\n      exit $?\n      ;;\n    upgrade)\n      init\n      setup_config db federation\n      perform_upgrade\n      ;;\n    bootstrap)\n      init\n      setup_config db\n      perform_bootstrap\n      setup_config db federation\n      ;;\n    start)\n      init\n      if [ -n \"$LOCAL_VERSION\" ]; then\n        setup_config db federation\n        perform_upgrade\n      else\n        setup_config db\n        perform_bootstrap\n        setup_keys\n        setup_config db federation\n      fi\n      info \"starting opennebula\"\n      oned -f\n      ;;\n    debug)\n      init\n      setup_config db federation\n      info \"doing nothing (debug mode requested)\"\n      sleep infinity\n      ;;\n    *)\n      fatal \"wrong action $ACTION\"\n      ;;\n  esac\n}\n\nmain \"$@\"\n\n",
      "vip.sh": "#!/bin/bash\nset -e -o pipefail\nCA_CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\nTOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\nNAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)\nAPI_URL=\"https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT\"\nROLE_LABEL=${ROLE_LABEL:-role}\nROLE_LABEL_LEADER=${ROLE_LABEL_LEADER:-leader}\nROLE_LABEL_FOLLOWER=${ROLE_LABEL_FOLLOWER:-follower}\n\npcurl() {\n  curl -f -k -sS --cacert \"$CA_CERT\" -H \"Authorization: Bearer $TOKEN\" -H \"Accept: application/json\" \"$@\"\n}\nparse_names() {\n  ruby -rjson -e \"JSON.parse(STDIN.read)['items'].each {|item| puts item['metadata']['name']}\"\n}\nlabel_pod() {\n    echo \"Setting pod/$1 ${2%%=*}=${2##*=}\"\n    pcurl -XPATCH -o /dev/null --data \"[{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/metadata/labels/${2%%=*}\\\", \\\"value\\\": \\\"${2##*=}\\\"}]\" -H \"Content-Type:application/json-patch+json\" \"$API_URL/api/v1/namespaces/$NAMESPACE/pods/$1\"\n}\n\ncase $1 in\n  leader)\n    # start hem\n    [ \"$HEM_INTEGRATED\" != 1 ] || onehem-server start || true\n    # set leader\n    label_pod \"$HOSTNAME\" \"$ROLE_LABEL=$ROLE_LABEL_LEADER\"\n    # remove old leaders\n    OLD_LEADERS=\"$(pcurl $CURL_PARAMS -XGET \"${API_URL}/api/v1/namespaces/${NAMESPACE}/pods?labelSelector=${ROLE_LABEL}%3D${ROLE_LABEL_LEADER}\" | parse_names)\"\n    for POD in $OLD_LEADERS; do\n      if [ \"$POD\" != \"$HOSTNAME\" ]; then\n        label_pod \"$POD\" \"$ROLE_LABEL=$ROLE_LABEL_FOLLOWER\"\n      fi\n    done\n    ;;\n  follower)\n    # stop hem\n    [ \"$HEM_INTEGRATED\" != 1 ] || onehem-server stop || true\n    # set follower\n    label_pod \"$HOSTNAME\" \"$ROLE_LABEL=$ROLE_LABEL_FOLLOWER\"\n    ;;\n  *)\n    echo \"Usage: $0 <leader|follower>\"\n    exit 1\n    ;;\nesac\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "opennebula-sched",
      "labels": {
        "app": "opennebula-sched"
      }
    },
    "data": {
      "sched.conf": "\nDEFAULT_DS_SCHED = [\n  POLICY = 1\n]\nDEFAULT_NIC_SCHED = [\n  POLICY = 1\n]\nDEFAULT_SCHED = [\n  POLICY = 1\n]\nDIFFERENT_VNETS = YES\nLIVE_RESCHEDS = 0\nLOG = [\n  DEBUG_LEVEL = 3,\n  SYSTEM = \"std\"\n]\nMAX_DISPATCH = 30\nMAX_HOST = 1\nMAX_VM = 5000\nMEMORY_SYSTEM_DS_SCALE = 0\nMESSAGE_SIZE = \"1073741824\"\nONE_XMLRPC = \"http://opennebula-oned:2633/RPC2\"\nSCHED_INTERVAL = 30\nTIMEOUT = 60\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "opennebula-sunstone",
      "labels": {
        "app": "opennebula-sunstone"
      }
    },
    "data": {
      "sunstone-server.conf": ":auth: opennebula\n:core_auth: cipher\n:debug_level: 3\n:env: prod\n:get_extended_vm_info: false\n:host: 0.0.0.0\n:keep_me_logged: true\n:lang: en_US\n:leases:\n  suspense:\n    color: '#000000'\n    time: \"+1209600\"\n    warning:\n      color: '#085aef'\n      time: \"-86400\"\n  terminate:\n    color: '#e1ef08'\n    time: \"+1209600\"\n    warning:\n      color: '#ef2808'\n      time: \"-86400\"\n:marketplace_url: http://marketplace.opennebula.io/\n:memcache_host: opennebula-memcached\n:memcache_namespace: opennebula.sunstone\n:memcache_port: 11211\n:mode: mixed\n:one_xmlrpc: http://opennebula-oned:2633/RPC2\n:one_xmlrpc_timeout: 60\n:oneflow_server: http://opennebula-flow:2474/\n:paginate: '[[6, 12, 36, 72], [6, 12, 36, 72]]'\n:port: 9869\n:remote_version: http://downloads.opennebula.org/latest\n:routes:\n- oneflow\n- support\n:sessions: memcache\n:table_order: desc\n:threshold_high: 66\n:threshold_low: 33\n:threshold_min: 0\n:tmpdir: /var/tmp\n:two_factor_auth_issuer: opennebula\n:vnc_client_port: 443/websockify\n:vnc_proxy_cert: null\n:vnc_proxy_ipv6: false\n:vnc_proxy_key: null\n:vnc_proxy_port: 29876\n:vnc_proxy_support_wss: only\n:vnc_request_password: false\n:webauthn_origin: http://localhost:9869\n:webauthn_rpname: OpenNebula Cloud\n:webauthn_timeout: 60000\n"
    }
  },
  {
    "kind": "Role",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "opennebula-oned"
    },
    "rules": [
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "pods"
        ],
        "verbs": [
          "patch",
          "list"
        ]
      }
    ]
  },
  {
    "kind": "RoleBinding",
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "metadata": {
      "name": "opennebula-oned"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "opennebula-oned",
        "namespace": "default"
      }
    ],
    "roleRef": {
      "kind": "Role",
      "name": "opennebula-oned",
      "apiGroup": "rbac.authorization.k8s.io"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "opennebula-exporter",
      "labels": {
        "app": "opennebula-exporter"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 9100
        }
      ],
      "selector": {
        "app": "opennebula-exporter"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "opennebula-flow",
      "labels": {
        "app": "opennebula-flow"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 2474
        }
      ],
      "selector": {
        "app": "opennebula-flow"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "opennebula-gate",
      "labels": {
        "app": "opennebula-gate"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 5030
        }
      ],
      "selector": {
        "app": "opennebula-gate"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "opennebula-memcached",
      "labels": {
        "app": "opennebula-memcached"
      }
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "memcached",
          "port": 11211
        }
      ],
      "selector": {
        "app": "opennebula-memcached"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "opennebula-novnc",
      "labels": {
        "app": "opennebula-novnc"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "websocket",
          "port": 29876
        }
      ],
      "selector": {
        "app": "opennebula-novnc"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "opennebula-oned-servers",
      "labels": {
        "app": "opennebula-oned"
      }
    },
    "spec": {
      "publishNotReadyAddresses": true,
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 2633
        },
        {
          "name": "hm-subscriber",
          "port": 2101
        },
        {
          "name": "hm-replier",
          "port": 2102
        }
      ],
      "selector": {
        "app": "opennebula-oned"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "opennebula-oned-headless",
      "labels": {
        "app": "opennebula-oned"
      }
    },
    "spec": {
      "clusterIP": "None",
      "ports": [
        {
          "name": "http",
          "port": 2633
        },
        {
          "name": "hm-subscriber",
          "port": 2101
        },
        {
          "name": "hm-replier",
          "port": 2102
        }
      ],
      "selector": {
        "app": "opennebula-oned",
        "role": "leader"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "opennebula-oned",
      "labels": {
        "app": "opennebula-oned"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 2633
        },
        {
          "name": "hm-subscriber",
          "port": 2101
        },
        {
          "name": "hm-replier",
          "port": 2102
        }
      ],
      "selector": {
        "app": "opennebula-oned",
        "role": "leader"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "opennebula-oned-monitord",
      "labels": {
        "app": "opennebula-oned"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "monitord",
          "port": 32156,
          "nodePort": 32156
        }
      ],
      "selector": {
        "app": "opennebula-oned"
      },
      "type": "NodePort"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "opennebula-sunstone",
      "labels": {
        "app": "opennebula-sunstone"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "http",
          "port": 9869
        }
      ],
      "selector": {
        "app": "opennebula-sunstone"
      },
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "DaemonSet",
    "metadata": {
      "labels": {
        "app": "opennebula-configurator"
      },
      "name": "opennebula-configurator",
      "namespace": "m0ryZkqC"
    },
    "spec": {
      "selector": {
        "matchLabels": {
          "app": "opennebula-configurator",
          "role": "host"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opennebula-configurator",
            "role": "host"
          },
          "annotations": {
            "checksum/scripts": "ec624386081cf8a2bc827774636cd3d1429fc4ca8b7045f54375a93722f9c131"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "configurator",
              "image": "alpine:3.12",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/sh",
                "/scripts/configurator.host"
              ],
              "env": [
                {
                  "name": "ONE_XMLRPC",
                  "value": "http://opennebula-oned:2633/RPC2"
                },
                {
                  "name": "SSH_KEY",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "id_rsa",
                      "name": "opennebula-ssh-keys"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "scripts",
                  "mountPath": "/scripts"
                },
                {
                  "name": "one-keys",
                  "mountPath": "/var/lib/one/.one/one_auth",
                  "subPath": "one_auth"
                }
              ],
              "securityContext": {
                "privileged": true,
                "runAsUser": 10421,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              }
            }
          ],
          "imagePullSecrets": [
            {
              "name": "regsecret"
            }
          ],
          "hostIPC": true,
          "hostNetwork": true,
          "hostPID": true,
          "dnsPolicy": "ClusterFirstWithHostNet",
          "volumes": [
            {
              "name": "scripts",
              "configMap": {
                "name": "opennebula-configurator",
                "defaultMode": 511
              }
            },
            {
              "name": "one-keys",
              "secret": {
                "secretName": "opennebula-one-keys"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "labels": {
        "app": "opennebula-configurator"
      },
      "name": "opennebula-configurator",
      "namespace": "m0ryZkqC"
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "opennebula-configurator",
          "role": "oned"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opennebula-configurator",
            "role": "oned"
          },
          "annotations": {
            "checksum/scripts": "e4c3212598e18cebc0213a0161eb8d8d3b06b305e72e633ded201fc6e183d0cc"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "configurator",
              "image": "ghcr.io/kvaps/opennebula-exporter:v5.12.0.4",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/bin/bash",
                "/scripts/configurator.oned"
              ],
              "env": [
                {
                  "name": "ONE_XMLRPC",
                  "value": "http://opennebula-oned:2633/RPC2"
                }
              ],
              "volumeMounts": [
                {
                  "name": "scripts",
                  "mountPath": "/scripts"
                },
                {
                  "name": "one-keys",
                  "mountPath": "/var/lib/one/.one/one_auth",
                  "subPath": "one_auth"
                }
              ]
            }
          ],
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "topologyKey": "kubernetes.io/hostname",
                    "labelSelector": {
                      "matchLabels": {
                        "app": "opennebula-configurator.deployment"
                      }
                    }
                  }
                }
              ]
            }
          },
          "imagePullSecrets": [
            {
              "name": "regsecret"
            }
          ],
          "securityContext": {
            "fsGroup": 9869,
            "runAsUser": 9869
          },
          "volumes": [
            {
              "name": "scripts",
              "configMap": {
                "name": "opennebula-configurator",
                "defaultMode": 511
              }
            },
            {
              "name": "one-keys",
              "secret": {
                "secretName": "opennebula-one-keys"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "opennebula-exporter",
      "labels": {
        "app": "opennebula-exporter"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "opennebula-exporter"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opennebula-exporter"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "exporter",
              "image": "ghcr.io/kvaps/opennebula-exporter:v5.12.0.4-1",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "--web.telemetry-path=/metrics",
                "--web.listen-address=:9100"
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/bash",
                    "-c",
                    "opennebula_exporter > /metrics/opennebula.prom.$$ && mv /metrics/opennebula.prom.$$ /metrics/opennebula.prom"
                  ]
                },
                "initialDelaySeconds": 5,
                "failureThreshold": 1,
                "timeoutSeconds": 10,
                "periodSeconds": 60
              },
              "env": [
                {
                  "name": "ONE_XMLRPC",
                  "value": "http://opennebula-oned:2633/RPC2"
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9100
                }
              ],
              "volumeMounts": [
                {
                  "name": "one-keys",
                  "mountPath": "/var/lib/one/.one/one_auth",
                  "subPath": "one_auth"
                }
              ]
            }
          ],
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "topologyKey": "kubernetes.io/hostname",
                    "labelSelector": {
                      "matchLabels": {
                        "app": "opennebula-exporter"
                      }
                    }
                  }
                }
              ]
            }
          },
          "imagePullSecrets": [
            {
              "name": "regsecret"
            }
          ],
          "securityContext": {
            "fsGroup": 9869,
            "runAsUser": 9869
          },
          "volumes": [
            {
              "name": "one-keys",
              "secret": {
                "secretName": "opennebula-one-keys"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "opennebula-flow",
      "labels": {
        "app": "opennebula-flow"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "opennebula-flow"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opennebula-flow"
          },
          "annotations": {
            "checksum/config": "96cc6503101a7ce53dd71492438a99684f3b3e2a0325a247690e832967079d5d"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "oneflow",
              "image": "ghcr.io/kvaps/opennebula-flow:v5.12.0.4-1",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/bin/ruby",
                "/usr/lib/one/oneflow/oneflow-server.rb"
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 2474
                }
              ],
              "volumeMounts": [
                {
                  "mountPath": "/etc/one/oneflow-server.conf",
                  "name": "config",
                  "subPath": "oneflow-server.conf"
                },
                {
                  "mountPath": "/var/lib/one/.one/oneflow_auth",
                  "name": "one-keys",
                  "subPath": "oneflow_auth"
                }
              ]
            }
          ],
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "topologyKey": "kubernetes.io/hostname",
                    "labelSelector": {
                      "matchLabels": {
                        "app": "opennebula-flow"
                      }
                    }
                  }
                }
              ]
            }
          },
          "imagePullSecrets": [
            {
              "name": "regsecret"
            }
          ],
          "securityContext": {
            "fsGroup": 9869,
            "runAsUser": 9869
          },
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "opennebula-flow"
              }
            },
            {
              "name": "one-keys",
              "secret": {
                "secretName": "opennebula-one-keys"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "opennebula-gate",
      "labels": {
        "app": "opennebula-gate"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "opennebula-gate"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opennebula-gate"
          },
          "annotations": {
            "checksum/config": "8325b5d45713b786d89ad8656095fef7c3a3c4530e7c826c880b3561d831ff41"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "onegate",
              "image": "ghcr.io/kvaps/opennebula-gate:v5.12.0.4-1",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/bin/ruby",
                "/usr/lib/one/onegate/onegate-server.rb"
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 5030
                }
              ],
              "volumeMounts": [
                {
                  "mountPath": "/etc/one/onegate-server.conf",
                  "name": "config",
                  "subPath": "onegate-server.conf"
                },
                {
                  "mountPath": "/var/lib/one/.one/onegate_auth",
                  "name": "one-keys",
                  "subPath": "onegate_auth"
                }
              ]
            }
          ],
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "topologyKey": "kubernetes.io/hostname",
                    "labelSelector": {
                      "matchLabels": {
                        "app": "opennebula-gate"
                      }
                    }
                  }
                }
              ]
            }
          },
          "imagePullSecrets": [
            {
              "name": "regsecret"
            }
          ],
          "securityContext": {
            "fsGroup": 9869,
            "runAsUser": 9869
          },
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "opennebula-gate"
              }
            },
            {
              "name": "one-keys",
              "secret": {
                "secretName": "opennebula-one-keys"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "opennebula-memcached",
      "labels": {
        "app": "opennebula-memcached"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "opennebula-memcached"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opennebula-memcached"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "memcached",
              "image": "docker.io/library/memcached:1.5.6-alpine",
              "args": [
                "-p",
                "11211"
              ],
              "imagePullPolicy": "IfNotPresent",
              "ports": [
                {
                  "name": "memcached",
                  "containerPort": 11211
                }
              ]
            }
          ],
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "topologyKey": "kubernetes.io/hostname",
                    "labelSelector": {
                      "matchLabels": {
                        "app": "opennebula-memcached"
                      }
                    }
                  }
                }
              ]
            }
          },
          "imagePullSecrets": [
            {
              "name": "regsecret"
            }
          ],
          "securityContext": {
            "fsGroup": 9869,
            "runAsUser": 9869
          }
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "opennebula-novnc",
      "labels": {
        "app": "opennebula-novnc"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "opennebula-novnc"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opennebula-novnc"
          },
          "annotations": {
            "checksum/config": "c20d4390487e5153a6bde0314fa04fb7af1ab47fbff836fffb3d20bb68ec0f6c"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "novnc",
              "image": "ghcr.io/kvaps/opennebula-sunstone:v5.12.0.4-1",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/bin/ruby",
                "/usr/bin/novnc-server",
                "start"
              ],
              "ports": [
                {
                  "name": "websocket",
                  "containerPort": 29876
                }
              ],
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/etc/one/sunstone-server.conf",
                  "subPath": "sunstone-server.conf"
                },
                {
                  "name": "shared",
                  "mountPath": "/var/lib/one/sunstone_vnc_tokens",
                  "subPath": "sunstone_vnc_tokens"
                }
              ]
            }
          ],
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "topologyKey": "kubernetes.io/hostname",
                    "labelSelector": {
                      "matchLabels": {
                        "app": "opennebula-novnc"
                      }
                    }
                  }
                }
              ]
            }
          },
          "imagePullSecrets": [
            {
              "name": "regsecret"
            }
          ],
          "securityContext": {
            "fsGroup": 9869,
            "runAsUser": 9869
          },
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "opennebula-novnc"
              }
            },
            {
              "name": "shared",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "opennebula-sched",
      "labels": {
        "app": "opennebula-sched"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "opennebula-sched"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opennebula-sched"
          },
          "annotations": {
            "checksum/config": "69ae538dbe1f7060f3e410ec7d0549976a7197de7c3ca994b49775770186eec9"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "sched",
              "image": "ghcr.io/kvaps/opennebula:v5.12.0.4-1",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/bin/mm_sched"
              ],
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/etc/one/sched.conf",
                  "subPath": "sched.conf"
                },
                {
                  "name": "one-keys",
                  "mountPath": "/var/lib/one/.one/one_auth",
                  "subPath": "one_auth"
                }
              ]
            }
          ],
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "topologyKey": "kubernetes.io/hostname",
                    "labelSelector": {
                      "matchLabels": {
                        "app": "opennebula-sched"
                      }
                    }
                  }
                }
              ]
            }
          },
          "imagePullSecrets": [
            {
              "name": "regsecret"
            }
          ],
          "securityContext": {
            "fsGroup": 9869,
            "runAsUser": 9869
          },
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "opennebula-sched"
              }
            },
            {
              "name": "one-keys",
              "secret": {
                "secretName": "opennebula-one-keys"
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "opennebula-sunstone",
      "labels": {
        "app": "opennebula-sunstone"
      }
    },
    "spec": {
      "replicas": 3,
      "selector": {
        "matchLabels": {
          "app": "opennebula-sunstone"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opennebula-sunstone"
          },
          "annotations": {
            "checksum/config": "a7397dde46cd47030243e551de63052fddb2e0fc992770e0777c6eaea2cdfe48"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "sunstone",
              "image": "ghcr.io/kvaps/opennebula-sunstone:v5.12.0.4-1",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/usr/bin/ruby",
                "/usr/lib/one/sunstone/sunstone-server.rb"
              ],
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "/bin/sh",
                      "-c",
                      "echo 1 > /var/lock/one/.novnc.lock"
                    ]
                  }
                }
              },
              "ports": [
                {
                  "name": "http",
                  "containerPort": 9869
                }
              ],
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/etc/one/sunstone-server.conf",
                  "subPath": "sunstone-server.conf"
                },
                {
                  "name": "one-keys",
                  "mountPath": "/var/lib/one/.one/sunstone_auth",
                  "subPath": "sunstone_auth"
                },
                {
                  "name": "one-keys",
                  "mountPath": "/var/lib/one/.one/one_auth",
                  "subPath": "one_auth"
                },
                {
                  "name": "shared",
                  "mountPath": "/var/tmp",
                  "subPath": "tmp"
                },
                {
                  "name": "shared",
                  "mountPath": "/var/log/one",
                  "subPath": "log"
                },
                {
                  "name": "shared",
                  "mountPath": "/var/lib/one/sunstone_vnc_tokens",
                  "subPath": "sunstone_vnc_tokens"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": 9869
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5
              }
            }
          ],
          "imagePullSecrets": [
            {
              "name": "regsecret"
            }
          ],
          "securityContext": {
            "fsGroup": 9869,
            "runAsUser": 9869
          },
          "volumes": [
            {
              "configMap": {
                "name": "opennebula-sunstone"
              },
              "name": "config"
            },
            {
              "name": "one-keys",
              "secret": {
                "secretName": "opennebula-one-keys"
              }
            },
            {
              "name": "shared",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "opennebula-oned",
      "labels": {
        "app": "opennebula-oned"
      },
      "annotations": {
        "kubectl.kubernetes.io/default-exec-container": "oned"
      }
    },
    "spec": {
      "replicas": 3,
      "selector": {
        "matchLabels": {
          "app": "opennebula-oned"
        }
      },
      "serviceName": "opennebula-oned-servers",
      "podManagementPolicy": "Parallel",
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "opennebula-oned"
          },
          "annotations": {
            "checksum/config": "e50f8b0f3ecc35af6cd8895a78d83c875c4c5399eb766f56fc24109ad7dbccca"
          }
        },
        "spec": {
          "serviceAccountName": "opennebula-oned",
          "containers": [
            {
              "name": "mysql",
              "args": [
                "--character-set-server=utf8mb4",
                "--collation-server=utf8mb4_unicode_ci",
                "--skip-log-bin"
              ],
              "image": "docker.io/library/mysql:8.0.19",
              "imagePullPolicy": "IfNotPresent",
              "volumeMounts": [
                {
                  "name": "data",
                  "mountPath": "/var/lib/mysql"
                }
              ],
              "env": [
                {
                  "name": "MYSQL_USER",
                  "value": "oneadmin"
                },
                {
                  "name": "MYSQL_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "mysqlPassword",
                      "name": "opennebula-db-keys"
                    }
                  }
                },
                {
                  "name": "MYSQL_ROOT_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "mysqlRootPassword",
                      "name": "opennebula-db-keys"
                    }
                  }
                },
                {
                  "name": "MYSQL_DATABASE",
                  "value": "opennebula"
                }
              ]
            },
            {
              "name": "oned",
              "image": "ghcr.io/kvaps/opennebula:v5.12.0.4-1",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "/scripts/init.sh"
              ],
              "lifecycle": {
                "postStart": {
                  "exec": {
                    "command": [
                      "/bin/sh",
                      "-c",
                      "ssh-agent -a $SSH_AUTH_SOCK && ssh-add"
                    ]
                  }
                }
              },
              "args": [
                "start"
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 2633
                },
                {
                  "name": "hm-subscriber",
                  "containerPort": 2101
                },
                {
                  "name": "hm-replier",
                  "containerPort": 2102
                },
                {
                  "name": "monitord",
                  "containerPort": 32156
                }
              ],
              "env": [
                {
                  "name": "HEM_INTEGRATED",
                  "value": "1"
                },
                {
                  "name": "LEADER_SVC_NAME",
                  "value": "opennebula-oned-leader"
                },
                {
                  "name": "DB_BACKEND",
                  "value": "mysql"
                },
                {
                  "name": "DB_SERVER",
                  "value": "127.0.0.1"
                },
                {
                  "name": "DB_USER",
                  "value": "oneadmin"
                },
                {
                  "name": "DB_PASSWD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "mysqlPassword",
                      "name": "opennebula-db-keys"
                    }
                  }
                },
                {
                  "name": "DB_NAME",
                  "value": "opennebula"
                },
                {
                  "name": "DB_CONNECTIONS",
                  "value": "50"
                },
                {
                  "name": "SSH_AUTH_SOCK",
                  "value": "/var/run/one/ssh-agent.sock"
                }
              ],
              "volumeMounts": [
                {
                  "name": "config",
                  "mountPath": "/config"
                },
                {
                  "name": "config",
                  "mountPath": "/etc/one/monitord.conf",
                  "subPath": "monitord.conf"
                },
                {
                  "name": "hem-config",
                  "mountPath": "/etc/one/onehem-server.conf",
                  "subPath": "onehem-server.conf"
                },
                {
                  "name": "scripts",
                  "mountPath": "/scripts"
                },
                {
                  "name": "one-run",
                  "mountPath": "/run/one"
                },
                {
                  "name": "one-keys",
                  "mountPath": "/secrets"
                },
                {
                  "name": "ssh-keys",
                  "mountPath": "/var/lib/one/.ssh"
                },
                {
                  "name": "shared",
                  "mountPath": "/var/lib/one/vms",
                  "subPath": "vms"
                },
                {
                  "name": "shared",
                  "mountPath": "/var/tmp",
                  "subPath": "tmp"
                },
                {
                  "name": "shared",
                  "mountPath": "/var/log/one",
                  "subPath": "log"
                }
              ],
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/usr/bin/onezone",
                    "list"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 30,
                "timeoutSeconds": 15
              }
            }
          ],
          "terminationGracePeriodSeconds": 30,
          "affinity": {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "weight": 1,
                  "podAffinityTerm": {
                    "topologyKey": "kubernetes.io/hostname",
                    "labelSelector": {
                      "matchLabels": {
                        "app": "opennebula-oned"
                      }
                    }
                  }
                }
              ]
            }
          },
          "imagePullSecrets": [
            {
              "name": "regsecret"
            }
          ],
          "securityContext": {
            "fsGroup": 9869,
            "runAsUser": 9869
          },
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "opennebula-oned"
              }
            },
            {
              "name": "hem-config",
              "configMap": {
                "name": "opennebula-hem"
              }
            },
            {
              "name": "scripts",
              "configMap": {
                "name": "opennebula-scripts",
                "defaultMode": 511
              }
            },
            {
              "name": "ssh-keys",
              "secret": {
                "secretName": "opennebula-ssh-keys",
                "defaultMode": 256
              }
            },
            {
              "name": "one-keys",
              "secret": {
                "secretName": "opennebula-one-keys"
              }
            },
            {
              "name": "one-run",
              "emptyDir": {}
            },
            {
              "name": "data",
              "emptyDir": {}
            },
            {
              "name": "shared",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "opennebula-gate",
      "labels": {
        "app": "opennebula-gate"
      }
    },
    "spec": {
      "ingressClassName": "nginx",
      "rules": [
        {
          "host": "opennebula-gate.example.org",
          "http": {
            "paths": [
              {
                "path": "/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "opennebula-gate",
                    "port": {
                      "number": 5030
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      "tls": [
        {
          "hosts": [
            "opennebula-gate.example.org"
          ],
          "secretName": "opennebula-gate-tls"
        }
      ]
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "opennebula-novnc",
      "labels": {
        "app": "opennebula-novnc"
      }
    },
    "spec": {
      "ingressClassName": "nginx",
      "rules": [
        {
          "host": "opennebula.example.org",
          "http": {
            "paths": [
              {
                "path": "/websockify",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "opennebula-novnc",
                    "port": {
                      "number": 29876
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      "tls": [
        {
          "hosts": [
            "opennebula.example.org"
          ],
          "secretName": "opennebula-tls"
        }
      ]
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "opennebula-oned",
      "labels": {
        "app": "opennebula-oned"
      }
    },
    "spec": {
      "ingressClassName": "nginx",
      "rules": [
        {
          "host": "opennebula.example.org",
          "http": {
            "paths": [
              {
                "path": "/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "opennebula-oned",
                    "port": {
                      "number": 2633
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      "tls": [
        {
          "hosts": [
            "opennebula.example.org"
          ],
          "secretName": "opennebula-tls"
        }
      ]
    }
  },
  {
    "apiVersion": "networking.k8s.io/v1",
    "kind": "Ingress",
    "metadata": {
      "name": "opennebula-sunstone",
      "labels": {
        "app": "opennebula-sunstone"
      }
    },
    "spec": {
      "ingressClassName": "nginx",
      "rules": [
        {
          "host": "opennebula.example.org",
          "http": {
            "paths": [
              {
                "path": "/",
                "pathType": "Prefix",
                "backend": {
                  "service": {
                    "name": "opennebula-sunstone",
                    "port": {
                      "number": 9869
                    }
                  }
                }
              }
            ]
          }
        }
      ],
      "tls": [
        {
          "hosts": [
            "opennebula.example.org"
          ],
          "secretName": "opennebula-tls"
        }
      ]
    }
  },
  {
    "kind": "Secret",
    "metadata": {
      "name": "opennebula-one-keys",
      "labels": {
        "app": "opennebula-one-keys"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "apiVersion": "v1",
    "data": {
      "one_auth": "b25lYWRtaW46d2h5bE1JbVNtSG5nMERwaTl2d1pxTkVna2dmbmpwRloK",
      "one_key": "VjFpWjQ0YURESHJQTDMxRkFOOEFqNnpRT3dKSWdDVjcK",
      "oneflow_auth": "c2VydmVyYWRtaW46U0czb0Y5enVnNlpRaUhwZzllVGtrSzMyOUR1bFNZTkgK",
      "occi_auth": "c2VydmVyYWRtaW46U0czb0Y5enVnNlpRaUhwZzllVGtrSzMyOUR1bFNZTkgK",
      "ec2_auth": "c2VydmVyYWRtaW46U0czb0Y5enVnNlpRaUhwZzllVGtrSzMyOUR1bFNZTkgK",
      "onegate_auth": "c2VydmVyYWRtaW46U0czb0Y5enVnNlpRaUhwZzllVGtrSzMyOUR1bFNZTkgK",
      "sunstone_auth": "c2VydmVyYWRtaW46U0czb0Y5enVnNlpRaUhwZzllVGtrSzMyOUR1bFNZTkgK"
    }
  },
  {
    "kind": "Secret",
    "metadata": {
      "name": "opennebula-ssh-keys",
      "labels": {
        "app": "opennebula-ssh-keys"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "apiVersion": "v1",
    "data": {
      "config": "SG9zdCAqCkxvZ0xldmVsIEVSUk9SClN0cmljdEhvc3RLZXlDaGVja2luZyBubwpVc2VyS25vd25Ib3N0c0ZpbGUgL2Rldi9udWxsCkdTU0FQSUF1dGhlbnRpY2F0aW9uIG5vClVzZXIgb25lYWRtaW4K",
      "id_rsa": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKSndJQkFBS0NBZ0VBOWF3VE9pajJJSTdWVHRmVXlhUkI0WG5wY0ZzQUM4a0VRU3J6MlUwMVUvZkEyYVFrCjRGTnBPRjBCUnpjRU1uMmRJN2pUWTRFdmxCY1JXZENaZmRnb1R1dGFUekZ0c0tQQWtncDZUU3g0Qk5YZVRzSnYKcXpCdHpwcUFYVS9NQTBiMnFrT2VlTk4ycllkMFN6alo3VjVINEZ2dVduL0RWcWNwZmNmZUFQVUc4Z2UyWExweQoxajdQV2trL3lMTGgwZ25TUXdTWVNZb29xQWxwMGpqZzVQVG95eW9jSzhRdnpmSHNJTTc4bitWR2hYL3J3N3VtCmJxRWtuNzA5bys4dGxhTlpSd0ZYUnJEU2dMOGM3RUFTbWhYNlpaZ2daVGxhK1NMV2Nkd0lQdEtIenU5R0pDQm8KanF0VUZRenZxYTZRTkkxOThzdXVreUxlNERkaVdHM3ZWK1V3bEpBT1Y5aktvRndWK1d6aXc2WGdpUVl0ay9LdgpYQ3g4VzNsM3VaTlRFZ3BkbEl5azBFSnI5RnE1VFUxaUlMN3hZczM4ellScS8wM0dLSnpmR0paOGxoelNzK2ZqCjM5L1lkTy9XVXBHUHUwbTA1WlZCQWhRSEt3Qkg5WFM3bmdaUVRxYkVkMFBkRlJ4MWtpOWhBeEZBMlRtR1BhdTMKSGhVcGIrNUZLLytuVVUrQTZSaDdPYUloU2lGcFc0VFRueDROOXhDT1Rwbm9ZZG0rUlhGQUd3VHhveFFkVEF6TQo5OVdQNElBalIxcG9EZ1lKS0NITTVGM0RDVXFTaFRQWnlRT0R1aUUydVNTVmZsNEJLUG5FOEQ0RkZsV0pwOTBBCmdFSmtPbDMvZHQzakg1WDFyWlhVU3BtZHYwZlJOMkNCMHpxMGlhNnNERnRHd1NPYjcxTno2bzhaQXgwQ0F3RUEKQVFLQ0FnQWhaMTlKNWkzcEtXS3BrTUUzRmFWN2tnY0NwdXp2clVwdHpmaFFFS1p5bjFwU2ZYWWlKbFZGTzZnagoxY0ExV1UwWGdWY0V6Wmo1aXRWcUgrbnU2WWc1aXRqQnNkZlhUN3lzWHM1WVZmYVB1Y0M3ZHNhV1FVUjg5aGNFCkdRaUZYWTNHZ3VFMlRwSnhiOXlKS2RhLzVyVGhOYjdJQVYwL0dBV1ZPNnJjK0hRVVRxWW1INWZqdDdDYjl4KzgKRzA2SEw1eXVUaDZpeVMxVUE4dW1zT01yWG4yVXVrb1FUV0d1bi9sYVVLcWExeUxxbmdVaG5RODVOYUgwTWxnQwpSVkF1YTRLRkhCS1E0eFFNTzNBa1UyWDBHNDdyWjI3b05JOUJGdEtQc3JwUVNISDgyaDN3WlpPeDZtdkpYUFB0ClgzWHVIMXNEdTF3bVYzUjBpak5PRU15ZForVmQyYkdTUVZpbHdSYW1kMFVPcjhFUnpGSnpySG16eU4ySmJrM28KWk9od09xS0c0UmpUejYwRGs1c1UrOXZZNkg3Uk84OFQ4b2pBUUtqMDZVWFVRK2c5bDdyU2VzNnNtU1RDVkZOdAo0WXJ4cHVyL3dBeEF1YnhsaEVPQnNrV1hoNDZjNzUxanhzSWVHeGhvck1EV0JuS1ArQkp2eGFTaGFxK2RJYjI4CjkvbWxTWHFDNWprVk9BTU9tRFJIQ3BacE9qOE9ZOGdzRmV0UVd5YnVUMTM2KzVPa0EwaWJTYmRmRUEwSnBTeHgKN1ZNSkFTQ0F3L1ZVaUYyejBycmRncGREMXdqTld0bzVMcHZBVCtYMllkWFZlbjBZREszc0xDUU5wbUFDazlDVwo3TFlKa1V1azJkWUUvbkhRQUdKRng0UzQ3cFdYQlU1SkMyN2ZRWXdOZ0RxVTFBMGxoUUtDQVFFQSs5OTlCdUVVClNjemg3T0krZTFSWlRHVU1LKzlwZ0lKeW5rRTJLbGxFR0dHRjQ0Ui9zdCtYeXVMYncvLy9ZTVF1NEZsMVg4QmMKdm9aN3QwU01SV0RURDk3d2tkWGtRRFR1WmwzWmp4T3ZOVkZkZlJqMDAxa2s0MS9JS0NsZXhiMDZ3NVh3V2lxYQpVZ1lGZmlVTlY0UVVUaVl0Z3dCLzRwRUJ4K0pWbTBGZFBqb056S0pYRllVd3VFRzJnVFRWV0ZQSngrOXh0MWllCjQxbHNBYXRMaG9wWEtMVWE5SE1GR01MS05wNUJLMXliekFOWkhycUdVM1FDcWJYWTlBd3VPUkM4ZXZaWnhibmUKNEc3WkhjVk5iek85OVAwTTdKTnpJTDdjREo4Wndhclk3MU52RG1lSnpiQXVOTGtYL1BtU0dUWko3bUR3NG1xNgpZODB4aHlxNG8vUVJJd0tDQVFFQStiS1RtckxuRC9KbTRSYm1wY1YwakV5Q1ovNEYySnh5ZUhhV0xOS3pkSmR2ClpvTmZra0Q0ZTRsUnRRYmQwVGFwamJ1Mmpteko0SXRqTEVFdjJPVEtOSEVvTm5MbEJQdVgrUWZMSGQ0dG8zZUoKUlZpcXZpbWJWclZGYUtGNm1lTXYralp4NFJ4REZIdXQrK25xNHdEZlk1QlU0QnJTUmZ4L083VFdTUmFudEJaUwp3ZFg0ZnNFeStMNW5wMk4vYnNsYkk1b2dYWitHajh2TWxlendpMWVZQmd5ZUZQaWZURFlLaC9rT1NyWWM3VTJNCkFQakk2MDNJL2tSMlVBcU40aE1Hdk5EQzNMK091UjR1NG9PRkNTMTlyRjFaM2dFbkphMS8vaVVpQ1NVcDJ2aVoKR0thN2NKT3BpN0JTVy9aVVNMRlBuTDlWT1h5WlhoOG10TjZxL2J0K3Z3S0NBUUJHV0tVU3hzcGowbFZIVStrZgppTzluNXREL2RGNkRCZXY5UnpsWm1wVHFPbEtxdU5ieG5vRkdxUlc0S0VlclB4L1lpU08vR25yTXU4TFI3Tk5BCmpVcGxwRjZNWExEalBlVlhzZDZSbDIzWDltR21EdEpTTlJPWWJhZjVqNVJvcGZGRHJ4enlFZlFIOUthVUZNVWwKTEQ1L2xTb2c3SUxMUkxTNm52eEo0SGVxYVl4eEd1WTNuSHQrK3R0K09zTmJhQXR6Uyt6MnlFbVlOZUYwbGVNQwpNS0VuUFczSjJGWVVGRk5sN2MxRnp4ZTBZenNBMmhlcU56eUhLY0x1Wm5pQ2Q2b3NyYUZsR0FTbnFrMzVncUdkCjdWV2dsd3lGQnFtZys2MTUyUFhZb1Y3MWVOZ0xyZDlQRTJYVVU5M2ZTZFVFTmFWd2JxTFltZlowNlZwcjVnS3IKeC84QkFvSUJBRXBwNExsS3RiZTM2dGNMNXlMaURKQy9RR0hUZjFTRmswdTVNNW9hRk9jYk5sVGJ0QUMzSWhaVwozeVhPN1E0cmR5NUpFZWV5SGh1d0RwY2l1aXF1VEdDQ2xKUmRlMGtYM2J1V2lmN1Z0czR2a3BZN0RXOXNvT0dmClZoY1BnS1VaNHJOenhFNXRDTVN5OHkvUEQzUWxUMjJ4bHNuTzFIbU0vVElDKzVWK2plNEtkUkZWUGlBd1hZdHAKMnlRMGI4YkpkVUxQN1BOWjFsVkdUQ3NtR0syK0pnMHZkM0VTZ3c3SVVDMGptUkhFNGl3S1h6M3U1cG5SYmFQeApMVDAvVi9kVzZqd2REdVdRcE8wZ1JLSzJ4VS90NGJVYmdPdTdkam94VWFLZzJGclhXM2pwZTE2d1djMzhBNXdnCnFQckZGMnN1aEdaWFV3TzEwVk1PZjQrSmlIWGppYXNDZ2dFQVZRTUFKSkowdUhCVHh2S25MQm9IVU1EdFlCU00KYmExZDVzQ3VobnBYTUx6NVVWRW5BWG8yRXIrRjZFa3JJWkxKRjNPK0NwQTEyMktiYmUxZDRNcWVoSHZFQkVqVQpBWGQ3ZEEzaElXdGtkc2Zvc3lGeEJUN3cyQmZ5dE0vdDhsVHhCUFhOSmdHdnhKVHRxRitKb09sREthNTdJMENwClRhKzRleXlIV2FxVlNUK2EwVUlTYStjU2lMZ0FrVUYyVHc4d0RjbW5DSXJoRXRTdUhKa1U1SXVwYndrVWlCMzYKeGVSYXExRC9vbFVQQVBYdjlVWlNablVpVzhnMksxdEd5ak0vSzAxdWU1SXFnUEJPMGM2OWpGWGlPR25lenFNYQpHc3dNUGs0RzdOR3JUZ24xUC9LRkk0M1Nla21YVXBYTlRLYTRXNWxtNnRvS3B3K3RTMVh0MHM1dy9BPT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
    }
  },
  {
    "kind": "Secret",
    "metadata": {
      "name": "opennebula-db-keys",
      "labels": {
        "app": "opennebula-db-keys"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-delete-policy": "before-hook-creation"
      }
    },
    "apiVersion": "v1",
    "data": {
      "mysqlPassword": "NnJvaXFQTGhDcVRqcFNEWERFNlM0WXQ5bHBoWkpmcGg=",
      "mysqlRootPassword": "RHYzQlpOYzN2ZDBCTktWSkhxRDhyT0paa3VycmFHVUQ="
    }
  }
]