[
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "autopilot-repo",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "opsmx-autopilot-2.0.0"
      }
    },
    "type": "kubernetes.io/dockerconfigjson",
    "data": {
      ".dockerconfigjson": "eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJkb2NrZXJIdWJJZCIsInBhc3N3b3JkIjoiZG9ja2VySHViUHdkIiwiZW1haWwiOiJhYmNAeHl6LmNvbSIsImF1dGgiOiJaRzlqYTJWeVNIVmlTV1E2Wkc5amEyVnlTSFZpVUhkayJ9fX0="
    }
  },
  {
    "apiVersion": "v1",
    "data": {
      "config.properties": "#########################################################################################################\n#                                      Application configuration\n#########################################################################################################\n\nmanagement.endpoints.web.base-path=/mgmt\nmanagement.endpoint.health.show-details=always\nmanagement.endpoint.health.show-components=always\n\nkubernetes.prometheus.metric.label=__name__\nkubernetes.prometheus.host.tagname=exported_container_label_io_kubernetes_pod_name\nkubernetes.prometheus.tomcat.host.tagname=container_label_io_kubernetes_pod_name\n\naws.prometheus.host.tagname=destination_workload\naws.prometheus.baseline.host.tagvalue=version2a\naws.prometheus.canary.host.tagvalue=version2b\n\nprometheus.metrics.api.path=/api/v1/label/__name__/values\nprometheus.metrics.aggregator=avg\nprometheus.metrics.sampling.value=10\nprometheus.metrics.rate.duration=60s\n#true always taking cluster name, false always taking pod names\nprometheus.cluster.name=false\nisPodFinderEnabled=false\n\nprometheus.services=apache,haproxy,http,tomcat\nprometheus.configured.service=istio\nstackdriver.services=tomcat\nstackdriver.metrics.template.path=/opt/opsmx/base-templates/stackdriver/tomcat-metrics.json\nelastic.search.services=apache,tomcat\n#datadog.services=tomcat (datadog services are being read from datadog api by truncating the prefix of each metric name\n#custom.service.dropdown.value=Custom service\n\n# Reading hibernate.cfg.xml from file system\nhibernate.configFilePath=/opt/opsmx/hibernate.cfg.xml\n\n#aws.prometheus.hostname=\n\n# Data science micro service configuration parameters\npython.server.protocol=https://\npython.analysis.url=localhost:5005\n\n# Data Science Microservice Properties\ndatascience.workers.count=4\ndatascience.server.address=0.0.0.0:5005\n\nserver.protocol=http://\nreporting.server.url=/opsmx-analysis/public/canaryAnalysis.html#/analysis/\ncasservice.baseurl=localhost:8090\nmetricservice.baseurl=localhost:9090\n\nelastic.search.metrics.template.path=/opt/opsmx/elasticsearch_template_format.json\nelasticsearch.metrics.sampling.value=10\nelastic.search.query.template.path=/opt/opsmx/elasticsearch_metric_query_template.json\nelastic.search.metrics.index.path=/opt/opsmx/elasticsearch_index_template.json\nelastic.search.kibana.url=http://34.211.233.166:5601/app/kibana#/discover?_g=()&_a=(columns:!(_source),index:METRIC_INDEX,interval:auto,query:(language:lucene,query:''),sort:!('@timestamp',desc))\n\n# Required details for log analysis\nhome.directory=/home/ubuntu/\nlogfiles.base.path=/home/ubuntu/logdata/\nlogfiles.aca.path=/home/ubuntu/acainputs/\nlogfiles.feedback.path=/home/ubuntu/logdata/feedback/\nlogfiles.pca.path=/home/ubuntu/ScoringAndPCA/\njava.logs.path=/home/ubuntu/logs/\nk8.logpulling.url=https://api-opsmxcluster-k8s-loca-fsgjhv-1527274479.us-east-2.elb.amazonaws.com/api/v1/namespaces/kube-system/services/elasticsearch-logging/proxy/logstash-*/fluentd/_search\nk8.logpulling.username=admin\nk8.logpulling.password=eX2uNGR55k98mCqobEwUzMIX63Aknm0D\nk8.query.keyword=kubernetes.pod_name.keyword\nk8.config.filepath=/home/ubuntu/.kube/\nelasticsearch.k8.log.query.file.path=/opt/opsmx/base-templates/elasticsearch/elasticsearch_log_query.json\nelasticsearch.log.query.file.path=/opt/opsmx/base-templates/elasticsearch/elasticsearch_log_query.json\nelasticsearch.logpulling.url=/_search?scroll=2m\ndockerswarm.logpulling.scroll.url=/_search/scroll\ndockerswarm.query.file.path=/opt/opsmx/base-templates/elasticsearch/elasticsearch_swarmlog_query.json\nelasticsearch.query.keyword=container_id.keyword\nelasticsearch.response.keywords=message,exception.exception_message,log\nelasticsearch.log.filesize.in.MB=100\n\n# Sumologic detials\n\nsumologic.logpulling.url1=https://api.\nsumologic.logpulling.url2=.sumologic.com/api/v1/search/jobs\nsumologic.logpulling.us1=https://api.sumologic.com/api/v1/search/jobs\nsumologic.log.query.file.path=/opt/opsmx/base-templates/sumologic/sumologic_log_query.json\nsumologic.response.keywords=message,exception.exception_message,log\nsumologic.log.filesize.in.MB=100\nsumologic.accessid.keyword=dummyaccessid\nsumologic.accesskey.keyword=dummyaccesskey\nsumologic.zone.keyword=us2\nsumologic.query.keyword=container_id.keyword\nsumologic.query.url=https://service.<zone>.sumologic.com/ui/#/search/@<starttime>,<endtime>@_sourceCategory=<pod>\nsumologic.query.url.us1=https://service.sumologic.com/ui/#/search/@<starttime>,<endtime>@_sourceCategory=<pod>\nsumologic.query.data=/messages?offset=0&limit=10000\n\n# Stackdriver details\nstackdriver.services=tomcat\nstackdriver.metrics.template.path=/opt/opsmx/base-templates/stackdriver/apm.json\nstackdriver.query.url=https://console.cloud.google.com/logs/#/search/@<logfilter>\n\n# Kibana details\nkibana.query.url=/app/kibana#/discover?_g=(refreshInterval:(pause:!t,value:0),time:(from:'<starttime>',mode:absolute,to:'<endtime>'))&_a=(columns:!(_source),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,index:'<index>',key:_index,negate:!f,params:(query:'<indexvalue>',type:phrase),type:phrase,value:'<indexvalue>'),query:(match:(_index:(query:'<indexvalue>',type:phrase)))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:'<index>',key:<scope>,negate:!f,params:!('<scopevalue>'),type:phrases,value:'<scopevalue>'),query:(bool:(minimum_should_match:1,should:!((match_phrase:(<scope>:'<scopevalue>'))))))),index:'<index>',interval:auto,query:(language:lucene,query:''),sort:!('@timestamp',desc))\n\nkibana.query=/app/kibana#/discover?_g=()&_a=(columns:!(_source),index:<index>,interval:auto,query:(language:lucene,query:''),sort:!('@timestamp',desc))\n\nelasticsearch.index=logstash-pipeline-*\nlog.template=log-template\nmetric.template=metric-template\nlog.analysis.file=/home/ubuntu/logdata/logAnalysis.py\ncanary.analysis.filepath=/home/ubuntu/Python-code/canary/canaryplusversion.py\nlog.feedback.analysis.file=/home/ubuntu/logdata/feedbackAnalysis.py\npython.version=python\n\n# Retry the log query attributes\ntotalDurationInMinutes=6\nintervalDurationInSeconds=60\n\nnewrelic.metric.template.filter.params=WebTransaction(.*)GET(.*),WebTransaction(.+)POST(.*),WebTransaction(.+)PUT(.*),WebTransaction(.+)DELETE(.*),WebTransaction(.+)PATCH(.*)\nnewrelic.metrics.template.path=/opt/opsmx/base-templates/newrelic/newrelic-apm-rest.json\n#newrelic.metric.template.filter.param=/greeting\nnewrelic.group.metric.delimiter=;\n\n#datadog metric analysis required details\ndatadog.metric.tag=host\ndatadog.metrics.template.path=/opt/opsmx/base-templates/datadog/\ndatadog.infra.metrics.template.path=/opt/opsmx/base-templates/datadog/infra.json\ndatadog.timeseries.metricdata.client.url=https://api.datadoghq.com/api/v1/query\ndatadog.apm.metrics.template.path=/opt/opsmx/base-templates/datadog/apm.json\ndatadog.timeseries.metricdata.host=api.datadoghq.com\ndatadog.application.weeks=1\n\ncanary.default.minscore=80\ncanary.default.maxscore=90\nmetricdata.fetcher.url=http://localhost:9090/metricdata\nmonitoring.service.baseurl=http://localhost:9090\n\nbasedata.filepath=/home/ubuntu/BaseData/USER_NAME_PLACE_HOLDER/TEMPLATE_NAME_PLACE_HOLDER/Data\n#time period is in hours\nbasedata.time.period=-24\nsystem.r.path=/usr/bin/Rscript\nweights.computation.filepath=/home/ubuntu/long_term_weights.R\n\nsonar.metrics.file.path=/opt/opsmx/base-templates/sonar/sonar_metrics.json\nauditEnabled=false\n\n# timing parameters for analysis retries.\nopsmx.job.refreshMilliseconds=30000\nopsmx.job.timeoutMilliseconds=120000\nopsmx.job.restartJobLimit=5\nopxmx.job.staleCheckMilliseconds=60000\n\n#Thread limit for calls to analysis servicec\nanalysis.threadpool.size=4\n\n# metric multi service constants\nmultiservice.monitoring.service.url=localhost:9090/metricdatapath\n\n#######################################################################################\n#           Additional configuration that can be changed via values.yaml\n#######################################################################################\n\n# Data science analysis algorithm, typically spell/perl are specified\npython.algorithm=spell\n\n# Spinnaker information\nspinnaker.login.admin.enabled=false\nspinnaker.baseurl=http://spin-gate:8084\nspinnaker.login.admin.username=dummyusername\nspinnaker.login.admin.password=dummypassword\n\n# Data source attributes\nspring.datasource.url=jdbc:postgresql://db-opsmx:5432/opsmx\nspring.datasource.username=postgres\nspring.datasource.password=networks123\n\n# LDAP login attributes\nisLdapAuthEnabled=\nldap.url=ldap://oes-openldap:389\nldap.base.dn=cn=Users,dc=local,dc=opsmx,dc=com\nldap.user.filter.pattern=(&(objectclass=person)(cn=USERNAME))\nldap.admin.user.groups=Administrators\n\n# Enable Build Analysis\nbuild.analysis=false\n",
      "hibernate.cfg.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- <!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration\n    DTD 3.0//EN\" \"hibernate-configuration-3.0.dtd\"> -->\n<!DOCTYPE hibernate-configuration SYSTEM \"classpath:///hibernate-configuration-3.0.dtd\">\n<hibernate-configuration>\n        <session-factory>\n               <!-- Settings for a database -->\n               <property name=\"connection.driver_class\">org.postgresql.Driver</property>\n               <!--for kubernet service-->\n               <property name=\"connection.url\">jdbc:postgresql://db-opsmx:5432/opsmx</property>\n               <property name=\"connection.username\">postgres</property>\n               <property name=\"connection.password\">networks123</property>\n\n               <property name=\"dialect\">org.hibernate.dialect.PostgreSQLDialect</property>\n               <property name=\"hibernate.query.factory_class\">org.hibernate.hql.ast.ASTQueryTranslatorFactory</property>\n               <property name=\"show_sql\">false</property>\n               <property name=\"hbm2ddl.auto\">update</property>\n               <!-- <property name=\"hibernate.cache.use_second_level_cache\">true</property>\n               <property name=\"hibernate.cache.use_query_cache\">true</property>\n                --><!-- <property name=\"hibernate.cache.provider_class\">org.hibernate.cache.EhCacheProvider</property>\n               <property name=\"hibernate.cache.region.factory_class\">org.hibernate.cache.ehcache.EhCacheRegionFactory</property>\n               <property name=\"net.sf.ehcache.configurationResourceName\">/hibernate-cache-config.xml</property>\n                --><!-- <property name=\"hibernate.hbm2ddl.auto\">validate</property> -->\n\n               <!-- Disable second-level cache. -->\n               <!-- <property name=\"cache.provider_class\">org.hibernate.cache.NoCacheProvider</property> -->\n\n               <property name=\"hibernate.temp.use_jdbc_metadata_defaults\">true</property>\n\n               <!-- Bind the getCurrentSession() method to the thread. -->\n               <property name=\"current_session_context_class\">thread</property>\n\n               <!-- hibernate c3p0 connection pooling configuration -->\n               <property name=\"hibernate.c3p0.acquire_increment\">1</property>\n               <property name=\"hibernate.c3p0.idle_test_period\">60</property> <!-- seconds -->\n               <property name=\"hibernate.c3p0.min_size\">1</property>\n               <property name=\"hibernate.c3p0.max_size\">10</property>\n               <property name=\"hibernate.c3p0.max_statements\">0</property>\n               <property name=\"hibernate.c3p0.timeout\">0</property> <!-- seconds -->\n               <property name=\"hibernate.c3p0.acquireRetryAttempts\">10</property>\n               <property name=\"hibernate.c3p0.acquireRetryDelay\">15000</property>\n               <property name=\"hibernate.c3p0.testConnectionOnCheckout\">true</property>\n               <property name=\"hibernate.c3p0.preferredTestQuery\">SELECT 1</property>\n\n               <mapping resource=\"model.hbm.xml\" />\n        </session-factory>\n</hibernate-configuration>\n"
    },
    "kind": "ConfigMap",
    "metadata": {
      "name": "autopilotbackendconfig",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "opsmx-autopilot-2.0.0"
      }
    }
  },
  {
    "apiVersion": "v1",
    "data": {
      "app.config.js": "var AppConfig = {\n\tgetBaseUrl:function() {\n\t\treturn \"//autopilot:8090\";\n\t}\n}\n"
    },
    "kind": "ConfigMap",
    "metadata": {
      "name": "autopilotfrontendconfig",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "opsmx-autopilot-2.0.0"
      }
    }
  },
  {
    "apiVersion": "v1",
    "data": {
      "server.xml": "<?xml version='1.0' encoding='utf-8'?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> <Server port=\"8005\" shutdown=\"SHUTDOWN\"> <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" /> <!-- Security listener. Documentation at /docs/config/listeners.html <Listener className=\"org.apache.catalina.security.SecurityListener\" /> --> <!--APR library loader. Documentation at /docs/apr.html --> <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" /> <!--Initialize Jasper prior to webapps are loaded. Documentation at /docs/jasper-howto.html <Listener className=\"org.apache.catalina.core.JasperListener\" /> --> <!-- Prevent memory leaks due to use of particular java/javax APIs--> <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" /> <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" /> <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n<!-- Global JNDI resources\n  Documentation at /docs/jndi-resources-howto.html\n--> <GlobalNamingResources>\n  <!-- Editable user database that can also be used by\n    UserDatabaseRealm to authenticate users\n  -->\n  <Resource name=\"UserDatabase\" auth=\"Container\"\n         type=\"org.apache.catalina.UserDatabase\"\n         description=\"User database that can be updated and saved\"\n         factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n         pathname=\"conf/tomcat-users.xml\" />\n</GlobalNamingResources>\n <Service name=\"Catalina\">\n\n  <!--The connectors can use a shared executor, you can define one or more named thread pools-->\n  <!--\n  <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\"\n   maxThreads=\"150\" minSpareThreads=\"4\"/>\n  -->\n  <Connector port=\"8161\"\n          SSLEnabled=\"false\"\n          protocol=\"org.apache.coyote.http11.Http11NioProtocol\" scheme=\"http\"\n          connectionTimeout=\"20000\"\n          keystoreFile=\"/home/ubuntu/keystore.p12\"\n          keystorePass=\"OpsMx@123\"\n          redirectPort=\"8443\" />\n  <!--\n  <Connector executor=\"tomcatThreadPool\"\n          port=\"8161\" protocol=\"HTTP/1.1\"\n          connectionTimeout=\"20000\"\n          redirectPort=\"8443\" />\n  -->\n <!--    <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11Protocol\"\n          maxThreads=\"150\" SSLEnabled=\"true\" scheme=\"https\" secure=\"true\"\n          clientAuth=\"false\" sslProtocol=\"TLS\" />\n -->\n\n  <!-- Define an AJP 1.3 Connector on port 8009 -->\n  <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n  <Engine name=\"Catalina\" defaultHost=\"localhost\">\n    <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n      <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n          resourceName=\"UserDatabase\"/>\n    </Realm>\n    <Host name=\"localhost\"  appBase=\"webapps\"\n       unpackWARs=\"true\" autoDeploy=\"true\">\n      <Context path=\"\" docBase=\"opsmx-analysis\" />\n      <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n          prefix=\"localhost_access_log.\" suffix=\".txt\"\n          pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n    </Host>\n  </Engine>\n </Service>\n</Server>\n"
    },
    "kind": "ConfigMap",
    "metadata": {
      "name": "autopilotserverconfig",
      "labels": {
        "heritage": "Helm",
        "release": "release-name",
        "chart": "opsmx-autopilot-2.0.0"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app": "autopilot",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "opsmx-autopilot-2.0.0"
      },
      "name": "autopilot"
    },
    "spec": {
      "type": "LoadBalancer",
      "ports": [
        {
          "name": "cas-service",
          "port": 8090,
          "targetPort": 8090
        },
        {
          "name": "http",
          "port": 8161,
          "targetPort": 8161
        },
        {
          "name": "monitoring-service",
          "port": 9090,
          "targetPort": 9090
        }
      ],
      "selector": {
        "app": "autopilot"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "labels": {
        "app": "db-opsmx",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "opsmx-autopilot-2.0.0"
      },
      "name": "db-opsmx"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "db-opsmx",
          "protocol": "TCP",
          "port": 5432,
          "targetPort": 5432
        }
      ],
      "selector": {
        "app": "db-opsmx"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "autopilot",
      "labels": {
        "app": "autopilot",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "opsmx-autopilot-2.0.0"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app": "autopilot"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "autopilot",
            "heritage": "Helm",
            "release": "release-name",
            "chart": "opsmx-autopilot-2.0.0"
          },
          "annotations": {
            "configmap/checksum": "7a34636f3a80baf5c22720e91936092e16fd0a0dd4d126914546de537295bece"
          }
        },
        "spec": {
          "volumes": [
            {
              "name": "backend-config-volume",
              "configMap": {
                "name": "autopilotbackendconfig"
              }
            },
            {
              "name": "frontend-config-volume",
              "configMap": {
                "name": "autopilotfrontendconfig"
              }
            },
            {
              "name": "server-config-volume",
              "configMap": {
                "name": "autopilotserverconfig"
              }
            }
          ],
          "imagePullSecrets": [
            {
              "name": "autopilot-repo"
            }
          ],
          "containers": [
            {
              "image": "opsmxdev/ubi8-autopilot:v2.9.10-202006181240",
              "imagePullPolicy": "IfNotPresent",
              "name": "autopilot",
              "ports": [
                {
                  "containerPort": 8090,
                  "name": "backend",
                  "protocol": "TCP"
                },
                {
                  "containerPort": 9090,
                  "name": "metricfetcher",
                  "protocol": "TCP"
                },
                {
                  "containerPort": 8161,
                  "name": "frontend",
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "name": "backend-config-volume",
                  "mountPath": "/opt/opsmx/config.properties",
                  "subPath": "config.properties"
                },
                {
                  "name": "backend-config-volume",
                  "mountPath": "/opt/opsmx/hibernate.cfg.xml",
                  "subPath": "hibernate.cfg.xml"
                },
                {
                  "name": "frontend-config-volume",
                  "mountPath": "/opt/opsmx/app.config.js",
                  "subPath": "app.config.js"
                },
                {
                  "name": "server-config-volume",
                  "mountPath": "/opt/apache-tomcat/conf/server.xml",
                  "subPath": "server.xml"
                }
              ],
              "readinessProbe": {
                "tcpSocket": {
                  "port": 8090
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10
              },
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "/usr/local/bin/run.sh"
              ]
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "labels": {
        "app": "db-opsmx",
        "heritage": "Helm",
        "release": "release-name",
        "chart": "opsmx-autopilot-2.0.0"
      },
      "name": "db-opsmx"
    },
    "spec": {
      "podManagementPolicy": "OrderedReady",
      "replicas": 1,
      "serviceName": "db-opsmx",
      "selector": {
        "matchLabels": {
          "app": "db-opsmx"
        }
      },
      "template": {
        "metadata": {
          "labels": {
            "app": "db-opsmx",
            "heritage": "Helm",
            "release": "release-name",
            "chart": "opsmx-autopilot-2.0.0"
          }
        },
        "spec": {
          "imagePullSecrets": [
            {
              "name": "autopilot-repo"
            }
          ],
          "containers": [
            {
              "image": "opsmxdev/ubi8-autopilot-db:v1.3.0",
              "imagePullPolicy": "IfNotPresent",
              "name": "db-opsmx",
              "ports": [
                {
                  "containerPort": 5432,
                  "protocol": "TCP"
                }
              ],
              "volumeMounts": [
                {
                  "mountPath": "/var/lib/pgsql-pv",
                  "name": "db-lib-postgresql"
                }
              ],
              "readinessProbe": {
                "tcpSocket": {
                  "port": 5432
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5
              }
            }
          ],
          "securityContext": {
            "fsGroup": 1000
          }
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "creationTimestamp": null,
            "labels": {
              "app": "db-opsmx"
            },
            "name": "db-lib-postgresql"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            },
            "volumeMode": "Filesystem"
          }
        }
      ]
    }
  }
]