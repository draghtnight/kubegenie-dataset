apiVersion: v1
kind: Secret
metadata:
  name: release-name-varnish
  labels:
    chart: varnish-0.1.3
data:
  secret: eHVRNklMeGhBa3JDZXFKNExEOGVUY1hLaG1jY0FBT1gzREVjYUIzRjBNRkhEaXMxUDZ2bzRsWnBya0JQckd0eElUdk5sa2FTcWw4RndMQ0hIZ05ZZHVRRk1NMGFtTmhISXdoYnFkUWljWmtmMEFjUWJiN3NZM0lSQ21qQjJTaUhxdG5hRFhCVGlMY3BLb3Jxb3hsSDRCanIyamc2Q2F4dGFYV242MHR6Z1FOclFzcUVZNWxPT3lnbUgyM0pQZnB5bUhvR0NIbmNLM2tWNnY1ZXpSUUVRMGlwbVR5dDVlbkVRdmZoSTJjc0h4bUJrUnlBSVh6bk83aWQ2cU5TbG02RWlwMVFpM0VmdFhSV2w3ekNGOUdRbVN2RHZlOVV4NXlheVdnSUJTenR1djlkRmxhQVMxNzBTZ2d3TURPUTZSODI3WUdUSjFBeE5PQ3VjaUJYd3c4MDZUOTdNZkpqUUIxZ0VNMW96d2lJUVdoNXRJN1pneDVZNUoxUXN4RHk3bzVZNHJhYzZvdlgycDZwRFVkTlI3N2dvb0xnRXRjMUtzWFRmYWhIMGwzNjcyV0EyelNnY3Jzd1NPUkNMZXBjbG14R29jMnFlR09JclZtcXNlYTVERFlTOWp5RktVZWlzeEtLdmxyTW95S1loNFpwRVRNQ1ZiV21ycTA1VmJyVVE2SFpKb1Bsa1UyeUFKRExBYnd4Mk9PZ005czBMVXpDbnpqRVloNEZsMzhtcUVTQ1dKb01NOGZOMTdTb0hid1dwb2lYemd0dXdSU2JqamRFaU50aEJFTnl3UEprdm5VYWpqMDE5bVh6SGdNR2VZT3ZPVmFoQzR5TzF4b3NaZE9TdVJpTUdDYktnOGVqOUtrZmlESHVQUTZHZHZXV0NFWTB1eTZMcWhYT1JHQU8wZG9kRDlIRFQzc0tMNjB5Nm9HWHB1MzVONFZZTnpqdVZlanJyYmRJaW5obnYwUU81azgxNjFDeUl0TU1BRFFmZmtQV0J2bEFwcVRlQ2s1ZVZZbllnYzRRa1pqajRmb2tZaFN4aFJCYjdua0xiYjhEdEczeVdGSlFUUk1OZjRuQ1JQSFF2NlVKTk4zckxoRUcySFRXcE9xa21IV25uMEpkWDRJa1hHVzViMElZT0NnSDVnMjdGVnJ3c2h4aUNDQ2tsdE5xREVSckJ0SVBZM09pQjgxeUpwVjN5MXM0Z0t1cFZ5WFQxQ2QxT0xjamVacUU1MVI3WDBybnRuWDh5OW9sZU5tbkMxS09DeDNSa2oyWmh4RFlDcXRJZzduSEswVmFXZ3VoTExsdXdFclZtWWpwZndaTVVZYkhwbE5ZSVhaSXlLOWRVVlRSbnB4UktGRUFnUjdyR3pXVg==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-varnish
  labels:
    chart: varnish-0.1.3
data:
  default: |-
    vcl 4.0;
    import std;

    # This is a basic VCL configuration file for varnish.  See the vcl(7)
    # man page for details on VCL syntax and semantics.

    #
    # Default backend definition.  Set this to point to your content
    # server.
    #
    backend cluster {
      .host = "";
      .port = "80";
      .first_byte_timeout = 600s;
      .connect_timeout = 5s;
      .between_bytes_timeout = 20s;}

    #
    # Below is a commented-out copy of the default VCL logic.  If you
    # redefine any of these subroutines, the built-in logic will be
    # appended to your code.
    sub vcl_recv {

      set req.backend_hint = cluster;

      if (req.restarts == 0) {
        if (req.http.x-forwarded-for) {
            set req.http.X-Forwarded-For =
          req.http.X-Forwarded-For + ", " + client.ip;
        } else {
            set req.http.X-Forwarded-For = client.ip;
        }
      }

      if(req.url ~ "^/wp-.*\.php" || req.url ~ "^/xmlrpc\.php$") {
        if(!req.http.User-Agent || req.http.User-Agent ~ "^$") {
          return (synth(403, "Invalid request"));
        }
      }

      if (req.method != "GET" &&
        req.method != "HEAD" &&
        req.method != "PUT" &&
        req.method != "POST" &&
        req.method != "TRACE" &&
        req.method != "OPTIONS" &&
        req.method != "DELETE") {
          /* Non-RFC2616 or CONNECT which is weird. */
          return (pipe);
      }
      if (req.method != "GET" && req.method != "HEAD") {
          /* We only deal with GET and HEAD by default */
          return (pass);
      }
      if (req.http.Authorization || req.http.Cookie) {
          /* Not cacheable by default */
          return (pass);
      }
      return (hash);
    }

    sub vcl_pipe {
      # Note that only the first request to the backend will have
      # X-Forwarded-For set.  If you use X-Forwarded-For and want to
      # have it set for all requests, make sure to have:
      # set bereq.http.connection = "close";
      # here.  It is not set by default as it might break some broken web
      # applications, like IIS with NTLM authentication.
      return (pipe);
    }

    sub vcl_pass {
      return (fetch);
    }

    sub vcl_hash {
      hash_data(req.url);
      if (req.http.host) {
        hash_data(req.http.host);
      } else {
        hash_data(server.ip);
      }

      if (req.http.X-Forwarded-Proto && req.url !~ "(?i)\.(png|gif|jpeg|jpg|ico|gz|tgz|bz2|tbz|mp3|ogg|zip|rar|otf|ttf|eot|woff|svg|pdf)$") {
        hash_data(req.http.X-Forwarded-Proto);
      }

      return (lookup);
    }

    sub vcl_hit {return (deliver);
    }

    sub vcl_miss {
      return (fetch);
    }

    sub vcl_backend_response {
      if (beresp.ttl <= 0s ||
          beresp.http.Set-Cookie ||
          beresp.http.Surrogate-control ~ "no-store" ||
          (!beresp.http.Surrogate-Control &&
            beresp.http.Cache-Control ~ "no-cache|no-store|private") ||
            beresp.http.Vary == "*") {
            /*
            * Mark as "Hit-For-Pass" for the next 2 minutes
            */
            set beresp.ttl = 120s;
            set beresp.uncacheable = true;
      }
      return (deliver);
    }

    sub vcl_deliver {return (deliver);
    }

    sub vcl_backend_error {
      set beresp.http.Content-Type = "text/html; charset=utf-8";
      set beresp.http.Retry-After = "5";
      synthetic( {"
    <?xml version="1.0" encoding="utf-8"?>
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <html>
      <head>
        <title>"} + beresp.status + " " + beresp.reason + {"</title>
      </head>
      <body>
        <h1>Error "} + beresp.status + " " + beresp.reason + {"</h1>
        <p>"} + beresp.reason + {"</p>
        <h3>Guru Meditation:</h3>
        <p>XID: "} + bereq.xid + {"</p>
        <hr>
        <p>Varnish cache server</p>
      </body>
    </html>
        "});
      return (deliver);
    }

    sub vcl_init {
        return (ok);
    }

    sub vcl_fini {
        return (ok);
    }
  wordpress: |-
    vcl 4.0;

    import std;
    import directors;

    # Inspired heavily by https://github.com/mattiasgeniar/varnish-4.0-configuration-templates/blob/master/default.vcl
    #     Based on: https://github.com/mattiasgeniar/varnish-4.0-configuration-templates/blob/master/default.vcl

    # This is a basic VCL configuration file for varnish.  See the vcl(7)
    # man page for details on VCL syntax and semantics.

    #
    # Default backend definition.  Set this to point to your content
    # server.
    #
    backend cluster {
      .host = "";
      .port = "80";
      .first_byte_timeout = 600s;
      .connect_timeout = 5s;
      .between_bytes_timeout = 20s;}

    #
    # Below is a commented-out copy of the default VCL logic.  If you
    # redefine any of these subroutines, the built-in logic will be
    # appended to your code.
    sub vcl_recv {

      set req.backend_hint = cluster;
      set req.http.X-Grace = "none";

      if (req.restarts == 0) {
        if (req.http.x-forwarded-for) {
          set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
        } else {
          set req.http.X-Forwarded-For = client.ip;
        }
      }

      if(req.url ~ "^/wp-.*\.php" || req.url ~ "^/xmlrpc\.php$") {
        if(!req.http.User-Agent || req.http.User-Agent ~ "^$") {
          return (synth(403, "Invalid request"));
        }
      }

      # Normalize the header, remove the port (in case you're testing this on various TCP ports);
      # We store the original Host header in X-Original-Host, if the backend needs it for processing.
      set req.http.X-Original-Host = regsub(req.http.Host, ":[0-9]+", "");set req.http.Host = regsub(req.http.Host, ":[0-9]+", "");# Normalize the query arguments
      set req.url = std.querysort(req.url);

      # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
      if (req.http.Upgrade ~ "(?i)websocket") {
        return (pipe);
      }

      # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.
      if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
      }

      if (req.http.Authorization) {
        # Not cacheable by default
        return (pass);
      }

      if (req.url ~ "\?(utm_(campaign|medium|source|term)|adParams|client|cx|eid|fbid|feed|ref(id|src)?|v(er|iew))=") {
        set req.url = regsub(req.url, "\?.*$", "");
      }

      if (req.url ~ "wp-(login|admin)" || req.url ~ "preview=true" || req.url ~ "xmlrpc.php" ) {
        return(pass);
      }

      if (req.url ~ "apache/status" ) {
        return(pass);
      }


      # Some generic URL manipulation, useful for all templates that follow
      # First remove the Google Analytics added parameters, useless for our backend
      if (req.url ~ "(\?|&)(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=") {
        set req.url = regsuball(req.url, "&(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "");
        set req.url = regsuball(req.url, "\?(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "?");
        set req.url = regsub(req.url, "\?&", "?");
        set req.url = regsub(req.url, "\?$", "");
      }

      # Strip hash, server doesn't need it.
      if (req.url ~ "\#") {
        set req.url = regsub(req.url, "\#.*$", "");
      }

      # Strip a trailing ? if it exists
      if (req.url ~ "\?$") {
        set req.url = regsub(req.url, "\?$", "");
      }

      # Remove any Google Analytics based cookies
      set req.http.Cookie = regsuball(req.http.Cookie, "__utm.=[^;]+(; )?", "");
      set req.http.Cookie = regsuball(req.http.Cookie, "_ga=[^;]+(; )?", "");
      set req.http.Cookie = regsuball(req.http.Cookie, "_gat=[^;]+(; )?", "");
      set req.http.Cookie = regsuball(req.http.Cookie, "utmctr=[^;]+(; )?", "");
      set req.http.Cookie = regsuball(req.http.Cookie, "utmcmd.=[^;]+(; )?", "");
      set req.http.Cookie = regsuball(req.http.Cookie, "utmccn.=[^;]+(; )?", "");

      # Remove DoubleClick offensive cookies
      set req.http.Cookie = regsuball(req.http.Cookie, "__gads=[^;]+(; )?", "");

      # Remove the Quant Capital cookies (added by some plugin, all __qca)
      set req.http.Cookie = regsuball(req.http.Cookie, "__qc.=[^;]+(; )?", "");

      # Remove the AddThis cookies
      set req.http.Cookie = regsuball(req.http.Cookie, "__atuv.=[^;]+(; )?", "");

      # Remove a ";" prefix in the cookie if present
      set req.http.Cookie = regsuball(req.http.Cookie, "^;\s*", "");

      # Are there cookies left with only spaces or that are empty?
      if (req.http.cookie ~ "^\s*$") {
        unset req.http.cookie;
      }

      # Authenticated users can bypass the cache
      if (req.http.cookie) {
        if (req.http.cookie ~ "(wordpress_|wp-settings-)") {
          if (req.http.Cache-Control ~ "no-cache" && req.restarts == 0) {
            return (purge);
          } else {
            return(pass);
          }
        } else {
          unset req.http.cookie;
        }
      }

      # Remove all cookies for static files
      # A valid discussion could be held on this line: do you really need to cache static files that don't cause load? Only if you have memory left.
      # Sure, there's disk I/O, but chances are your OS will already have these files in their buffers (thus memory).
      # Before you blindly enable this, have a read here: https://ma.ttias.be/stop-caching-static-files/
      if (req.url ~ "^[^?]*\.(bmp|bz2|css|doc|eot|flv|gif|gz|ico|jpeg|jpg|js|less|pdf|png|rtf|swf|txt|woff|xml)(\?.*)?$") {
        unset req.http.Cookie;
        return (hash);
      }


      if (req.method != "GET" &&
        req.method != "HEAD" &&
        req.method != "PUT" &&
        req.method != "POST" &&
        req.method != "TRACE" &&
        req.method != "OPTIONS" &&
        req.method != "DELETE") {
          /* Non-RFC2616 or CONNECT which is weird. */
          return (pipe);
      }
      if (req.method != "GET" && req.method != "HEAD") {
          /* We only deal with GET and HEAD by default */
          return (pass);
      }
      if (req.http.Authorization || req.http.Cookie) {
          /* Not cacheable by default */
          return (pass);
      }

      return (hash);
    }

    sub vcl_purge {
      if (req.method != "PURGE") {
        # restart request
        set req.http.X-Purge = "Yes";
        return(restart);
      }
    }

    sub vcl_pipe {
      # Note that only the first request to the backend will have
      # X-Forwarded-For set.  If you use X-Forwarded-For and want to
      # have it set for all requests, make sure to have:
      # set bereq.http.connection = "close";
      # here.  It is not set by default as it might break some broken web
      # applications, like IIS with NTLM authentication.

      # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
      if (req.http.upgrade) {
        set bereq.http.upgrade = req.http.upgrade;
      }

      return (pipe);
    }

    sub vcl_pass {
      return (fetch);
    }

    sub vcl_hash {
      hash_data(req.url);

      if (req.http.host) {
        hash_data(req.http.host);
      } else {
        hash_data(server.ip);
      }

      if (req.http.X-Forwarded-Proto && req.url !~ "(?i)\.(png|gif|jpeg|jpg|ico|gz|tgz|bz2|tbz|mp3|ogg|zip|rar|otf|ttf|eot|woff|svg|pdf)$") {
        hash_data(req.http.X-Forwarded-Proto);
      }

      return (lookup);
    }

    sub vcl_hit {

      if (obj.ttl >= 0s) {
        # normal hit
        return (deliver);
      }

      # We have no fresh fish. Lets look at the stale ones.
      if (std.healthy(req.backend_hint)) {
        # Backend is healthy. Limit age to 10s.
        if (obj.ttl + 600s > 0s) {
          set req.http.X-Grace = "normal(limited)";
          return (deliver);
        } else {
          # No candidate for grace. Fetch a fresh object.
          return(fetch);
       }
      } else {
        # backend is sick - use full grace
        if (obj.ttl + obj.grace > 0s) {
          set req.http.X-Grace = "full";
          return (deliver);
        } else {
         # no graced object.
         return (fetch);
        }
      }

      return (deliver);
    }

    sub vcl_miss {
      return (fetch);
    }


    sub vcl_backend_response {

      # This code snippet tells varnish to keep objects VARNISH_GRACE_UNHEALTHY hour in cache past their expiry time
      set beresp.grace = 48h;

      if (bereq.method == "GET" || bereq.method == "HEAD") {
        # It's only possible to cache these types of requests
        set beresp.ttl = 600s;

        if (bereq.url !~ "(wp-(login|admin)|login)") {
          unset beresp.http.Set-Cookie;
          unset beresp.http.Vary;
          unset beresp.http.Expires;
          unset beresp.http.Cache-Control;
          unset beresp.http.Last-Modified;
          unset beresp.http.Pragma;

          set beresp.ttl = 300s;

        }
      } else {
        set beresp.ttl = 0s;
        return (deliver);
      }

      # Do not cache rogue empty responses
      if(beresp.http.Content-Length == "0" && beresp.status < 300 ) {
        return (abandon);
      }


      # Enable cache for all static files
      # The same argument as the static caches from above: monitor your cache size, if you get data nuked out of it, consider giving up the static file cache.
      # Before you blindly enable this, have a read here: https://ma.ttias.be/stop-caching-static-files/
      if (bereq.url ~ "^[^?]*\.(bmp|bz2|css|doc|eot|flv|gif|gz|ico|jpeg|jpg|js|less|mp[34]|pdf|png|rar|rtf|swf|tar|tgz|txt|wav|woff|xml|zip)(\?.*)?$") {
        set beresp.ttl = 1d;
        unset beresp.http.set-cookie;
      }

      # Cache errors for a short time, otherwise they can overwhelm the origin
      if (beresp.ttl > 0s && beresp.status > 400) {
        set beresp.ttl = 30s;
      }

      if (beresp.ttl <= 0s ||
          beresp.http.Set-Cookie ||
          beresp.http.Surrogate-control ~ "no-store" ||
          (!beresp.http.Surrogate-Control &&
            beresp.http.Cache-Control ~ "no-cache|no-store|private") ||
          beresp.http.Vary == "*") {
           /*
            * Mark as "Hit-For-Pass" for the next 2 minutes
            */
            set beresp.ttl = 120s;
            set beresp.uncacheable = true;
      }
      return (deliver);
    }

    sub vcl_deliver {
      set resp.http.X-Grace = req.http.X-Grace;
      set resp.http.X-Server = "release-name-varnish";
      if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
        set resp.http.X-Cache-Hits = obj.hits;
      } else {
        set resp.http.X-Cache = "MISS";
      }

      # Remove some headers: PHP version
      unset resp.http.X-Powered-By;

      # Remove some headers: Apache version & OS
      unset resp.http.Server;
      unset resp.http.X-Drupal-Cache;
      unset resp.http.X-Varnish;
      unset resp.http.Via;
      unset resp.http.Link;
      unset resp.http.X-Generator;

      return (deliver);
    }

    sub vcl_backend_error {
      set beresp.http.Content-Type = "text/html; charset=utf-8";
      set beresp.http.Retry-After = "5";
      synthetic({"
    <?xml version="1.0" encoding="utf-8"?>
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <html>
      <head>
        <title>"} + beresp.status + " " + beresp.reason + {"</title>
      </head>
      <body>
        <h1>Error "} + beresp.status + " " + beresp.reason + {"</h1>
        <p>"} + beresp.reason + {"</p>
        <h3>Guru Meditation:</h3>
        <p>XID: "} + bereq.xid + {"</p>
        <hr>
        <p>Varnish cache server</p>
      </body>
    </html>
        "});
      return (deliver);
    }

    sub vcl_fini {
        return (ok);
    }
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-varnish
  labels:
    chart: varnish-0.1.3
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: null
      protocol: TCP
      name: varnish
  selector:
    app: release-name-varnish
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-varnish
  labels:
    chart: varnish-0.1.3
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: release-name-varnish
      annotations:
        checksum/config: 823ef46659bdd3c6d6ce82ddb8daa531551c6b61c14fd1fdfe666d95c5c5bb2f
        checksum/secret: c68c18780791c2f8f8152f962cc362cf478dbbb69f14725a4eef34a5a23752b4
    spec:
      containers:
        - name: varnish
          image: cloudposse/varnish:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: VARNISH_SECRET
              valueFrom:
                secretKeyRef:
                  name: release-name-varnish
                  key: secret
            - name: VARNISH_THREAD_POOLS
              value: "25"
            - name: VARNISH_THREAD_POOL_MIN
              value: "100"
            - name: VARNISH_CLI_TIMEOUT
              value: "86400"
            - name: VARNISH_STORAGE
              value: 1G
            - name: VARNISH_BACKEND_CONNECT_TIMEOUT
              value: 5s
            - name: VARNISH_BACKEND_BETWEEN_BYTES_TIMEOUT
              value: 20s
          ports:
            - containerPort: 80
          livenessProbe:
            tcpSocket:
              port: 80
          readinessProbe:
            tcpSocket:
              port: 80
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /etc/varnish/configs
              name: config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: release-name-varnish
            items:
              - key: default
                path: default.vcl
