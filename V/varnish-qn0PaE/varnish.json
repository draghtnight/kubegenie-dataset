[
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-varnish",
      "labels": {
        "chart": "varnish-0.1.3"
      }
    },
    "data": {
      "secret": "eHVRNklMeGhBa3JDZXFKNExEOGVUY1hLaG1jY0FBT1gzREVjYUIzRjBNRkhEaXMxUDZ2bzRsWnBya0JQckd0eElUdk5sa2FTcWw4RndMQ0hIZ05ZZHVRRk1NMGFtTmhISXdoYnFkUWljWmtmMEFjUWJiN3NZM0lSQ21qQjJTaUhxdG5hRFhCVGlMY3BLb3Jxb3hsSDRCanIyamc2Q2F4dGFYV242MHR6Z1FOclFzcUVZNWxPT3lnbUgyM0pQZnB5bUhvR0NIbmNLM2tWNnY1ZXpSUUVRMGlwbVR5dDVlbkVRdmZoSTJjc0h4bUJrUnlBSVh6bk83aWQ2cU5TbG02RWlwMVFpM0VmdFhSV2w3ekNGOUdRbVN2RHZlOVV4NXlheVdnSUJTenR1djlkRmxhQVMxNzBTZ2d3TURPUTZSODI3WUdUSjFBeE5PQ3VjaUJYd3c4MDZUOTdNZkpqUUIxZ0VNMW96d2lJUVdoNXRJN1pneDVZNUoxUXN4RHk3bzVZNHJhYzZvdlgycDZwRFVkTlI3N2dvb0xnRXRjMUtzWFRmYWhIMGwzNjcyV0EyelNnY3Jzd1NPUkNMZXBjbG14R29jMnFlR09JclZtcXNlYTVERFlTOWp5RktVZWlzeEtLdmxyTW95S1loNFpwRVRNQ1ZiV21ycTA1VmJyVVE2SFpKb1Bsa1UyeUFKRExBYnd4Mk9PZ005czBMVXpDbnpqRVloNEZsMzhtcUVTQ1dKb01NOGZOMTdTb0hid1dwb2lYemd0dXdSU2JqamRFaU50aEJFTnl3UEprdm5VYWpqMDE5bVh6SGdNR2VZT3ZPVmFoQzR5TzF4b3NaZE9TdVJpTUdDYktnOGVqOUtrZmlESHVQUTZHZHZXV0NFWTB1eTZMcWhYT1JHQU8wZG9kRDlIRFQzc0tMNjB5Nm9HWHB1MzVONFZZTnpqdVZlanJyYmRJaW5obnYwUU81azgxNjFDeUl0TU1BRFFmZmtQV0J2bEFwcVRlQ2s1ZVZZbllnYzRRa1pqajRmb2tZaFN4aFJCYjdua0xiYjhEdEczeVdGSlFUUk1OZjRuQ1JQSFF2NlVKTk4zckxoRUcySFRXcE9xa21IV25uMEpkWDRJa1hHVzViMElZT0NnSDVnMjdGVnJ3c2h4aUNDQ2tsdE5xREVSckJ0SVBZM09pQjgxeUpwVjN5MXM0Z0t1cFZ5WFQxQ2QxT0xjamVacUU1MVI3WDBybnRuWDh5OW9sZU5tbkMxS09DeDNSa2oyWmh4RFlDcXRJZzduSEswVmFXZ3VoTExsdXdFclZtWWpwZndaTVVZYkhwbE5ZSVhaSXlLOWRVVlRSbnB4UktGRUFnUjdyR3pXVg=="
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-varnish",
      "labels": {
        "chart": "varnish-0.1.3"
      }
    },
    "data": {
      "default": "vcl 4.0;\nimport std;\n\n# This is a basic VCL configuration file for varnish.  See the vcl(7)\n# man page for details on VCL syntax and semantics.\n\n#\n# Default backend definition.  Set this to point to your content\n# server.\n#\nbackend cluster {\n  .host = \"\";\n  .port = \"80\";\n  .first_byte_timeout = 600s;\n  .connect_timeout = 5s;\n  .between_bytes_timeout = 20s;}\n\n#\n# Below is a commented-out copy of the default VCL logic.  If you\n# redefine any of these subroutines, the built-in logic will be\n# appended to your code.\nsub vcl_recv {\n\n  set req.backend_hint = cluster;\n\n  if (req.restarts == 0) {\n    if (req.http.x-forwarded-for) {\n        set req.http.X-Forwarded-For =\n      req.http.X-Forwarded-For + \", \" + client.ip;\n    } else {\n        set req.http.X-Forwarded-For = client.ip;\n    }\n  }\n\n  if(req.url ~ \"^/wp-.*\\.php\" || req.url ~ \"^/xmlrpc\\.php$\") {\n    if(!req.http.User-Agent || req.http.User-Agent ~ \"^$\") {\n      return (synth(403, \"Invalid request\"));\n    }\n  }\n\n  if (req.method != \"GET\" &&\n    req.method != \"HEAD\" &&\n    req.method != \"PUT\" &&\n    req.method != \"POST\" &&\n    req.method != \"TRACE\" &&\n    req.method != \"OPTIONS\" &&\n    req.method != \"DELETE\") {\n      /* Non-RFC2616 or CONNECT which is weird. */\n      return (pipe);\n  }\n  if (req.method != \"GET\" && req.method != \"HEAD\") {\n      /* We only deal with GET and HEAD by default */\n      return (pass);\n  }\n  if (req.http.Authorization || req.http.Cookie) {\n      /* Not cacheable by default */\n      return (pass);\n  }\n  return (hash);\n}\n\nsub vcl_pipe {\n  # Note that only the first request to the backend will have\n  # X-Forwarded-For set.  If you use X-Forwarded-For and want to\n  # have it set for all requests, make sure to have:\n  # set bereq.http.connection = \"close\";\n  # here.  It is not set by default as it might break some broken web\n  # applications, like IIS with NTLM authentication.\n  return (pipe);\n}\n\nsub vcl_pass {\n  return (fetch);\n}\n\nsub vcl_hash {\n  hash_data(req.url);\n  if (req.http.host) {\n    hash_data(req.http.host);\n  } else {\n    hash_data(server.ip);\n  }\n\n  if (req.http.X-Forwarded-Proto && req.url !~ \"(?i)\\.(png|gif|jpeg|jpg|ico|gz|tgz|bz2|tbz|mp3|ogg|zip|rar|otf|ttf|eot|woff|svg|pdf)$\") {\n    hash_data(req.http.X-Forwarded-Proto);\n  }\n\n  return (lookup);\n}\n\nsub vcl_hit {return (deliver);\n}\n\nsub vcl_miss {\n  return (fetch);\n}\n\nsub vcl_backend_response {\n  if (beresp.ttl <= 0s ||\n      beresp.http.Set-Cookie ||\n      beresp.http.Surrogate-control ~ \"no-store\" ||\n      (!beresp.http.Surrogate-Control &&\n        beresp.http.Cache-Control ~ \"no-cache|no-store|private\") ||\n        beresp.http.Vary == \"*\") {\n        /*\n        * Mark as \"Hit-For-Pass\" for the next 2 minutes\n        */\n        set beresp.ttl = 120s;\n        set beresp.uncacheable = true;\n  }\n  return (deliver);\n}\n\nsub vcl_deliver {return (deliver);\n}\n\nsub vcl_backend_error {\n  set beresp.http.Content-Type = \"text/html; charset=utf-8\";\n  set beresp.http.Retry-After = \"5\";\n  synthetic( {\"\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html>\n  <head>\n    <title>\"} + beresp.status + \" \" + beresp.reason + {\"</title>\n  </head>\n  <body>\n    <h1>Error \"} + beresp.status + \" \" + beresp.reason + {\"</h1>\n    <p>\"} + beresp.reason + {\"</p>\n    <h3>Guru Meditation:</h3>\n    <p>XID: \"} + bereq.xid + {\"</p>\n    <hr>\n    <p>Varnish cache server</p>\n  </body>\n</html>\n    \"});\n  return (deliver);\n}\n\nsub vcl_init {\n    return (ok);\n}\n\nsub vcl_fini {\n    return (ok);\n}",
      "wordpress": "vcl 4.0;\n\nimport std;\nimport directors;\n\n# Inspired heavily by https://github.com/mattiasgeniar/varnish-4.0-configuration-templates/blob/master/default.vcl\n#     Based on: https://github.com/mattiasgeniar/varnish-4.0-configuration-templates/blob/master/default.vcl\n\n# This is a basic VCL configuration file for varnish.  See the vcl(7)\n# man page for details on VCL syntax and semantics.\n\n#\n# Default backend definition.  Set this to point to your content\n# server.\n#\nbackend cluster {\n  .host = \"\";\n  .port = \"80\";\n  .first_byte_timeout = 600s;\n  .connect_timeout = 5s;\n  .between_bytes_timeout = 20s;}\n\n#\n# Below is a commented-out copy of the default VCL logic.  If you\n# redefine any of these subroutines, the built-in logic will be\n# appended to your code.\nsub vcl_recv {\n\n  set req.backend_hint = cluster;\n  set req.http.X-Grace = \"none\";\n\n  if (req.restarts == 0) {\n    if (req.http.x-forwarded-for) {\n      set req.http.X-Forwarded-For = req.http.X-Forwarded-For + \", \" + client.ip;\n    } else {\n      set req.http.X-Forwarded-For = client.ip;\n    }\n  }\n\n  if(req.url ~ \"^/wp-.*\\.php\" || req.url ~ \"^/xmlrpc\\.php$\") {\n    if(!req.http.User-Agent || req.http.User-Agent ~ \"^$\") {\n      return (synth(403, \"Invalid request\"));\n    }\n  }\n\n  # Normalize the header, remove the port (in case you're testing this on various TCP ports);\n  # We store the original Host header in X-Original-Host, if the backend needs it for processing.\n  set req.http.X-Original-Host = regsub(req.http.Host, \":[0-9]+\", \"\");set req.http.Host = regsub(req.http.Host, \":[0-9]+\", \"\");# Normalize the query arguments\n  set req.url = std.querysort(req.url);\n\n  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)\n  if (req.http.Upgrade ~ \"(?i)websocket\") {\n    return (pipe);\n  }\n\n  # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.\n  if (req.method != \"GET\" && req.method != \"HEAD\") {\n    return (pass);\n  }\n\n  if (req.http.Authorization) {\n    # Not cacheable by default\n    return (pass);\n  }\n\n  if (req.url ~ \"\\?(utm_(campaign|medium|source|term)|adParams|client|cx|eid|fbid|feed|ref(id|src)?|v(er|iew))=\") {\n    set req.url = regsub(req.url, \"\\?.*$\", \"\");\n  }\n\n  if (req.url ~ \"wp-(login|admin)\" || req.url ~ \"preview=true\" || req.url ~ \"xmlrpc.php\" ) {\n    return(pass);\n  }\n\n  if (req.url ~ \"apache/status\" ) {\n    return(pass);\n  }\n\n\n  # Some generic URL manipulation, useful for all templates that follow\n  # First remove the Google Analytics added parameters, useless for our backend\n  if (req.url ~ \"(\\?|&)(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=\") {\n    set req.url = regsuball(req.url, \"&(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\\-\\.%25]+)\", \"\");\n    set req.url = regsuball(req.url, \"\\?(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\\-\\.%25]+)\", \"?\");\n    set req.url = regsub(req.url, \"\\?&\", \"?\");\n    set req.url = regsub(req.url, \"\\?$\", \"\");\n  }\n\n  # Strip hash, server doesn't need it.\n  if (req.url ~ \"\\#\") {\n    set req.url = regsub(req.url, \"\\#.*$\", \"\");\n  }\n\n  # Strip a trailing ? if it exists\n  if (req.url ~ \"\\?$\") {\n    set req.url = regsub(req.url, \"\\?$\", \"\");\n  }\n\n  # Remove any Google Analytics based cookies\n  set req.http.Cookie = regsuball(req.http.Cookie, \"__utm.=[^;]+(; )?\", \"\");\n  set req.http.Cookie = regsuball(req.http.Cookie, \"_ga=[^;]+(; )?\", \"\");\n  set req.http.Cookie = regsuball(req.http.Cookie, \"_gat=[^;]+(; )?\", \"\");\n  set req.http.Cookie = regsuball(req.http.Cookie, \"utmctr=[^;]+(; )?\", \"\");\n  set req.http.Cookie = regsuball(req.http.Cookie, \"utmcmd.=[^;]+(; )?\", \"\");\n  set req.http.Cookie = regsuball(req.http.Cookie, \"utmccn.=[^;]+(; )?\", \"\");\n\n  # Remove DoubleClick offensive cookies\n  set req.http.Cookie = regsuball(req.http.Cookie, \"__gads=[^;]+(; )?\", \"\");\n\n  # Remove the Quant Capital cookies (added by some plugin, all __qca)\n  set req.http.Cookie = regsuball(req.http.Cookie, \"__qc.=[^;]+(; )?\", \"\");\n\n  # Remove the AddThis cookies\n  set req.http.Cookie = regsuball(req.http.Cookie, \"__atuv.=[^;]+(; )?\", \"\");\n\n  # Remove a \";\" prefix in the cookie if present\n  set req.http.Cookie = regsuball(req.http.Cookie, \"^;\\s*\", \"\");\n\n  # Are there cookies left with only spaces or that are empty?\n  if (req.http.cookie ~ \"^\\s*$\") {\n    unset req.http.cookie;\n  }\n\n  # Authenticated users can bypass the cache\n  if (req.http.cookie) {\n    if (req.http.cookie ~ \"(wordpress_|wp-settings-)\") {\n      if (req.http.Cache-Control ~ \"no-cache\" && req.restarts == 0) {\n        return (purge);\n      } else {\n        return(pass);\n      }\n    } else {\n      unset req.http.cookie;\n    }\n  }\n\n  # Remove all cookies for static files\n  # A valid discussion could be held on this line: do you really need to cache static files that don't cause load? Only if you have memory left.\n  # Sure, there's disk I/O, but chances are your OS will already have these files in their buffers (thus memory).\n  # Before you blindly enable this, have a read here: https://ma.ttias.be/stop-caching-static-files/\n  if (req.url ~ \"^[^?]*\\.(bmp|bz2|css|doc|eot|flv|gif|gz|ico|jpeg|jpg|js|less|pdf|png|rtf|swf|txt|woff|xml)(\\?.*)?$\") {\n    unset req.http.Cookie;\n    return (hash);\n  }\n\n\n  if (req.method != \"GET\" &&\n    req.method != \"HEAD\" &&\n    req.method != \"PUT\" &&\n    req.method != \"POST\" &&\n    req.method != \"TRACE\" &&\n    req.method != \"OPTIONS\" &&\n    req.method != \"DELETE\") {\n      /* Non-RFC2616 or CONNECT which is weird. */\n      return (pipe);\n  }\n  if (req.method != \"GET\" && req.method != \"HEAD\") {\n      /* We only deal with GET and HEAD by default */\n      return (pass);\n  }\n  if (req.http.Authorization || req.http.Cookie) {\n      /* Not cacheable by default */\n      return (pass);\n  }\n\n  return (hash);\n}\n\nsub vcl_purge {\n  if (req.method != \"PURGE\") {\n    # restart request\n    set req.http.X-Purge = \"Yes\";\n    return(restart);\n  }\n}\n\nsub vcl_pipe {\n  # Note that only the first request to the backend will have\n  # X-Forwarded-For set.  If you use X-Forwarded-For and want to\n  # have it set for all requests, make sure to have:\n  # set bereq.http.connection = \"close\";\n  # here.  It is not set by default as it might break some broken web\n  # applications, like IIS with NTLM authentication.\n\n  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)\n  if (req.http.upgrade) {\n    set bereq.http.upgrade = req.http.upgrade;\n  }\n\n  return (pipe);\n}\n\nsub vcl_pass {\n  return (fetch);\n}\n\nsub vcl_hash {\n  hash_data(req.url);\n\n  if (req.http.host) {\n    hash_data(req.http.host);\n  } else {\n    hash_data(server.ip);\n  }\n\n  if (req.http.X-Forwarded-Proto && req.url !~ \"(?i)\\.(png|gif|jpeg|jpg|ico|gz|tgz|bz2|tbz|mp3|ogg|zip|rar|otf|ttf|eot|woff|svg|pdf)$\") {\n    hash_data(req.http.X-Forwarded-Proto);\n  }\n\n  return (lookup);\n}\n\nsub vcl_hit {\n\n  if (obj.ttl >= 0s) {\n    # normal hit\n    return (deliver);\n  }\n\n  # We have no fresh fish. Lets look at the stale ones.\n  if (std.healthy(req.backend_hint)) {\n    # Backend is healthy. Limit age to 10s.\n    if (obj.ttl + 600s > 0s) {\n      set req.http.X-Grace = \"normal(limited)\";\n      return (deliver);\n    } else {\n      # No candidate for grace. Fetch a fresh object.\n      return(fetch);\n   }\n  } else {\n    # backend is sick - use full grace\n    if (obj.ttl + obj.grace > 0s) {\n      set req.http.X-Grace = \"full\";\n      return (deliver);\n    } else {\n     # no graced object.\n     return (fetch);\n    }\n  }\n\n  return (deliver);\n}\n\nsub vcl_miss {\n  return (fetch);\n}\n\n\nsub vcl_backend_response {\n\n  # This code snippet tells varnish to keep objects VARNISH_GRACE_UNHEALTHY hour in cache past their expiry time\n  set beresp.grace = 48h;\n\n  if (bereq.method == \"GET\" || bereq.method == \"HEAD\") {\n    # It's only possible to cache these types of requests\n    set beresp.ttl = 600s;\n\n    if (bereq.url !~ \"(wp-(login|admin)|login)\") {\n      unset beresp.http.Set-Cookie;\n      unset beresp.http.Vary;\n      unset beresp.http.Expires;\n      unset beresp.http.Cache-Control;\n      unset beresp.http.Last-Modified;\n      unset beresp.http.Pragma;\n\n      set beresp.ttl = 300s;\n\n    }\n  } else {\n    set beresp.ttl = 0s;\n    return (deliver);\n  }\n\n  # Do not cache rogue empty responses\n  if(beresp.http.Content-Length == \"0\" && beresp.status < 300 ) {\n    return (abandon);\n  }\n\n\n  # Enable cache for all static files\n  # The same argument as the static caches from above: monitor your cache size, if you get data nuked out of it, consider giving up the static file cache.\n  # Before you blindly enable this, have a read here: https://ma.ttias.be/stop-caching-static-files/\n  if (bereq.url ~ \"^[^?]*\\.(bmp|bz2|css|doc|eot|flv|gif|gz|ico|jpeg|jpg|js|less|mp[34]|pdf|png|rar|rtf|swf|tar|tgz|txt|wav|woff|xml|zip)(\\?.*)?$\") {\n    set beresp.ttl = 1d;\n    unset beresp.http.set-cookie;\n  }\n\n  # Cache errors for a short time, otherwise they can overwhelm the origin\n  if (beresp.ttl > 0s && beresp.status > 400) {\n    set beresp.ttl = 30s;\n  }\n\n  if (beresp.ttl <= 0s ||\n      beresp.http.Set-Cookie ||\n      beresp.http.Surrogate-control ~ \"no-store\" ||\n      (!beresp.http.Surrogate-Control &&\n        beresp.http.Cache-Control ~ \"no-cache|no-store|private\") ||\n      beresp.http.Vary == \"*\") {\n       /*\n        * Mark as \"Hit-For-Pass\" for the next 2 minutes\n        */\n        set beresp.ttl = 120s;\n        set beresp.uncacheable = true;\n  }\n  return (deliver);\n}\n\nsub vcl_deliver {\n  set resp.http.X-Grace = req.http.X-Grace;\n  set resp.http.X-Server = \"release-name-varnish\";\n  if (obj.hits > 0) {\n    set resp.http.X-Cache = \"HIT\";\n    set resp.http.X-Cache-Hits = obj.hits;\n  } else {\n    set resp.http.X-Cache = \"MISS\";\n  }\n\n  # Remove some headers: PHP version\n  unset resp.http.X-Powered-By;\n\n  # Remove some headers: Apache version & OS\n  unset resp.http.Server;\n  unset resp.http.X-Drupal-Cache;\n  unset resp.http.X-Varnish;\n  unset resp.http.Via;\n  unset resp.http.Link;\n  unset resp.http.X-Generator;\n\n  return (deliver);\n}\n\nsub vcl_backend_error {\n  set beresp.http.Content-Type = \"text/html; charset=utf-8\";\n  set beresp.http.Retry-After = \"5\";\n  synthetic({\"\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html>\n  <head>\n    <title>\"} + beresp.status + \" \" + beresp.reason + {\"</title>\n  </head>\n  <body>\n    <h1>Error \"} + beresp.status + \" \" + beresp.reason + {\"</h1>\n    <p>\"} + beresp.reason + {\"</p>\n    <h3>Guru Meditation:</h3>\n    <p>XID: \"} + bereq.xid + {\"</p>\n    <hr>\n    <p>Varnish cache server</p>\n  </body>\n</html>\n    \"});\n  return (deliver);\n}\n\nsub vcl_fini {\n    return (ok);\n}"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-varnish",
      "labels": {
        "chart": "varnish-0.1.3"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 80,
          "targetPort": null,
          "protocol": "TCP",
          "name": "varnish"
        }
      ],
      "selector": {
        "app": "release-name-varnish"
      }
    }
  },
  {
    "apiVersion": "extensions/v1beta1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-varnish",
      "labels": {
        "chart": "varnish-0.1.3"
      }
    },
    "spec": {
      "replicas": 1,
      "template": {
        "metadata": {
          "labels": {
            "app": "release-name-varnish"
          },
          "annotations": {
            "checksum/config": "823ef46659bdd3c6d6ce82ddb8daa531551c6b61c14fd1fdfe666d95c5c5bb2f",
            "checksum/secret": "c68c18780791c2f8f8152f962cc362cf478dbbb69f14725a4eef34a5a23752b4"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "varnish",
              "image": "cloudposse/varnish:latest",
              "imagePullPolicy": "IfNotPresent",
              "env": [
                {
                  "name": "VARNISH_SECRET",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-varnish",
                      "key": "secret"
                    }
                  }
                },
                {
                  "name": "VARNISH_THREAD_POOLS",
                  "value": "25"
                },
                {
                  "name": "VARNISH_THREAD_POOL_MIN",
                  "value": "100"
                },
                {
                  "name": "VARNISH_CLI_TIMEOUT",
                  "value": "86400"
                },
                {
                  "name": "VARNISH_STORAGE",
                  "value": "1G"
                },
                {
                  "name": "VARNISH_BACKEND_CONNECT_TIMEOUT",
                  "value": "5s"
                },
                {
                  "name": "VARNISH_BACKEND_BETWEEN_BYTES_TIMEOUT",
                  "value": "20s"
                }
              ],
              "ports": [
                {
                  "containerPort": 80
                }
              ],
              "livenessProbe": {
                "tcpSocket": {
                  "port": 80
                }
              },
              "readinessProbe": {
                "tcpSocket": {
                  "port": 80
                }
              },
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "128Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                }
              },
              "volumeMounts": [
                {
                  "mountPath": "/etc/varnish/configs",
                  "name": "config",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-varnish",
                "items": [
                  {
                    "key": "default",
                    "path": "default.vcl"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  }
]