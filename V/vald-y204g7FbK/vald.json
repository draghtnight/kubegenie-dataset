[
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "vald-agent-ngt",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "agent"
      }
    },
    "spec": {
      "maxUnavailable": 1,
      "selector": {
        "matchLabels": {
          "app": "vald-agent-ngt"
        }
      }
    }
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "vald-discoverer",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "discoverer"
      }
    },
    "spec": {
      "maxUnavailable": "50%",
      "selector": {
        "matchLabels": {
          "app": "vald-discoverer"
        }
      }
    }
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "vald-lb-gateway",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "gateway-lb"
      }
    },
    "spec": {
      "maxUnavailable": "50%",
      "selector": {
        "matchLabels": {
          "app": "vald-lb-gateway"
        }
      }
    }
  },
  {
    "apiVersion": "policy/v1",
    "kind": "PodDisruptionBudget",
    "metadata": {
      "name": "vald-manager-index",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "manager-index"
      }
    },
    "spec": {
      "maxUnavailable": "50%",
      "selector": {
        "matchLabels": {
          "app": "vald-manager-index"
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
      "name": "vald",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "discoverer"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "vald-agent-ngt-config",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "agent"
      }
    },
    "data": {
      "config.yaml": "---\nversion: v0.0.0\ntime_zone: UTC\nlogging:\n  format: raw\n  level: debug\n  logger: glg\nserver_config:\n  servers:\n    - name: grpc\n      host: 0.0.0.0\n      port: 8081\n      grpc:\n        bidirectional_stream_concurrency: 20\n        connection_timeout: \"\"\n        enable_reflection: true\n        header_table_size: 0\n        initial_conn_window_size: 0\n        initial_window_size: 0\n        interceptors:\n        - RecoverInterceptor\n        keepalive:\n          max_conn_age: \"\"\n          max_conn_age_grace: \"\"\n          max_conn_idle: \"\"\n          min_time: 60s\n          permit_without_stream: true\n          time: 120s\n          timeout: 30s\n        max_header_list_size: 0\n        max_receive_message_size: 0\n        max_send_message_size: 0\n        read_buffer_size: 0\n        write_buffer_size: 0\n      mode: GRPC\n      network: tcp\n      probe_wait_time: 3s\n      restart: true\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n  health_check_servers:\n    - name: liveness\n      host: 0.0.0.0\n      port: 3000\n      http:\n        handler_timeout: \"\"\n        idle_timeout: \"\"\n        read_header_timeout: \"\"\n        read_timeout: \"\"\n        shutdown_duration: 5s\n        write_timeout: \"\"\n      mode: \"\"\n      network: tcp\n      probe_wait_time: 3s\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n    - name: readiness\n      host: 0.0.0.0\n      port: 3001\n      http:\n        handler_timeout: \"\"\n        idle_timeout: \"\"\n        read_header_timeout: \"\"\n        read_timeout: \"\"\n        shutdown_duration: 0s\n        write_timeout: \"\"\n      mode: \"\"\n      network: tcp\n      probe_wait_time: 3s\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n  metrics_servers:\n  startup_strategy:\n    - liveness\n    - grpc\n    - readiness\n  full_shutdown_duration: 600s\n  tls:\n    ca: /path/to/ca\n    cert: /path/to/cert\n    enabled: false\n    insecure_skip_verify: false\n    key: /path/to/key\nobservability:\n  enabled: false\n  collector:\n    duration: 5s\n    metrics:\n      enable_cgo: true\n      enable_goroutine: true\n      enable_memory: true\n      enable_version_info: true\n      version_info_labels:\n      - vald_version\n      - server_name\n      - git_commit\n      - build_time\n      - go_version\n      - go_os\n      - go_arch\n      - ngt_version\n  trace:\n    enabled: false\n    sampling_rate: 1\n  prometheus:\n    enabled: false\n    endpoint: /metrics\n    namespace: vald\n  jaeger:\n    enabled: false\n    collector_endpoint: \"\"\n    agent_endpoint: \"jaeger-agent.default.svc.cluster.local:6831\"\n    username: \"\"\n    password: \"\"\n    service_name: \"vald-agent-ngt\"\n    buffer_max_count: 10\n  stackdriver:\n    project_id: \"\"\n    client:\n      api_key: \"\"\n      audiences: []\n      authentication_enabled: true\n      credentials_file: \"\"\n      credentials_json: \"\"\n      endpoint: \"\"\n      quota_project: \"\"\n      request_reason: \"\"\n      scopes: []\n      telemetry_enabled: true\n      user_agent: \"\"\n    exporter:\n      bundle_count_threshold: 0\n      bundle_delay_threshold: \"0\"\n      location: \"\"\n      metric_prefix: vald.vdaas.org\n      monitoring_enabled: false\n      number_of_workers: 1\n      reporting_interval: 1m\n      skip_cmd: false\n      timeout: 5s\n      trace_spans_buffer_max_bytes: 0\n      tracing_enabled: false\n    profiler:\n      enabled: false\n      service: \"vald-agent-ngt\"\n      service_version: \"\"\n      debug_logging: false\n      mutex_profiling: true\n      cpu_profiling: true\n      alloc_profiling: true\n      heap_profiling: true\n      goroutine_profiling: true\n      alloc_force_gc: false\n      api_addr: \"\"\n      instance: \"\"\n      zone: \"\"\nngt:\n  auto_create_index_pool_size: 10000\n  auto_index_check_duration: 30m\n  auto_index_duration_limit: 24h\n  auto_index_length: 100\n  auto_save_index_duration: 35m\n  bulk_insert_chunk_size: 10\n  creation_edge_size: 20\n  default_epsilon: 0.1\n  default_pool_size: 10000\n  default_radius: -1\n  dimension: 4096\n  distance_type: l2\n  enable_copy_on_write: false\n  enable_in_memory_mode: true\n  enable_proactive_gc: false\n  index_path: \"\"\n  initial_delay_max_duration: 3m\n  kvsdb:\n    concurrency: 6\n  load_index_timeout_factor: 1ms\n  max_load_index_timeout: 10m\n  min_load_index_timeout: 3m\n  object_type: float\n  search_edge_size: 10\n  vqueue:\n    delete_buffer_pool_size: 5000\n    insert_buffer_pool_size: 10000\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "vald-discoverer-config",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "discoverer"
      }
    },
    "data": {
      "config.yaml": "---\nversion: v0.0.0\ntime_zone: UTC\nlogging:\n  format: raw\n  level: debug\n  logger: glg\nserver_config:\n  servers:\n    - name: grpc\n      host: 0.0.0.0\n      port: 8081\n      grpc:\n        bidirectional_stream_concurrency: 20\n        connection_timeout: \"\"\n        enable_reflection: true\n        header_table_size: 0\n        initial_conn_window_size: 0\n        initial_window_size: 0\n        interceptors:\n        - RecoverInterceptor\n        keepalive:\n          max_conn_age: \"\"\n          max_conn_age_grace: \"\"\n          max_conn_idle: \"\"\n          min_time: 60s\n          permit_without_stream: true\n          time: 120s\n          timeout: 30s\n        max_header_list_size: 0\n        max_receive_message_size: 0\n        max_send_message_size: 0\n        read_buffer_size: 0\n        write_buffer_size: 0\n      mode: GRPC\n      network: tcp\n      probe_wait_time: 3s\n      restart: true\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n  health_check_servers:\n    - name: liveness\n      host: 0.0.0.0\n      port: 3000\n      http:\n        handler_timeout: \"\"\n        idle_timeout: \"\"\n        read_header_timeout: \"\"\n        read_timeout: \"\"\n        shutdown_duration: 5s\n        write_timeout: \"\"\n      mode: \"\"\n      network: tcp\n      probe_wait_time: 3s\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n    - name: readiness\n      host: 0.0.0.0\n      port: 3001\n      http:\n        handler_timeout: \"\"\n        idle_timeout: \"\"\n        read_header_timeout: \"\"\n        read_timeout: \"\"\n        shutdown_duration: 0s\n        write_timeout: \"\"\n      mode: \"\"\n      network: tcp\n      probe_wait_time: 3s\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n  metrics_servers:\n  startup_strategy:\n    - liveness\n    - grpc\n    - readiness\n  full_shutdown_duration: 600s\n  tls:\n    ca: /path/to/ca\n    cert: /path/to/cert\n    enabled: false\n    insecure_skip_verify: false\n    key: /path/to/key\nobservability:\n  enabled: false\n  collector:\n    duration: 5s\n    metrics:\n      enable_cgo: true\n      enable_goroutine: true\n      enable_memory: true\n      enable_version_info: true\n      version_info_labels:\n      - vald_version\n      - server_name\n      - git_commit\n      - build_time\n      - go_version\n      - go_os\n      - go_arch\n      - ngt_version\n  trace:\n    enabled: false\n    sampling_rate: 1\n  prometheus:\n    enabled: false\n    endpoint: /metrics\n    namespace: vald\n  jaeger:\n    enabled: false\n    collector_endpoint: \"\"\n    agent_endpoint: \"jaeger-agent.default.svc.cluster.local:6831\"\n    username: \"\"\n    password: \"\"\n    service_name: \"vald-discoverer\"\n    buffer_max_count: 10\n  stackdriver:\n    project_id: \"\"\n    client:\n      api_key: \"\"\n      audiences: []\n      authentication_enabled: true\n      credentials_file: \"\"\n      credentials_json: \"\"\n      endpoint: \"\"\n      quota_project: \"\"\n      request_reason: \"\"\n      scopes: []\n      telemetry_enabled: true\n      user_agent: \"\"\n    exporter:\n      bundle_count_threshold: 0\n      bundle_delay_threshold: \"0\"\n      location: \"\"\n      metric_prefix: vald.vdaas.org\n      monitoring_enabled: false\n      number_of_workers: 1\n      reporting_interval: 1m\n      skip_cmd: false\n      timeout: 5s\n      trace_spans_buffer_max_bytes: 0\n      tracing_enabled: false\n    profiler:\n      enabled: false\n      service: \"vald-discoverer\"\n      service_version: \"\"\n      debug_logging: false\n      mutex_profiling: true\n      cpu_profiling: true\n      alloc_profiling: true\n      heap_profiling: true\n      goroutine_profiling: true\n      alloc_force_gc: false\n      api_addr: \"\"\n      instance: \"\"\n      zone: \"\"\ndiscoverer:\n  name: \"\"\n  namespace: \"_MY_POD_NAMESPACE_\"\n  discovery_duration: 3s\n  selectors:\n      pod:\n        labels:\n          app.kubernetes.io/component: agent\n          app.kubernetes.io/instance: release-name\n        fields:\n          status.phase: Running\n      node:\n        labels: {}\n        fields: {}\n      pod_metrics:\n        labels: {}\n        fields:\n          containers.name: vald-agent-ngt\n      node_metrics:\n        labels: {}\n        fields: {}\n  net:\n    dialer:\n      dual_stack_enabled: false\n      keepalive: 10m\n      timeout: 30s\n    dns:\n      cache_enabled: true\n      cache_expiration: 24h\n      refresh_duration: 5m\n    socket_option:\n      ip_recover_destination_addr: false\n      ip_transparent: false\n      reuse_addr: true\n      reuse_port: true\n      tcp_cork: false\n      tcp_defer_accept: true\n      tcp_fast_open: true\n      tcp_no_delay: true\n      tcp_quick_ack: true\n    tls:\n      ca: /path/to/ca\n      cert: /path/to/cert\n      enabled: false\n      insecure_skip_verify: false\n      key: /path/to/key\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "vald-lb-gateway-config",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "gateway-lb"
      }
    },
    "data": {
      "config.yaml": "---\nversion: v0.0.0\ntime_zone: UTC\nlogging:\n  format: raw\n  level: debug\n  logger: glg\nserver_config:\n  servers:\n    - name: grpc\n      host: 0.0.0.0\n      port: 8081\n      grpc:\n        bidirectional_stream_concurrency: 20\n        connection_timeout: \"\"\n        enable_reflection: true\n        header_table_size: 0\n        initial_conn_window_size: 0\n        initial_window_size: 0\n        interceptors:\n        - RecoverInterceptor\n        keepalive:\n          max_conn_age: \"\"\n          max_conn_age_grace: \"\"\n          max_conn_idle: \"\"\n          min_time: 60s\n          permit_without_stream: true\n          time: 120s\n          timeout: 30s\n        max_header_list_size: 0\n        max_receive_message_size: 0\n        max_send_message_size: 0\n        read_buffer_size: 0\n        write_buffer_size: 0\n      mode: GRPC\n      network: tcp\n      probe_wait_time: 3s\n      restart: true\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n  health_check_servers:\n    - name: liveness\n      host: 0.0.0.0\n      port: 3000\n      http:\n        handler_timeout: \"\"\n        idle_timeout: \"\"\n        read_header_timeout: \"\"\n        read_timeout: \"\"\n        shutdown_duration: 5s\n        write_timeout: \"\"\n      mode: \"\"\n      network: tcp\n      probe_wait_time: 3s\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n    - name: readiness\n      host: 0.0.0.0\n      port: 3001\n      http:\n        handler_timeout: \"\"\n        idle_timeout: \"\"\n        read_header_timeout: \"\"\n        read_timeout: \"\"\n        shutdown_duration: 0s\n        write_timeout: \"\"\n      mode: \"\"\n      network: tcp\n      probe_wait_time: 3s\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n  metrics_servers:\n  startup_strategy:\n    - liveness\n    - grpc\n    - readiness\n  full_shutdown_duration: 600s\n  tls:\n    ca: /path/to/ca\n    cert: /path/to/cert\n    enabled: false\n    insecure_skip_verify: false\n    key: /path/to/key\nobservability:\n  enabled: false\n  collector:\n    duration: 5s\n    metrics:\n      enable_cgo: true\n      enable_goroutine: true\n      enable_memory: true\n      enable_version_info: true\n      version_info_labels:\n      - vald_version\n      - server_name\n      - git_commit\n      - build_time\n      - go_version\n      - go_os\n      - go_arch\n      - ngt_version\n  trace:\n    enabled: false\n    sampling_rate: 1\n  prometheus:\n    enabled: false\n    endpoint: /metrics\n    namespace: vald\n  jaeger:\n    enabled: false\n    collector_endpoint: \"\"\n    agent_endpoint: \"jaeger-agent.default.svc.cluster.local:6831\"\n    username: \"\"\n    password: \"\"\n    service_name: \"vald-lb-gateway\"\n    buffer_max_count: 10\n  stackdriver:\n    project_id: \"\"\n    client:\n      api_key: \"\"\n      audiences: []\n      authentication_enabled: true\n      credentials_file: \"\"\n      credentials_json: \"\"\n      endpoint: \"\"\n      quota_project: \"\"\n      request_reason: \"\"\n      scopes: []\n      telemetry_enabled: true\n      user_agent: \"\"\n    exporter:\n      bundle_count_threshold: 0\n      bundle_delay_threshold: \"0\"\n      location: \"\"\n      metric_prefix: vald.vdaas.org\n      monitoring_enabled: false\n      number_of_workers: 1\n      reporting_interval: 1m\n      skip_cmd: false\n      timeout: 5s\n      trace_spans_buffer_max_bytes: 0\n      tracing_enabled: false\n    profiler:\n      enabled: false\n      service: \"vald-lb-gateway\"\n      service_version: \"\"\n      debug_logging: false\n      mutex_profiling: true\n      cpu_profiling: true\n      alloc_profiling: true\n      heap_profiling: true\n      goroutine_profiling: true\n      alloc_force_gc: false\n      api_addr: \"\"\n      instance: \"\"\n      zone: \"\"\ngateway:\n  agent_port: 8081\n  agent_name: \"vald-agent-ngt\"\n  agent_dns: vald-agent-ngt.default.svc.cluster.local\n  agent_namespace: \"_MY_POD_NAMESPACE_\"\n  node_name: \"\"\n  index_replica: 5\n  discoverer:\n    duration: 200ms\n    client:\n      addrs:\n        - vald-discoverer.default.svc.cluster.local:8081\n      health_check_duration: \"1s\"\n      connection_pool:\n        enable_dns_resolver: true\n        enable_rebalance: true\n        old_conn_close_duration: 2m\n        rebalance_duration: 30m\n        size: 3\n      backoff:\n        backoff_factor: 1.1\n        backoff_time_limit: 5s\n        enable_error_log: true\n        initial_duration: 5ms\n        jitter_limit: 100ms\n        maximum_duration: 5s\n        retry_count: 100\n      call_option:\n        max_recv_msg_size: 0\n        max_retry_rpc_buffer_size: 0\n        max_send_msg_size: 0\n        wait_for_ready: true\n      dial_option:\n        backoff_base_delay: 1s\n        backoff_jitter: 0.2\n        backoff_max_delay: 120s\n        backoff_multiplier: 1.6\n        enable_backoff: false\n        initial_connection_window_size: 0\n        initial_window_size: 0\n        insecure: true\n        keepalive:\n          permit_without_stream: true\n          time: 120s\n          timeout: 30s\n        max_msg_size: 0\n        min_connection_timeout: 20s\n        net:\n          dialer:\n            dual_stack_enabled: true\n            keepalive: \"\"\n            timeout: \"\"\n          dns:\n            cache_enabled: true\n            cache_expiration: 1h\n            refresh_duration: 30m\n          socket_option:\n            ip_recover_destination_addr: false\n            ip_transparent: false\n            reuse_addr: true\n            reuse_port: true\n            tcp_cork: false\n            tcp_defer_accept: true\n            tcp_fast_open: true\n            tcp_no_delay: true\n            tcp_quick_ack: true\n          tls:\n            ca: /path/to/ca\n            cert: /path/to/cert\n            enabled: false\n            insecure_skip_verify: false\n            key: /path/to/key\n        read_buffer_size: 0\n        timeout: \"\"\n        write_buffer_size: 0\n      tls:\n        ca: /path/to/ca\n        cert: /path/to/cert\n        enabled: false\n        insecure_skip_verify: false\n        key: /path/to/key\n    agent_client_options:\n      addrs: []\n      health_check_duration: \"1s\"\n      connection_pool:\n        enable_dns_resolver: true\n        enable_rebalance: true\n        old_conn_close_duration: 2m\n        rebalance_duration: 30m\n        size: 3\n      backoff:\n        backoff_factor: 1.1\n        backoff_time_limit: 5s\n        enable_error_log: true\n        initial_duration: 5ms\n        jitter_limit: 100ms\n        maximum_duration: 5s\n        retry_count: 100\n      call_option:\n        max_recv_msg_size: 0\n        max_retry_rpc_buffer_size: 0\n        max_send_msg_size: 0\n        wait_for_ready: true\n      dial_option:\n        backoff_base_delay: 1s\n        backoff_jitter: 0.2\n        backoff_max_delay: 120s\n        backoff_multiplier: 1.6\n        enable_backoff: false\n        initial_connection_window_size: 0\n        initial_window_size: 0\n        insecure: true\n        keepalive:\n          permit_without_stream: true\n          time: 120s\n          timeout: 30s\n        max_msg_size: 0\n        min_connection_timeout: 20s\n        net:\n          dialer:\n            dual_stack_enabled: true\n            keepalive: \"\"\n            timeout: \"\"\n          dns:\n            cache_enabled: true\n            cache_expiration: 1h\n            refresh_duration: 30m\n          socket_option:\n            ip_recover_destination_addr: false\n            ip_transparent: false\n            reuse_addr: true\n            reuse_port: true\n            tcp_cork: false\n            tcp_defer_accept: true\n            tcp_fast_open: true\n            tcp_no_delay: true\n            tcp_quick_ack: true\n          tls:\n            ca: /path/to/ca\n            cert: /path/to/cert\n            enabled: false\n            insecure_skip_verify: false\n            key: /path/to/key\n        read_buffer_size: 0\n        timeout: \"\"\n        write_buffer_size: 0\n      tls:\n        ca: /path/to/ca\n        cert: /path/to/cert\n        enabled: false\n        insecure_skip_verify: false\n        key: /path/to/key\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "vald-manager-index-config",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "manager-index"
      }
    },
    "data": {
      "config.yaml": "---\nversion: v0.0.0\ntime_zone: UTC\nlogging:\n  format: raw\n  level: debug\n  logger: glg\nserver_config:\n  servers:\n    - name: grpc\n      host: 0.0.0.0\n      port: 8081\n      grpc:\n        bidirectional_stream_concurrency: 20\n        connection_timeout: \"\"\n        enable_reflection: true\n        header_table_size: 0\n        initial_conn_window_size: 0\n        initial_window_size: 0\n        interceptors:\n        - RecoverInterceptor\n        keepalive:\n          max_conn_age: \"\"\n          max_conn_age_grace: \"\"\n          max_conn_idle: \"\"\n          min_time: 60s\n          permit_without_stream: true\n          time: 120s\n          timeout: 30s\n        max_header_list_size: 0\n        max_receive_message_size: 0\n        max_send_message_size: 0\n        read_buffer_size: 0\n        write_buffer_size: 0\n      mode: GRPC\n      network: tcp\n      probe_wait_time: 3s\n      restart: true\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n  health_check_servers:\n    - name: liveness\n      host: 0.0.0.0\n      port: 3000\n      http:\n        handler_timeout: \"\"\n        idle_timeout: \"\"\n        read_header_timeout: \"\"\n        read_timeout: \"\"\n        shutdown_duration: 5s\n        write_timeout: \"\"\n      mode: \"\"\n      network: tcp\n      probe_wait_time: 3s\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n    - name: readiness\n      host: 0.0.0.0\n      port: 3001\n      http:\n        handler_timeout: \"\"\n        idle_timeout: \"\"\n        read_header_timeout: \"\"\n        read_timeout: \"\"\n        shutdown_duration: 0s\n        write_timeout: \"\"\n      mode: \"\"\n      network: tcp\n      probe_wait_time: 3s\n      socket_option:\n        ip_recover_destination_addr: false\n        ip_transparent: false\n        reuse_addr: true\n        reuse_port: true\n        tcp_cork: false\n        tcp_defer_accept: true\n        tcp_fast_open: true\n        tcp_no_delay: true\n        tcp_quick_ack: true\n      socket_path: \"\"\n  metrics_servers:\n  startup_strategy:\n    - liveness\n    - grpc\n    - readiness\n  full_shutdown_duration: 600s\n  tls:\n    ca: /path/to/ca\n    cert: /path/to/cert\n    enabled: false\n    insecure_skip_verify: false\n    key: /path/to/key\nobservability:\n  enabled: false\n  collector:\n    duration: 5s\n    metrics:\n      enable_cgo: true\n      enable_goroutine: true\n      enable_memory: true\n      enable_version_info: true\n      version_info_labels:\n      - vald_version\n      - server_name\n      - git_commit\n      - build_time\n      - go_version\n      - go_os\n      - go_arch\n      - ngt_version\n  trace:\n    enabled: false\n    sampling_rate: 1\n  prometheus:\n    enabled: false\n    endpoint: /metrics\n    namespace: vald\n  jaeger:\n    enabled: false\n    collector_endpoint: \"\"\n    agent_endpoint: \"jaeger-agent.default.svc.cluster.local:6831\"\n    username: \"\"\n    password: \"\"\n    service_name: \"vald-manager-index\"\n    buffer_max_count: 10\n  stackdriver:\n    project_id: \"\"\n    client:\n      api_key: \"\"\n      audiences: []\n      authentication_enabled: true\n      credentials_file: \"\"\n      credentials_json: \"\"\n      endpoint: \"\"\n      quota_project: \"\"\n      request_reason: \"\"\n      scopes: []\n      telemetry_enabled: true\n      user_agent: \"\"\n    exporter:\n      bundle_count_threshold: 0\n      bundle_delay_threshold: \"0\"\n      location: \"\"\n      metric_prefix: vald.vdaas.org\n      monitoring_enabled: false\n      number_of_workers: 1\n      reporting_interval: 1m\n      skip_cmd: false\n      timeout: 5s\n      trace_spans_buffer_max_bytes: 0\n      tracing_enabled: false\n    profiler:\n      enabled: false\n      service: \"vald-manager-index\"\n      service_version: \"\"\n      debug_logging: false\n      mutex_profiling: true\n      cpu_profiling: true\n      alloc_profiling: true\n      heap_profiling: true\n      goroutine_profiling: true\n      alloc_force_gc: false\n      api_addr: \"\"\n      instance: \"\"\n      zone: \"\"\nindexer:\n  agent_port: 8081\n  agent_name: \"vald-agent-ngt\"\n  agent_dns: vald-agent-ngt.default.svc.cluster.local\n  agent_namespace: \"_MY_POD_NAMESPACE_\"\n  node_name: \"\"\n  discoverer:\n    duration: 500ms\n    client:\n      addrs:\n        - vald-discoverer.default.svc.cluster.local:8081\n      health_check_duration: \"1s\"\n      connection_pool:\n        enable_dns_resolver: true\n        enable_rebalance: true\n        old_conn_close_duration: 2m\n        rebalance_duration: 30m\n        size: 3\n      backoff:\n        backoff_factor: 1.1\n        backoff_time_limit: 5s\n        enable_error_log: true\n        initial_duration: 5ms\n        jitter_limit: 100ms\n        maximum_duration: 5s\n        retry_count: 100\n      call_option:\n        max_recv_msg_size: 0\n        max_retry_rpc_buffer_size: 0\n        max_send_msg_size: 0\n        wait_for_ready: true\n      dial_option:\n        backoff_base_delay: 1s\n        backoff_jitter: 0.2\n        backoff_max_delay: 120s\n        backoff_multiplier: 1.6\n        enable_backoff: false\n        initial_connection_window_size: 0\n        initial_window_size: 0\n        insecure: true\n        keepalive:\n          permit_without_stream: true\n          time: 120s\n          timeout: 30s\n        max_msg_size: 0\n        min_connection_timeout: 20s\n        net:\n          dialer:\n            dual_stack_enabled: true\n            keepalive: \"\"\n            timeout: \"\"\n          dns:\n            cache_enabled: true\n            cache_expiration: 1h\n            refresh_duration: 30m\n          socket_option:\n            ip_recover_destination_addr: false\n            ip_transparent: false\n            reuse_addr: true\n            reuse_port: true\n            tcp_cork: false\n            tcp_defer_accept: true\n            tcp_fast_open: true\n            tcp_no_delay: true\n            tcp_quick_ack: true\n          tls:\n            ca: /path/to/ca\n            cert: /path/to/cert\n            enabled: false\n            insecure_skip_verify: false\n            key: /path/to/key\n        read_buffer_size: 0\n        timeout: \"\"\n        write_buffer_size: 0\n      tls:\n        ca: /path/to/ca\n        cert: /path/to/cert\n        enabled: false\n        insecure_skip_verify: false\n        key: /path/to/key\n    agent_client_options:\n      addrs: []\n      health_check_duration: \"1s\"\n      connection_pool:\n        enable_dns_resolver: true\n        enable_rebalance: true\n        old_conn_close_duration: 2m\n        rebalance_duration: 30m\n        size: 3\n      backoff:\n        backoff_factor: 1.1\n        backoff_time_limit: 5s\n        enable_error_log: true\n        initial_duration: 5ms\n        jitter_limit: 100ms\n        maximum_duration: 5s\n        retry_count: 100\n      call_option:\n        max_recv_msg_size: 0\n        max_retry_rpc_buffer_size: 0\n        max_send_msg_size: 0\n        wait_for_ready: true\n      dial_option:\n        write_buffer_size: 0\n        read_buffer_size: 0\n        initial_window_size: 0\n        initial_connection_window_size: 0\n        max_msg_size: 0\n        backoff_max_delay: \"120s\"\n        backoff_base_delay: \"1s\"\n        backoff_multiplier: 1.6\n        backoff_jitter: 0.2\n        min_connection_timeout: \"20s\"\n        enable_backoff: false\n        insecure: true\n        timeout: \"\"\n        net:\n          dns:\n            cache_enabled: true\n            cache_expiration: 1h\n            refresh_duration: 30m\n          dialer:\n            timeout: \"\"\n            keepalive: \"15m\"\n            dual_stack_enabled: true\n          tls:\n            ca: /path/to/ca\n            cert: /path/to/cert\n            enabled: false\n            insecure_skip_verify: false\n            key: /path/to/key\n          socket_option:\n            ip_recover_destination_addr: false\n            ip_transparent: false\n            reuse_addr: true\n            reuse_port: true\n            tcp_cork: false\n            tcp_defer_accept: true\n            tcp_fast_open: true\n            tcp_no_delay: true\n            tcp_quick_ack: true\n        keepalive:\n          permit_without_stream: true\n          time: 120s\n          timeout: 30s\n      tls:\n        ca: /path/to/ca\n        cert: /path/to/cert\n        enabled: false\n        insecure_skip_verify: false\n        key: /path/to/key\n  concurrency: 1\n  auto_index_duration_limit: 30m\n  auto_index_check_duration: 1m\n  auto_save_index_duration_limit: 3h\n  auto_save_index_wait_duration: 10m\n  auto_index_length: 100\n  creation_pool_size: 10000\n"
    }
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
      "name": "discoverer",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "discoverer"
      }
    },
    "rules": [
      {
        "apiGroups": [
          "apps"
        ],
        "resources": [
          "replicasets"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "apiGroups": [
          ""
        ],
        "resources": [
          "nodes",
          "nodes/proxy",
          "services",
          "endpoints",
          "pods"
        ],
        "verbs": [
          "get",
          "list",
          "watch"
        ]
      },
      {
        "nonResourceURLs": [
          "/metrics"
        ],
        "verbs": [
          "get"
        ]
      },
      {
        "apiGroups": [
          "metrics.k8s.io"
        ],
        "resources": [
          "nodes",
          "pods"
        ],
        "verbs": [
          "get",
          "list"
        ]
      }
    ]
  },
  {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
      "name": "discoverer",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "discoverer"
      }
    },
    "roleRef": {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "discoverer"
    },
    "subjects": [
      {
        "kind": "ServiceAccount",
        "name": "vald",
        "namespace": "default"
      }
    ]
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "vald-agent-ngt",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "agent"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "grpc",
          "port": 8081,
          "targetPort": 8081,
          "protocol": "TCP"
        },
        {
          "name": "readiness",
          "port": 3001,
          "targetPort": 3001,
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "vald",
        "app.kubernetes.io/component": "agent"
      },
      "clusterIP": "None",
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "vald-discoverer",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "discoverer"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "grpc",
          "port": 8081,
          "targetPort": 8081,
          "protocol": "TCP"
        },
        {
          "name": "readiness",
          "port": 3001,
          "targetPort": 3001,
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "vald",
        "app.kubernetes.io/component": "discoverer"
      },
      "clusterIP": "None",
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "vald-lb-gateway",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "gateway-lb"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "grpc",
          "port": 8081,
          "targetPort": 8081,
          "protocol": "TCP"
        },
        {
          "name": "readiness",
          "port": 3001,
          "targetPort": 3001,
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "vald",
        "app.kubernetes.io/component": "gateway-lb"
      },
      "clusterIP": "None",
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "vald-manager-index",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "manager-index"
      }
    },
    "spec": {
      "ports": [
        {
          "name": "grpc",
          "port": 8081,
          "targetPort": 8081,
          "protocol": "TCP"
        },
        {
          "name": "readiness",
          "port": 3001,
          "targetPort": 3001,
          "protocol": "TCP"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "vald",
        "app.kubernetes.io/component": "manager-index"
      },
      "clusterIP": "None",
      "type": "ClusterIP"
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "vald-discoverer",
      "labels": {
        "app": "vald-discoverer",
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "discoverer"
      }
    },
    "spec": {
      "progressDeadlineSeconds": 600,
      "replicas": 1,
      "revisionHistoryLimit": 2,
      "selector": {
        "matchLabels": {
          "app": "vald-discoverer"
        }
      },
      "strategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "maxSurge": "25%",
          "maxUnavailable": "25%"
        }
      },
      "template": {
        "metadata": {
          "creationTimestamp": null,
          "labels": {
            "app": "vald-discoverer",
            "app.kubernetes.io/name": "vald",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "discoverer"
          },
          "annotations": {
            "checksum/configmap": "5aee2946fc4381241478298433d2d0661ec69ce1beb38415f922f4e4d0d6e100"
          }
        },
        "spec": {
          "affinity": {
            "nodeAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": []
            },
            "podAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [],
              "requiredDuringSchedulingIgnoredDuringExecution": []
            },
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": [
                            "vald-discoverer"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 100
                }
              ],
              "requiredDuringSchedulingIgnoredDuringExecution": []
            }
          },
          "containers": [
            {
              "name": "vald-discoverer",
              "image": "vdaas/vald-discoverer-k8s:v1.5.4",
              "imagePullPolicy": "Always",
              "livenessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/liveness",
                  "port": "liveness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 3,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/readiness",
                  "port": "readiness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 3,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "startupProbe": {
                "failureThreshold": 30,
                "httpGet": {
                  "path": "/liveness",
                  "port": "liveness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "ports": [
                {
                  "name": "liveness",
                  "protocol": "TCP",
                  "containerPort": 3000
                },
                {
                  "name": "readiness",
                  "protocol": "TCP",
                  "containerPort": 3001
                },
                {
                  "name": "grpc",
                  "protocol": "TCP",
                  "containerPort": 8081
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "600m",
                  "memory": "200Mi"
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "65Mi"
                }
              },
              "terminationMessagePath": "/dev/termination-log",
              "terminationMessagePolicy": "File",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsGroup": 65532,
                "runAsNonRoot": true,
                "runAsUser": 65532
              },
              "env": [
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "vald-discoverer-config",
                  "mountPath": "/etc/server/"
                }
              ]
            }
          ],
          "dnsPolicy": "ClusterFirst",
          "restartPolicy": "Always",
          "schedulerName": "default-scheduler",
          "serviceAccountName": "vald",
          "securityContext": {
            "fsGroup": 65532,
            "fsGroupChangePolicy": "OnRootMismatch",
            "runAsGroup": 65532,
            "runAsNonRoot": true,
            "runAsUser": 65532
          },
          "terminationGracePeriodSeconds": 30,
          "volumes": [
            {
              "name": "vald-discoverer-config",
              "configMap": {
                "defaultMode": 420,
                "name": "vald-discoverer-config"
              }
            }
          ],
          "priorityClassName": "default-vald-discoverer-priority"
        }
      }
    },
    "status": null
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "vald-lb-gateway",
      "labels": {
        "app": "vald-lb-gateway",
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "gateway-lb"
      }
    },
    "spec": {
      "progressDeadlineSeconds": 600,
      "revisionHistoryLimit": 2,
      "selector": {
        "matchLabels": {
          "app": "vald-lb-gateway"
        }
      },
      "strategy": {
        "rollingUpdate": {
          "maxSurge": "25%",
          "maxUnavailable": "25%"
        },
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "creationTimestamp": null,
          "labels": {
            "app": "vald-lb-gateway",
            "app.kubernetes.io/name": "vald",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "gateway-lb"
          },
          "annotations": {
            "checksum/configmap": "8225a916a38d1c3cf214258112e3160f2624ed2d6b2d2cc2f85bc05248f21a1b"
          }
        },
        "spec": {
          "initContainers": [
            {
              "name": "wait-for-discoverer",
              "image": "busybox:stable",
              "command": [
                "/bin/sh",
                "-e",
                "-c",
                "until [ \"$(wget --server-response --spider --quiet http://vald-discoverer.default.svc.cluster.local:3001/readiness 2>&1 | awk 'NR==1{print $2}')\" == \"200\" ]; do\n  echo \"waiting for discoverer to be ready...\"\n  sleep 2;\ndone\n"
              ]
            },
            {
              "name": "wait-for-agent",
              "image": "busybox:stable",
              "command": [
                "/bin/sh",
                "-e",
                "-c",
                "until [ \"$(wget --server-response --spider --quiet http://vald-agent-ngt.default.svc.cluster.local:3001/readiness 2>&1 | awk 'NR==1{print $2}')\" == \"200\" ]; do\n  echo \"waiting for agent to be ready...\"\n  sleep 2;\ndone\n"
              ]
            }
          ],
          "affinity": {
            "nodeAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": []
            },
            "podAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [],
              "requiredDuringSchedulingIgnoredDuringExecution": []
            },
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": [
                            "vald-lb-gateway"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 100
                }
              ],
              "requiredDuringSchedulingIgnoredDuringExecution": []
            }
          },
          "containers": [
            {
              "name": "vald-lb-gateway",
              "image": "vdaas/vald-lb-gateway:v1.5.4",
              "imagePullPolicy": "Always",
              "livenessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/liveness",
                  "port": "liveness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 3,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/readiness",
                  "port": "readiness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 3,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "startupProbe": {
                "failureThreshold": 30,
                "httpGet": {
                  "path": "/liveness",
                  "port": "liveness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "ports": [
                {
                  "name": "liveness",
                  "protocol": "TCP",
                  "containerPort": 3000
                },
                {
                  "name": "readiness",
                  "protocol": "TCP",
                  "containerPort": 3001
                },
                {
                  "name": "grpc",
                  "protocol": "TCP",
                  "containerPort": 8081
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "2000m",
                  "memory": "700Mi"
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "150Mi"
                }
              },
              "terminationMessagePath": "/dev/termination-log",
              "terminationMessagePolicy": "File",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsGroup": 65532,
                "runAsNonRoot": true,
                "runAsUser": 65532
              },
              "env": [
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "vald-lb-gateway-config",
                  "mountPath": "/etc/server/"
                }
              ]
            }
          ],
          "dnsPolicy": "ClusterFirst",
          "restartPolicy": "Always",
          "schedulerName": "default-scheduler",
          "securityContext": {
            "fsGroup": 65532,
            "fsGroupChangePolicy": "OnRootMismatch",
            "runAsGroup": 65532,
            "runAsNonRoot": true,
            "runAsUser": 65532
          },
          "terminationGracePeriodSeconds": 30,
          "volumes": [
            {
              "name": "vald-lb-gateway-config",
              "configMap": {
                "defaultMode": 420,
                "name": "vald-lb-gateway-config"
              }
            }
          ],
          "priorityClassName": "default-vald-lb-gateway-priority"
        }
      }
    },
    "status": null
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "vald-manager-index",
      "labels": {
        "app": "vald-manager-index",
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "manager-index"
      }
    },
    "spec": {
      "progressDeadlineSeconds": 600,
      "replicas": 1,
      "revisionHistoryLimit": 2,
      "selector": {
        "matchLabels": {
          "app": "vald-manager-index"
        }
      },
      "strategy": {
        "rollingUpdate": {
          "maxSurge": "25%",
          "maxUnavailable": "25%"
        },
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "creationTimestamp": null,
          "labels": {
            "app": "vald-manager-index",
            "app.kubernetes.io/name": "vald",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "manager-index"
          },
          "annotations": {
            "checksum/configmap": "dcf2607448c79989d2faaf293118e2f393c615bbd6a621aa79a60fd31c8ff701"
          }
        },
        "spec": {
          "initContainers": [
            {
              "name": "wait-for-agent",
              "image": "busybox:stable",
              "command": [
                "/bin/sh",
                "-e",
                "-c",
                "until [ \"$(wget --server-response --spider --quiet http://vald-agent-ngt.default.svc.cluster.local:3001/readiness 2>&1 | awk 'NR==1{print $2}')\" == \"200\" ]; do\n  echo \"waiting for agent to be ready...\"\n  sleep 2;\ndone\n"
              ]
            },
            {
              "name": "wait-for-discoverer",
              "image": "busybox:stable",
              "command": [
                "/bin/sh",
                "-e",
                "-c",
                "until [ \"$(wget --server-response --spider --quiet http://vald-discoverer.default.svc.cluster.local:3001/readiness 2>&1 | awk 'NR==1{print $2}')\" == \"200\" ]; do\n  echo \"waiting for discoverer to be ready...\"\n  sleep 2;\ndone\n"
              ]
            }
          ],
          "affinity": {
            "nodeAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": []
            },
            "podAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [],
              "requiredDuringSchedulingIgnoredDuringExecution": []
            },
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [],
              "requiredDuringSchedulingIgnoredDuringExecution": []
            }
          },
          "containers": [
            {
              "name": "vald-manager-index",
              "image": "vdaas/vald-manager-index:v1.5.4",
              "imagePullPolicy": "Always",
              "livenessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/liveness",
                  "port": "liveness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 3,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/readiness",
                  "port": "readiness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 3,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "startupProbe": {
                "failureThreshold": 30,
                "httpGet": {
                  "path": "/liveness",
                  "port": "liveness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 5,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "ports": [
                {
                  "name": "liveness",
                  "protocol": "TCP",
                  "containerPort": 3000
                },
                {
                  "name": "readiness",
                  "protocol": "TCP",
                  "containerPort": 3001
                },
                {
                  "name": "grpc",
                  "protocol": "TCP",
                  "containerPort": 8081
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "1000m",
                  "memory": "500Mi"
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "80Mi"
                }
              },
              "terminationMessagePath": "/dev/termination-log",
              "terminationMessagePolicy": "File",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsGroup": 65532,
                "runAsNonRoot": true,
                "runAsUser": 65532
              },
              "env": [
                {
                  "name": "MY_POD_NAMESPACE",
                  "valueFrom": {
                    "fieldRef": {
                      "fieldPath": "metadata.namespace"
                    }
                  }
                }
              ],
              "volumeMounts": [
                {
                  "name": "vald-manager-index-config",
                  "mountPath": "/etc/server/"
                }
              ]
            }
          ],
          "dnsPolicy": "ClusterFirst",
          "restartPolicy": "Always",
          "schedulerName": "default-scheduler",
          "securityContext": {
            "fsGroup": 65532,
            "fsGroupChangePolicy": "OnRootMismatch",
            "runAsGroup": 65532,
            "runAsNonRoot": true,
            "runAsUser": 65532
          },
          "terminationGracePeriodSeconds": 30,
          "volumes": [
            {
              "configMap": {
                "defaultMode": 420,
                "name": "vald-manager-index-config"
              },
              "name": "vald-manager-index-config"
            }
          ],
          "priorityClassName": "default-vald-manager-index-priority"
        }
      }
    },
    "status": null
  },
  {
    "apiVersion": "autoscaling/v1",
    "kind": "HorizontalPodAutoscaler",
    "metadata": {
      "name": "vald-lb-gateway",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "gateway-lb"
      }
    },
    "spec": {
      "maxReplicas": 9,
      "minReplicas": 3,
      "scaleTargetRef": {
        "apiVersion": "apps/v1",
        "kind": "Deployment",
        "name": "vald-lb-gateway"
      },
      "targetCPUUtilizationPercentage": 80
    },
    "status": null
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "vald-agent-ngt",
      "labels": {
        "app": "vald-agent-ngt",
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "agent"
      }
    },
    "spec": {
      "serviceName": "vald-agent-ngt",
      "podManagementPolicy": "OrderedReady",
      "replicas": 20,
      "revisionHistoryLimit": 2,
      "selector": {
        "matchLabels": {
          "app": "vald-agent-ngt"
        }
      },
      "updateStrategy": {
        "type": "RollingUpdate",
        "rollingUpdate": {
          "partition": 0
        }
      },
      "template": {
        "metadata": {
          "creationTimestamp": null,
          "labels": {
            "app": "vald-agent-ngt",
            "app.kubernetes.io/name": "vald",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/component": "agent"
          }
        },
        "spec": {
          "affinity": {
            "nodeAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": []
            },
            "podAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [],
              "requiredDuringSchedulingIgnoredDuringExecution": []
            },
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchExpressions": [
                        {
                          "key": "app",
                          "operator": "In",
                          "values": [
                            "vald-agent-ngt"
                          ]
                        }
                      ]
                    },
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 100
                }
              ],
              "requiredDuringSchedulingIgnoredDuringExecution": []
            }
          },
          "containers": [
            {
              "name": "vald-agent-ngt",
              "image": "vdaas/vald-agent-ngt:v1.5.4",
              "imagePullPolicy": "Always",
              "livenessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/liveness",
                  "port": "liveness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 3,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "readinessProbe": {
                "failureThreshold": 2,
                "httpGet": {
                  "path": "/readiness",
                  "port": "readiness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 3,
                "successThreshold": 1,
                "timeoutSeconds": 2
              },
              "startupProbe": {
                "httpGet": {
                  "path": "/liveness",
                  "port": "liveness",
                  "scheme": "HTTP"
                },
                "initialDelaySeconds": 5,
                "timeoutSeconds": 2,
                "successThreshold": 1,
                "failureThreshold": 200,
                "periodSeconds": 5
              },
              "ports": [
                {
                  "name": "liveness",
                  "protocol": "TCP",
                  "containerPort": 3000
                },
                {
                  "name": "readiness",
                  "protocol": "TCP",
                  "containerPort": 3001
                },
                {
                  "name": "grpc",
                  "protocol": "TCP",
                  "containerPort": 8081
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "300m",
                  "memory": "4Gi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "terminationMessagePath": "/dev/termination-log",
              "terminationMessagePolicy": "File",
              "securityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "runAsGroup": 65532,
                "runAsNonRoot": true,
                "runAsUser": 65532
              },
              "volumeMounts": [
                {
                  "name": "vald-agent-ngt-config",
                  "mountPath": "/etc/server/"
                }
              ]
            }
          ],
          "dnsPolicy": "ClusterFirst",
          "restartPolicy": "Always",
          "schedulerName": "default-scheduler",
          "securityContext": {
            "fsGroup": 65532,
            "fsGroupChangePolicy": "OnRootMismatch",
            "runAsGroup": 65532,
            "runAsNonRoot": true,
            "runAsUser": 65532
          },
          "terminationGracePeriodSeconds": 120,
          "volumes": [
            {
              "name": "vald-agent-ngt-config",
              "configMap": {
                "defaultMode": 420,
                "name": "vald-agent-ngt-config"
              }
            }
          ],
          "priorityClassName": "default-vald-agent-ngt-priority"
        }
      }
    },
    "status": null
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "apiVersion": "scheduling.k8s.io/v1",
    "kind": "PriorityClass",
    "metadata": {
      "name": "default-vald-agent-ngt-priority",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "agent"
      }
    },
    "value": 1000000000,
    "preemptionPolicy": "Never",
    "globalDefault": false,
    "description": "A priority class for Vald agent."
  },
  {
    "apiVersion": "scheduling.k8s.io/v1",
    "kind": "PriorityClass",
    "metadata": {
      "name": "default-vald-discoverer-priority",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "discoverer"
      }
    },
    "value": 1000000,
    "globalDefault": false,
    "description": "A priority class for Vald discoverer."
  },
  {
    "apiVersion": "scheduling.k8s.io/v1",
    "kind": "PriorityClass",
    "metadata": {
      "name": "default-vald-lb-gateway-priority",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "gateway-lb"
      }
    },
    "value": 1000000,
    "globalDefault": false,
    "description": "A priority class for Vald lb gateway."
  },
  {
    "apiVersion": "scheduling.k8s.io/v1",
    "kind": "PriorityClass",
    "metadata": {
      "name": "default-vald-manager-index-priority",
      "labels": {
        "app.kubernetes.io/name": "vald",
        "helm.sh/chart": "vald-v1.5.4",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/version": "v1.5.4",
        "app.kubernetes.io/component": "manager-index"
      }
    },
    "value": 1000000,
    "globalDefault": false,
    "description": "A priority class for Vald index manager."
  }
]