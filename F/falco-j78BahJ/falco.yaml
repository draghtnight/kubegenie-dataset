apiVersion: v1
kind: ServiceAccount
metadata:
  name: falcon-service
  namespace: j78BahJ
---
apiVersion: v1
kind: Secret
metadata:
  name: falco
data:
  falco.yaml: YnVmZmVyZWRfb3V0cHV0czogZmFsc2UKZmlsZV9vdXRwdXQ6CiAgZW5hYmxlZDogZmFsc2UKICBmaWxlbmFtZTogLi9ldmVudHMudHh0CiAga2VlcF9hbGl2ZTogZmFsc2UKanNvbl9pbmNsdWRlX291dHB1dF9wcm9wZXJ0eTogdHJ1ZQpqc29uX291dHB1dDogZmFsc2UKbG9nX2xldmVsOiBpbmZvCmxvZ19zdGRlcnI6IHRydWUKbG9nX3N5c2xvZzogdHJ1ZQpvdXRwdXRzOgogIG1heF9idXJzdDogMTAwMAogIHJhdGU6IDEKcHJpb3JpdHk6IGRlYnVnCnByb2dyYW1fb3V0cHV0OgogIGVuYWJsZWQ6IGZhbHNlCiAga2VlcF9hbGl2ZTogZmFsc2UKICBwcm9ncmFtOiBtYWlsIC1zICJGYWxjbyBOb3RpZmljYXRpb24iIHNvbWVvbmVAZXhhbXBsZS5jb20KcnVsZXNfZmlsZToKLSAvZXRjL2ZhbGNvL2ZhbGNvX3J1bGVzLnlhbWwKLSAvZXRjL2ZhbGNvL2ZhbGNvX3J1bGVzLmxvY2FsLnlhbWwKLSAvZXRjL2ZhbGNvL3J1bGVzLmQKc3Rkb3V0X291dHB1dDoKICBlbmFibGVkOiB0cnVlCnN5c2xvZ19vdXRwdXQ6CiAgZW5hYmxlZDogdHJ1ZQ==
  falco_rules.yaml: 
  falco_rules.local.yaml: IyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBZb3VyIGN1c3RvbSBydWxlcyEKIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiMgQWRkIG5ldyBydWxlcywgbGlrZSB0aGlzIG9uZQojIC0gcnVsZTogVGhlIHByb2dyYW0gInN1ZG8iIGlzIHJ1biBpbiBhIGNvbnRhaW5lcgojICAgZGVzYzogQW4gZXZlbnQgd2lsbCB0cmlnZ2VyIGV2ZXJ5IHRpbWUgeW91IHJ1biBzdWRvIGluIGEgY29udGFpbmVyCiMgICBjb25kaXRpb246IGV2dC50eXBlID0gZXhlY3ZlIGFuZCBldnQuZGlyPTwgYW5kIGNvbnRhaW5lci5pZCAhPSBob3N0IGFuZCBwcm9jLm5hbWUgPSBzdWRvCiMgICBvdXRwdXQ6ICJTdWRvIHJ1biBpbiBjb250YWluZXIgKHVzZXI9JXVzZXIubmFtZSAlY29udGFpbmVyLmluZm8gcGFyZW50PSVwcm9jLnBuYW1lIGNtZGxpbmU9JXByb2MuY21kbGluZSkiCiMgICBwcmlvcml0eTogRVJST1IKIyAgIHRhZ3M6IFt1c2VycywgY29udGFpbmVyXQoKIyBPciBvdmVycmlkZS9hcHBlbmQgdG8gYW55IHJ1bGUsIG1hY3JvLCBvciBsaXN0IGZyb20gdGhlIERlZmF1bHQgUnVsZXMK
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-bin
data:
  falco.sh: |
    #!/bin/sh


    set -ex

    exec /usr/bin/falco -K /var/run/secrets/kubernetes.io/serviceaccount/token -k https://kubernetes.default -pk
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: falcon-service
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - namespaces
      - pods
      - replicationcontrollers
      - services
      - events
      - configmaps
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /healthz
      - /healthz/*
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: falcon-service
roleRef:
  kind: ClusterRole
  name: falcon-service
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: falcon-service
    namespace: default
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco-agent
  labels:
    release_group: release-name
    application: falco
    component: falco-agent
spec:
  selector:
    matchLabels:
      release_group: release-name
      application: falco
      component: falco-agent
  minReadySeconds: 0
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        release_group: release-name
        application: falco
        component: falco-agent
      annotations:
        openstackhelm.openstack.org/release_uuid: ""
        configmap-bin-hash: 5dbcb06b29ad07f9031723ea5852acdf1ceed228fcd581f698e0427e2d4051b1
        configmap-etc-hash: 5a0549d18b5b250a16d0770974a19a304f8d95d8010dd05bef77553e67ca6e98
    spec:
      serviceAccountName: falcon-service
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      containers:
        - name: falco
          image: docker.io/sysdig/falco:0.12.1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                "": NET_RAW
            readOnlyRootFilesystem: true
          args:
            - /tmp/falco.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - mountPath: /tmp/falco.sh
              name: falco-bin
              subPath: falco.sh
              readOnly: true
            - mountPath: /host/dev
              name: dev-fs
            - mountPath: /host/proc
              name: proc-fs
              readOnly: true
            - mountPath: /host/boot
              name: boot-fs
              readOnly: true
            - mountPath: /host/lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /host/usr
              name: usr-fs
              readOnly: true
            - mountPath: /etc/falco
              name: config-volume
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: falco-bin
          configMap:
            name: falco-bin
            defaultMode: 365
        - name: dshm
          emptyDir:
            medium: Memory
        - name: dev-fs
          hostPath:
            path: /dev
        - name: proc-fs
          hostPath:
            path: /proc
        - name: boot-fs
          hostPath:
            path: /boot
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: usr-fs
          hostPath:
            path: /usr
        - name: config-volume
          secret:
            secretName: falco
