[
  {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "automountServiceAccountToken": true,
    "metadata": {
      "name": "release-name-redis",
      "namespace": "MEfvwMBHt2X",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "MEfvwMBHt2X"
    },
    "type": "Opaque",
    "data": {
      "postgresql-postgres-password": "V2FsaDlCcW4wQg==",
      "postgresql-password": "ZnVua3doYWxl"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-redis",
      "namespace": "MEfvwMBHt2X",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "type": "Opaque",
    "data": {
      "redis-password": "ZnVua3doYWxl"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
      "name": "release-name-funkwhale",
      "labels": {
        "app.kubernetes.io/name": "funkwhale",
        "helm.sh/chart": "funkwhale-0.5.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "CACHE_URL": "cmVkaXM6Ly86ZnVua3doYWxlQHJlbGVhc2UtbmFtZS1yZWRpcy1tYXN0ZXI6NjM3OS8w",
      "DATABASE_URL": "cG9zdGdyZXM6Ly9mdW5rd2hhbGU6ZnVua3doYWxlQHJlbGVhc2UtbmFtZS1wb3N0Z3Jlc3FsOjU0MzIvZnVua3doYWxl",
      "DJANGO_SECRET_KEY": "MDNhNWFiYTctYzQ5NS00NmZjLTk1OTItNDQ4NzAyMzkxYzEz"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-postgresql-configuration",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "MEfvwMBHt2X"
    },
    "data": {
      "pg_hba.conf": "local all all trust\nhost all all localhost trust\nhost all all 0.0.0.0/0 md5\nhost all all ::/0 md5\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-postgresql-init-scripts",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "namespace": "MEfvwMBHt2X"
    },
    "data": {
      "enable_extensions.sh": "#!/bin/sh\n\necho 'create extension unaccent;' | psql -U postgres $POSTGRESQL_DATABASE\necho 'create extension citext;' | psql -U postgres $POSTGRESQL_DATABASE\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-configuration",
      "namespace": "MEfvwMBHt2X",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "redis.conf": "# User-supplied common configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"\n# End of common configuration",
      "master.conf": "dir /data\n# User-supplied master configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of master configuration",
      "replica.conf": "dir /data\nslave-read-only yes\n# User-supplied replica configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of replica configuration"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-health",
      "namespace": "MEfvwMBHt2X",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "ping_readiness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] && [ \"$response\" != \"LOADING Redis is loading the dataset in memory\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_liveness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] && [ \"$response\" != \"LOADING Redis is loading the dataset in memory\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
      "ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
      "ping_liveness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-redis-scripts",
      "namespace": "MEfvwMBHt2X",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "start-master.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-funkwhale-front",
      "labels": {
        "app.kubernetes.io/name": "funkwhale",
        "helm.sh/chart": "funkwhale-0.5.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "audio.funkwhale/component": "front"
      }
    },
    "data": {
      "nginx.conf": "upstream funkwhale-api {\n  server localhost:5000;\n}\n\nmap $http_upgrade $connection_upgrade {\n  default upgrade;\n  ''      close;\n}\n\nserver {\n  listen 80;\n  listen [::]:80;\n\n  server_name ${FUNKWHALE_HOSTNAME};\n\n  root /frontend;\n\n  add_header Content-Security-Policy \"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; object-src 'none'; media-src 'self' data:; worker-src 'self'\";\n  add_header Referrer-Policy \"strict-origin-when-cross-origin\";\n  add_header X-Frame-Options \"SAMEORIGIN\" always;\n\n  # compression settings\n  gzip on;\n  gzip_comp_level    5;\n  gzip_min_length    256;\n  gzip_proxied       any;\n  gzip_vary          on;\n\n  gzip_types\n      application/javascript\n      application/vnd.geo+json\n      application/vnd.ms-fontobject\n      application/x-font-ttf\n      application/x-web-app-manifest+json\n      font/opentype\n      image/bmp\n      image/svg+xml\n      image/x-icon\n      text/cache-manifest\n      text/css\n      text/plain\n      text/vcard\n      text/vnd.rim.location.xloc\n      text/vtt\n      text/x-component\n      text/x-cross-domain-policy;\n  # end of compression settings\n\n  location / {\n      include /etc/nginx/funkwhale_proxy.conf;\n      # this is needed if you have file import via upload enabled\n      client_max_body_size ${NGINX_MAX_BODY_SIZE};\n      proxy_pass   http://funkwhale-api/;\n  }\n\n  location /front/ {\n      add_header Content-Security-Policy \"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; object-src 'none'; media-src 'self' data:; worker-src 'self'\";\n      add_header Referrer-Policy \"strict-origin-when-cross-origin\";\n      add_header Service-Worker-Allowed \"/\";\n      add_header X-Frame-Options \"ALLOW\";\n      alias /frontend/;\n      expires 30d;\n      add_header Pragma public;\n      add_header Cache-Control \"public, must-revalidate, proxy-revalidate\";\n  }\n\n  location /front/embed.html {\n      add_header Content-Security-Policy \"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; object-src 'none'; media-src 'self' data:; worker-src 'self'\";\n      add_header Referrer-Policy \"strict-origin-when-cross-origin\";\n\n      add_header X-Frame-Options \"\" always;\n      alias /frontend/embed.html;\n      expires 30d;\n      add_header Pragma public;\n      add_header Cache-Control \"public, must-revalidate, proxy-revalidate\";\n  }\n\n  location /federation/ {\n      include /etc/nginx/funkwhale_proxy.conf;\n      proxy_pass   http://funkwhale-api/federation/;\n  }\n\n  # You can comment this if you do not plan to use the Subsonic API\n  location /rest/ {\n      include /etc/nginx/funkwhale_proxy.conf;\n      proxy_pass   http://funkwhale-api/api/subsonic/rest/;\n  }\n\n  location /.well-known/ {\n      include /etc/nginx/funkwhale_proxy.conf;\n      proxy_pass   http://funkwhale-api/.well-known/;\n  }\n\n  location /media/ {\n      alias ${MEDIA_ROOT}/;\n  }\n  # this is an internal location that is used to serve\n  # audio files once correct permission / authentication\n  # has been checked on API side\n  location /_protected/media {\n      internal;\n      alias   ${MEDIA_ROOT};\n  }\n\n  location /_protected/music {\n      # this is an internal location that is used to serve\n      # audio files once correct permission / authentication\n      # has been checked on API side\n      # Set this to the same value as your MUSIC_DIRECTORY_PATH setting\n      internal;\n      alias   ${MUSIC_DIRECTORY_SERVE_PATH};\n  }\n\n  location /staticfiles/ {\n      # django static files\n      alias ${STATIC_ROOT}/;\n  }\n}\n",
      "proxy.conf": "proxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\n\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;\nproxy_set_header X-Forwarded-Host $http_x_forwarded_host;\nproxy_set_header X-Forwarded-Port $http_x_forwarded_port;\nproxy_redirect off;\n\nproxy_http_version 1.1;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection $connection_upgrade;\n"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "ConfigMap",
    "metadata": {
      "name": "release-name-funkwhale",
      "labels": {
        "app.kubernetes.io/name": "funkwhale",
        "helm.sh/chart": "funkwhale-0.5.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "data": {
      "FUNKWHALE_HOSTNAME": "chart-example.local",
      "FUNKWHALE_PROTOCOL": "http",
      "FUNKWHALE_SPA_HTML_ROOT": "http://localhost/front/",
      "REVERSE_PROXY_TYPE": "nginx",
      "MEDIA_ROOT": "/srv/funkwhale/data/media",
      "STATIC_ROOT": "/srv/funkwhale/data/static",
      "MUSIC_DIRECTORY_PATH": "/srv/funkwhale/data/music",
      "MUSIC_DIRECTORY_SERVE_PATH": "/srv/funkwhale/data/music",
      "DJANGO_SETTINGS_MODULE": "config.settings.production",
      "FUNKWHALE_FRONTEND_PATH": "/srv/funkwhale/front/dist",
      "NGINX_MAX_BODY_SIZE": "500M",
      "DJANGO_ALLOWED_HOSTS": "*"
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql-headless",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
      },
      "namespace": "MEfvwMBHt2X"
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "publishNotReadyAddresses": true,
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": null,
      "namespace": "MEfvwMBHt2X"
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-postgresql",
          "port": 5432,
          "targetPort": "tcp-postgresql"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "postgresql",
        "app.kubernetes.io/instance": "release-name",
        "role": "primary"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-headless",
      "namespace": "MEfvwMBHt2X",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "clusterIP": "None",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-redis-master",
      "namespace": "MEfvwMBHt2X",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "master"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "name": "tcp-redis",
          "port": 6379,
          "targetPort": "redis",
          "nodePort": null
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "redis",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/component": "master"
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
      "name": "release-name-funkwhale",
      "labels": {
        "app.kubernetes.io/name": "funkwhale",
        "helm.sh/chart": "funkwhale-0.5.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      }
    },
    "spec": {
      "type": "ClusterIP",
      "ports": [
        {
          "port": 80,
          "targetPort": "http",
          "protocol": "TCP",
          "name": "http"
        }
      ],
      "selector": {
        "app.kubernetes.io/name": "funkwhale",
        "app.kubernetes.io/instance": "release-name",
        "audio.funkwhale/component": "app"
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-funkwhale-beat",
      "labels": {
        "app.kubernetes.io/name": "funkwhale",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "audio.funkwhale/component": "celery-beat",
        "helm.sh/chart": "funkwhale-0.5.0"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "funkwhale",
          "app.kubernetes.io/instance": "release-name",
          "audio.funkwhale/component": "celery-beat"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configmap": "d91ea7902041ed930b0e0261a5f50c5b09ef50a93fc91dad30d38679c025823d",
            "checksum/secret": "03b1293465948c2c3b7cad9d52d3402eb5e0dc16dfb49bc8ed4ed99006bbe3b7"
          },
          "labels": {
            "app.kubernetes.io/name": "funkwhale",
            "app.kubernetes.io/instance": "release-name",
            "audio.funkwhale/component": "celery-beat"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "celery-beat",
              "image": "funkwhale/funkwhale:1.2.3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sh",
                "-c",
                "celery -A funkwhale_api.taskapp beat -l INFO\n"
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-funkwhale"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-funkwhale"
                  }
                }
              ],
              "resources": {
                "limits": {
                  "cpu": "100m",
                  "memory": "128Mi"
                },
                "requests": {
                  "cpu": "10m",
                  "memory": "75Mi"
                }
              }
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-funkwhale-worker",
      "labels": {
        "app.kubernetes.io/name": "funkwhale",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "audio.funkwhale/component": "celery-worker",
        "helm.sh/chart": "funkwhale-0.5.0"
      }
    },
    "spec": {
      "replicas": 2,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "funkwhale",
          "app.kubernetes.io/instance": "release-name",
          "audio.funkwhale/component": "celery-worker"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configmap": "d91ea7902041ed930b0e0261a5f50c5b09ef50a93fc91dad30d38679c025823d",
            "checksum/secret": "2b002137c812c9acdfaee908a595b83c025efea3f6f80898ec19b378bf260d54"
          },
          "labels": {
            "app.kubernetes.io/name": "funkwhale",
            "app.kubernetes.io/instance": "release-name",
            "audio.funkwhale/component": "celery-worker"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "worker",
              "image": "funkwhale/funkwhale:1.2.3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sh",
                "-c",
                "celery -A funkwhale_api.taskapp worker -l INFO\n"
              ],
              "env": [
                {
                  "name": "C_FORCE_ROOT",
                  "value": "true"
                }
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-funkwhale"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-funkwhale"
                  }
                }
              ],
              "volumeMounts": [
                {
                  "mountPath": "/srv/funkwhale/data",
                  "name": "data"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            }
          ],
          "volumes": [
            {
              "name": "config",
              "configMap": {
                "name": "release-name-funkwhale-front"
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": {
      "name": "release-name-funkwhale",
      "labels": {
        "app.kubernetes.io/name": "funkwhale",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "audio.funkwhale/component": "app",
        "helm.sh/chart": "funkwhale-0.5.0"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "funkwhale",
          "app.kubernetes.io/instance": "release-name",
          "audio.funkwhale/component": "app"
        }
      },
      "template": {
        "metadata": {
          "annotations": {
            "checksum/configmap": "d91ea7902041ed930b0e0261a5f50c5b09ef50a93fc91dad30d38679c025823d",
            "checksum/secret": "e5b2d034695584ca8994852036522d9c933a85e454c2f9dbe5469c02a6dcd750"
          },
          "labels": {
            "app.kubernetes.io/name": "funkwhale",
            "app.kubernetes.io/instance": "release-name",
            "audio.funkwhale/component": "app"
          }
        },
        "spec": {
          "containers": [
            {
              "name": "funkwhale",
              "image": "funkwhale/funkwhale:1.2.3",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sh",
                "-c",
                "# Copy frontend files for the front pod\ncp -r frontend/* /srv/funkwhale/frontend/\n\n# Apply any waiting migrations\n/app/manage.py migrate\n\nif [ -e compose/django/daphne.sh ]; then\n  compose/django/entrypoint.sh compose/django/daphne.sh\nelse\n  compose/django/entrypoint.sh compose/django/server.sh\nfi"
              ],
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "api",
                  "scheme": "HTTP"
                }
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "api",
                  "scheme": "HTTP"
                }
              },
              "startupProbe": {
                "tcpSocket": {
                  "port": "api"
                }
              },
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-funkwhale"
                  }
                },
                {
                  "secretRef": {
                    "name": "release-name-funkwhale"
                  }
                }
              ],
              "volumeMounts": [
                {
                  "mountPath": "/srv/funkwhale/data/static/",
                  "name": "static"
                },
                {
                  "mountPath": "/srv/funkwhale/frontend",
                  "name": "frontend"
                },
                {
                  "name": "data",
                  "mountPath": "/srv/funkwhale/data"
                }
              ],
              "ports": [
                {
                  "name": "api",
                  "containerPort": 5000,
                  "protocol": "TCP"
                }
              ],
              "resources": {
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            },
            {
              "name": "nginx",
              "image": "nginx:stable",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sh",
                "-c",
                "# Instantiate the nginx template\nenvsubst \"`env | awk -F = '{printf \\\" $%s\\\", $1}'`\" < /etc/nginx/funkwhale.template > /etc/nginx/conf.d/default.conf\n\n# Add a hardcoded resolver configuration to ease S3 usage\necho \"resolver $(grep nameserver /etc/resolv.conf | head -n1 | awk '{print $2}');\" > /etc/nginx/conf.d/resolver.conf\n\n# Launch nginx\nnginx -g 'daemon off;'"
              ],
              "envFrom": [
                {
                  "configMapRef": {
                    "name": "release-name-funkwhale"
                  }
                }
              ],
              "ports": [
                {
                  "name": "http",
                  "containerPort": 80,
                  "protocol": "TCP"
                }
              ],
              "livenessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http",
                  "scheme": "HTTP"
                }
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/",
                  "port": "http",
                  "scheme": "HTTP"
                }
              },
              "startupProbe": {
                "tcpSocket": {
                  "port": "http"
                }
              },
              "volumeMounts": [
                {
                  "mountPath": "/srv/funkwhale/data",
                  "name": "data"
                },
                {
                  "mountPath": "/frontend",
                  "name": "frontend",
                  "readOnly": true
                },
                {
                  "mountPath": "/etc/nginx/funkwhale_proxy.conf",
                  "name": "config",
                  "subPath": "proxy.conf",
                  "readOnly": true
                },
                {
                  "mountPath": "/etc/nginx/funkwhale.template",
                  "name": "config",
                  "subPath": "nginx.conf",
                  "readOnly": true
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "frontend",
              "emptyDir": {}
            },
            {
              "name": "static",
              "emptyDir": {}
            },
            {
              "name": "config",
              "configMap": {
                "name": "release-name-funkwhale-front"
              }
            },
            {
              "name": "data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-postgresql",
      "labels": {
        "app.kubernetes.io/name": "postgresql",
        "helm.sh/chart": "postgresql-10.16.2",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "primary"
      },
      "annotations": null,
      "namespace": "MEfvwMBHt2X"
    },
    "spec": {
      "serviceName": "release-name-postgresql-headless",
      "replicas": 1,
      "updateStrategy": {
        "type": "RollingUpdate"
      },
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "postgresql",
          "app.kubernetes.io/instance": "release-name",
          "role": "primary"
        }
      },
      "template": {
        "metadata": {
          "name": "release-name-postgresql",
          "labels": {
            "app.kubernetes.io/name": "postgresql",
            "helm.sh/chart": "postgresql-10.16.2",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "role": "primary",
            "app.kubernetes.io/component": "primary"
          }
        },
        "spec": {
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "postgresql",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "primary"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "securityContext": {
            "fsGroup": 1001
          },
          "automountServiceAccountToken": false,
          "containers": [
            {
              "name": "release-name-postgresql",
              "image": "docker.io/bitnami/postgresql:11.14.0-debian-10-r28",
              "imagePullPolicy": "IfNotPresent",
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                },
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "securityContext": {
                "runAsUser": 11890,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PORT_NUMBER",
                  "value": "5432"
                },
                {
                  "name": "POSTGRESQL_VOLUME_DIR",
                  "value": "/bitnami/postgresql"
                },
                {
                  "name": "PGDATA",
                  "value": "/bitnami/postgresql/data"
                },
                {
                  "name": "POSTGRES_POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-postgres-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_USER",
                  "value": "funkwhale"
                },
                {
                  "name": "POSTGRES_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-postgresql",
                      "key": "postgresql-password"
                    }
                  }
                },
                {
                  "name": "POSTGRES_DB",
                  "value": "funkwhale"
                },
                {
                  "name": "POSTGRESQL_ENABLE_LDAP",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_ENABLE_TLS",
                  "value": "no"
                },
                {
                  "name": "POSTGRESQL_LOG_HOSTNAME",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_CONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_LOG_DISCONNECTIONS",
                  "value": "false"
                },
                {
                  "name": "POSTGRESQL_PGAUDIT_LOG_CATALOG",
                  "value": "off"
                },
                {
                  "name": "POSTGRESQL_CLIENT_MIN_MESSAGES",
                  "value": "error"
                },
                {
                  "name": "POSTGRESQL_SHARED_PRELOAD_LIBRARIES",
                  "value": "pgaudit"
                }
              ],
              "ports": [
                {
                  "name": "tcp-postgresql",
                  "containerPort": 5432
                }
              ],
              "livenessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "exec pg_isready -U \"funkwhale\" -d \"dbname=funkwhale\" -h 127.0.0.1 -p 5432"
                  ]
                },
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "readinessProbe": {
                "exec": {
                  "command": [
                    "/bin/sh",
                    "-c",
                    "-e",
                    "exec pg_isready -U \"funkwhale\" -d \"dbname=funkwhale\" -h 127.0.0.1 -p 5432\n[ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n"
                  ]
                },
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "timeoutSeconds": 5,
                "successThreshold": 1,
                "failureThreshold": 6
              },
              "volumeMounts": [
                {
                  "name": "custom-init-scripts",
                  "mountPath": "/docker-entrypoint-initdb.d/"
                },
                {
                  "name": "dshm",
                  "mountPath": "/dev/shm"
                },
                {
                  "name": "data",
                  "mountPath": "/bitnami/postgresql",
                  "subPath": null
                },
                {
                  "name": "postgresql-config",
                  "mountPath": "/bitnami/postgresql/conf"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "postgresql-config",
              "configMap": {
                "name": "release-name-postgresql-configuration"
              }
            },
            {
              "name": "custom-init-scripts",
              "configMap": {
                "name": "release-name-postgresql-init-scripts"
              }
            },
            {
              "name": "dshm",
              "emptyDir": {
                "medium": "Memory"
              }
            }
          ]
        }
      },
      "volumeClaimTemplates": [
        {
          "metadata": {
            "name": "data"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "8Gi"
              }
            }
          }
        }
      ]
    }
  },
  {
    "apiVersion": "apps/v1",
    "kind": "StatefulSet",
    "metadata": {
      "name": "release-name-redis-master",
      "namespace": "MEfvwMBHt2X",
      "labels": {
        "app.kubernetes.io/name": "redis",
        "helm.sh/chart": "redis-15.7.6",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/component": "master"
      }
    },
    "spec": {
      "replicas": 1,
      "selector": {
        "matchLabels": {
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/instance": "release-name",
          "app.kubernetes.io/component": "master"
        }
      },
      "serviceName": "release-name-redis-headless",
      "updateStrategy": {
        "rollingUpdate": {},
        "type": "RollingUpdate"
      },
      "template": {
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "redis",
            "helm.sh/chart": "redis-15.7.6",
            "app.kubernetes.io/instance": "release-name",
            "app.kubernetes.io/managed-by": "Helm",
            "app.kubernetes.io/component": "master"
          },
          "annotations": {
            "checksum/configmap": "37d1b9b6c7d7fae21c6536b02822996160fe5ce021edbe71a1c854e376b86de9",
            "checksum/health": "fbad1d01596211141d99b8f7c2d82767d233eb545fc5fe167232e4595fc546fa",
            "checksum/scripts": "2855ab954933b3464754970d4e86f8a0212308f4f0402869b8a70b5ee0f0b5f9",
            "checksum/secret": "a7d60c4c399d93f4a55f47743240ddc8ad24ffc2ca4f313bb5262b73292bdb09"
          }
        },
        "spec": {
          "securityContext": {
            "fsGroup": 1001
          },
          "serviceAccountName": "release-name-redis",
          "affinity": {
            "podAffinity": null,
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [
                {
                  "podAffinityTerm": {
                    "labelSelector": {
                      "matchLabels": {
                        "app.kubernetes.io/name": "redis",
                        "app.kubernetes.io/instance": "release-name",
                        "app.kubernetes.io/component": "master"
                      }
                    },
                    "namespaces": [
                      "default"
                    ],
                    "topologyKey": "kubernetes.io/hostname"
                  },
                  "weight": 1
                }
              ]
            },
            "nodeAffinity": null
          },
          "terminationGracePeriodSeconds": 30,
          "containers": [
            {
              "name": "redis",
              "image": "docker.io/bitnami/redis:6.2.6-debian-10-r97",
              "imagePullPolicy": "IfNotPresent",
              "securityContext": {
                "runAsUser": 11774,
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": {
                    "": "NET_RAW"
                  }
                },
                "readOnlyRootFilesystem": true
              },
              "command": [
                "/bin/bash"
              ],
              "args": [
                "-c",
                "/opt/bitnami/scripts/start-scripts/start-master.sh"
              ],
              "env": [
                {
                  "name": "BITNAMI_DEBUG",
                  "value": "false"
                },
                {
                  "name": "REDIS_REPLICATION_MODE",
                  "value": "master"
                },
                {
                  "name": "ALLOW_EMPTY_PASSWORD",
                  "value": "no"
                },
                {
                  "name": "REDIS_PASSWORD",
                  "valueFrom": {
                    "secretKeyRef": {
                      "name": "release-name-redis",
                      "key": "redis-password"
                    }
                  }
                },
                {
                  "name": "REDIS_TLS_ENABLED",
                  "value": "no"
                },
                {
                  "name": "REDIS_PORT",
                  "value": "6379"
                }
              ],
              "ports": [
                {
                  "name": "redis",
                  "containerPort": 6379
                }
              ],
              "livenessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 6,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_liveness_local.sh 5"
                  ]
                }
              },
              "readinessProbe": {
                "initialDelaySeconds": 20,
                "periodSeconds": 5,
                "timeoutSeconds": 2,
                "successThreshold": 1,
                "failureThreshold": 5,
                "exec": {
                  "command": [
                    "sh",
                    "-c",
                    "/health/ping_readiness_local.sh 1"
                  ]
                }
              },
              "resources": {
                "limits": {},
                "requests": {},
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "volumeMounts": [
                {
                  "name": "start-scripts",
                  "mountPath": "/opt/bitnami/scripts/start-scripts"
                },
                {
                  "name": "health",
                  "mountPath": "/health"
                },
                {
                  "name": "redis-data",
                  "mountPath": "/data",
                  "subPath": null
                },
                {
                  "name": "config",
                  "mountPath": "/opt/bitnami/redis/mounted-etc"
                },
                {
                  "name": "redis-tmp-conf",
                  "mountPath": "/opt/bitnami/redis/etc/"
                },
                {
                  "name": "tmp",
                  "mountPath": "/tmp"
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "start-scripts",
              "configMap": {
                "name": "release-name-redis-scripts",
                "defaultMode": 493
              }
            },
            {
              "name": "health",
              "configMap": {
                "name": "release-name-redis-health",
                "defaultMode": 493
              }
            },
            {
              "name": "config",
              "configMap": {
                "name": "release-name-redis-configuration"
              }
            },
            {
              "name": "redis-tmp-conf",
              "emptyDir": {}
            },
            {
              "name": "tmp",
              "emptyDir": {}
            },
            {
              "name": "redis-data",
              "emptyDir": {}
            }
          ]
        }
      }
    }
  },
  {
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
      "name": "release-name-funkwhale-test-connection",
      "labels": {
        "app.kubernetes.io/name": "funkwhale",
        "helm.sh/chart": "funkwhale-0.5.0",
        "app.kubernetes.io/instance": "release-name",
        "app.kubernetes.io/managed-by": "Helm"
      },
      "annotations": {
        "helm.sh/hook": "test-success"
      }
    },
    "spec": {
      "containers": [
        {
          "name": "wget",
          "image": "busybox",
          "command": [
            "wget"
          ],
          "args": [
            "release-name-funkwhale:80"
          ]
        }
      ],
      "restartPolicy": "Never"
    }
  }
]